/*! For license information please see ../LICENSES */
(window.webpackJsonp = window.webpackJsonp || []).push([[21], {
    240: function(t, e, n) {
        "use strict";
        n.d(e, "s", (function() {
            return r
        }
        )),
        n.d(e, "q", (function() {
            return o
        }
        )),
        n.d(e, "r", (function() {
            return l
        }
        )),
        n.d(e, "rb", (function() {
            return c
        }
        )),
        n.d(e, "sb", (function() {
            return h
        }
        )),
        n.d(e, "Oc", (function() {
            return d
        }
        )),
        n.d(e, "F", (function() {
            return f
        }
        )),
        n.d(e, "h", (function() {
            return m
        }
        )),
        n.d(e, "x", (function() {
            return v
        }
        )),
        n.d(e, "D", (function() {
            return _
        }
        )),
        n.d(e, "hb", (function() {
            return x
        }
        )),
        n.d(e, "jb", (function() {
            return y
        }
        )),
        n.d(e, "d", (function() {
            return M
        }
        )),
        n.d(e, "Ec", (function() {
            return w
        }
        )),
        n.d(e, "bb", (function() {
            return S
        }
        )),
        n.d(e, "t", (function() {
            return T
        }
        )),
        n.d(e, "b", (function() {
            return E
        }
        )),
        n.d(e, "Dc", (function() {
            return A
        }
        )),
        n.d(e, "jc", (function() {
            return L
        }
        )),
        n.d(e, "Y", (function() {
            return R
        }
        )),
        n.d(e, "X", (function() {
            return C
        }
        )),
        n.d(e, "Pc", (function() {
            return P
        }
        )),
        n.d(e, "mb", (function() {
            return D
        }
        )),
        n.d(e, "Bc", (function() {
            return N
        }
        )),
        n.d(e, "qb", (function() {
            return I
        }
        )),
        n.d(e, "zc", (function() {
            return O
        }
        )),
        n.d(e, "pb", (function() {
            return F
        }
        )),
        n.d(e, "y", (function() {
            return U
        }
        )),
        n.d(e, "nb", (function() {
            return z
        }
        )),
        n.d(e, "z", (function() {
            return B
        }
        )),
        n.d(e, "ob", (function() {
            return G
        }
        )),
        n.d(e, "Ac", (function() {
            return H
        }
        )),
        n.d(e, "gb", (function() {
            return k
        }
        )),
        n.d(e, "f", (function() {
            return V
        }
        )),
        n.d(e, "N", (function() {
            return W
        }
        )),
        n.d(e, "O", (function() {
            return j
        }
        )),
        n.d(e, "A", (function() {
            return X
        }
        )),
        n.d(e, "J", (function() {
            return Y
        }
        )),
        n.d(e, "I", (function() {
            return Z
        }
        )),
        n.d(e, "kb", (function() {
            return J
        }
        )),
        n.d(e, "cb", (function() {
            return K
        }
        )),
        n.d(e, "ab", (function() {
            return Q
        }
        )),
        n.d(e, "c", (function() {
            return $
        }
        )),
        n.d(e, "ib", (function() {
            return tt
        }
        )),
        n.d(e, "T", (function() {
            return et
        }
        )),
        n.d(e, "hc", (function() {
            return nt
        }
        )),
        n.d(e, "k", (function() {
            return it
        }
        )),
        n.d(e, "a", (function() {
            return at
        }
        )),
        n.d(e, "u", (function() {
            return st
        }
        )),
        n.d(e, "Gc", (function() {
            return ot
        }
        )),
        n.d(e, "m", (function() {
            return lt
        }
        )),
        n.d(e, "n", (function() {
            return ct
        }
        )),
        n.d(e, "B", (function() {
            return ht
        }
        )),
        n.d(e, "C", (function() {
            return ut
        }
        )),
        n.d(e, "o", (function() {
            return pt
        }
        )),
        n.d(e, "p", (function() {
            return ft
        }
        )),
        n.d(e, "ic", (function() {
            return mt
        }
        )),
        n.d(e, "l", (function() {
            return gt
        }
        )),
        n.d(e, "Z", (function() {
            return vt
        }
        )),
        n.d(e, "db", (function() {
            return _t
        }
        )),
        n.d(e, "fb", (function() {
            return xt
        }
        )),
        n.d(e, "eb", (function() {
            return yt
        }
        )),
        n.d(e, "Q", (function() {
            return Mt
        }
        )),
        n.d(e, "S", (function() {
            return bt
        }
        )),
        n.d(e, "R", (function() {
            return wt
        }
        )),
        n.d(e, "Hc", (function() {
            return St
        }
        )),
        n.d(e, "j", (function() {
            return Tt
        }
        )),
        n.d(e, "yc", (function() {
            return Et
        }
        )),
        n.d(e, "Nc", (function() {
            return At
        }
        )),
        n.d(e, "L", (function() {
            return Lt
        }
        )),
        n.d(e, "Jc", (function() {
            return Rt
        }
        )),
        n.d(e, "E", (function() {
            return Ct
        }
        )),
        n.d(e, "K", (function() {
            return Pt
        }
        )),
        n.d(e, "Kc", (function() {
            return Dt
        }
        )),
        n.d(e, "Lc", (function() {
            return Nt
        }
        )),
        n.d(e, "Mc", (function() {
            return It
        }
        )),
        n.d(e, "Ic", (function() {
            return Ot
        }
        )),
        n.d(e, "e", (function() {
            return Ft
        }
        )),
        n.d(e, "Ub", (function() {
            return Ut
        }
        )),
        n.d(e, "ub", (function() {
            return zt
        }
        )),
        n.d(e, "W", (function() {
            return Bt
        }
        )),
        n.d(e, "V", (function() {
            return Gt
        }
        )),
        n.d(e, "Tb", (function() {
            return Ht
        }
        )),
        n.d(e, "v", (function() {
            return kt
        }
        )),
        n.d(e, "w", (function() {
            return Vt
        }
        )),
        n.d(e, "fc", (function() {
            return Wt
        }
        )),
        n.d(e, "gc", (function() {
            return jt
        }
        )),
        n.d(e, "dc", (function() {
            return Xt
        }
        )),
        n.d(e, "ec", (function() {
            return qt
        }
        )),
        n.d(e, "Vb", (function() {
            return Yt
        }
        )),
        n.d(e, "vb", (function() {
            return Zt
        }
        )),
        n.d(e, "cc", (function() {
            return Jt
        }
        )),
        n.d(e, "Ob", (function() {
            return Kt
        }
        )),
        n.d(e, "Pb", (function() {
            return Qt
        }
        )),
        n.d(e, "Qb", (function() {
            return $t
        }
        )),
        n.d(e, "bc", (function() {
            return te
        }
        )),
        n.d(e, "ac", (function() {
            return ee
        }
        )),
        n.d(e, "Nb", (function() {
            return ne
        }
        )),
        n.d(e, "Mb", (function() {
            return ie
        }
        )),
        n.d(e, "Yb", (function() {
            return re
        }
        )),
        n.d(e, "Zb", (function() {
            return ae
        }
        )),
        n.d(e, "Lb", (function() {
            return se
        }
        )),
        n.d(e, "Cb", (function() {
            return oe
        }
        )),
        n.d(e, "Db", (function() {
            return le
        }
        )),
        n.d(e, "Eb", (function() {
            return ce
        }
        )),
        n.d(e, "Fb", (function() {
            return he
        }
        )),
        n.d(e, "Gb", (function() {
            return ue
        }
        )),
        n.d(e, "Hb", (function() {
            return de
        }
        )),
        n.d(e, "Ib", (function() {
            return pe
        }
        )),
        n.d(e, "Jb", (function() {
            return fe
        }
        )),
        n.d(e, "xb", (function() {
            return me
        }
        )),
        n.d(e, "yb", (function() {
            return ge
        }
        )),
        n.d(e, "zb", (function() {
            return ve
        }
        )),
        n.d(e, "wb", (function() {
            return _e
        }
        )),
        n.d(e, "Ab", (function() {
            return xe
        }
        )),
        n.d(e, "Bb", (function() {
            return ye
        }
        )),
        n.d(e, "Kb", (function() {
            return Me
        }
        )),
        n.d(e, "qc", (function() {
            return be
        }
        )),
        n.d(e, "rc", (function() {
            return we
        }
        )),
        n.d(e, "sc", (function() {
            return Se
        }
        )),
        n.d(e, "tc", (function() {
            return Te
        }
        )),
        n.d(e, "uc", (function() {
            return Ee
        }
        )),
        n.d(e, "vc", (function() {
            return Ae
        }
        )),
        n.d(e, "wc", (function() {
            return Le
        }
        )),
        n.d(e, "xc", (function() {
            return Re
        }
        )),
        n.d(e, "lc", (function() {
            return Ce
        }
        )),
        n.d(e, "mc", (function() {
            return Pe
        }
        )),
        n.d(e, "nc", (function() {
            return De
        }
        )),
        n.d(e, "kc", (function() {
            return Ne
        }
        )),
        n.d(e, "oc", (function() {
            return Ie
        }
        )),
        n.d(e, "pc", (function() {
            return Oe
        }
        )),
        n.d(e, "P", (function() {
            return Fe
        }
        )),
        n.d(e, "Qc", (function() {
            return Ue
        }
        )),
        n.d(e, "H", (function() {
            return ze
        }
        )),
        n.d(e, "Sb", (function() {
            return Be
        }
        )),
        n.d(e, "U", (function() {
            return Ge
        }
        )),
        n.d(e, "Xb", (function() {
            return He
        }
        )),
        n.d(e, "Wb", (function() {
            return ke
        }
        )),
        n.d(e, "Rb", (function() {
            return Ve
        }
        )),
        n.d(e, "i", (function() {
            return We
        }
        )),
        n.d(e, "tb", (function() {
            return je
        }
        )),
        n.d(e, "Fc", (function() {
            return Xe
        }
        )),
        n.d(e, "lb", (function() {
            return qe
        }
        )),
        n.d(e, "M", (function() {
            return Ye
        }
        )),
        n.d(e, "g", (function() {
            return Ze
        }
        )),
        n.d(e, "Cc", (function() {
            return Je
        }
        )),
        n.d(e, "G", (function() {
            return Ke
        }
        ));
        const r = 0
          , o = 1
          , l = 2
          , c = 1
          , h = 2
          , d = 3
          , f = 0
          , m = 1
          , v = 2
          , _ = 1
          , x = 0
          , y = 1
          , M = 2
          , w = 3
          , S = 4
          , T = 5
          , E = 100
          , A = 101
          , L = 102
          , R = 103
          , C = 104
          , P = 200
          , D = 201
          , N = 202
          , I = 203
          , O = 204
          , F = 205
          , U = 206
          , z = 207
          , B = 208
          , G = 209
          , H = 210
          , k = 0
          , V = 1
          , W = 2
          , j = 3
          , X = 4
          , Y = 5
          , Z = 6
          , J = 7
          , K = 0
          , Q = 1
          , $ = 2
          , tt = 0
          , et = 1
          , nt = 2
          , it = 3
          , at = 4
          , st = 5
          , ot = 300
          , lt = 301
          , ct = 302
          , ht = 303
          , ut = 304
          , pt = 306
          , ft = 307
          , mt = 1e3
          , gt = 1001
          , vt = 1002
          , _t = 1003
          , xt = 1004
          , yt = 1005
          , Mt = 1006
          , bt = 1007
          , wt = 1008
          , St = 1009
          , Tt = 1010
          , Et = 1011
          , At = 1012
          , Lt = 1013
          , Rt = 1014
          , Ct = 1015
          , Pt = 1016
          , Dt = 1017
          , Nt = 1018
          , It = 1019
          , Ot = 1020
          , Ft = 1021
          , Ut = 1022
          , zt = 1023
          , Bt = 1024
          , Gt = 1025
          , Ht = zt
          , kt = 1026
          , Vt = 1027
          , Wt = 1028
          , jt = 1029
          , Xt = 1030
          , qt = 1031
          , Yt = 1032
          , Zt = 1033
          , Jt = 33776
          , Kt = 33777
          , Qt = 33778
          , $t = 33779
          , te = 35840
          , ee = 35841
          , ne = 35842
          , ie = 35843
          , re = 36196
          , ae = 37492
          , se = 37496
          , oe = 37808
          , le = 37809
          , ce = 37810
          , he = 37811
          , ue = 37812
          , de = 37813
          , pe = 37814
          , fe = 37815
          , me = 37816
          , ge = 37817
          , ve = 37818
          , _e = 37819
          , xe = 37820
          , ye = 37821
          , Me = 36492
          , be = 37840
          , we = 37841
          , Se = 37842
          , Te = 37843
          , Ee = 37844
          , Ae = 37845
          , Le = 37846
          , Re = 37847
          , Ce = 37848
          , Pe = 37849
          , De = 37850
          , Ne = 37851
          , Ie = 37852
          , Oe = 37853
          , Fe = 3e3
          , Ue = 3001
          , ze = 3007
          , Be = 3002
          , Ge = 3003
          , He = 3004
          , ke = 3005
          , Ve = 3006
          , We = 3200
          , je = 3201
          , Xe = 0
          , qe = 1
          , Ye = 7680
          , Ze = 519
          , Je = 35044
          , Ke = "300 es"
    },
    241: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return l
        }
        ));
        var r = n(248)
          , o = n(289);
        class l {
            constructor(t=0, e=0, n=0) {
                this.x = t,
                this.y = e,
                this.z = n
            }
            set(t, e, n) {
                return void 0 === n && (n = this.z),
                this.x = t,
                this.y = e,
                this.z = n,
                this
            }
            setScalar(t) {
                return this.x = t,
                this.y = t,
                this.z = t,
                this
            }
            setX(t) {
                return this.x = t,
                this
            }
            setY(t) {
                return this.y = t,
                this
            }
            setZ(t) {
                return this.z = t,
                this
            }
            setComponent(t, e) {
                switch (t) {
                case 0:
                    this.x = e;
                    break;
                case 1:
                    this.y = e;
                    break;
                case 2:
                    this.z = e;
                    break;
                default:
                    throw new Error("index is out of range: " + t)
                }
                return this
            }
            getComponent(t) {
                switch (t) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                case 2:
                    return this.z;
                default:
                    throw new Error("index is out of range: " + t)
                }
            }
            clone() {
                return new this.constructor(this.x,this.y,this.z)
            }
            copy(t) {
                return this.x = t.x,
                this.y = t.y,
                this.z = t.z,
                this
            }
            add(t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
                this.addVectors(t, e)) : (this.x += t.x,
                this.y += t.y,
                this.z += t.z,
                this)
            }
            addScalar(s) {
                return this.x += s,
                this.y += s,
                this.z += s,
                this
            }
            addVectors(a, b) {
                return this.x = a.x + b.x,
                this.y = a.y + b.y,
                this.z = a.z + b.z,
                this
            }
            addScaledVector(t, s) {
                return this.x += t.x * s,
                this.y += t.y * s,
                this.z += t.z * s,
                this
            }
            sub(t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
                this.subVectors(t, e)) : (this.x -= t.x,
                this.y -= t.y,
                this.z -= t.z,
                this)
            }
            subScalar(s) {
                return this.x -= s,
                this.y -= s,
                this.z -= s,
                this
            }
            subVectors(a, b) {
                return this.x = a.x - b.x,
                this.y = a.y - b.y,
                this.z = a.z - b.z,
                this
            }
            multiply(t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),
                this.multiplyVectors(t, e)) : (this.x *= t.x,
                this.y *= t.y,
                this.z *= t.z,
                this)
            }
            multiplyScalar(t) {
                return this.x *= t,
                this.y *= t,
                this.z *= t,
                this
            }
            multiplyVectors(a, b) {
                return this.x = a.x * b.x,
                this.y = a.y * b.y,
                this.z = a.z * b.z,
                this
            }
            applyEuler(t) {
                return t && t.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),
                this.applyQuaternion(h.setFromEuler(t))
            }
            applyAxisAngle(t, e) {
                return this.applyQuaternion(h.setFromAxisAngle(t, e))
            }
            applyMatrix3(t) {
                const e = this.x
                  , n = this.y
                  , r = this.z
                  , o = t.elements;
                return this.x = o[0] * e + o[3] * n + o[6] * r,
                this.y = o[1] * e + o[4] * n + o[7] * r,
                this.z = o[2] * e + o[5] * n + o[8] * r,
                this
            }
            applyNormalMatrix(t) {
                return this.applyMatrix3(t).normalize()
            }
            applyMatrix4(t) {
                const e = this.x
                  , n = this.y
                  , r = this.z
                  , o = t.elements
                  , l = 1 / (o[3] * e + o[7] * n + o[11] * r + o[15]);
                return this.x = (o[0] * e + o[4] * n + o[8] * r + o[12]) * l,
                this.y = (o[1] * e + o[5] * n + o[9] * r + o[13]) * l,
                this.z = (o[2] * e + o[6] * n + o[10] * r + o[14]) * l,
                this
            }
            applyQuaternion(q) {
                const t = this.x
                  , e = this.y
                  , n = this.z
                  , r = q.x
                  , o = q.y
                  , l = q.z
                  , c = q.w
                  , h = c * t + o * n - l * e
                  , d = c * e + l * t - r * n
                  , f = c * n + r * e - o * t
                  , m = -r * t - o * e - l * n;
                return this.x = h * c + m * -r + d * -l - f * -o,
                this.y = d * c + m * -o + f * -r - h * -l,
                this.z = f * c + m * -l + h * -o - d * -r,
                this
            }
            project(t) {
                return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)
            }
            unproject(t) {
                return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)
            }
            transformDirection(t) {
                const e = this.x
                  , n = this.y
                  , r = this.z
                  , o = t.elements;
                return this.x = o[0] * e + o[4] * n + o[8] * r,
                this.y = o[1] * e + o[5] * n + o[9] * r,
                this.z = o[2] * e + o[6] * n + o[10] * r,
                this.normalize()
            }
            divide(t) {
                return this.x /= t.x,
                this.y /= t.y,
                this.z /= t.z,
                this
            }
            divideScalar(t) {
                return this.multiplyScalar(1 / t)
            }
            min(t) {
                return this.x = Math.min(this.x, t.x),
                this.y = Math.min(this.y, t.y),
                this.z = Math.min(this.z, t.z),
                this
            }
            max(t) {
                return this.x = Math.max(this.x, t.x),
                this.y = Math.max(this.y, t.y),
                this.z = Math.max(this.z, t.z),
                this
            }
            clamp(t, e) {
                return this.x = Math.max(t.x, Math.min(e.x, this.x)),
                this.y = Math.max(t.y, Math.min(e.y, this.y)),
                this.z = Math.max(t.z, Math.min(e.z, this.z)),
                this
            }
            clampScalar(t, e) {
                return this.x = Math.max(t, Math.min(e, this.x)),
                this.y = Math.max(t, Math.min(e, this.y)),
                this.z = Math.max(t, Math.min(e, this.z)),
                this
            }
            clampLength(t, e) {
                const n = this.length();
                return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)))
            }
            floor() {
                return this.x = Math.floor(this.x),
                this.y = Math.floor(this.y),
                this.z = Math.floor(this.z),
                this
            }
            ceil() {
                return this.x = Math.ceil(this.x),
                this.y = Math.ceil(this.y),
                this.z = Math.ceil(this.z),
                this
            }
            round() {
                return this.x = Math.round(this.x),
                this.y = Math.round(this.y),
                this.z = Math.round(this.z),
                this
            }
            roundToZero() {
                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
                this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
                this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z),
                this
            }
            negate() {
                return this.x = -this.x,
                this.y = -this.y,
                this.z = -this.z,
                this
            }
            dot(t) {
                return this.x * t.x + this.y * t.y + this.z * t.z
            }
            lengthSq() {
                return this.x * this.x + this.y * this.y + this.z * this.z
            }
            length() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
            }
            manhattanLength() {
                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)
            }
            normalize() {
                return this.divideScalar(this.length() || 1)
            }
            setLength(t) {
                return this.normalize().multiplyScalar(t)
            }
            lerp(t, e) {
                return this.x += (t.x - this.x) * e,
                this.y += (t.y - this.y) * e,
                this.z += (t.z - this.z) * e,
                this
            }
            lerpVectors(t, e, n) {
                return this.x = t.x + (e.x - t.x) * n,
                this.y = t.y + (e.y - t.y) * n,
                this.z = t.z + (e.z - t.z) * n,
                this
            }
            cross(t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),
                this.crossVectors(t, e)) : this.crossVectors(this, t)
            }
            crossVectors(a, b) {
                const t = a.x
                  , e = a.y
                  , n = a.z
                  , r = b.x
                  , o = b.y
                  , l = b.z;
                return this.x = e * l - n * o,
                this.y = n * r - t * l,
                this.z = t * o - e * r,
                this
            }
            projectOnVector(t) {
                const e = t.lengthSq();
                if (0 === e)
                    return this.set(0, 0, 0);
                const n = t.dot(this) / e;
                return this.copy(t).multiplyScalar(n)
            }
            projectOnPlane(t) {
                return c.copy(this).projectOnVector(t),
                this.sub(c)
            }
            reflect(t) {
                return this.sub(c.copy(t).multiplyScalar(2 * this.dot(t)))
            }
            angleTo(t) {
                const e = Math.sqrt(this.lengthSq() * t.lengthSq());
                if (0 === e)
                    return Math.PI / 2;
                const n = this.dot(t) / e;
                return Math.acos(r.c(n, -1, 1))
            }
            distanceTo(t) {
                return Math.sqrt(this.distanceToSquared(t))
            }
            distanceToSquared(t) {
                const e = this.x - t.x
                  , n = this.y - t.y
                  , r = this.z - t.z;
                return e * e + n * n + r * r
            }
            manhattanDistanceTo(t) {
                return Math.abs(this.x - t.x) + Math.abs(this.y - t.y) + Math.abs(this.z - t.z)
            }
            setFromSpherical(s) {
                return this.setFromSphericalCoords(s.radius, s.phi, s.theta)
            }
            setFromSphericalCoords(t, e, n) {
                const r = Math.sin(e) * t;
                return this.x = r * Math.sin(n),
                this.y = Math.cos(e) * t,
                this.z = r * Math.cos(n),
                this
            }
            setFromCylindrical(t) {
                return this.setFromCylindricalCoords(t.radius, t.theta, t.y)
            }
            setFromCylindricalCoords(t, e, n) {
                return this.x = t * Math.sin(e),
                this.y = n,
                this.z = t * Math.cos(e),
                this
            }
            setFromMatrixPosition(t) {
                const e = t.elements;
                return this.x = e[12],
                this.y = e[13],
                this.z = e[14],
                this
            }
            setFromMatrixScale(t) {
                const e = this.setFromMatrixColumn(t, 0).length()
                  , n = this.setFromMatrixColumn(t, 1).length()
                  , r = this.setFromMatrixColumn(t, 2).length();
                return this.x = e,
                this.y = n,
                this.z = r,
                this
            }
            setFromMatrixColumn(t, e) {
                return this.fromArray(t.elements, 4 * e)
            }
            setFromMatrix3Column(t, e) {
                return this.fromArray(t.elements, 3 * e)
            }
            equals(t) {
                return t.x === this.x && t.y === this.y && t.z === this.z
            }
            fromArray(t, e=0) {
                return this.x = t[e],
                this.y = t[e + 1],
                this.z = t[e + 2],
                this
            }
            toArray(t=[], e=0) {
                return t[e] = this.x,
                t[e + 1] = this.y,
                t[e + 2] = this.z,
                t
            }
            fromBufferAttribute(t, e, n) {
                return void 0 !== n && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),
                this.x = t.getX(e),
                this.y = t.getY(e),
                this.z = t.getZ(e),
                this
            }
            random() {
                return this.x = Math.random(),
                this.y = Math.random(),
                this.z = Math.random(),
                this
            }
            randomDirection() {
                const u = 2 * (Math.random() - .5)
                  , t = Math.random() * Math.PI * 2
                  , e = Math.sqrt(1 - u ** 2);
                return this.x = e * Math.cos(t),
                this.y = e * Math.sin(t),
                this.z = u,
                this
            }
            *[Symbol.iterator]() {
                yield this.x,
                yield this.y,
                yield this.z
            }
        }
        l.prototype.isVector3 = !0;
        const c = new l
          , h = new o.a
    },
    242: function(t, e, n) {
        "use strict";
        function r(t) {
            if (void 0 === t)
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return t
        }
        function o(t, e) {
            t.prototype = Object.create(e.prototype),
            t.prototype.constructor = t,
            t.__proto__ = e
        }
        n.d(e, "a", (function() {
            return nn
        }
        )),
        n.d(e, "b", (function() {
            return Ln
        }
        )),
        n.d(e, "y", (function() {
            return Dn
        }
        )),
        n.d(e, "c", (function() {
            return Nn
        }
        )),
        n.d(e, "x", (function() {
            return ve
        }
        )),
        n.d(e, "j", (function() {
            return Nt
        }
        )),
        n.d(e, "o", (function() {
            return ct
        }
        )),
        n.d(e, "p", (function() {
            return ht
        }
        )),
        n.d(e, "l", (function() {
            return K
        }
        )),
        n.d(e, "m", (function() {
            return tt
        }
        )),
        n.d(e, "s", (function() {
            return bn
        }
        )),
        n.d(e, "r", (function() {
            return pt
        }
        )),
        n.d(e, "h", (function() {
            return It
        }
        )),
        n.d(e, "v", (function() {
            return An
        }
        )),
        n.d(e, "f", (function() {
            return ke
        }
        )),
        n.d(e, "t", (function() {
            return Le
        }
        )),
        n.d(e, "d", (function() {
            return cn
        }
        )),
        n.d(e, "q", (function() {
            return Et
        }
        )),
        n.d(e, "w", (function() {
            return Ve
        }
        )),
        n.d(e, "g", (function() {
            return G
        }
        )),
        n.d(e, "u", (function() {
            return Ot
        }
        )),
        n.d(e, "n", (function() {
            return xt
        }
        )),
        n.d(e, "k", (function() {
            return xn
        }
        )),
        n.d(e, "i", (function() {
            return Dt
        }
        )),
        n.d(e, "e", (function() {
            return Ge
        }
        ));
        var l, c, h, d, f, m, v, _, x, y, M, w, S, T, E, A, L, R, C, P, D, N, I, O, F, U, z, B, G = {
            autoSleep: 120,
            force3D: "auto",
            nullTargetWarn: 1,
            units: {
                lineHeight: ""
            }
        }, H = {
            duration: .5,
            overwrite: !1,
            delay: 0
        }, k = 1e8, V = 1e-8, W = 2 * Math.PI, j = W / 4, X = 0, Y = Math.sqrt, Z = Math.cos, J = Math.sin, K = function(t) {
            return "string" == typeof t
        }, Q = function(t) {
            return "function" == typeof t
        }, $ = function(t) {
            return "number" == typeof t
        }, tt = function(t) {
            return void 0 === t
        }, et = function(t) {
            return "object" == typeof t
        }, nt = function(t) {
            return !1 !== t
        }, it = function() {
            return "undefined" != typeof window
        }, at = function(t) {
            return Q(t) || K(t)
        }, st = "function" == typeof ArrayBuffer && ArrayBuffer.isView || function() {}
        , ot = Array.isArray, lt = /(?:-?\.?\d|\.)+/gi, ct = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g, ht = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g, ut = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi, pt = /[+-]=-?[.\d]+/, ft = /[^,'"\[\]\s]+/gi, mt = /[\d.+\-=]+(?:e[-+]\d*)*/i, gt = {}, vt = {}, _t = function(t) {
            return (vt = Wt(t, gt)) && Dn
        }, xt = function(t, e) {
            return console.warn("Invalid property", t, "set to", e, "Missing plugin? gsap.registerPlugin()")
        }, yt = function(t, e) {
            return !e && console.warn(t)
        }, Mt = function(t, e) {
            return t && (gt[t] = e) && vt && (vt[t] = e) || gt
        }, bt = function() {
            return 0
        }, wt = {}, St = [], Tt = {}, Et = {}, At = {}, Lt = 30, Rt = [], Ct = "", Pt = function(t) {
            var e, i, n = t[0];
            if (et(n) || Q(n) || (t = [t]),
            !(e = (n._gsap || {}).harness)) {
                for (i = Rt.length; i-- && !Rt[i].targetTest(n); )
                    ;
                e = Rt[i]
            }
            for (i = t.length; i--; )
                t[i] && (t[i]._gsap || (t[i]._gsap = new nn(t[i],e))) || t.splice(i, 1);
            return t
        }, Dt = function(t) {
            return t._gsap || Pt(Me(t))[0]._gsap
        }, Nt = function(t, e, n) {
            return (n = t[e]) && Q(n) ? t[e]() : tt(n) && t.getAttribute && t.getAttribute(e) || n
        }, It = function(t, e) {
            return (t = t.split(",")).forEach(e) || t
        }, Ot = function(t) {
            return Math.round(1e5 * t) / 1e5 || 0
        }, Ft = function(t) {
            return Math.round(1e7 * t) / 1e7 || 0
        }, Ut = function(t, e) {
            for (var n = e.length, i = 0; t.indexOf(e[i]) < 0 && ++i < n; )
                ;
            return i < n
        }, zt = function() {
            var i, t, e = St.length, a = St.slice(0);
            for (Tt = {},
            St.length = 0,
            i = 0; i < e; i++)
                (t = a[i]) && t._lazy && (t.render(t._lazy[0], t._lazy[1], !0)._lazy = 0)
        }, Bt = function(t, time, e, n) {
            St.length && zt(),
            t.render(time, e, n),
            St.length && zt()
        }, Gt = function(t) {
            var e = parseFloat(t);
            return (e || 0 === e) && (t + "").match(ft).length < 2 ? e : K(t) ? t.trim() : t
        }, Ht = function(p) {
            return p
        }, kt = function(t, e) {
            for (var p in e)
                p in t || (t[p] = e[p]);
            return t
        }, Vt = function(t, e) {
            for (var p in e)
                p in t || "duration" === p || "ease" === p || (t[p] = e[p])
        }, Wt = function(base, t) {
            for (var p in t)
                base[p] = t[p];
            return base
        }, jt = function t(base, e) {
            for (var p in e)
                "__proto__" !== p && "constructor" !== p && "prototype" !== p && (base[p] = et(e[p]) ? t(base[p] || (base[p] = {}), e[p]) : e[p]);
            return base
        }, Xt = function(t, e) {
            var p, n = {};
            for (p in t)
                p in e || (n[p] = t[p]);
            return n
        }, qt = function(t) {
            var e = t.parent || c
              , n = t.keyframes ? Vt : kt;
            if (nt(t.inherit))
                for (; e; )
                    n(t, e.vars.defaults),
                    e = e.parent || e._dp;
            return t
        }, Yt = function(t, e, n, r) {
            void 0 === n && (n = "_first"),
            void 0 === r && (r = "_last");
            var o = e._prev
              , l = e._next;
            o ? o._next = l : t[n] === e && (t[n] = l),
            l ? l._prev = o : t[r] === e && (t[r] = o),
            e._next = e._prev = e.parent = null
        }, Zt = function(t, e) {
            t.parent && (!e || t.parent.autoRemoveChildren) && t.parent.remove(t),
            t._act = 0
        }, Jt = function(t, e) {
            if (t && (!e || e._end > t._dur || e._start < 0))
                for (var a = t; a; )
                    a._dirty = 1,
                    a = a.parent;
            return t
        }, Kt = function(t) {
            for (var e = t.parent; e && e.parent; )
                e._dirty = 1,
                e.totalDuration(),
                e = e.parent;
            return t
        }, Qt = function t(e) {
            return !e || e._ts && t(e.parent)
        }, $t = function(t) {
            return t._repeat ? te(t._tTime, t = t.duration() + t._rDelay) * t : 0
        }, te = function(t, e) {
            var n = Math.floor(t /= e);
            return t && n === t ? n - 1 : n
        }, ee = function(t, e) {
            return (t - e._start) * e._ts + (e._ts >= 0 ? 0 : e._dirty ? e.totalDuration() : e._tDur)
        }, ne = function(t) {
            return t._end = Ft(t._start + (t._tDur / Math.abs(t._ts || t._rts || V) || 0))
        }, ie = function(t, e) {
            var n = t._dp;
            return n && n.smoothChildTiming && t._ts && (t._start = Ft(n._time - (t._ts > 0 ? e / t._ts : ((t._dirty ? t.totalDuration() : t._tDur) - e) / -t._ts)),
            ne(t),
            n._dirty || Jt(n, t)),
            t
        }, re = function(t, e) {
            var n;
            if ((e._time || e._initted && !e._dur) && (n = ee(t.rawTime(), e),
            (!e._dur || ge(0, e.totalDuration(), n) - e._tTime > V) && e.render(n, !0)),
            Jt(t, e)._dp && t._initted && t._time >= t._dur && t._ts) {
                if (t._dur < t.duration())
                    for (n = t; n._dp; )
                        n.rawTime() >= 0 && n.totalTime(n._tTime),
                        n = n._dp;
                t._zTime = -1e-8
            }
        }, ae = function(t, e, n, r) {
            return e.parent && Zt(e),
            e._start = Ft(($(n) ? n : n || t !== c ? pe(t, n, e) : t._time) + e._delay),
            e._end = Ft(e._start + (e.totalDuration() / Math.abs(e.timeScale()) || 0)),
            function(t, e, n, r, o) {
                void 0 === n && (n = "_first"),
                void 0 === r && (r = "_last");
                var l, c = t[r];
                if (o)
                    for (l = e[o]; c && c[o] > l; )
                        c = c._prev;
                c ? (e._next = c._next,
                c._next = e) : (e._next = t[n],
                t[n] = e),
                e._next ? e._next._prev = e : t[r] = e,
                e._prev = c,
                e.parent = e._dp = t
            }(t, e, "_first", "_last", t._sort ? "_start" : 0),
            ce(e) || (t._recent = e),
            r || re(t, e),
            t
        }, se = function(t, e) {
            return (gt.ScrollTrigger || xt("scrollTrigger", e)) && gt.ScrollTrigger.create(e, t)
        }, oe = function(t, e, n, r) {
            return hn(t, e),
            t._initted ? !n && t._pt && (t._dur && !1 !== t.vars.lazy || !t._dur && t.vars.lazy) && v !== Ve.frame ? (St.push(t),
            t._lazy = [e, r],
            1) : void 0 : 1
        }, le = function t(e) {
            var n = e.parent;
            return n && n._ts && n._initted && !n._lock && (n.rawTime() < 0 || t(n))
        }, ce = function(t) {
            var data = t.data;
            return "isFromStart" === data || "isStart" === data
        }, he = function(t, e, n, r) {
            var o = t._repeat
              , l = Ft(e) || 0
              , c = t._tTime / t._tDur;
            return c && !r && (t._time *= l / t._dur),
            t._dur = l,
            t._tDur = o ? o < 0 ? 1e10 : Ft(l * (o + 1) + t._rDelay * o) : l,
            c && !r ? ie(t, t._tTime = t._tDur * c) : t.parent && ne(t),
            n || Jt(t.parent, t),
            t
        }, ue = function(t) {
            return t instanceof an ? Jt(t) : he(t, t._dur)
        }, de = {
            _start: 0,
            endTime: bt,
            totalDuration: bt
        }, pe = function t(e, n, r) {
            var i, o, l, c = e.labels, h = e._recent || de, d = e.duration() >= k ? h.endTime(!1) : e._dur;
            return K(n) && (isNaN(n) || n in c) ? (o = n.charAt(0),
            l = "%" === n.substr(-1),
            i = n.indexOf("="),
            "<" === o || ">" === o ? (i >= 0 && (n = n.replace(/=/, "")),
            ("<" === o ? h._start : h.endTime(h._repeat >= 0)) + (parseFloat(n.substr(1)) || 0) * (l ? (i < 0 ? h : r).totalDuration() / 100 : 1)) : i < 0 ? (n in c || (c[n] = d),
            c[n]) : (o = parseFloat(n.charAt(i - 1) + n.substr(i + 1)),
            l && r && (o = o / 100 * (ot(r) ? r[0] : r).totalDuration()),
            i > 1 ? t(e, n.substr(0, i - 1), r) + o : d + o)) : null == n ? d : +n
        }, fe = function(t, e, n) {
            var r, o, l = $(e[1]), c = (l ? 2 : 1) + (t < 2 ? 0 : 1), h = e[c];
            if (l && (h.duration = e[1]),
            h.parent = n,
            t) {
                for (r = h,
                o = n; o && !("immediateRender"in r); )
                    r = o.vars.defaults || {},
                    o = nt(o.vars.inherit) && o.parent;
                h.immediateRender = nt(r.immediateRender),
                t < 2 ? h.runBackwards = 1 : h.startAt = e[c - 1]
            }
            return new fn(e[0],h,e[c + 1])
        }, me = function(t, e) {
            return t || 0 === t ? e(t) : e
        }, ge = function(t, e, n) {
            return n < t ? t : n > e ? e : n
        }, ve = function(t) {
            if ("string" != typeof t)
                return "";
            var e = mt.exec(t);
            return e ? t.substr(e.index + e[0].length) : ""
        }, _e = [].slice, xe = function(t, e) {
            return t && et(t) && "length"in t && (!e && !t.length || t.length - 1 in t && et(t[0])) && !t.nodeType && t !== h
        }, ye = function(t, e, n) {
            return void 0 === n && (n = []),
            t.forEach((function(t) {
                var r;
                return K(t) && !e || xe(t, 1) ? (r = n).push.apply(r, Me(t)) : n.push(t)
            }
            )) || n
        }, Me = function(t, e, n) {
            return !K(t) || n || !d && We() ? ot(t) ? ye(t, n) : xe(t) ? _e.call(t, 0) : t ? [t] : [] : _e.call((e || f).querySelectorAll(t), 0)
        }, be = function(a) {
            return a.sort((function() {
                return .5 - Math.random()
            }
            ))
        }, we = function(t) {
            if (Q(t))
                return t;
            var e = et(t) ? t : {
                each: t
            }
              , n = Ke(e.ease)
              , r = e.from || 0
              , base = parseFloat(e.base) || 0
              , o = {}
              , l = r > 0 && r < 1
              , c = isNaN(r) || l
              , h = e.axis
              , d = r
              , f = r;
            return K(r) ? d = f = {
                center: .5,
                edges: .5,
                end: 1
            }[r] || 0 : !l && c && (d = r[0],
            f = r[1]),
            function(i, t, a) {
                var l, m, v, _, x, y, M, w, S, T = (a || e).length, E = o[T];
                if (!E) {
                    if (!(S = "auto" === e.grid ? 0 : (e.grid || [1, k])[1])) {
                        for (M = -k; M < (M = a[S++].getBoundingClientRect().left) && S < T; )
                            ;
                        S--
                    }
                    for (E = o[T] = [],
                    l = c ? Math.min(S, T) * d - .5 : r % S,
                    m = c ? T * f / S - .5 : r / S | 0,
                    M = 0,
                    w = k,
                    y = 0; y < T; y++)
                        v = y % S - l,
                        _ = m - (y / S | 0),
                        E[y] = x = h ? Math.abs("y" === h ? _ : v) : Y(v * v + _ * _),
                        x > M && (M = x),
                        x < w && (w = x);
                    "random" === r && be(E),
                    E.max = M - w,
                    E.min = w,
                    E.v = T = (parseFloat(e.amount) || parseFloat(e.each) * (S > T ? T - 1 : h ? "y" === h ? T / S : S : Math.max(S, T / S)) || 0) * ("edges" === r ? -1 : 1),
                    E.b = T < 0 ? base - T : base,
                    E.u = ve(e.amount || e.each) || 0,
                    n = n && T < 0 ? Ze(n) : n
                }
                return T = (E[i] - E.min) / E.max || 0,
                Ft(E.b + (n ? n(T) : T) * E.v) + E.u
            }
        }, Se = function(t) {
            var p = Math.pow(10, ((t + "").split(".")[1] || "").length);
            return function(e) {
                var n = Math.round(parseFloat(e) / t) * t * p;
                return (n - n % 1) / p + ($(e) ? 0 : ve(e))
            }
        }, Te = function(t, e) {
            var n, r, o = ot(t);
            return !o && et(t) && (n = o = t.radius || k,
            t.values ? (t = Me(t.values),
            (r = !$(t[0])) && (n *= n)) : t = Se(t.increment)),
            me(e, o ? Q(t) ? function(e) {
                return r = t(e),
                Math.abs(r - e) <= n ? r : e
            }
            : function(e) {
                for (var o, l, c = parseFloat(r ? e.x : e), h = parseFloat(r ? e.y : 0), d = k, f = 0, i = t.length; i--; )
                    (o = r ? (o = t[i].x - c) * o + (l = t[i].y - h) * l : Math.abs(t[i] - c)) < d && (d = o,
                    f = i);
                return f = !n || d <= n ? t[f] : e,
                r || f === e || $(e) ? f : f + ve(e)
            }
            : Se(t))
        }, Ee = function(t, e, n, r) {
            return me(ot(t) ? !e : !0 === n ? !!(n = 0) : !r, (function() {
                return ot(t) ? t[~~(Math.random() * t.length)] : (n = n || 1e-5) && (r = n < 1 ? Math.pow(10, (n + "").length - 2) : 1) && Math.floor(Math.round((t - n / 2 + Math.random() * (e - t + .99 * n)) / n) * n * r) / r
            }
            ))
        }, Ae = function(a, t, e) {
            return me(e, (function(e) {
                return a[~~t(e)]
            }
            ))
        }, Le = function(t) {
            for (var i, e, n, r, o = 0, s = ""; ~(i = t.indexOf("random(", o)); )
                n = t.indexOf(")", i),
                r = "[" === t.charAt(i + 7),
                e = t.substr(i + 7, n - i - 7).match(r ? ft : lt),
                s += t.substr(o, i - o) + Ee(r ? e : +e[0], r ? 0 : +e[1], +e[2] || 1e-5),
                o = n + 1;
            return s + t.substr(o, t.length - o)
        }, Re = function(t, e, n, r, o) {
            var l = e - t
              , c = r - n;
            return me(o, (function(e) {
                return n + ((e - t) / l * c || 0)
            }
            ))
        }, Ce = function(t, e, n) {
            var p, r, label, o = t.labels, l = k;
            for (p in o)
                (r = o[p] - e) < 0 == !!n && r && l > (r = Math.abs(r)) && (label = p,
                l = r);
            return label
        }, Pe = function(t, e, n) {
            var r, o, l = t.vars, c = l[e];
            if (c)
                return r = l[e + "Params"],
                o = l.callbackScope || t,
                n && St.length && zt(),
                r ? c.apply(o, r) : c.call(o)
        }, De = function(t) {
            return Zt(t),
            t.scrollTrigger && t.scrollTrigger.kill(!1),
            t.progress() < 1 && Pe(t, "onInterrupt"),
            t
        }, Ne = function(t) {
            var e = (t = !t.name && t.default || t).name
              , n = Q(t)
              , r = e && !n && t.init ? function() {
                this._props = []
            }
            : t
              , o = {
                init: bt,
                render: wn,
                add: ln,
                kill: Tn,
                modifier: Sn,
                rawVars: 0
            }
              , l = {
                targetTest: 0,
                get: 0,
                getSetter: xn,
                aliases: {},
                register: 0
            };
            if (We(),
            t !== r) {
                if (Et[e])
                    return;
                kt(r, kt(Xt(t, o), l)),
                Wt(r.prototype, Wt(o, Xt(t, l))),
                Et[r.prop = e] = r,
                t.targetTest && (Rt.push(r),
                wt[e] = 1),
                e = ("css" === e ? "CSS" : e.charAt(0).toUpperCase() + e.substr(1)) + "Plugin"
            }
            Mt(e, r),
            t.register && t.register(Dn, r, Ln)
        }, Ie = 255, Oe = {
            aqua: [0, Ie, Ie],
            lime: [0, Ie, 0],
            silver: [192, 192, 192],
            black: [0, 0, 0],
            maroon: [128, 0, 0],
            teal: [0, 128, 128],
            blue: [0, 0, Ie],
            navy: [0, 0, 128],
            white: [Ie, Ie, Ie],
            olive: [128, 128, 0],
            yellow: [Ie, Ie, 0],
            orange: [Ie, 165, 0],
            gray: [128, 128, 128],
            purple: [128, 0, 128],
            green: [0, 128, 0],
            red: [Ie, 0, 0],
            pink: [Ie, 192, 203],
            cyan: [0, Ie, Ie],
            transparent: [Ie, Ie, Ie, 0]
        }, Fe = function(t, e, n) {
            return (6 * (t = t < 0 ? t + 1 : t > 1 ? t - 1 : t) < 1 ? e + (n - e) * t * 6 : t < .5 ? n : 3 * t < 2 ? e + (n - e) * (2 / 3 - t) * 6 : e) * Ie + .5 | 0
        }, Ue = function(t, e, n) {
            var r, g, b, o, s, l, c, h, d, f, a = t ? $(t) ? [t >> 16, t >> 8 & Ie, t & Ie] : 0 : Oe.black;
            if (!a) {
                if ("," === t.substr(-1) && (t = t.substr(0, t.length - 1)),
                Oe[t])
                    a = Oe[t];
                else if ("#" === t.charAt(0)) {
                    if (t.length < 6 && (r = t.charAt(1),
                    g = t.charAt(2),
                    b = t.charAt(3),
                    t = "#" + r + r + g + g + b + b + (5 === t.length ? t.charAt(4) + t.charAt(4) : "")),
                    9 === t.length)
                        return [(a = parseInt(t.substr(1, 6), 16)) >> 16, a >> 8 & Ie, a & Ie, parseInt(t.substr(7), 16) / 255];
                    a = [(t = parseInt(t.substr(1), 16)) >> 16, t >> 8 & Ie, t & Ie]
                } else if ("hsl" === t.substr(0, 3))
                    if (a = f = t.match(lt),
                    e) {
                        if (~t.indexOf("="))
                            return a = t.match(ct),
                            n && a.length < 4 && (a[3] = 1),
                            a
                    } else
                        o = +a[0] % 360 / 360,
                        s = +a[1] / 100,
                        r = 2 * (l = +a[2] / 100) - (g = l <= .5 ? l * (s + 1) : l + s - l * s),
                        a.length > 3 && (a[3] *= 1),
                        a[0] = Fe(o + 1 / 3, r, g),
                        a[1] = Fe(o, r, g),
                        a[2] = Fe(o - 1 / 3, r, g);
                else
                    a = t.match(lt) || Oe.transparent;
                a = a.map(Number)
            }
            return e && !f && (r = a[0] / Ie,
            g = a[1] / Ie,
            b = a[2] / Ie,
            l = ((c = Math.max(r, g, b)) + (h = Math.min(r, g, b))) / 2,
            c === h ? o = s = 0 : (d = c - h,
            s = l > .5 ? d / (2 - c - h) : d / (c + h),
            o = c === r ? (g - b) / d + (g < b ? 6 : 0) : c === g ? (b - r) / d + 2 : (r - g) / d + 4,
            o *= 60),
            a[0] = ~~(o + .5),
            a[1] = ~~(100 * s + .5),
            a[2] = ~~(100 * l + .5)),
            n && a.length < 4 && (a[3] = 1),
            a
        }, ze = function(t) {
            var e = []
              , n = []
              , i = -1;
            return t.split(Ge).forEach((function(t) {
                var a = t.match(ht) || [];
                e.push.apply(e, a),
                n.push(i += a.length + 1)
            }
            )),
            e.c = n,
            e
        }, Be = function(s, t, e) {
            var n, r, o, l, c = "", h = (s + c).match(Ge), d = t ? "hsla(" : "rgba(", i = 0;
            if (!h)
                return s;
            if (h = h.map((function(e) {
                return (e = Ue(e, t, 1)) && d + (t ? e[0] + "," + e[1] + "%," + e[2] + "%," + e[3] : e.join(",")) + ")"
            }
            )),
            e && (o = ze(s),
            (n = e.c).join(c) !== o.c.join(c)))
                for (l = (r = s.replace(Ge, "1").split(ht)).length - 1; i < l; i++)
                    c += r[i] + (~n.indexOf(i) ? h.shift() || d + "0,0,0,0)" : (o.length ? o : h.length ? h : e).shift());
            if (!r)
                for (l = (r = s.split(Ge)).length - 1; i < l; i++)
                    c += r[i] + h[i];
            return c + r[l]
        }, Ge = function() {
            var p, s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";
            for (p in Oe)
                s += "|" + p + "\\b";
            return new RegExp(s + ")","gi")
        }(), He = /hsl[a]?\(/, ke = function(a) {
            var t, e = a.join(" ");
            if (Ge.lastIndex = 0,
            Ge.test(e))
                return t = He.test(e),
                a[1] = Be(a[1], t),
                a[0] = Be(a[0], t, ze(a[1])),
                !0
        }, Ve = (A = Date.now,
        L = 500,
        R = 33,
        C = A(),
        P = C,
        N = D = 1e3 / 240,
        O = function t(e) {
            var n, r, time, o, l = A() - P, c = !0 === e;
            if (l > L && (C += l - R),
            ((n = (time = (P += l) - C) - N) > 0 || c) && (o = ++S.frame,
            T = time - 1e3 * S.time,
            S.time = time /= 1e3,
            N += n + (n >= D ? 4 : D - n),
            r = 1),
            c || (y = M(t)),
            r)
                for (E = 0; E < I.length; E++)
                    I[E](time, T, o, e)
        }
        ,
        S = {
            time: 0,
            frame: 0,
            tick: function() {
                O(!0)
            },
            deltaRatio: function(t) {
                return T / (1e3 / (t || 60))
            },
            wake: function() {
                m && (!d && it() && (h = d = window,
                f = h.document || {},
                gt.gsap = Dn,
                (h.gsapVersions || (h.gsapVersions = [])).push(Dn.version),
                _t(vt || h.GreenSockGlobals || !h.gsap && h || {}),
                w = h.requestAnimationFrame),
                y && S.sleep(),
                M = w || function(t) {
                    return setTimeout(t, N - 1e3 * S.time + 1 | 0)
                }
                ,
                x = 1,
                O(2))
            },
            sleep: function() {
                (w ? h.cancelAnimationFrame : clearTimeout)(y),
                x = 0,
                M = bt
            },
            lagSmoothing: function(t, e) {
                L = t || 1e8,
                R = Math.min(e, L, 0)
            },
            fps: function(t) {
                D = 1e3 / (t || 240),
                N = 1e3 * S.time + D
            },
            add: function(t) {
                I.indexOf(t) < 0 && I.push(t),
                We()
            },
            remove: function(t) {
                var i;
                ~(i = I.indexOf(t)) && I.splice(i, 1) && E >= i && E--
            },
            _listeners: I = []
        }), We = function() {
            return !x && Ve.wake()
        }, je = {}, Xe = /^[\d.\-M][\d.\-,\s]/, qe = /["']/g, Ye = function(t) {
            for (var e, n, r, o = {}, l = t.substr(1, t.length - 3).split(":"), c = l[0], i = 1, h = l.length; i < h; i++)
                n = l[i],
                e = i !== h - 1 ? n.lastIndexOf(",") : n.length,
                r = n.substr(0, e),
                o[c] = isNaN(r) ? r.replace(qe, "").trim() : +r,
                c = n.substr(e + 1).trim();
            return o
        }, Ze = function(t) {
            return function(p) {
                return 1 - t(1 - p)
            }
        }, Je = function t(e, n) {
            for (var r, o = e._first; o; )
                o instanceof an ? t(o, n) : !o.vars.yoyoEase || o._yoyo && o._repeat || o._yoyo === n || (o.timeline ? t(o.timeline, n) : (r = o._ease,
                o._ease = o._yEase,
                o._yEase = r,
                o._yoyo = n)),
                o = o._next
        }, Ke = function(t, e) {
            return t && (Q(t) ? t : je[t] || function(t) {
                var e, n, r, o, l = (t + "").split("("), c = je[l[0]];
                return c && l.length > 1 && c.config ? c.config.apply(null, ~t.indexOf("{") ? [Ye(l[1])] : (e = t,
                n = e.indexOf("(") + 1,
                r = e.indexOf(")"),
                o = e.indexOf("(", n),
                e.substring(n, ~o && o < r ? e.indexOf(")", r + 1) : r)).split(",").map(Gt)) : je._CE && Xe.test(t) ? je._CE("", t) : c
            }(t)) || e
        }, Qe = function(t, e, n, r) {
            void 0 === n && (n = function(p) {
                return 1 - e(1 - p)
            }
            ),
            void 0 === r && (r = function(p) {
                return p < .5 ? e(2 * p) / 2 : 1 - e(2 * (1 - p)) / 2
            }
            );
            var o, l = {
                easeIn: e,
                easeOut: n,
                easeInOut: r
            };
            return It(t, (function(t) {
                for (var p in je[t] = gt[t] = l,
                je[o = t.toLowerCase()] = n,
                l)
                    je[o + ("easeIn" === p ? ".in" : "easeOut" === p ? ".out" : ".inOut")] = je[t + "." + p] = l[p]
            }
            )),
            l
        }, $e = function(t) {
            return function(p) {
                return p < .5 ? (1 - t(1 - 2 * p)) / 2 : .5 + t(2 * (p - .5)) / 2
            }
        }, tn = function t(e, n, r) {
            var o = n >= 1 ? n : 1
              , l = (r || (e ? .3 : .45)) / (n < 1 ? n : 1)
              , c = l / W * (Math.asin(1 / o) || 0)
              , h = function(p) {
                return 1 === p ? 1 : o * Math.pow(2, -10 * p) * J((p - c) * l) + 1
            }
              , d = "out" === e ? h : "in" === e ? function(p) {
                return 1 - h(1 - p)
            }
            : $e(h);
            return l = W / l,
            d.config = function(n, r) {
                return t(e, n, r)
            }
            ,
            d
        }, en = function t(e, n) {
            void 0 === n && (n = 1.70158);
            var r = function(p) {
                return p ? --p * p * ((n + 1) * p + n) + 1 : 0
            }
              , o = "out" === e ? r : "in" === e ? function(p) {
                return 1 - r(1 - p)
            }
            : $e(r);
            return o.config = function(n) {
                return t(e, n)
            }
            ,
            o
        };
        It("Linear,Quad,Cubic,Quart,Quint,Strong", (function(t, i) {
            var e = i < 5 ? i + 1 : i;
            Qe(t + ",Power" + (e - 1), i ? function(p) {
                return Math.pow(p, e)
            }
            : function(p) {
                return p
            }
            , (function(p) {
                return 1 - Math.pow(1 - p, e)
            }
            ), (function(p) {
                return p < .5 ? Math.pow(2 * p, e) / 2 : 1 - Math.pow(2 * (1 - p), e) / 2
            }
            ))
        }
        )),
        je.Linear.easeNone = je.none = je.Linear.easeIn,
        Qe("Elastic", tn("in"), tn("out"), tn()),
        F = 7.5625,
        z = 1 / (U = 2.75),
        Qe("Bounce", (function(p) {
            return 1 - B(1 - p)
        }
        ), B = function(p) {
            return p < z ? F * p * p : p < .7272727272727273 ? F * Math.pow(p - 1.5 / U, 2) + .75 : p < .9090909090909092 ? F * (p -= 2.25 / U) * p + .9375 : F * Math.pow(p - 2.625 / U, 2) + .984375
        }
        ),
        Qe("Expo", (function(p) {
            return p ? Math.pow(2, 10 * (p - 1)) : 0
        }
        )),
        Qe("Circ", (function(p) {
            return -(Y(1 - p * p) - 1)
        }
        )),
        Qe("Sine", (function(p) {
            return 1 === p ? 1 : 1 - Z(p * j)
        }
        )),
        Qe("Back", en("in"), en("out"), en()),
        je.SteppedEase = je.steps = gt.SteppedEase = {
            config: function(t, e) {
                void 0 === t && (t = 1);
                var n = 1 / t
                  , r = t + (e ? 0 : 1)
                  , o = e ? 1 : 0;
                return function(p) {
                    return ((r * ge(0, .99999999, p) | 0) + o) * n
                }
            }
        },
        H.ease = je["quad.out"],
        It("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", (function(t) {
            return Ct += t + "," + t + "Params,"
        }
        ));
        var nn = function(t, e) {
            this.id = X++,
            t._gsap = this,
            this.target = t,
            this.harness = e,
            this.get = e ? e.get : Nt,
            this.set = e ? e.getSetter : xn
        }
          , rn = function() {
            function t(t) {
                this.vars = t,
                this._delay = +t.delay || 0,
                (this._repeat = t.repeat === 1 / 0 ? -2 : t.repeat || 0) && (this._rDelay = t.repeatDelay || 0,
                this._yoyo = !!t.yoyo || !!t.yoyoEase),
                this._ts = 1,
                he(this, +t.duration, 1, 1),
                this.data = t.data,
                x || Ve.wake()
            }
            var e = t.prototype;
            return e.delay = function(t) {
                return t || 0 === t ? (this.parent && this.parent.smoothChildTiming && this.startTime(this._start + t - this._delay),
                this._delay = t,
                this) : this._delay
            }
            ,
            e.duration = function(t) {
                return arguments.length ? this.totalDuration(this._repeat > 0 ? t + (t + this._rDelay) * this._repeat : t) : this.totalDuration() && this._dur
            }
            ,
            e.totalDuration = function(t) {
                return arguments.length ? (this._dirty = 0,
                he(this, this._repeat < 0 ? t : (t - this._repeat * this._rDelay) / (this._repeat + 1))) : this._tDur
            }
            ,
            e.totalTime = function(t, e) {
                if (We(),
                !arguments.length)
                    return this._tTime;
                var n = this._dp;
                if (n && n.smoothChildTiming && this._ts) {
                    for (ie(this, t),
                    !n._dp || n.parent || re(n, this); n && n.parent; )
                        n.parent._time !== n._start + (n._ts >= 0 ? n._tTime / n._ts : (n.totalDuration() - n._tTime) / -n._ts) && n.totalTime(n._tTime, !0),
                        n = n.parent;
                    !this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && t < this._tDur || this._ts < 0 && t > 0 || !this._tDur && !t) && ae(this._dp, this, this._start - this._delay)
                }
                return (this._tTime !== t || !this._dur && !e || this._initted && Math.abs(this._zTime) === V || !t && !this._initted && (this.add || this._ptLookup)) && (this._ts || (this._pTime = t),
                Bt(this, t, e)),
                this
            }
            ,
            e.time = function(t, e) {
                return arguments.length ? this.totalTime(Math.min(this.totalDuration(), t + $t(this)) % (this._dur + this._rDelay) || (t ? this._dur : 0), e) : this._time
            }
            ,
            e.totalProgress = function(t, e) {
                return arguments.length ? this.totalTime(this.totalDuration() * t, e) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.ratio
            }
            ,
            e.progress = function(t, e) {
                return arguments.length ? this.totalTime(this.duration() * (!this._yoyo || 1 & this.iteration() ? t : 1 - t) + $t(this), e) : this.duration() ? Math.min(1, this._time / this._dur) : this.ratio
            }
            ,
            e.iteration = function(t, e) {
                var n = this.duration() + this._rDelay;
                return arguments.length ? this.totalTime(this._time + (t - 1) * n, e) : this._repeat ? te(this._tTime, n) + 1 : 1
            }
            ,
            e.timeScale = function(t) {
                if (!arguments.length)
                    return -1e-8 === this._rts ? 0 : this._rts;
                if (this._rts === t)
                    return this;
                var e = this.parent && this._ts ? ee(this.parent._time, this) : this._tTime;
                return this._rts = +t || 0,
                this._ts = this._ps || -1e-8 === t ? 0 : this._rts,
                Kt(this.totalTime(ge(-this._delay, this._tDur, e), !0)),
                ne(this),
                this
            }
            ,
            e.paused = function(t) {
                return arguments.length ? (this._ps !== t && (this._ps = t,
                t ? (this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()),
                this._ts = this._act = 0) : (We(),
                this._ts = this._rts,
                this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, 1 === this.progress() && Math.abs(this._zTime) !== V && (this._tTime -= V)))),
                this) : this._ps
            }
            ,
            e.startTime = function(t) {
                if (arguments.length) {
                    this._start = t;
                    var e = this.parent || this._dp;
                    return e && (e._sort || !this.parent) && ae(e, this, t - this._delay),
                    this
                }
                return this._start
            }
            ,
            e.endTime = function(t) {
                return this._start + (nt(t) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1)
            }
            ,
            e.rawTime = function(t) {
                var e = this.parent || this._dp;
                return e ? t && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : this._ts ? ee(e.rawTime(t), this) : this._tTime : this._tTime
            }
            ,
            e.globalTime = function(t) {
                for (var e = this, time = arguments.length ? t : e.rawTime(); e; )
                    time = e._start + time / (e._ts || 1),
                    e = e._dp;
                return time
            }
            ,
            e.repeat = function(t) {
                return arguments.length ? (this._repeat = t === 1 / 0 ? -2 : t,
                ue(this)) : -2 === this._repeat ? 1 / 0 : this._repeat
            }
            ,
            e.repeatDelay = function(t) {
                if (arguments.length) {
                    var time = this._time;
                    return this._rDelay = t,
                    ue(this),
                    time ? this.time(time) : this
                }
                return this._rDelay
            }
            ,
            e.yoyo = function(t) {
                return arguments.length ? (this._yoyo = t,
                this) : this._yoyo
            }
            ,
            e.seek = function(t, e) {
                return this.totalTime(pe(this, t), nt(e))
            }
            ,
            e.restart = function(t, e) {
                return this.play().totalTime(t ? -this._delay : 0, nt(e))
            }
            ,
            e.play = function(t, e) {
                return null != t && this.seek(t, e),
                this.reversed(!1).paused(!1)
            }
            ,
            e.reverse = function(t, e) {
                return null != t && this.seek(t || this.totalDuration(), e),
                this.reversed(!0).paused(!1)
            }
            ,
            e.pause = function(t, e) {
                return null != t && this.seek(t, e),
                this.paused(!0)
            }
            ,
            e.resume = function() {
                return this.paused(!1)
            }
            ,
            e.reversed = function(t) {
                return arguments.length ? (!!t !== this.reversed() && this.timeScale(-this._rts || (t ? -1e-8 : 0)),
                this) : this._rts < 0
            }
            ,
            e.invalidate = function() {
                return this._initted = this._act = 0,
                this._zTime = -1e-8,
                this
            }
            ,
            e.isActive = function() {
                var t, e = this.parent || this._dp, n = this._start;
                return !(e && !(this._ts && this._initted && e.isActive() && (t = e.rawTime(!0)) >= n && t < this.endTime(!0) - V))
            }
            ,
            e.eventCallback = function(t, e, n) {
                var r = this.vars;
                return arguments.length > 1 ? (e ? (r[t] = e,
                n && (r[t + "Params"] = n),
                "onUpdate" === t && (this._onUpdate = e)) : delete r[t],
                this) : r[t]
            }
            ,
            e.then = function(t) {
                var e = this;
                return new Promise((function(n) {
                    var r = Q(t) ? t : Ht
                      , o = function() {
                        var t = e.then;
                        e.then = null,
                        Q(r) && (r = r(e)) && (r.then || r === e) && (e.then = t),
                        n(r),
                        e.then = t
                    };
                    e._initted && 1 === e.totalProgress() && e._ts >= 0 || !e._tTime && e._ts < 0 ? o() : e._prom = o
                }
                ))
            }
            ,
            e.kill = function() {
                De(this)
            }
            ,
            t
        }();
        kt(rn.prototype, {
            _time: 0,
            _start: 0,
            _end: 0,
            _tTime: 0,
            _tDur: 0,
            _dirty: 0,
            _repeat: 0,
            _yoyo: !1,
            parent: null,
            _initted: !1,
            _rDelay: 0,
            _ts: 1,
            _dp: 0,
            ratio: 0,
            _zTime: -1e-8,
            _prom: 0,
            _ps: !1,
            _rts: 1
        });
        var an = function(t) {
            function e(e, n) {
                var o;
                return void 0 === e && (e = {}),
                (o = t.call(this, e) || this).labels = {},
                o.smoothChildTiming = !!e.smoothChildTiming,
                o.autoRemoveChildren = !!e.autoRemoveChildren,
                o._sort = nt(e.sortChildren),
                c && ae(e.parent || c, r(o), n),
                e.reversed && o.reverse(),
                e.paused && o.paused(!0),
                e.scrollTrigger && se(r(o), e.scrollTrigger),
                o
            }
            o(e, t);
            var n = e.prototype;
            return n.to = function(t, e, n) {
                return fe(0, arguments, this),
                this
            }
            ,
            n.from = function(t, e, n) {
                return fe(1, arguments, this),
                this
            }
            ,
            n.fromTo = function(t, e, n, r) {
                return fe(2, arguments, this),
                this
            }
            ,
            n.set = function(t, e, n) {
                return e.duration = 0,
                e.parent = this,
                qt(e).repeatDelay || (e.repeat = 0),
                e.immediateRender = !!e.immediateRender,
                new fn(t,e,pe(this, n),1),
                this
            }
            ,
            n.call = function(t, e, n) {
                return ae(this, fn.delayedCall(0, t, e), n)
            }
            ,
            n.staggerTo = function(t, e, n, r, o, l, c) {
                return n.duration = e,
                n.stagger = n.stagger || r,
                n.onComplete = l,
                n.onCompleteParams = c,
                n.parent = this,
                new fn(t,n,pe(this, o)),
                this
            }
            ,
            n.staggerFrom = function(t, e, n, r, o, l, c) {
                return n.runBackwards = 1,
                qt(n).immediateRender = nt(n.immediateRender),
                this.staggerTo(t, e, n, r, o, l, c)
            }
            ,
            n.staggerFromTo = function(t, e, n, r, o, l, c, h) {
                return r.startAt = n,
                qt(r).immediateRender = nt(r.immediateRender),
                this.staggerTo(t, e, r, o, l, c, h)
            }
            ,
            n.render = function(t, e, n) {
                var time, r, o, l, h, d, f, m, v, _, x, y, M = this._time, w = this._dirty ? this.totalDuration() : this._tDur, S = this._dur, T = t <= 0 ? 0 : Ft(t), E = this._zTime < 0 != t < 0 && (this._initted || !S);
                if (this !== c && T > w && t >= 0 && (T = w),
                T !== this._tTime || n || E) {
                    if (M !== this._time && S && (T += this._time - M,
                    t += this._time - M),
                    time = T,
                    v = this._start,
                    d = !(m = this._ts),
                    E && (S || (M = this._zTime),
                    (t || !e) && (this._zTime = t)),
                    this._repeat) {
                        if (x = this._yoyo,
                        h = S + this._rDelay,
                        this._repeat < -1 && t < 0)
                            return this.totalTime(100 * h + t, e, n);
                        if (time = Ft(T % h),
                        T === w ? (l = this._repeat,
                        time = S) : ((l = ~~(T / h)) && l === T / h && (time = S,
                        l--),
                        time > S && (time = S)),
                        _ = te(this._tTime, h),
                        !M && this._tTime && _ !== l && (_ = l),
                        x && 1 & l && (time = S - time,
                        y = 1),
                        l !== _ && !this._lock) {
                            var A = x && 1 & _
                              , L = A === (x && 1 & l);
                            if (l < _ && (A = !A),
                            M = A ? 0 : S,
                            this._lock = 1,
                            this.render(M || (y ? 0 : Ft(l * h)), e, !S)._lock = 0,
                            this._tTime = T,
                            !e && this.parent && Pe(this, "onRepeat"),
                            this.vars.repeatRefresh && !y && (this.invalidate()._lock = 1),
                            M && M !== this._time || d !== !this._ts || this.vars.onRepeat && !this.parent && !this._act)
                                return this;
                            if (S = this._dur,
                            w = this._tDur,
                            L && (this._lock = 2,
                            M = A ? S : -1e-4,
                            this.render(M, !0),
                            this.vars.repeatRefresh && !y && this.invalidate()),
                            this._lock = 0,
                            !this._ts && !d)
                                return this;
                            Je(this, y)
                        }
                    }
                    if (this._hasPause && !this._forcing && this._lock < 2 && (f = function(t, e, time) {
                        var n;
                        if (time > e)
                            for (n = t._first; n && n._start <= time; ) {
                                if (!n._dur && "isPause" === n.data && n._start > e)
                                    return n;
                                n = n._next
                            }
                        else
                            for (n = t._last; n && n._start >= time; ) {
                                if (!n._dur && "isPause" === n.data && n._start < e)
                                    return n;
                                n = n._prev
                            }
                    }(this, Ft(M), Ft(time)),
                    f && (T -= time - (time = f._start))),
                    this._tTime = T,
                    this._time = time,
                    this._act = !m,
                    this._initted || (this._onUpdate = this.vars.onUpdate,
                    this._initted = 1,
                    this._zTime = t,
                    M = 0),
                    !M && time && !e && (Pe(this, "onStart"),
                    this._tTime !== T))
                        return this;
                    if (time >= M && t >= 0)
                        for (r = this._first; r; ) {
                            if (o = r._next,
                            (r._act || time >= r._start) && r._ts && f !== r) {
                                if (r.parent !== this)
                                    return this.render(t, e, n);
                                if (r.render(r._ts > 0 ? (time - r._start) * r._ts : (r._dirty ? r.totalDuration() : r._tDur) + (time - r._start) * r._ts, e, n),
                                time !== this._time || !this._ts && !d) {
                                    f = 0,
                                    o && (T += this._zTime = -1e-8);
                                    break
                                }
                            }
                            r = o
                        }
                    else {
                        r = this._last;
                        for (var R = t < 0 ? t : time; r; ) {
                            if (o = r._prev,
                            (r._act || R <= r._end) && r._ts && f !== r) {
                                if (r.parent !== this)
                                    return this.render(t, e, n);
                                if (r.render(r._ts > 0 ? (R - r._start) * r._ts : (r._dirty ? r.totalDuration() : r._tDur) + (R - r._start) * r._ts, e, n),
                                time !== this._time || !this._ts && !d) {
                                    f = 0,
                                    o && (T += this._zTime = R ? -1e-8 : V);
                                    break
                                }
                            }
                            r = o
                        }
                    }
                    if (f && !e && (this.pause(),
                    f.render(time >= M ? 0 : -1e-8)._zTime = time >= M ? 1 : -1,
                    this._ts))
                        return this._start = v,
                        ne(this),
                        this.render(t, e, n);
                    this._onUpdate && !e && Pe(this, "onUpdate", !0),
                    (T === w && w >= this.totalDuration() || !T && M) && (v !== this._start && Math.abs(m) === Math.abs(this._ts) || this._lock || ((t || !S) && (T === w && this._ts > 0 || !T && this._ts < 0) && Zt(this, 1),
                    e || t < 0 && !M || !T && !M && w || (Pe(this, T === w && t >= 0 ? "onComplete" : "onReverseComplete", !0),
                    this._prom && !(T < w && this.timeScale() > 0) && this._prom())))
                }
                return this
            }
            ,
            n.add = function(t, e) {
                var n = this;
                if ($(e) || (e = pe(this, e, t)),
                !(t instanceof rn)) {
                    if (ot(t))
                        return t.forEach((function(t) {
                            return n.add(t, e)
                        }
                        )),
                        this;
                    if (K(t))
                        return this.addLabel(t, e);
                    if (!Q(t))
                        return this;
                    t = fn.delayedCall(0, t)
                }
                return this !== t ? ae(this, t, e) : this
            }
            ,
            n.getChildren = function(t, e, n, r) {
                void 0 === t && (t = !0),
                void 0 === e && (e = !0),
                void 0 === n && (n = !0),
                void 0 === r && (r = -k);
                for (var a = [], o = this._first; o; )
                    o._start >= r && (o instanceof fn ? e && a.push(o) : (n && a.push(o),
                    t && a.push.apply(a, o.getChildren(!0, e, n)))),
                    o = o._next;
                return a
            }
            ,
            n.getById = function(t) {
                for (var e = this.getChildren(1, 1, 1), i = e.length; i--; )
                    if (e[i].vars.id === t)
                        return e[i]
            }
            ,
            n.remove = function(t) {
                return K(t) ? this.removeLabel(t) : Q(t) ? this.killTweensOf(t) : (Yt(this, t),
                t === this._recent && (this._recent = this._last),
                Jt(this))
            }
            ,
            n.totalTime = function(e, n) {
                return arguments.length ? (this._forcing = 1,
                !this._dp && this._ts && (this._start = Ft(Ve.time - (this._ts > 0 ? e / this._ts : (this.totalDuration() - e) / -this._ts))),
                t.prototype.totalTime.call(this, e, n),
                this._forcing = 0,
                this) : this._tTime
            }
            ,
            n.addLabel = function(label, t) {
                return this.labels[label] = pe(this, t),
                this
            }
            ,
            n.removeLabel = function(label) {
                return delete this.labels[label],
                this
            }
            ,
            n.addPause = function(t, e, n) {
                var r = fn.delayedCall(0, e || bt, n);
                return r.data = "isPause",
                this._hasPause = 1,
                ae(this, r, pe(this, t))
            }
            ,
            n.removePause = function(t) {
                var e = this._first;
                for (t = pe(this, t); e; )
                    e._start === t && "isPause" === e.data && Zt(e),
                    e = e._next
            }
            ,
            n.killTweensOf = function(t, e, n) {
                for (var r = this.getTweensOf(t, n), i = r.length; i--; )
                    sn !== r[i] && r[i].kill(t, e);
                return this
            }
            ,
            n.getTweensOf = function(t, e) {
                for (var n, a = [], r = Me(t), o = this._first, l = $(e); o; )
                    o instanceof fn ? Ut(o._targets, r) && (l ? (!sn || o._initted && o._ts) && o.globalTime(0) <= e && o.globalTime(o.totalDuration()) > e : !e || o.isActive()) && a.push(o) : (n = o.getTweensOf(r, e)).length && a.push.apply(a, n),
                    o = o._next;
                return a
            }
            ,
            n.tweenTo = function(t, e) {
                e = e || {};
                var n, r = this, o = pe(r, t), l = e, c = l.startAt, h = l.onStart, d = l.onStartParams, f = l.immediateRender, m = fn.to(r, kt({
                    ease: e.ease || "none",
                    lazy: !1,
                    immediateRender: !1,
                    time: o,
                    overwrite: "auto",
                    duration: e.duration || Math.abs((o - (c && "time"in c ? c.time : r._time)) / r.timeScale()) || V,
                    onStart: function() {
                        if (r.pause(),
                        !n) {
                            var t = e.duration || Math.abs((o - (c && "time"in c ? c.time : r._time)) / r.timeScale());
                            m._dur !== t && he(m, t, 0, 1).render(m._time, !0, !0),
                            n = 1
                        }
                        h && h.apply(m, d || [])
                    }
                }, e));
                return f ? m.render(0) : m
            }
            ,
            n.tweenFromTo = function(t, e, n) {
                return this.tweenTo(e, kt({
                    startAt: {
                        time: pe(this, t)
                    }
                }, n))
            }
            ,
            n.recent = function() {
                return this._recent
            }
            ,
            n.nextLabel = function(t) {
                return void 0 === t && (t = this._time),
                Ce(this, pe(this, t))
            }
            ,
            n.previousLabel = function(t) {
                return void 0 === t && (t = this._time),
                Ce(this, pe(this, t), 1)
            }
            ,
            n.currentLabel = function(t) {
                return arguments.length ? this.seek(t, !0) : this.previousLabel(this._time + V)
            }
            ,
            n.shiftChildren = function(t, e, n) {
                void 0 === n && (n = 0);
                for (var p, r = this._first, o = this.labels; r; )
                    r._start >= n && (r._start += t,
                    r._end += t),
                    r = r._next;
                if (e)
                    for (p in o)
                        o[p] >= n && (o[p] += t);
                return Jt(this)
            }
            ,
            n.invalidate = function() {
                var e = this._first;
                for (this._lock = 0; e; )
                    e.invalidate(),
                    e = e._next;
                return t.prototype.invalidate.call(this)
            }
            ,
            n.clear = function(t) {
                void 0 === t && (t = !0);
                for (var e, n = this._first; n; )
                    e = n._next,
                    this.remove(n),
                    n = e;
                return this._dp && (this._time = this._tTime = this._pTime = 0),
                t && (this.labels = {}),
                Jt(this)
            }
            ,
            n.totalDuration = function(t) {
                var e, n, r, o = 0, l = this, h = l._last, d = k;
                if (arguments.length)
                    return l.timeScale((l._repeat < 0 ? l.duration() : l.totalDuration()) / (l.reversed() ? -t : t));
                if (l._dirty) {
                    for (r = l.parent; h; )
                        e = h._prev,
                        h._dirty && h.totalDuration(),
                        (n = h._start) > d && l._sort && h._ts && !l._lock ? (l._lock = 1,
                        ae(l, h, n - h._delay, 1)._lock = 0) : d = n,
                        n < 0 && h._ts && (o -= n,
                        (!r && !l._dp || r && r.smoothChildTiming) && (l._start += n / l._ts,
                        l._time -= n,
                        l._tTime -= n),
                        l.shiftChildren(-n, !1, -Infinity),
                        d = 0),
                        h._end > o && h._ts && (o = h._end),
                        h = e;
                    he(l, l === c && l._time > o ? l._time : o, 1, 1),
                    l._dirty = 0
                }
                return l._tDur
            }
            ,
            e.updateRoot = function(time) {
                if (c._ts && (Bt(c, ee(time, c)),
                v = Ve.frame),
                Ve.frame >= Lt) {
                    Lt += G.autoSleep || 120;
                    var t = c._first;
                    if ((!t || !t._ts) && G.autoSleep && Ve._listeners.length < 2) {
                        for (; t && !t._ts; )
                            t = t._next;
                        t || Ve.sleep()
                    }
                }
            }
            ,
            e
        }(rn);
        kt(an.prototype, {
            _lock: 0,
            _hasPause: 0,
            _forcing: 0
        });
        var sn, on = function(t, e, n, r, o, l, c) {
            var h, d, f, m, v, _, x, a, y = new Ln(this._pt,t,e,0,1,bn,null,o), M = 0, w = 0;
            for (y.b = n,
            y.e = r,
            n += "",
            (x = ~(r += "").indexOf("random(")) && (r = Le(r)),
            l && (l(a = [n, r], t, e),
            n = a[0],
            r = a[1]),
            d = n.match(ut) || []; h = ut.exec(r); )
                m = h[0],
                v = r.substring(M, h.index),
                f ? f = (f + 1) % 5 : "rgba(" === v.substr(-5) && (f = 1),
                m !== d[w++] && (_ = parseFloat(d[w - 1]) || 0,
                y._pt = {
                    _next: y._pt,
                    p: v || 1 === w ? v : ",",
                    s: _,
                    c: "=" === m.charAt(1) ? parseFloat(m.substr(2)) * ("-" === m.charAt(0) ? -1 : 1) : parseFloat(m) - _,
                    m: f && f < 4 ? Math.round : 0
                },
                M = ut.lastIndex);
            return y.c = M < r.length ? r.substring(M, r.length) : "",
            y.fp = c,
            (pt.test(r) || x) && (y.e = 0),
            this._pt = y,
            y
        }, ln = function(t, e, n, r, o, l, c, h, d) {
            Q(r) && (r = r(o || 0, t, l));
            var f, m = t[e], v = "get" !== n ? n : Q(m) ? d ? t[e.indexOf("set") || !Q(t["get" + e.substr(3)]) ? e : "get" + e.substr(3)](d) : t[e]() : m, _ = Q(m) ? d ? vn : gn : mn;
            if (K(r) && (~r.indexOf("random(") && (r = Le(r)),
            "=" === r.charAt(1) && ((f = parseFloat(v) + parseFloat(r.substr(2)) * ("-" === r.charAt(0) ? -1 : 1) + (ve(v) || 0)) || 0 === f) && (r = f)),
            v !== r)
                return isNaN(v * r) || "" === r ? (!m && !(e in t) && xt(e, r),
                on.call(this, t, e, v, r, _, h || G.stringFilter, d)) : (f = new Ln(this._pt,t,e,+v || 0,r - (v || 0),"boolean" == typeof m ? Mn : yn,0,_),
                d && (f.fp = d),
                c && f.modifier(c, this, t),
                this._pt = f)
        }, cn = function(t, e, n, r, o, l) {
            var c, h, d, i;
            if (Et[t] && !1 !== (c = new Et[t]).init(o, c.rawVars ? e[t] : function(t, e, n, r, o) {
                if (Q(t) && (t = un(t, o, e, n, r)),
                !et(t) || t.style && t.nodeType || ot(t) || st(t))
                    return K(t) ? un(t, o, e, n, r) : t;
                var p, l = {};
                for (p in t)
                    l[p] = un(t[p], o, e, n, r);
                return l
            }(e[t], r, o, l, n), n, r, l) && (n._pt = h = new Ln(n._pt,o,t,0,1,c.render,c,0,c.priority),
            n !== _))
                for (d = n._ptLookup[n._targets.indexOf(o)],
                i = c._props.length; i--; )
                    d[c._props[i]] = h;
            return c
        }, hn = function t(e, time) {
            var n, i, p, r, o, h, d, f, m, v, _, x, y, M = e.vars, w = M.ease, S = M.startAt, T = M.immediateRender, E = M.lazy, A = M.onUpdate, L = M.onUpdateParams, R = M.callbackScope, C = M.runBackwards, P = M.yoyoEase, D = M.keyframes, N = M.autoRevert, I = e._dur, O = e._startAt, F = e._targets, U = e.parent, z = U && "nested" === U.data ? U.parent._targets : F, B = "auto" === e._overwrite && !l, G = e.timeline;
            if (G && (!D || !w) && (w = "none"),
            e._ease = Ke(w, H.ease),
            e._yEase = P ? Ze(Ke(!0 === P ? w : P, H.ease)) : 0,
            P && e._yoyo && !e._repeat && (P = e._yEase,
            e._yEase = e._ease,
            e._ease = P),
            e._from = !G && !!M.runBackwards,
            !G) {
                if (x = (f = F[0] ? Dt(F[0]).harness : 0) && M[f.prop],
                n = Xt(M, wt),
                O && O.render(-1, !0).kill(),
                S)
                    if (Zt(e._startAt = fn.set(F, kt({
                        data: "isStart",
                        overwrite: !1,
                        parent: U,
                        immediateRender: !0,
                        lazy: nt(E),
                        startAt: null,
                        delay: 0,
                        onUpdate: A,
                        onUpdateParams: L,
                        callbackScope: R,
                        stagger: 0
                    }, S))),
                    time < 0 && !T && !N && e._startAt.render(-1, !0),
                    T) {
                        if (time > 0 && !N && (e._startAt = 0),
                        I && time <= 0)
                            return void (time && (e._zTime = time))
                    } else
                        !1 === N && (e._startAt = 0);
                else if (C && I)
                    if (O)
                        !N && (e._startAt = 0);
                    else if (time && (T = !1),
                    p = kt({
                        overwrite: !1,
                        data: "isFromStart",
                        lazy: T && nt(E),
                        immediateRender: T,
                        stagger: 0,
                        parent: U
                    }, n),
                    x && (p[f.prop] = x),
                    Zt(e._startAt = fn.set(F, p)),
                    time < 0 && e._startAt.render(-1, !0),
                    T) {
                        if (!time)
                            return
                    } else
                        t(e._startAt, V);
                for (e._pt = 0,
                E = I && nt(E) || E && !I,
                i = 0; i < F.length; i++) {
                    if (d = (o = F[i])._gsap || Pt(F)[i]._gsap,
                    e._ptLookup[i] = v = {},
                    Tt[d.id] && St.length && zt(),
                    _ = z === F ? i : z.indexOf(o),
                    f && !1 !== (m = new f).init(o, x || n, e, _, z) && (e._pt = r = new Ln(e._pt,o,m.name,0,1,m.render,m,0,m.priority),
                    m._props.forEach((function(t) {
                        v[t] = r
                    }
                    )),
                    m.priority && (h = 1)),
                    !f || x)
                        for (p in n)
                            Et[p] && (m = cn(p, n, e, _, o, z)) ? m.priority && (h = 1) : v[p] = r = ln.call(e, o, p, "get", n[p], _, z, 0, M.stringFilter);
                    e._op && e._op[i] && e.kill(o, e._op[i]),
                    B && e._pt && (sn = e,
                    c.killTweensOf(o, v, e.globalTime(time)),
                    y = !e.parent,
                    sn = 0),
                    e._pt && E && (Tt[d.id] = 1)
                }
                h && An(e),
                e._onInit && e._onInit(e)
            }
            e._onUpdate = A,
            e._initted = (!e._op || e._pt) && !y
        }, un = function(t, e, i, n, r) {
            return Q(t) ? t.call(e, i, n, r) : K(t) && ~t.indexOf("random(") ? Le(t) : t
        }, dn = Ct + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase", pn = (dn + ",id,stagger,delay,duration,paused,scrollTrigger").split(","), fn = function(t) {
            function e(e, n, o, h) {
                var d;
                "number" == typeof n && (o.duration = n,
                n = o,
                o = null);
                var f, i, m, v, p, _, x, y, M = (d = t.call(this, h ? n : qt(n)) || this).vars, w = M.duration, S = M.delay, T = M.immediateRender, E = M.stagger, A = M.overwrite, L = M.keyframes, R = M.defaults, C = M.scrollTrigger, P = M.yoyoEase, D = n.parent || c, N = (ot(e) || st(e) ? $(e[0]) : "length"in n) ? [e] : Me(e);
                if (d._targets = N.length ? Pt(N) : yt("GSAP target " + e + " not found. https://greensock.com", !G.nullTargetWarn) || [],
                d._ptLookup = [],
                d._overwrite = A,
                L || E || at(w) || at(S)) {
                    if (n = d.vars,
                    (f = d.timeline = new an({
                        data: "nested",
                        defaults: R || {}
                    })).kill(),
                    f.parent = f._dp = r(d),
                    f._start = 0,
                    L)
                        qt(kt(f.vars.defaults, {
                            ease: "none"
                        })),
                        E ? N.forEach((function(t, i) {
                            return L.forEach((function(e, n) {
                                return f.to(t, e, n ? ">" : i * E)
                            }
                            ))
                        }
                        )) : L.forEach((function(t) {
                            return f.to(N, t, ">")
                        }
                        ));
                    else {
                        if (v = N.length,
                        x = E ? we(E) : bt,
                        et(E))
                            for (p in E)
                                ~dn.indexOf(p) && (y || (y = {}),
                                y[p] = E[p]);
                        for (i = 0; i < v; i++) {
                            for (p in m = {},
                            n)
                                pn.indexOf(p) < 0 && (m[p] = n[p]);
                            m.stagger = 0,
                            P && (m.yoyoEase = P),
                            y && Wt(m, y),
                            _ = N[i],
                            m.duration = +un(w, r(d), i, _, N),
                            m.delay = (+un(S, r(d), i, _, N) || 0) - d._delay,
                            !E && 1 === v && m.delay && (d._delay = S = m.delay,
                            d._start += S,
                            m.delay = 0),
                            f.to(_, m, x(i, _, N))
                        }
                        f.duration() ? w = S = 0 : d.timeline = 0
                    }
                    w || d.duration(w = f.duration())
                } else
                    d.timeline = 0;
                return !0 !== A || l || (sn = r(d),
                c.killTweensOf(N),
                sn = 0),
                ae(D, r(d), o),
                n.reversed && d.reverse(),
                n.paused && d.paused(!0),
                (T || !w && !L && d._start === Ft(D._time) && nt(T) && Qt(r(d)) && "nested" !== D.data) && (d._tTime = -1e-8,
                d.render(Math.max(0, -S))),
                C && se(r(d), C),
                d
            }
            o(e, t);
            var n = e.prototype;
            return n.render = function(t, e, n) {
                var time, r, o, l, c, h, d, f, m, v = this._time, _ = this._tDur, x = this._dur, y = t > _ - V && t >= 0 ? _ : t < V ? 0 : t;
                if (x) {
                    if (y !== this._tTime || !t || n || !this._initted && this._tTime || this._startAt && this._zTime < 0 != t < 0) {
                        if (time = y,
                        f = this.timeline,
                        this._repeat) {
                            if (l = x + this._rDelay,
                            this._repeat < -1 && t < 0)
                                return this.totalTime(100 * l + t, e, n);
                            if (time = Ft(y % l),
                            y === _ ? (o = this._repeat,
                            time = x) : ((o = ~~(y / l)) && o === y / l && (time = x,
                            o--),
                            time > x && (time = x)),
                            (h = this._yoyo && 1 & o) && (m = this._yEase,
                            time = x - time),
                            c = te(this._tTime, l),
                            time === v && !n && this._initted)
                                return this;
                            o !== c && (f && this._yEase && Je(f, h),
                            !this.vars.repeatRefresh || h || this._lock || (this._lock = n = 1,
                            this.render(Ft(l * o), !0).invalidate()._lock = 0))
                        }
                        if (!this._initted) {
                            if (oe(this, t < 0 ? t : time, n, e))
                                return this._tTime = 0,
                                this;
                            if (x !== this._dur)
                                return this.render(t, e, n)
                        }
                        if (this._tTime = y,
                        this._time = time,
                        !this._act && this._ts && (this._act = 1,
                        this._lazy = 0),
                        this.ratio = d = (m || this._ease)(time / x),
                        this._from && (this.ratio = d = 1 - d),
                        time && !v && !e && (Pe(this, "onStart"),
                        this._tTime !== y))
                            return this;
                        for (r = this._pt; r; )
                            r.r(d, r.d),
                            r = r._next;
                        f && f.render(t < 0 ? t : !time && h ? -1e-8 : f._dur * d, e, n) || this._startAt && (this._zTime = t),
                        this._onUpdate && !e && (t < 0 && this._startAt && this._startAt.render(t, !0, n),
                        Pe(this, "onUpdate")),
                        this._repeat && o !== c && this.vars.onRepeat && !e && this.parent && Pe(this, "onRepeat"),
                        y !== this._tDur && y || this._tTime !== y || (t < 0 && this._startAt && !this._onUpdate && this._startAt.render(t, !0, !0),
                        (t || !x) && (y === this._tDur && this._ts > 0 || !y && this._ts < 0) && Zt(this, 1),
                        e || t < 0 && !v || !y && !v || (Pe(this, y === _ ? "onComplete" : "onReverseComplete", !0),
                        this._prom && !(y < _ && this.timeScale() > 0) && this._prom()))
                    }
                } else
                    !function(t, e, n, r) {
                        var o, l, c, h = t.ratio, d = e < 0 || !e && (!t._start && le(t) && (t._initted || !ce(t)) || (t._ts < 0 || t._dp._ts < 0) && !ce(t)) ? 0 : 1, f = t._rDelay, m = 0;
                        if (f && t._repeat && (m = ge(0, t._tDur, e),
                        l = te(m, f),
                        c = te(t._tTime, f),
                        t._yoyo && 1 & l && (d = 1 - d),
                        l !== c && (h = 1 - d,
                        t.vars.repeatRefresh && t._initted && t.invalidate())),
                        d !== h || r || t._zTime === V || !e && t._zTime) {
                            if (!t._initted && oe(t, e, r, n))
                                return;
                            for (c = t._zTime,
                            t._zTime = e || (n ? V : 0),
                            n || (n = e && !c),
                            t.ratio = d,
                            t._from && (d = 1 - d),
                            t._time = 0,
                            t._tTime = m,
                            o = t._pt; o; )
                                o.r(d, o.d),
                                o = o._next;
                            t._startAt && e < 0 && t._startAt.render(e, !0, !0),
                            t._onUpdate && !n && Pe(t, "onUpdate"),
                            m && t._repeat && !n && t.parent && Pe(t, "onRepeat"),
                            (e >= t._tDur || e < 0) && t.ratio === d && (d && Zt(t, 1),
                            n || (Pe(t, d ? "onComplete" : "onReverseComplete", !0),
                            t._prom && t._prom()))
                        } else
                            t._zTime || (t._zTime = e)
                    }(this, t, e, n);
                return this
            }
            ,
            n.targets = function() {
                return this._targets
            }
            ,
            n.invalidate = function() {
                return this._pt = this._op = this._startAt = this._onUpdate = this._lazy = this.ratio = 0,
                this._ptLookup = [],
                this.timeline && this.timeline.invalidate(),
                t.prototype.invalidate.call(this)
            }
            ,
            n.kill = function(t, e) {
                if (void 0 === e && (e = "all"),
                !(t || e && "all" !== e))
                    return this._lazy = this._pt = 0,
                    this.parent ? De(this) : this;
                if (this.timeline) {
                    var n = this.timeline.totalDuration();
                    return this.timeline.killTweensOf(t, e, sn && !0 !== sn.vars.overwrite)._first || De(this),
                    this.parent && n !== this.timeline.totalDuration() && he(this, this._dur * this.timeline._tDur / n, 0, 1),
                    this
                }
                var r, o, l, c, p, h, i, d = this._targets, f = t ? Me(t) : d, m = this._ptLookup, v = this._pt;
                if ((!e || "all" === e) && function(t, e) {
                    for (var i = t.length, n = i === e.length; n && i-- && t[i] === e[i]; )
                        ;
                    return i < 0
                }(d, f))
                    return "all" === e && (this._pt = 0),
                    De(this);
                for (r = this._op = this._op || [],
                "all" !== e && (K(e) && (p = {},
                It(e, (function(t) {
                    return p[t] = 1
                }
                )),
                e = p),
                e = function(t, e) {
                    var n, p, i, r, o = t[0] ? Dt(t[0]).harness : 0, l = o && o.aliases;
                    if (!l)
                        return e;
                    for (p in n = Wt({}, e),
                    l)
                        if (p in n)
                            for (i = (r = l[p].split(",")).length; i--; )
                                n[r[i]] = n[p];
                    return n
                }(d, e)),
                i = d.length; i--; )
                    if (~f.indexOf(d[i]))
                        for (p in o = m[i],
                        "all" === e ? (r[i] = e,
                        c = o,
                        l = {}) : (l = r[i] = r[i] || {},
                        c = e),
                        c)
                            (h = o && o[p]) && ("kill"in h.d && !0 !== h.d.kill(p) || Yt(this, h, "_pt"),
                            delete o[p]),
                            "all" !== l && (l[p] = 1);
                return this._initted && !this._pt && v && De(this),
                this
            }
            ,
            e.to = function(t, n) {
                return new e(t,n,arguments[2])
            }
            ,
            e.from = function(t, e) {
                return fe(1, arguments)
            }
            ,
            e.delayedCall = function(t, n, r, o) {
                return new e(n,0,{
                    immediateRender: !1,
                    lazy: !1,
                    overwrite: !1,
                    delay: t,
                    onComplete: n,
                    onReverseComplete: n,
                    onCompleteParams: r,
                    onReverseCompleteParams: r,
                    callbackScope: o
                })
            }
            ,
            e.fromTo = function(t, e, n) {
                return fe(2, arguments)
            }
            ,
            e.set = function(t, n) {
                return n.duration = 0,
                n.repeatDelay || (n.repeat = 0),
                new e(t,n)
            }
            ,
            e.killTweensOf = function(t, e, n) {
                return c.killTweensOf(t, e, n)
            }
            ,
            e
        }(rn);
        kt(fn.prototype, {
            _targets: [],
            _lazy: 0,
            _startAt: 0,
            _op: 0,
            _onInit: 0
        }),
        It("staggerTo,staggerFrom,staggerFromTo", (function(t) {
            fn[t] = function() {
                var e = new an
                  , n = _e.call(arguments, 0);
                return n.splice("staggerFromTo" === t ? 5 : 4, 0, 0),
                e[t].apply(e, n)
            }
        }
        ));
        var mn = function(t, e, n) {
            return t[e] = n
        }
          , gn = function(t, e, n) {
            return t[e](n)
        }
          , vn = function(t, e, n, data) {
            return t[e](data.fp, n)
        }
          , _n = function(t, e, n) {
            return t.setAttribute(e, n)
        }
          , xn = function(t, e) {
            return Q(t[e]) ? gn : tt(t[e]) && t.setAttribute ? _n : mn
        }
          , yn = function(t, data) {
            return data.set(data.t, data.p, Math.round(1e6 * (data.s + data.c * t)) / 1e6, data)
        }
          , Mn = function(t, data) {
            return data.set(data.t, data.p, !!(data.s + data.c * t), data)
        }
          , bn = function(t, data) {
            var e = data._pt
              , s = "";
            if (!t && data.b)
                s = data.b;
            else if (1 === t && data.e)
                s = data.e;
            else {
                for (; e; )
                    s = e.p + (e.m ? e.m(e.s + e.c * t) : Math.round(1e4 * (e.s + e.c * t)) / 1e4) + s,
                    e = e._next;
                s += data.c
            }
            data.set(data.t, data.p, s, data)
        }
          , wn = function(t, data) {
            for (var e = data._pt; e; )
                e.r(t, e.d),
                e = e._next
        }
          , Sn = function(t, e, n, r) {
            for (var o, l = this._pt; l; )
                o = l._next,
                l.p === r && l.modifier(t, e, n),
                l = o
        }
          , Tn = function(t) {
            for (var e, n, r = this._pt; r; )
                n = r._next,
                r.p === t && !r.op || r.op === t ? Yt(this, r, "_pt") : r.dep || (e = 1),
                r = n;
            return !e
        }
          , En = function(t, e, n, data) {
            data.mSet(t, e, data.m.call(data.tween, n, data.mt), data)
        }
          , An = function(t) {
            for (var e, n, r, o, l = t._pt; l; ) {
                for (e = l._next,
                n = r; n && n.pr > l.pr; )
                    n = n._next;
                (l._prev = n ? n._prev : o) ? l._prev._next = l : r = l,
                (l._next = n) ? n._prev = l : o = l,
                l = e
            }
            t._pt = r
        }
          , Ln = function() {
            function t(t, e, n, r, o, l, data, c, h) {
                this.t = e,
                this.s = r,
                this.c = o,
                this.p = n,
                this.r = l || yn,
                this.d = data || this,
                this.set = c || mn,
                this.pr = h || 0,
                this._next = t,
                t && (t._prev = this)
            }
            return t.prototype.modifier = function(t, e, n) {
                this.mSet = this.mSet || this.set,
                this.set = En,
                this.m = t,
                this.mt = n,
                this.tween = e
            }
            ,
            t
        }();
        It(Ct + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", (function(t) {
            return wt[t] = 1
        }
        )),
        gt.TweenMax = gt.TweenLite = fn,
        gt.TimelineLite = gt.TimelineMax = an,
        c = new an({
            sortChildren: !1,
            defaults: H,
            autoRemoveChildren: !0,
            id: "root",
            smoothChildTiming: !0
        }),
        G.stringFilter = ke;
        var Rn = {
            registerPlugin: function() {
                for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++)
                    e[n] = arguments[n];
                e.forEach((function(t) {
                    return Ne(t)
                }
                ))
            },
            timeline: function(t) {
                return new an(t)
            },
            getTweensOf: function(t, e) {
                return c.getTweensOf(t, e)
            },
            getProperty: function(t, e, n, r) {
                K(t) && (t = Me(t)[0]);
                var o = Dt(t || {}).get
                  , l = n ? Ht : Gt;
                return "native" === n && (n = ""),
                t ? e ? l((Et[e] && Et[e].get || o)(t, e, n, r)) : function(e, n, r) {
                    return l((Et[e] && Et[e].get || o)(t, e, n, r))
                }
                : t
            },
            quickSetter: function(t, e, n) {
                if ((t = Me(t)).length > 1) {
                    var r = t.map((function(t) {
                        return Dn.quickSetter(t, e, n)
                    }
                    ))
                      , o = r.length;
                    return function(t) {
                        for (var i = o; i--; )
                            r[i](t)
                    }
                }
                t = t[0] || {};
                var l = Et[e]
                  , c = Dt(t)
                  , p = c.harness && (c.harness.aliases || {})[e] || e
                  , h = l ? function(e) {
                    var p = new l;
                    _._pt = 0,
                    p.init(t, n ? e + n : e, _, 0, [t]),
                    p.render(1, p),
                    _._pt && wn(1, _)
                }
                : c.set(t, p);
                return l ? h : function(e) {
                    return h(t, p, n ? e + n : e, c, 1)
                }
            },
            isTweening: function(t) {
                return c.getTweensOf(t, !0).length > 0
            },
            defaults: function(t) {
                return t && t.ease && (t.ease = Ke(t.ease, H.ease)),
                jt(H, t || {})
            },
            config: function(t) {
                return jt(G, t || {})
            },
            registerEffect: function(t) {
                var e = t.name
                  , n = t.effect
                  , r = t.plugins
                  , o = t.defaults
                  , l = t.extendTimeline;
                (r || "").split(",").forEach((function(t) {
                    return t && !Et[t] && !gt[t] && yt(e + " effect requires " + t + " plugin.")
                }
                )),
                At[e] = function(t, e, r) {
                    return n(Me(t), kt(e || {}, o), r)
                }
                ,
                l && (an.prototype[e] = function(t, n, r) {
                    return this.add(At[e](t, et(n) ? n : (r = n) && {}, this), r)
                }
                )
            },
            registerEase: function(t, e) {
                je[t] = Ke(e)
            },
            parseEase: function(t, e) {
                return arguments.length ? Ke(t, e) : je
            },
            getById: function(t) {
                return c.getById(t)
            },
            exportRoot: function(t, e) {
                void 0 === t && (t = {});
                var n, r, o = new an(t);
                for (o.smoothChildTiming = nt(t.smoothChildTiming),
                c.remove(o),
                o._dp = 0,
                o._time = o._tTime = c._time,
                n = c._first; n; )
                    r = n._next,
                    !e && !n._dur && n instanceof fn && n.vars.onComplete === n._targets[0] || ae(o, n, n._start - n._delay),
                    n = r;
                return ae(c, o, 0),
                o
            },
            utils: {
                wrap: function t(e, n, r) {
                    var o = n - e;
                    return ot(e) ? Ae(e, t(0, e.length), n) : me(r, (function(t) {
                        return (o + (t - e) % o) % o + e
                    }
                    ))
                },
                wrapYoyo: function t(e, n, r) {
                    var o = n - e
                      , l = 2 * o;
                    return ot(e) ? Ae(e, t(0, e.length - 1), n) : me(r, (function(t) {
                        return e + ((t = (l + (t - e) % l) % l || 0) > o ? l - t : t)
                    }
                    ))
                },
                distribute: we,
                random: Ee,
                snap: Te,
                normalize: function(t, e, n) {
                    return Re(t, e, 0, 1, n)
                },
                getUnit: ve,
                clamp: function(t, e, n) {
                    return me(n, (function(n) {
                        return ge(t, e, n)
                    }
                    ))
                },
                splitColor: Ue,
                toArray: Me,
                selector: function(t) {
                    return t = Me(t)[0] || yt("Invalid scope") || {},
                    function(e) {
                        var n = t.current || t.nativeElement || t;
                        return Me(e, n.querySelectorAll ? n : n === t ? yt("Invalid scope") || f.createElement("div") : t)
                    }
                },
                mapRange: Re,
                pipe: function() {
                    for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++)
                        e[n] = arguments[n];
                    return function(t) {
                        return e.reduce((function(t, e) {
                            return e(t)
                        }
                        ), t)
                    }
                },
                unitize: function(t, e) {
                    return function(n) {
                        return t(parseFloat(n)) + (e || ve(n))
                    }
                },
                interpolate: function t(e, n, progress, r) {
                    var o = isNaN(e + n) ? 0 : function(p) {
                        return (1 - p) * e + p * n
                    }
                    ;
                    if (!o) {
                        var p, i, l, c, h, d = K(e), f = {};
                        if (!0 === progress && (r = 1) && (progress = null),
                        d)
                            e = {
                                p: e
                            },
                            n = {
                                p: n
                            };
                        else if (ot(e) && !ot(n)) {
                            for (l = [],
                            c = e.length,
                            h = c - 2,
                            i = 1; i < c; i++)
                                l.push(t(e[i - 1], e[i]));
                            c--,
                            o = function(p) {
                                p *= c;
                                var i = Math.min(h, ~~p);
                                return l[i](p - i)
                            }
                            ,
                            progress = n
                        } else
                            r || (e = Wt(ot(e) ? [] : {}, e));
                        if (!l) {
                            for (p in n)
                                ln.call(f, e, p, "get", n[p]);
                            o = function(p) {
                                return wn(p, f) || (d ? e.p : e)
                            }
                        }
                    }
                    return me(progress, o)
                },
                shuffle: be
            },
            install: _t,
            effects: At,
            ticker: Ve,
            updateRoot: an.updateRoot,
            plugins: Et,
            globalTimeline: c,
            core: {
                PropTween: Ln,
                globals: Mt,
                Tween: fn,
                Timeline: an,
                Animation: rn,
                getCache: Dt,
                _removeLinkedListItem: Yt,
                suppressOverwrites: function(t) {
                    return l = t
                }
            }
        };
        It("to,from,fromTo,delayedCall,set,killTweensOf", (function(t) {
            return Rn[t] = fn[t]
        }
        )),
        Ve.add(an.updateRoot),
        _ = Rn.to({}, {
            duration: 0
        });
        var Cn = function(t, e) {
            for (var n = t._pt; n && n.p !== e && n.op !== e && n.fp !== e; )
                n = n._next;
            return n
        }
          , Pn = function(t, e) {
            return {
                name: t,
                rawVars: 1,
                init: function(t, n, r) {
                    r._onInit = function(t) {
                        var r, p;
                        if (K(n) && (r = {},
                        It(n, (function(t) {
                            return r[t] = 1
                        }
                        )),
                        n = r),
                        e) {
                            for (p in r = {},
                            n)
                                r[p] = e(n[p]);
                            n = r
                        }
                        !function(t, e) {
                            var p, i, n, r = t._targets;
                            for (p in e)
                                for (i = r.length; i--; )
                                    (n = t._ptLookup[i][p]) && (n = n.d) && (n._pt && (n = Cn(n, p)),
                                    n && n.modifier && n.modifier(e[p], t, r[i], p))
                        }(t, n)
                    }
                }
            }
        }
          , Dn = Rn.registerPlugin({
            name: "attr",
            init: function(t, e, n, r, o) {
                var p, l;
                for (p in e)
                    (l = this.add(t, "setAttribute", (t.getAttribute(p) || 0) + "", e[p], r, o, 0, 0, p)) && (l.op = p),
                    this._props.push(p)
            }
        }, {
            name: "endArray",
            init: function(t, e) {
                for (var i = e.length; i--; )
                    this.add(t, i, t[i] || 0, e[i])
            }
        }, Pn("roundProps", Se), Pn("modifiers"), Pn("snap", Te)) || Rn;
        fn.version = an.version = Dn.version = "3.8.0",
        m = 1,
        it() && We();
        je.Power0,
        je.Power1,
        je.Power2,
        je.Power3,
        je.Power4,
        je.Linear,
        je.Quad,
        je.Cubic;
        var Nn = je.Quart;
        je.Quint,
        je.Strong,
        je.Elastic,
        je.Back,
        je.SteppedEase,
        je.Bounce,
        je.Sine,
        je.Expo,
        je.Circ
    },
    248: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return r
        }
        )),
        n.d(e, "b", (function() {
            return o
        }
        )),
        n.d(e, "f", (function() {
            return h
        }
        )),
        n.d(e, "c", (function() {
            return d
        }
        )),
        n.d(e, "d", (function() {
            return f
        }
        )),
        n.d(e, "h", (function() {
            return m
        }
        )),
        n.d(e, "g", (function() {
            return v
        }
        )),
        n.d(e, "e", (function() {
            return _
        }
        ));
        const r = Math.PI / 180
          , o = 180 / Math.PI
          , l = [];
        for (let i = 0; i < 256; i++)
            l[i] = (i < 16 ? "0" : "") + i.toString(16);
        const c = "undefined" != typeof crypto && "randomUUID"in crypto;
        function h() {
            if (c)
                return crypto.randomUUID().toUpperCase();
            const t = 4294967295 * Math.random() | 0
              , e = 4294967295 * Math.random() | 0
              , n = 4294967295 * Math.random() | 0
              , r = 4294967295 * Math.random() | 0;
            return (l[255 & t] + l[t >> 8 & 255] + l[t >> 16 & 255] + l[t >> 24 & 255] + "-" + l[255 & e] + l[e >> 8 & 255] + "-" + l[e >> 16 & 15 | 64] + l[e >> 24 & 255] + "-" + l[63 & n | 128] + l[n >> 8 & 255] + "-" + l[n >> 16 & 255] + l[n >> 24 & 255] + l[255 & r] + l[r >> 8 & 255] + l[r >> 16 & 255] + l[r >> 24 & 255]).toUpperCase()
        }
        function d(t, e, n) {
            return Math.max(e, Math.min(n, t))
        }
        function f(t, e) {
            return (t % e + e) % e
        }
        function m(t, e, n) {
            return (1 - n) * t + n * e
        }
        function v(t) {
            return 0 == (t & t - 1) && 0 !== t
        }
        function _(t) {
            return Math.pow(2, Math.floor(Math.log(t) / Math.LN2))
        }
    },
    249: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return r
        }
        ));
        class r {
            constructor(t=0, e=0) {
                this.x = t,
                this.y = e
            }
            get width() {
                return this.x
            }
            set width(t) {
                this.x = t
            }
            get height() {
                return this.y
            }
            set height(t) {
                this.y = t
            }
            set(t, e) {
                return this.x = t,
                this.y = e,
                this
            }
            setScalar(t) {
                return this.x = t,
                this.y = t,
                this
            }
            setX(t) {
                return this.x = t,
                this
            }
            setY(t) {
                return this.y = t,
                this
            }
            setComponent(t, e) {
                switch (t) {
                case 0:
                    this.x = e;
                    break;
                case 1:
                    this.y = e;
                    break;
                default:
                    throw new Error("index is out of range: " + t)
                }
                return this
            }
            getComponent(t) {
                switch (t) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                default:
                    throw new Error("index is out of range: " + t)
                }
            }
            clone() {
                return new this.constructor(this.x,this.y)
            }
            copy(t) {
                return this.x = t.x,
                this.y = t.y,
                this
            }
            add(t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
                this.addVectors(t, e)) : (this.x += t.x,
                this.y += t.y,
                this)
            }
            addScalar(s) {
                return this.x += s,
                this.y += s,
                this
            }
            addVectors(a, b) {
                return this.x = a.x + b.x,
                this.y = a.y + b.y,
                this
            }
            addScaledVector(t, s) {
                return this.x += t.x * s,
                this.y += t.y * s,
                this
            }
            sub(t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
                this.subVectors(t, e)) : (this.x -= t.x,
                this.y -= t.y,
                this)
            }
            subScalar(s) {
                return this.x -= s,
                this.y -= s,
                this
            }
            subVectors(a, b) {
                return this.x = a.x - b.x,
                this.y = a.y - b.y,
                this
            }
            multiply(t) {
                return this.x *= t.x,
                this.y *= t.y,
                this
            }
            multiplyScalar(t) {
                return this.x *= t,
                this.y *= t,
                this
            }
            divide(t) {
                return this.x /= t.x,
                this.y /= t.y,
                this
            }
            divideScalar(t) {
                return this.multiplyScalar(1 / t)
            }
            applyMatrix3(t) {
                const e = this.x
                  , n = this.y
                  , r = t.elements;
                return this.x = r[0] * e + r[3] * n + r[6],
                this.y = r[1] * e + r[4] * n + r[7],
                this
            }
            min(t) {
                return this.x = Math.min(this.x, t.x),
                this.y = Math.min(this.y, t.y),
                this
            }
            max(t) {
                return this.x = Math.max(this.x, t.x),
                this.y = Math.max(this.y, t.y),
                this
            }
            clamp(t, e) {
                return this.x = Math.max(t.x, Math.min(e.x, this.x)),
                this.y = Math.max(t.y, Math.min(e.y, this.y)),
                this
            }
            clampScalar(t, e) {
                return this.x = Math.max(t, Math.min(e, this.x)),
                this.y = Math.max(t, Math.min(e, this.y)),
                this
            }
            clampLength(t, e) {
                const n = this.length();
                return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)))
            }
            floor() {
                return this.x = Math.floor(this.x),
                this.y = Math.floor(this.y),
                this
            }
            ceil() {
                return this.x = Math.ceil(this.x),
                this.y = Math.ceil(this.y),
                this
            }
            round() {
                return this.x = Math.round(this.x),
                this.y = Math.round(this.y),
                this
            }
            roundToZero() {
                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
                this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
                this
            }
            negate() {
                return this.x = -this.x,
                this.y = -this.y,
                this
            }
            dot(t) {
                return this.x * t.x + this.y * t.y
            }
            cross(t) {
                return this.x * t.y - this.y * t.x
            }
            lengthSq() {
                return this.x * this.x + this.y * this.y
            }
            length() {
                return Math.sqrt(this.x * this.x + this.y * this.y)
            }
            manhattanLength() {
                return Math.abs(this.x) + Math.abs(this.y)
            }
            normalize() {
                return this.divideScalar(this.length() || 1)
            }
            angle() {
                return Math.atan2(-this.y, -this.x) + Math.PI
            }
            distanceTo(t) {
                return Math.sqrt(this.distanceToSquared(t))
            }
            distanceToSquared(t) {
                const e = this.x - t.x
                  , n = this.y - t.y;
                return e * e + n * n
            }
            manhattanDistanceTo(t) {
                return Math.abs(this.x - t.x) + Math.abs(this.y - t.y)
            }
            setLength(t) {
                return this.normalize().multiplyScalar(t)
            }
            lerp(t, e) {
                return this.x += (t.x - this.x) * e,
                this.y += (t.y - this.y) * e,
                this
            }
            lerpVectors(t, e, n) {
                return this.x = t.x + (e.x - t.x) * n,
                this.y = t.y + (e.y - t.y) * n,
                this
            }
            equals(t) {
                return t.x === this.x && t.y === this.y
            }
            fromArray(t, e=0) {
                return this.x = t[e],
                this.y = t[e + 1],
                this
            }
            toArray(t=[], e=0) {
                return t[e] = this.x,
                t[e + 1] = this.y,
                t
            }
            fromBufferAttribute(t, e, n) {
                return void 0 !== n && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),
                this.x = t.getX(e),
                this.y = t.getY(e),
                this
            }
            rotateAround(t, e) {
                const n = Math.cos(e)
                  , s = Math.sin(e)
                  , r = this.x - t.x
                  , o = this.y - t.y;
                return this.x = r * n - o * s + t.x,
                this.y = r * s + o * n + t.y,
                this
            }
            random() {
                return this.x = Math.random(),
                this.y = Math.random(),
                this
            }
            *[Symbol.iterator]() {
                yield this.x,
                yield this.y
            }
        }
        r.prototype.isVector2 = !0
    },
    256: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return m
        }
        ));
        var r = n(248);
        const o = {
            aliceblue: 15792383,
            antiquewhite: 16444375,
            aqua: 65535,
            aquamarine: 8388564,
            azure: 15794175,
            beige: 16119260,
            bisque: 16770244,
            black: 0,
            blanchedalmond: 16772045,
            blue: 255,
            blueviolet: 9055202,
            brown: 10824234,
            burlywood: 14596231,
            cadetblue: 6266528,
            chartreuse: 8388352,
            chocolate: 13789470,
            coral: 16744272,
            cornflowerblue: 6591981,
            cornsilk: 16775388,
            crimson: 14423100,
            cyan: 65535,
            darkblue: 139,
            darkcyan: 35723,
            darkgoldenrod: 12092939,
            darkgray: 11119017,
            darkgreen: 25600,
            darkgrey: 11119017,
            darkkhaki: 12433259,
            darkmagenta: 9109643,
            darkolivegreen: 5597999,
            darkorange: 16747520,
            darkorchid: 10040012,
            darkred: 9109504,
            darksalmon: 15308410,
            darkseagreen: 9419919,
            darkslateblue: 4734347,
            darkslategray: 3100495,
            darkslategrey: 3100495,
            darkturquoise: 52945,
            darkviolet: 9699539,
            deeppink: 16716947,
            deepskyblue: 49151,
            dimgray: 6908265,
            dimgrey: 6908265,
            dodgerblue: 2003199,
            firebrick: 11674146,
            floralwhite: 16775920,
            forestgreen: 2263842,
            fuchsia: 16711935,
            gainsboro: 14474460,
            ghostwhite: 16316671,
            gold: 16766720,
            goldenrod: 14329120,
            gray: 8421504,
            green: 32768,
            greenyellow: 11403055,
            grey: 8421504,
            honeydew: 15794160,
            hotpink: 16738740,
            indianred: 13458524,
            indigo: 4915330,
            ivory: 16777200,
            khaki: 15787660,
            lavender: 15132410,
            lavenderblush: 16773365,
            lawngreen: 8190976,
            lemonchiffon: 16775885,
            lightblue: 11393254,
            lightcoral: 15761536,
            lightcyan: 14745599,
            lightgoldenrodyellow: 16448210,
            lightgray: 13882323,
            lightgreen: 9498256,
            lightgrey: 13882323,
            lightpink: 16758465,
            lightsalmon: 16752762,
            lightseagreen: 2142890,
            lightskyblue: 8900346,
            lightslategray: 7833753,
            lightslategrey: 7833753,
            lightsteelblue: 11584734,
            lightyellow: 16777184,
            lime: 65280,
            limegreen: 3329330,
            linen: 16445670,
            magenta: 16711935,
            maroon: 8388608,
            mediumaquamarine: 6737322,
            mediumblue: 205,
            mediumorchid: 12211667,
            mediumpurple: 9662683,
            mediumseagreen: 3978097,
            mediumslateblue: 8087790,
            mediumspringgreen: 64154,
            mediumturquoise: 4772300,
            mediumvioletred: 13047173,
            midnightblue: 1644912,
            mintcream: 16121850,
            mistyrose: 16770273,
            moccasin: 16770229,
            navajowhite: 16768685,
            navy: 128,
            oldlace: 16643558,
            olive: 8421376,
            olivedrab: 7048739,
            orange: 16753920,
            orangered: 16729344,
            orchid: 14315734,
            palegoldenrod: 15657130,
            palegreen: 10025880,
            paleturquoise: 11529966,
            palevioletred: 14381203,
            papayawhip: 16773077,
            peachpuff: 16767673,
            peru: 13468991,
            pink: 16761035,
            plum: 14524637,
            powderblue: 11591910,
            purple: 8388736,
            rebeccapurple: 6697881,
            red: 16711680,
            rosybrown: 12357519,
            royalblue: 4286945,
            saddlebrown: 9127187,
            salmon: 16416882,
            sandybrown: 16032864,
            seagreen: 3050327,
            seashell: 16774638,
            sienna: 10506797,
            silver: 12632256,
            skyblue: 8900331,
            slateblue: 6970061,
            slategray: 7372944,
            slategrey: 7372944,
            snow: 16775930,
            springgreen: 65407,
            steelblue: 4620980,
            tan: 13808780,
            teal: 32896,
            thistle: 14204888,
            tomato: 16737095,
            turquoise: 4251856,
            violet: 15631086,
            wheat: 16113331,
            white: 16777215,
            whitesmoke: 16119285,
            yellow: 16776960,
            yellowgreen: 10145074
        }
          , l = {
            h: 0,
            s: 0,
            l: 0
        }
          , c = {
            h: 0,
            s: 0,
            l: 0
        };
        function h(p, q, t) {
            return t < 0 && (t += 1),
            t > 1 && (t -= 1),
            t < 1 / 6 ? p + 6 * (q - p) * t : t < .5 ? q : t < 2 / 3 ? p + 6 * (q - p) * (2 / 3 - t) : p
        }
        function d(t) {
            return t < .04045 ? .0773993808 * t : Math.pow(.9478672986 * t + .0521327014, 2.4)
        }
        function f(t) {
            return t < .0031308 ? 12.92 * t : 1.055 * Math.pow(t, .41666) - .055
        }
        class m {
            constructor(t, g, b) {
                return void 0 === g && void 0 === b ? this.set(t) : this.setRGB(t, g, b)
            }
            set(t) {
                return t && t.isColor ? this.copy(t) : "number" == typeof t ? this.setHex(t) : "string" == typeof t && this.setStyle(t),
                this
            }
            setScalar(t) {
                return this.r = t,
                this.g = t,
                this.b = t,
                this
            }
            setHex(t) {
                return t = Math.floor(t),
                this.r = (t >> 16 & 255) / 255,
                this.g = (t >> 8 & 255) / 255,
                this.b = (255 & t) / 255,
                this
            }
            setRGB(t, g, b) {
                return this.r = t,
                this.g = g,
                this.b = b,
                this
            }
            setHSL(t, s, e) {
                if (t = r.d(t, 1),
                s = r.c(s, 0, 1),
                e = r.c(e, 0, 1),
                0 === s)
                    this.r = this.g = this.b = e;
                else {
                    const p = e <= .5 ? e * (1 + s) : e + s - e * s
                      , q = 2 * e - p;
                    this.r = h(q, p, t + 1 / 3),
                    this.g = h(q, p, t),
                    this.b = h(q, p, t - 1 / 3)
                }
                return this
            }
            setStyle(style) {
                function t(t) {
                    void 0 !== t && parseFloat(t) < 1 && console.warn("THREE.Color: Alpha component of " + style + " will be ignored.")
                }
                let e;
                if (e = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(style)) {
                    let n;
                    const r = e[1]
                      , o = e[2];
                    switch (r) {
                    case "rgb":
                    case "rgba":
                        if (n = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))
                            return this.r = Math.min(255, parseInt(n[1], 10)) / 255,
                            this.g = Math.min(255, parseInt(n[2], 10)) / 255,
                            this.b = Math.min(255, parseInt(n[3], 10)) / 255,
                            t(n[4]),
                            this;
                        if (n = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))
                            return this.r = Math.min(100, parseInt(n[1], 10)) / 100,
                            this.g = Math.min(100, parseInt(n[2], 10)) / 100,
                            this.b = Math.min(100, parseInt(n[3], 10)) / 100,
                            t(n[4]),
                            this;
                        break;
                    case "hsl":
                    case "hsla":
                        if (n = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) {
                            const e = parseFloat(n[1]) / 360
                              , s = parseInt(n[2], 10) / 100
                              , r = parseInt(n[3], 10) / 100;
                            return t(n[4]),
                            this.setHSL(e, s, r)
                        }
                    }
                } else if (e = /^\#([A-Fa-f\d]+)$/.exec(style)) {
                    const t = e[1]
                      , n = t.length;
                    if (3 === n)
                        return this.r = parseInt(t.charAt(0) + t.charAt(0), 16) / 255,
                        this.g = parseInt(t.charAt(1) + t.charAt(1), 16) / 255,
                        this.b = parseInt(t.charAt(2) + t.charAt(2), 16) / 255,
                        this;
                    if (6 === n)
                        return this.r = parseInt(t.charAt(0) + t.charAt(1), 16) / 255,
                        this.g = parseInt(t.charAt(2) + t.charAt(3), 16) / 255,
                        this.b = parseInt(t.charAt(4) + t.charAt(5), 16) / 255,
                        this
                }
                return style && style.length > 0 ? this.setColorName(style) : this
            }
            setColorName(style) {
                const t = o[style.toLowerCase()];
                return void 0 !== t ? this.setHex(t) : console.warn("THREE.Color: Unknown color " + style),
                this
            }
            clone() {
                return new this.constructor(this.r,this.g,this.b)
            }
            copy(t) {
                return this.r = t.r,
                this.g = t.g,
                this.b = t.b,
                this
            }
            copyGammaToLinear(t, e=2) {
                return this.r = Math.pow(t.r, e),
                this.g = Math.pow(t.g, e),
                this.b = Math.pow(t.b, e),
                this
            }
            copyLinearToGamma(t, e=2) {
                const n = e > 0 ? 1 / e : 1;
                return this.r = Math.pow(t.r, n),
                this.g = Math.pow(t.g, n),
                this.b = Math.pow(t.b, n),
                this
            }
            convertGammaToLinear(t) {
                return this.copyGammaToLinear(this, t),
                this
            }
            convertLinearToGamma(t) {
                return this.copyLinearToGamma(this, t),
                this
            }
            copySRGBToLinear(t) {
                return this.r = d(t.r),
                this.g = d(t.g),
                this.b = d(t.b),
                this
            }
            copyLinearToSRGB(t) {
                return this.r = f(t.r),
                this.g = f(t.g),
                this.b = f(t.b),
                this
            }
            convertSRGBToLinear() {
                return this.copySRGBToLinear(this),
                this
            }
            convertLinearToSRGB() {
                return this.copyLinearToSRGB(this),
                this
            }
            getHex() {
                return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0
            }
            getHexString() {
                return ("000000" + this.getHex().toString(16)).slice(-6)
            }
            getHSL(t) {
                const e = this.r
                  , g = this.g
                  , b = this.b
                  , n = Math.max(e, g, b)
                  , r = Math.min(e, g, b);
                let o, l;
                const c = (r + n) / 2;
                if (r === n)
                    o = 0,
                    l = 0;
                else {
                    const t = n - r;
                    switch (l = c <= .5 ? t / (n + r) : t / (2 - n - r),
                    n) {
                    case e:
                        o = (g - b) / t + (g < b ? 6 : 0);
                        break;
                    case g:
                        o = (b - e) / t + 2;
                        break;
                    case b:
                        o = (e - g) / t + 4
                    }
                    o /= 6
                }
                return t.h = o,
                t.s = l,
                t.l = c,
                t
            }
            getStyle() {
                return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")"
            }
            offsetHSL(t, s, e) {
                return this.getHSL(l),
                l.h += t,
                l.s += s,
                l.l += e,
                this.setHSL(l.h, l.s, l.l),
                this
            }
            add(t) {
                return this.r += t.r,
                this.g += t.g,
                this.b += t.b,
                this
            }
            addColors(t, e) {
                return this.r = t.r + e.r,
                this.g = t.g + e.g,
                this.b = t.b + e.b,
                this
            }
            addScalar(s) {
                return this.r += s,
                this.g += s,
                this.b += s,
                this
            }
            sub(t) {
                return this.r = Math.max(0, this.r - t.r),
                this.g = Math.max(0, this.g - t.g),
                this.b = Math.max(0, this.b - t.b),
                this
            }
            multiply(t) {
                return this.r *= t.r,
                this.g *= t.g,
                this.b *= t.b,
                this
            }
            multiplyScalar(s) {
                return this.r *= s,
                this.g *= s,
                this.b *= s,
                this
            }
            lerp(t, e) {
                return this.r += (t.r - this.r) * e,
                this.g += (t.g - this.g) * e,
                this.b += (t.b - this.b) * e,
                this
            }
            lerpColors(t, e, n) {
                return this.r = t.r + (e.r - t.r) * n,
                this.g = t.g + (e.g - t.g) * n,
                this.b = t.b + (e.b - t.b) * n,
                this
            }
            lerpHSL(t, e) {
                this.getHSL(l),
                t.getHSL(c);
                const n = r.h(l.h, c.h, e)
                  , s = r.h(l.s, c.s, e)
                  , o = r.h(l.l, c.l, e);
                return this.setHSL(n, s, o),
                this
            }
            equals(t) {
                return t.r === this.r && t.g === this.g && t.b === this.b
            }
            fromArray(t, e=0) {
                return this.r = t[e],
                this.g = t[e + 1],
                this.b = t[e + 2],
                this
            }
            toArray(t=[], e=0) {
                return t[e] = this.r,
                t[e + 1] = this.g,
                t[e + 2] = this.b,
                t
            }
            fromBufferAttribute(t, e) {
                return this.r = t.getX(e),
                this.g = t.getY(e),
                this.b = t.getZ(e),
                !0 === t.normalized && (this.r /= 255,
                this.g /= 255,
                this.b /= 255),
                this
            }
            toJSON() {
                return this.getHex()
            }
        }
        m.NAMES = o,
        m.prototype.isColor = !0,
        m.prototype.r = 1,
        m.prototype.g = 1,
        m.prototype.b = 1
    },
    258: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return o
        }
        ));
        var r = n(241);
        class o {
            constructor() {
                this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
                arguments.length > 0 && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")
            }
            set(t, e, n, r, o, l, c, h, d, f, m, v, _, x, y, M) {
                const w = this.elements;
                return w[0] = t,
                w[4] = e,
                w[8] = n,
                w[12] = r,
                w[1] = o,
                w[5] = l,
                w[9] = c,
                w[13] = h,
                w[2] = d,
                w[6] = f,
                w[10] = m,
                w[14] = v,
                w[3] = _,
                w[7] = x,
                w[11] = y,
                w[15] = M,
                this
            }
            identity() {
                return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                this
            }
            clone() {
                return (new o).fromArray(this.elements)
            }
            copy(t) {
                const e = this.elements
                  , n = t.elements;
                return e[0] = n[0],
                e[1] = n[1],
                e[2] = n[2],
                e[3] = n[3],
                e[4] = n[4],
                e[5] = n[5],
                e[6] = n[6],
                e[7] = n[7],
                e[8] = n[8],
                e[9] = n[9],
                e[10] = n[10],
                e[11] = n[11],
                e[12] = n[12],
                e[13] = n[13],
                e[14] = n[14],
                e[15] = n[15],
                this
            }
            copyPosition(t) {
                const e = this.elements
                  , n = t.elements;
                return e[12] = n[12],
                e[13] = n[13],
                e[14] = n[14],
                this
            }
            setFromMatrix3(t) {
                const e = t.elements;
                return this.set(e[0], e[3], e[6], 0, e[1], e[4], e[7], 0, e[2], e[5], e[8], 0, 0, 0, 0, 1),
                this
            }
            extractBasis(t, e, n) {
                return t.setFromMatrixColumn(this, 0),
                e.setFromMatrixColumn(this, 1),
                n.setFromMatrixColumn(this, 2),
                this
            }
            makeBasis(t, e, n) {
                return this.set(t.x, e.x, n.x, 0, t.y, e.y, n.y, 0, t.z, e.z, n.z, 0, 0, 0, 0, 1),
                this
            }
            extractRotation(t) {
                const e = this.elements
                  , n = t.elements
                  , r = 1 / l.setFromMatrixColumn(t, 0).length()
                  , o = 1 / l.setFromMatrixColumn(t, 1).length()
                  , c = 1 / l.setFromMatrixColumn(t, 2).length();
                return e[0] = n[0] * r,
                e[1] = n[1] * r,
                e[2] = n[2] * r,
                e[3] = 0,
                e[4] = n[4] * o,
                e[5] = n[5] * o,
                e[6] = n[6] * o,
                e[7] = 0,
                e[8] = n[8] * c,
                e[9] = n[9] * c,
                e[10] = n[10] * c,
                e[11] = 0,
                e[12] = 0,
                e[13] = 0,
                e[14] = 0,
                e[15] = 1,
                this
            }
            makeRotationFromEuler(t) {
                t && t.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
                const e = this.elements
                  , n = t.x
                  , r = t.y
                  , o = t.z
                  , a = Math.cos(n)
                  , b = Math.sin(n)
                  , l = Math.cos(r)
                  , c = Math.sin(r)
                  , h = Math.cos(o)
                  , d = Math.sin(o);
                if ("XYZ" === t.order) {
                    const t = a * h
                      , n = a * d
                      , r = b * h
                      , o = b * d;
                    e[0] = l * h,
                    e[4] = -l * d,
                    e[8] = c,
                    e[1] = n + r * c,
                    e[5] = t - o * c,
                    e[9] = -b * l,
                    e[2] = o - t * c,
                    e[6] = r + n * c,
                    e[10] = a * l
                } else if ("YXZ" === t.order) {
                    const t = l * h
                      , n = l * d
                      , r = c * h
                      , o = c * d;
                    e[0] = t + o * b,
                    e[4] = r * b - n,
                    e[8] = a * c,
                    e[1] = a * d,
                    e[5] = a * h,
                    e[9] = -b,
                    e[2] = n * b - r,
                    e[6] = o + t * b,
                    e[10] = a * l
                } else if ("ZXY" === t.order) {
                    const t = l * h
                      , n = l * d
                      , r = c * h
                      , o = c * d;
                    e[0] = t - o * b,
                    e[4] = -a * d,
                    e[8] = r + n * b,
                    e[1] = n + r * b,
                    e[5] = a * h,
                    e[9] = o - t * b,
                    e[2] = -a * c,
                    e[6] = b,
                    e[10] = a * l
                } else if ("ZYX" === t.order) {
                    const t = a * h
                      , n = a * d
                      , r = b * h
                      , o = b * d;
                    e[0] = l * h,
                    e[4] = r * c - n,
                    e[8] = t * c + o,
                    e[1] = l * d,
                    e[5] = o * c + t,
                    e[9] = n * c - r,
                    e[2] = -c,
                    e[6] = b * l,
                    e[10] = a * l
                } else if ("YZX" === t.order) {
                    const t = a * l
                      , n = a * c
                      , r = b * l
                      , o = b * c;
                    e[0] = l * h,
                    e[4] = o - t * d,
                    e[8] = r * d + n,
                    e[1] = d,
                    e[5] = a * h,
                    e[9] = -b * h,
                    e[2] = -c * h,
                    e[6] = n * d + r,
                    e[10] = t - o * d
                } else if ("XZY" === t.order) {
                    const t = a * l
                      , n = a * c
                      , r = b * l
                      , o = b * c;
                    e[0] = l * h,
                    e[4] = -d,
                    e[8] = c * h,
                    e[1] = t * d + o,
                    e[5] = a * h,
                    e[9] = n * d - r,
                    e[2] = r * d - n,
                    e[6] = b * h,
                    e[10] = o * d + t
                }
                return e[3] = 0,
                e[7] = 0,
                e[11] = 0,
                e[12] = 0,
                e[13] = 0,
                e[14] = 0,
                e[15] = 1,
                this
            }
            makeRotationFromQuaternion(q) {
                return this.compose(h, q, d)
            }
            lookAt(t, e, n) {
                const r = this.elements;
                return v.subVectors(t, e),
                0 === v.lengthSq() && (v.z = 1),
                v.normalize(),
                f.crossVectors(n, v),
                0 === f.lengthSq() && (1 === Math.abs(n.z) ? v.x += 1e-4 : v.z += 1e-4,
                v.normalize(),
                f.crossVectors(n, v)),
                f.normalize(),
                m.crossVectors(v, f),
                r[0] = f.x,
                r[4] = m.x,
                r[8] = v.x,
                r[1] = f.y,
                r[5] = m.y,
                r[9] = v.y,
                r[2] = f.z,
                r[6] = m.z,
                r[10] = v.z,
                this
            }
            multiply(t, e) {
                return void 0 !== e ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),
                this.multiplyMatrices(t, e)) : this.multiplyMatrices(this, t)
            }
            premultiply(t) {
                return this.multiplyMatrices(t, this)
            }
            multiplyMatrices(a, b) {
                const t = a.elements
                  , e = b.elements
                  , n = this.elements
                  , r = t[0]
                  , o = t[4]
                  , l = t[8]
                  , c = t[12]
                  , h = t[1]
                  , d = t[5]
                  , f = t[9]
                  , m = t[13]
                  , v = t[2]
                  , _ = t[6]
                  , x = t[10]
                  , y = t[14]
                  , M = t[3]
                  , w = t[7]
                  , S = t[11]
                  , T = t[15]
                  , E = e[0]
                  , A = e[4]
                  , L = e[8]
                  , R = e[12]
                  , C = e[1]
                  , P = e[5]
                  , D = e[9]
                  , N = e[13]
                  , I = e[2]
                  , O = e[6]
                  , F = e[10]
                  , U = e[14]
                  , z = e[3]
                  , B = e[7]
                  , G = e[11]
                  , H = e[15];
                return n[0] = r * E + o * C + l * I + c * z,
                n[4] = r * A + o * P + l * O + c * B,
                n[8] = r * L + o * D + l * F + c * G,
                n[12] = r * R + o * N + l * U + c * H,
                n[1] = h * E + d * C + f * I + m * z,
                n[5] = h * A + d * P + f * O + m * B,
                n[9] = h * L + d * D + f * F + m * G,
                n[13] = h * R + d * N + f * U + m * H,
                n[2] = v * E + _ * C + x * I + y * z,
                n[6] = v * A + _ * P + x * O + y * B,
                n[10] = v * L + _ * D + x * F + y * G,
                n[14] = v * R + _ * N + x * U + y * H,
                n[3] = M * E + w * C + S * I + T * z,
                n[7] = M * A + w * P + S * O + T * B,
                n[11] = M * L + w * D + S * F + T * G,
                n[15] = M * R + w * N + S * U + T * H,
                this
            }
            multiplyScalar(s) {
                const t = this.elements;
                return t[0] *= s,
                t[4] *= s,
                t[8] *= s,
                t[12] *= s,
                t[1] *= s,
                t[5] *= s,
                t[9] *= s,
                t[13] *= s,
                t[2] *= s,
                t[6] *= s,
                t[10] *= s,
                t[14] *= s,
                t[3] *= s,
                t[7] *= s,
                t[11] *= s,
                t[15] *= s,
                this
            }
            determinant() {
                const t = this.elements
                  , e = t[0]
                  , n = t[4]
                  , r = t[8]
                  , o = t[12]
                  , l = t[1]
                  , c = t[5]
                  , h = t[9]
                  , d = t[13]
                  , f = t[2]
                  , m = t[6]
                  , v = t[10]
                  , _ = t[14];
                return t[3] * (+o * h * m - r * d * m - o * c * v + n * d * v + r * c * _ - n * h * _) + t[7] * (+e * h * _ - e * d * v + o * l * v - r * l * _ + r * d * f - o * h * f) + t[11] * (+e * d * m - e * c * _ - o * l * m + n * l * _ + o * c * f - n * d * f) + t[15] * (-r * c * f - e * h * m + e * c * v + r * l * m - n * l * v + n * h * f)
            }
            transpose() {
                const t = this.elements;
                let e;
                return e = t[1],
                t[1] = t[4],
                t[4] = e,
                e = t[2],
                t[2] = t[8],
                t[8] = e,
                e = t[6],
                t[6] = t[9],
                t[9] = e,
                e = t[3],
                t[3] = t[12],
                t[12] = e,
                e = t[7],
                t[7] = t[13],
                t[13] = e,
                e = t[11],
                t[11] = t[14],
                t[14] = e,
                this
            }
            setPosition(t, e, n) {
                const r = this.elements;
                return t.isVector3 ? (r[12] = t.x,
                r[13] = t.y,
                r[14] = t.z) : (r[12] = t,
                r[13] = e,
                r[14] = n),
                this
            }
            invert() {
                const t = this.elements
                  , e = t[0]
                  , n = t[1]
                  , r = t[2]
                  , o = t[3]
                  , l = t[4]
                  , c = t[5]
                  , h = t[6]
                  , d = t[7]
                  , f = t[8]
                  , m = t[9]
                  , v = t[10]
                  , _ = t[11]
                  , x = t[12]
                  , y = t[13]
                  , M = t[14]
                  , w = t[15]
                  , S = m * M * d - y * v * d + y * h * _ - c * M * _ - m * h * w + c * v * w
                  , T = x * v * d - f * M * d - x * h * _ + l * M * _ + f * h * w - l * v * w
                  , E = f * y * d - x * m * d + x * c * _ - l * y * _ - f * c * w + l * m * w
                  , A = x * m * h - f * y * h - x * c * v + l * y * v + f * c * M - l * m * M
                  , L = e * S + n * T + r * E + o * A;
                if (0 === L)
                    return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                const R = 1 / L;
                return t[0] = S * R,
                t[1] = (y * v * o - m * M * o - y * r * _ + n * M * _ + m * r * w - n * v * w) * R,
                t[2] = (c * M * o - y * h * o + y * r * d - n * M * d - c * r * w + n * h * w) * R,
                t[3] = (m * h * o - c * v * o - m * r * d + n * v * d + c * r * _ - n * h * _) * R,
                t[4] = T * R,
                t[5] = (f * M * o - x * v * o + x * r * _ - e * M * _ - f * r * w + e * v * w) * R,
                t[6] = (x * h * o - l * M * o - x * r * d + e * M * d + l * r * w - e * h * w) * R,
                t[7] = (l * v * o - f * h * o + f * r * d - e * v * d - l * r * _ + e * h * _) * R,
                t[8] = E * R,
                t[9] = (x * m * o - f * y * o - x * n * _ + e * y * _ + f * n * w - e * m * w) * R,
                t[10] = (l * y * o - x * c * o + x * n * d - e * y * d - l * n * w + e * c * w) * R,
                t[11] = (f * c * o - l * m * o - f * n * d + e * m * d + l * n * _ - e * c * _) * R,
                t[12] = A * R,
                t[13] = (f * y * r - x * m * r + x * n * v - e * y * v - f * n * M + e * m * M) * R,
                t[14] = (x * c * r - l * y * r - x * n * h + e * y * h + l * n * M - e * c * M) * R,
                t[15] = (l * m * r - f * c * r + f * n * h - e * m * h - l * n * v + e * c * v) * R,
                this
            }
            scale(t) {
                const e = this.elements
                  , n = t.x
                  , r = t.y
                  , o = t.z;
                return e[0] *= n,
                e[4] *= r,
                e[8] *= o,
                e[1] *= n,
                e[5] *= r,
                e[9] *= o,
                e[2] *= n,
                e[6] *= r,
                e[10] *= o,
                e[3] *= n,
                e[7] *= r,
                e[11] *= o,
                this
            }
            getMaxScaleOnAxis() {
                const t = this.elements
                  , e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2]
                  , n = t[4] * t[4] + t[5] * t[5] + t[6] * t[6]
                  , r = t[8] * t[8] + t[9] * t[9] + t[10] * t[10];
                return Math.sqrt(Math.max(e, n, r))
            }
            makeTranslation(t, e, n) {
                return this.set(1, 0, 0, t, 0, 1, 0, e, 0, 0, 1, n, 0, 0, 0, 1),
                this
            }
            makeRotationX(t) {
                const e = Math.cos(t)
                  , s = Math.sin(t);
                return this.set(1, 0, 0, 0, 0, e, -s, 0, 0, s, e, 0, 0, 0, 0, 1),
                this
            }
            makeRotationY(t) {
                const e = Math.cos(t)
                  , s = Math.sin(t);
                return this.set(e, 0, s, 0, 0, 1, 0, 0, -s, 0, e, 0, 0, 0, 0, 1),
                this
            }
            makeRotationZ(t) {
                const e = Math.cos(t)
                  , s = Math.sin(t);
                return this.set(e, -s, 0, 0, s, e, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                this
            }
            makeRotationAxis(t, e) {
                const n = Math.cos(e)
                  , s = Math.sin(e)
                  , r = 1 - n
                  , o = t.x
                  , l = t.y
                  , c = t.z
                  , h = r * o
                  , d = r * l;
                return this.set(h * o + n, h * l - s * c, h * c + s * l, 0, h * l + s * c, d * l + n, d * c - s * o, 0, h * c - s * l, d * c + s * o, r * c * c + n, 0, 0, 0, 0, 1),
                this
            }
            makeScale(t, e, n) {
                return this.set(t, 0, 0, 0, 0, e, 0, 0, 0, 0, n, 0, 0, 0, 0, 1),
                this
            }
            makeShear(t, e, n, r, o, l) {
                return this.set(1, n, o, 0, t, 1, l, 0, e, r, 1, 0, 0, 0, 0, 1),
                this
            }
            compose(t, e, n) {
                const r = this.elements
                  , o = e._x
                  , l = e._y
                  , c = e._z
                  , h = e._w
                  , d = o + o
                  , f = l + l
                  , m = c + c
                  , v = o * d
                  , _ = o * f
                  , x = o * m
                  , y = l * f
                  , M = l * m
                  , w = c * m
                  , S = h * d
                  , T = h * f
                  , E = h * m
                  , A = n.x
                  , L = n.y
                  , R = n.z;
                return r[0] = (1 - (y + w)) * A,
                r[1] = (_ + E) * A,
                r[2] = (x - T) * A,
                r[3] = 0,
                r[4] = (_ - E) * L,
                r[5] = (1 - (v + w)) * L,
                r[6] = (M + S) * L,
                r[7] = 0,
                r[8] = (x + T) * R,
                r[9] = (M - S) * R,
                r[10] = (1 - (v + y)) * R,
                r[11] = 0,
                r[12] = t.x,
                r[13] = t.y,
                r[14] = t.z,
                r[15] = 1,
                this
            }
            decompose(t, e, n) {
                const r = this.elements;
                let o = l.set(r[0], r[1], r[2]).length();
                const h = l.set(r[4], r[5], r[6]).length()
                  , d = l.set(r[8], r[9], r[10]).length();
                this.determinant() < 0 && (o = -o),
                t.x = r[12],
                t.y = r[13],
                t.z = r[14],
                c.copy(this);
                const f = 1 / o
                  , m = 1 / h
                  , v = 1 / d;
                return c.elements[0] *= f,
                c.elements[1] *= f,
                c.elements[2] *= f,
                c.elements[4] *= m,
                c.elements[5] *= m,
                c.elements[6] *= m,
                c.elements[8] *= v,
                c.elements[9] *= v,
                c.elements[10] *= v,
                e.setFromRotationMatrix(c),
                n.x = o,
                n.y = h,
                n.z = d,
                this
            }
            makePerspective(t, e, n, r, o, l) {
                void 0 === l && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
                const c = this.elements
                  , h = 2 * o / (e - t)
                  , d = 2 * o / (n - r)
                  , a = (e + t) / (e - t)
                  , b = (n + r) / (n - r)
                  , f = -(l + o) / (l - o)
                  , m = -2 * l * o / (l - o);
                return c[0] = h,
                c[4] = 0,
                c[8] = a,
                c[12] = 0,
                c[1] = 0,
                c[5] = d,
                c[9] = b,
                c[13] = 0,
                c[2] = 0,
                c[6] = 0,
                c[10] = f,
                c[14] = m,
                c[3] = 0,
                c[7] = 0,
                c[11] = -1,
                c[15] = 0,
                this
            }
            makeOrthographic(t, e, n, r, o, l) {
                const c = this.elements
                  , h = 1 / (e - t)
                  , d = 1 / (n - r)
                  , p = 1 / (l - o)
                  , f = (e + t) * h
                  , m = (n + r) * d
                  , v = (l + o) * p;
                return c[0] = 2 * h,
                c[4] = 0,
                c[8] = 0,
                c[12] = -f,
                c[1] = 0,
                c[5] = 2 * d,
                c[9] = 0,
                c[13] = -m,
                c[2] = 0,
                c[6] = 0,
                c[10] = -2 * p,
                c[14] = -v,
                c[3] = 0,
                c[7] = 0,
                c[11] = 0,
                c[15] = 1,
                this
            }
            equals(t) {
                const e = this.elements
                  , n = t.elements;
                for (let i = 0; i < 16; i++)
                    if (e[i] !== n[i])
                        return !1;
                return !0
            }
            fromArray(t, e=0) {
                for (let i = 0; i < 16; i++)
                    this.elements[i] = t[i + e];
                return this
            }
            toArray(t=[], e=0) {
                const n = this.elements;
                return t[e] = n[0],
                t[e + 1] = n[1],
                t[e + 2] = n[2],
                t[e + 3] = n[3],
                t[e + 4] = n[4],
                t[e + 5] = n[5],
                t[e + 6] = n[6],
                t[e + 7] = n[7],
                t[e + 8] = n[8],
                t[e + 9] = n[9],
                t[e + 10] = n[10],
                t[e + 11] = n[11],
                t[e + 12] = n[12],
                t[e + 13] = n[13],
                t[e + 14] = n[14],
                t[e + 15] = n[15],
                t
            }
        }
        o.prototype.isMatrix4 = !0;
        const l = new r.a
          , c = new o
          , h = new r.a(0,0,0)
          , d = new r.a(1,1,1)
          , f = new r.a
          , m = new r.a
          , v = new r.a
    },
    259: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return r
        }
        ));
        class r {
            constructor() {
                this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1],
                arguments.length > 0 && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")
            }
            set(t, e, n, r, o, l, c, h, d) {
                const f = this.elements;
                return f[0] = t,
                f[1] = r,
                f[2] = c,
                f[3] = e,
                f[4] = o,
                f[5] = h,
                f[6] = n,
                f[7] = l,
                f[8] = d,
                this
            }
            identity() {
                return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1),
                this
            }
            copy(t) {
                const e = this.elements
                  , n = t.elements;
                return e[0] = n[0],
                e[1] = n[1],
                e[2] = n[2],
                e[3] = n[3],
                e[4] = n[4],
                e[5] = n[5],
                e[6] = n[6],
                e[7] = n[7],
                e[8] = n[8],
                this
            }
            extractBasis(t, e, n) {
                return t.setFromMatrix3Column(this, 0),
                e.setFromMatrix3Column(this, 1),
                n.setFromMatrix3Column(this, 2),
                this
            }
            setFromMatrix4(t) {
                const e = t.elements;
                return this.set(e[0], e[4], e[8], e[1], e[5], e[9], e[2], e[6], e[10]),
                this
            }
            multiply(t) {
                return this.multiplyMatrices(this, t)
            }
            premultiply(t) {
                return this.multiplyMatrices(t, this)
            }
            multiplyMatrices(a, b) {
                const t = a.elements
                  , e = b.elements
                  , n = this.elements
                  , r = t[0]
                  , o = t[3]
                  , l = t[6]
                  , c = t[1]
                  , h = t[4]
                  , d = t[7]
                  , f = t[2]
                  , m = t[5]
                  , v = t[8]
                  , _ = e[0]
                  , x = e[3]
                  , y = e[6]
                  , M = e[1]
                  , w = e[4]
                  , S = e[7]
                  , T = e[2]
                  , E = e[5]
                  , A = e[8];
                return n[0] = r * _ + o * M + l * T,
                n[3] = r * x + o * w + l * E,
                n[6] = r * y + o * S + l * A,
                n[1] = c * _ + h * M + d * T,
                n[4] = c * x + h * w + d * E,
                n[7] = c * y + h * S + d * A,
                n[2] = f * _ + m * M + v * T,
                n[5] = f * x + m * w + v * E,
                n[8] = f * y + m * S + v * A,
                this
            }
            multiplyScalar(s) {
                const t = this.elements;
                return t[0] *= s,
                t[3] *= s,
                t[6] *= s,
                t[1] *= s,
                t[4] *= s,
                t[7] *= s,
                t[2] *= s,
                t[5] *= s,
                t[8] *= s,
                this
            }
            determinant() {
                const t = this.elements
                  , a = t[0]
                  , b = t[1]
                  , e = t[2]
                  , n = t[3]
                  , r = t[4]
                  , o = t[5]
                  , g = t[6]
                  , l = t[7]
                  , i = t[8];
                return a * r * i - a * o * l - b * n * i + b * o * g + e * n * l - e * r * g
            }
            invert() {
                const t = this.elements
                  , e = t[0]
                  , n = t[1]
                  , r = t[2]
                  , o = t[3]
                  , l = t[4]
                  , c = t[5]
                  , h = t[6]
                  , d = t[7]
                  , f = t[8]
                  , m = f * l - c * d
                  , v = c * h - f * o
                  , _ = d * o - l * h
                  , x = e * m + n * v + r * _;
                if (0 === x)
                    return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
                const y = 1 / x;
                return t[0] = m * y,
                t[1] = (r * d - f * n) * y,
                t[2] = (c * n - r * l) * y,
                t[3] = v * y,
                t[4] = (f * e - r * h) * y,
                t[5] = (r * o - c * e) * y,
                t[6] = _ * y,
                t[7] = (n * h - d * e) * y,
                t[8] = (l * e - n * o) * y,
                this
            }
            transpose() {
                let t;
                const e = this.elements;
                return t = e[1],
                e[1] = e[3],
                e[3] = t,
                t = e[2],
                e[2] = e[6],
                e[6] = t,
                t = e[5],
                e[5] = e[7],
                e[7] = t,
                this
            }
            getNormalMatrix(t) {
                return this.setFromMatrix4(t).invert().transpose()
            }
            transposeIntoArray(t) {
                const e = this.elements;
                return t[0] = e[0],
                t[1] = e[3],
                t[2] = e[6],
                t[3] = e[1],
                t[4] = e[4],
                t[5] = e[7],
                t[6] = e[2],
                t[7] = e[5],
                t[8] = e[8],
                this
            }
            setUvTransform(t, e, n, r, o, l, c) {
                const h = Math.cos(o)
                  , s = Math.sin(o);
                return this.set(n * h, n * s, -n * (h * l + s * c) + l + t, -r * s, r * h, -r * (-s * l + h * c) + c + e, 0, 0, 1),
                this
            }
            scale(t, e) {
                const n = this.elements;
                return n[0] *= t,
                n[3] *= t,
                n[6] *= t,
                n[1] *= e,
                n[4] *= e,
                n[7] *= e,
                this
            }
            rotate(t) {
                const e = Math.cos(t)
                  , s = Math.sin(t)
                  , n = this.elements
                  , r = n[0]
                  , o = n[3]
                  , l = n[6]
                  , c = n[1]
                  , h = n[4]
                  , d = n[7];
                return n[0] = e * r + s * c,
                n[3] = e * o + s * h,
                n[6] = e * l + s * d,
                n[1] = -s * r + e * c,
                n[4] = -s * o + e * h,
                n[7] = -s * l + e * d,
                this
            }
            translate(t, e) {
                const n = this.elements;
                return n[0] += t * n[2],
                n[3] += t * n[5],
                n[6] += t * n[8],
                n[1] += e * n[2],
                n[4] += e * n[5],
                n[7] += e * n[8],
                this
            }
            equals(t) {
                const e = this.elements
                  , n = t.elements;
                for (let i = 0; i < 9; i++)
                    if (e[i] !== n[i])
                        return !1;
                return !0
            }
            fromArray(t, e=0) {
                for (let i = 0; i < 9; i++)
                    this.elements[i] = t[i + e];
                return this
            }
            toArray(t=[], e=0) {
                const n = this.elements;
                return t[e] = n[0],
                t[e + 1] = n[1],
                t[e + 2] = n[2],
                t[e + 3] = n[3],
                t[e + 4] = n[4],
                t[e + 5] = n[5],
                t[e + 6] = n[6],
                t[e + 7] = n[7],
                t[e + 8] = n[8],
                t
            }
            clone() {
                return (new this.constructor).fromArray(this.elements)
            }
        }
        r.prototype.isMatrix3 = !0
    },
    260: function(t, e, n) {
        "use strict";
        function r(t) {
            if (0 === t.length)
                return -1 / 0;
            let e = t[0];
            for (let i = 1, n = t.length; i < n; ++i)
                t[i] > e && (e = t[i]);
            return e
        }
        n.d(e, "a", (function() {
            return r
        }
        )),
        n.d(e, "b", (function() {
            return o
        }
        )),
        n.d(e, "c", (function() {
            return l
        }
        ));
        Int8Array,
        Uint8Array,
        Uint8ClampedArray,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array;
        function o(t) {
            return document.createElementNS("http://www.w3.org/1999/xhtml", t)
        }
        function l(t, e=0) {
            let h1 = 3735928559 ^ e
              , h2 = 1103547991 ^ e;
            for (let e, i = 0; i < t.length; i++)
                e = t.charCodeAt(i),
                h1 = Math.imul(h1 ^ e, 2654435761),
                h2 = Math.imul(h2 ^ e, 1597334677);
            return h1 = Math.imul(h1 ^ h1 >>> 16, 2246822507) ^ Math.imul(h2 ^ h2 >>> 13, 3266489909),
            h2 = Math.imul(h2 ^ h2 >>> 16, 2246822507) ^ Math.imul(h1 ^ h1 >>> 13, 3266489909),
            4294967296 * (2097151 & h2) + (h1 >>> 0)
        }
    },
    261: function(t, e, n) {
        "use strict";
        n.d(e, "b", (function() {
            return x
        }
        )),
        n.d(e, "d", (function() {
            return _
        }
        )),
        n.d(e, "c", (function() {
            return v
        }
        )),
        n.d(e, "a", (function() {
            return m
        }
        ));
        var r = n(263)
          , o = n(241)
          , l = n(249)
          , c = n(256)
          , h = n(240);
        const d = new o.a
          , f = new l.a;
        class m {
            constructor(t, e, n) {
                if (Array.isArray(t))
                    throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
                this.name = "",
                this.array = t,
                this.itemSize = e,
                this.count = void 0 !== t ? t.length / e : 0,
                this.normalized = !0 === n,
                this.usage = h.Cc,
                this.updateRange = {
                    offset: 0,
                    count: -1
                },
                this.version = 0
            }
            onUploadCallback() {}
            set needsUpdate(t) {
                !0 === t && this.version++
            }
            setUsage(t) {
                return this.usage = t,
                this
            }
            copy(source) {
                return this.name = source.name,
                this.array = new source.array.constructor(source.array),
                this.itemSize = source.itemSize,
                this.count = source.count,
                this.normalized = source.normalized,
                this.usage = source.usage,
                this
            }
            copyAt(t, e, n) {
                t *= this.itemSize,
                n *= e.itemSize;
                for (let i = 0, r = this.itemSize; i < r; i++)
                    this.array[t + i] = e.array[n + i];
                return this
            }
            copyArray(t) {
                return this.array.set(t),
                this
            }
            copyColorsArray(t) {
                const e = this.array;
                let n = 0;
                for (let i = 0, r = t.length; i < r; i++) {
                    let r = t[i];
                    void 0 === r && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", i),
                    r = new c.a),
                    e[n++] = r.r,
                    e[n++] = r.g,
                    e[n++] = r.b
                }
                return this
            }
            copyVector2sArray(t) {
                const e = this.array;
                let n = 0;
                for (let i = 0, r = t.length; i < r; i++) {
                    let r = t[i];
                    void 0 === r && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", i),
                    r = new l.a),
                    e[n++] = r.x,
                    e[n++] = r.y
                }
                return this
            }
            copyVector3sArray(t) {
                const e = this.array;
                let n = 0;
                for (let i = 0, r = t.length; i < r; i++) {
                    let r = t[i];
                    void 0 === r && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", i),
                    r = new o.a),
                    e[n++] = r.x,
                    e[n++] = r.y,
                    e[n++] = r.z
                }
                return this
            }
            copyVector4sArray(t) {
                const e = this.array;
                let n = 0;
                for (let i = 0, o = t.length; i < o; i++) {
                    let o = t[i];
                    void 0 === o && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", i),
                    o = new r.a),
                    e[n++] = o.x,
                    e[n++] = o.y,
                    e[n++] = o.z,
                    e[n++] = o.w
                }
                return this
            }
            applyMatrix3(t) {
                if (2 === this.itemSize)
                    for (let i = 0, e = this.count; i < e; i++)
                        f.fromBufferAttribute(this, i),
                        f.applyMatrix3(t),
                        this.setXY(i, f.x, f.y);
                else if (3 === this.itemSize)
                    for (let i = 0, e = this.count; i < e; i++)
                        d.fromBufferAttribute(this, i),
                        d.applyMatrix3(t),
                        this.setXYZ(i, d.x, d.y, d.z);
                return this
            }
            applyMatrix4(t) {
                for (let i = 0, e = this.count; i < e; i++)
                    d.x = this.getX(i),
                    d.y = this.getY(i),
                    d.z = this.getZ(i),
                    d.applyMatrix4(t),
                    this.setXYZ(i, d.x, d.y, d.z);
                return this
            }
            applyNormalMatrix(t) {
                for (let i = 0, e = this.count; i < e; i++)
                    d.x = this.getX(i),
                    d.y = this.getY(i),
                    d.z = this.getZ(i),
                    d.applyNormalMatrix(t),
                    this.setXYZ(i, d.x, d.y, d.z);
                return this
            }
            transformDirection(t) {
                for (let i = 0, e = this.count; i < e; i++)
                    d.x = this.getX(i),
                    d.y = this.getY(i),
                    d.z = this.getZ(i),
                    d.transformDirection(t),
                    this.setXYZ(i, d.x, d.y, d.z);
                return this
            }
            set(t, e=0) {
                return this.array.set(t, e),
                this
            }
            getX(t) {
                return this.array[t * this.itemSize]
            }
            setX(t, e) {
                return this.array[t * this.itemSize] = e,
                this
            }
            getY(t) {
                return this.array[t * this.itemSize + 1]
            }
            setY(t, e) {
                return this.array[t * this.itemSize + 1] = e,
                this
            }
            getZ(t) {
                return this.array[t * this.itemSize + 2]
            }
            setZ(t, e) {
                return this.array[t * this.itemSize + 2] = e,
                this
            }
            getW(t) {
                return this.array[t * this.itemSize + 3]
            }
            setW(t, e) {
                return this.array[t * this.itemSize + 3] = e,
                this
            }
            setXY(t, e, n) {
                return t *= this.itemSize,
                this.array[t + 0] = e,
                this.array[t + 1] = n,
                this
            }
            setXYZ(t, e, n, r) {
                return t *= this.itemSize,
                this.array[t + 0] = e,
                this.array[t + 1] = n,
                this.array[t + 2] = r,
                this
            }
            setXYZW(t, e, n, r, o) {
                return t *= this.itemSize,
                this.array[t + 0] = e,
                this.array[t + 1] = n,
                this.array[t + 2] = r,
                this.array[t + 3] = o,
                this
            }
            onUpload(t) {
                return this.onUploadCallback = t,
                this
            }
            clone() {
                return new this.constructor(this.array,this.itemSize).copy(this)
            }
            toJSON() {
                const data = {
                    itemSize: this.itemSize,
                    type: this.array.constructor.name,
                    array: Array.prototype.slice.call(this.array),
                    normalized: this.normalized
                };
                return "" !== this.name && (data.name = this.name),
                this.usage !== h.Cc && (data.usage = this.usage),
                0 === this.updateRange.offset && -1 === this.updateRange.count || (data.updateRange = this.updateRange),
                data
            }
        }
        m.prototype.isBufferAttribute = !0;
        class v extends m {
            constructor(t, e, n) {
                super(new Uint16Array(t), e, n)
            }
        }
        class _ extends m {
            constructor(t, e, n) {
                super(new Uint32Array(t), e, n)
            }
        }
        (class extends m {
            constructor(t, e, n) {
                super(new Uint16Array(t), e, n)
            }
        }
        ).prototype.isFloat16BufferAttribute = !0;
        class x extends m {
            constructor(t, e, n) {
                super(new Float32Array(t), e, n)
            }
        }
    },
    262: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return r
        }
        ));
        class r {
            addEventListener(t, e) {
                void 0 === this._listeners && (this._listeners = {});
                const n = this._listeners;
                void 0 === n[t] && (n[t] = []),
                -1 === n[t].indexOf(e) && n[t].push(e)
            }
            hasEventListener(t, e) {
                if (void 0 === this._listeners)
                    return !1;
                const n = this._listeners;
                return void 0 !== n[t] && -1 !== n[t].indexOf(e)
            }
            removeEventListener(t, e) {
                if (void 0 === this._listeners)
                    return;
                const n = this._listeners[t];
                if (void 0 !== n) {
                    const t = n.indexOf(e);
                    -1 !== t && n.splice(t, 1)
                }
            }
            dispatchEvent(t) {
                if (void 0 === this._listeners)
                    return;
                const e = this._listeners[t.type];
                if (void 0 !== e) {
                    t.target = this;
                    const n = e.slice(0);
                    for (let i = 0, e = n.length; i < e; i++)
                        n[i].call(this, t);
                    t.target = null
                }
            }
        }
    },
    263: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return r
        }
        ));
        class r {
            constructor(t=0, e=0, n=0, r=1) {
                this.x = t,
                this.y = e,
                this.z = n,
                this.w = r
            }
            get width() {
                return this.z
            }
            set width(t) {
                this.z = t
            }
            get height() {
                return this.w
            }
            set height(t) {
                this.w = t
            }
            set(t, e, n, r) {
                return this.x = t,
                this.y = e,
                this.z = n,
                this.w = r,
                this
            }
            setScalar(t) {
                return this.x = t,
                this.y = t,
                this.z = t,
                this.w = t,
                this
            }
            setX(t) {
                return this.x = t,
                this
            }
            setY(t) {
                return this.y = t,
                this
            }
            setZ(t) {
                return this.z = t,
                this
            }
            setW(t) {
                return this.w = t,
                this
            }
            setComponent(t, e) {
                switch (t) {
                case 0:
                    this.x = e;
                    break;
                case 1:
                    this.y = e;
                    break;
                case 2:
                    this.z = e;
                    break;
                case 3:
                    this.w = e;
                    break;
                default:
                    throw new Error("index is out of range: " + t)
                }
                return this
            }
            getComponent(t) {
                switch (t) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                case 2:
                    return this.z;
                case 3:
                    return this.w;
                default:
                    throw new Error("index is out of range: " + t)
                }
            }
            clone() {
                return new this.constructor(this.x,this.y,this.z,this.w)
            }
            copy(t) {
                return this.x = t.x,
                this.y = t.y,
                this.z = t.z,
                this.w = void 0 !== t.w ? t.w : 1,
                this
            }
            add(t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
                this.addVectors(t, e)) : (this.x += t.x,
                this.y += t.y,
                this.z += t.z,
                this.w += t.w,
                this)
            }
            addScalar(s) {
                return this.x += s,
                this.y += s,
                this.z += s,
                this.w += s,
                this
            }
            addVectors(a, b) {
                return this.x = a.x + b.x,
                this.y = a.y + b.y,
                this.z = a.z + b.z,
                this.w = a.w + b.w,
                this
            }
            addScaledVector(t, s) {
                return this.x += t.x * s,
                this.y += t.y * s,
                this.z += t.z * s,
                this.w += t.w * s,
                this
            }
            sub(t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
                this.subVectors(t, e)) : (this.x -= t.x,
                this.y -= t.y,
                this.z -= t.z,
                this.w -= t.w,
                this)
            }
            subScalar(s) {
                return this.x -= s,
                this.y -= s,
                this.z -= s,
                this.w -= s,
                this
            }
            subVectors(a, b) {
                return this.x = a.x - b.x,
                this.y = a.y - b.y,
                this.z = a.z - b.z,
                this.w = a.w - b.w,
                this
            }
            multiply(t) {
                return this.x *= t.x,
                this.y *= t.y,
                this.z *= t.z,
                this.w *= t.w,
                this
            }
            multiplyScalar(t) {
                return this.x *= t,
                this.y *= t,
                this.z *= t,
                this.w *= t,
                this
            }
            applyMatrix4(t) {
                const e = this.x
                  , n = this.y
                  , r = this.z
                  , o = this.w
                  , l = t.elements;
                return this.x = l[0] * e + l[4] * n + l[8] * r + l[12] * o,
                this.y = l[1] * e + l[5] * n + l[9] * r + l[13] * o,
                this.z = l[2] * e + l[6] * n + l[10] * r + l[14] * o,
                this.w = l[3] * e + l[7] * n + l[11] * r + l[15] * o,
                this
            }
            divideScalar(t) {
                return this.multiplyScalar(1 / t)
            }
            setAxisAngleFromQuaternion(q) {
                this.w = 2 * Math.acos(q.w);
                const s = Math.sqrt(1 - q.w * q.w);
                return s < 1e-4 ? (this.x = 1,
                this.y = 0,
                this.z = 0) : (this.x = q.x / s,
                this.y = q.y / s,
                this.z = q.z / s),
                this
            }
            setAxisAngleFromRotationMatrix(t) {
                let e, n, r, o;
                const l = .01
                  , c = .1
                  , h = t.elements
                  , d = h[0]
                  , f = h[4]
                  , m = h[8]
                  , v = h[1]
                  , _ = h[5]
                  , x = h[9]
                  , y = h[2]
                  , M = h[6]
                  , w = h[10];
                if (Math.abs(f - v) < l && Math.abs(m - y) < l && Math.abs(x - M) < l) {
                    if (Math.abs(f + v) < c && Math.abs(m + y) < c && Math.abs(x + M) < c && Math.abs(d + _ + w - 3) < c)
                        return this.set(1, 0, 0, 0),
                        this;
                    e = Math.PI;
                    const t = (d + 1) / 2
                      , h = (_ + 1) / 2
                      , S = (w + 1) / 2
                      , T = (f + v) / 4
                      , E = (m + y) / 4
                      , A = (x + M) / 4;
                    return t > h && t > S ? t < l ? (n = 0,
                    r = .707106781,
                    o = .707106781) : (n = Math.sqrt(t),
                    r = T / n,
                    o = E / n) : h > S ? h < l ? (n = .707106781,
                    r = 0,
                    o = .707106781) : (r = Math.sqrt(h),
                    n = T / r,
                    o = A / r) : S < l ? (n = .707106781,
                    r = .707106781,
                    o = 0) : (o = Math.sqrt(S),
                    n = E / o,
                    r = A / o),
                    this.set(n, r, o, e),
                    this
                }
                let s = Math.sqrt((M - x) * (M - x) + (m - y) * (m - y) + (v - f) * (v - f));
                return Math.abs(s) < .001 && (s = 1),
                this.x = (M - x) / s,
                this.y = (m - y) / s,
                this.z = (v - f) / s,
                this.w = Math.acos((d + _ + w - 1) / 2),
                this
            }
            min(t) {
                return this.x = Math.min(this.x, t.x),
                this.y = Math.min(this.y, t.y),
                this.z = Math.min(this.z, t.z),
                this.w = Math.min(this.w, t.w),
                this
            }
            max(t) {
                return this.x = Math.max(this.x, t.x),
                this.y = Math.max(this.y, t.y),
                this.z = Math.max(this.z, t.z),
                this.w = Math.max(this.w, t.w),
                this
            }
            clamp(t, e) {
                return this.x = Math.max(t.x, Math.min(e.x, this.x)),
                this.y = Math.max(t.y, Math.min(e.y, this.y)),
                this.z = Math.max(t.z, Math.min(e.z, this.z)),
                this.w = Math.max(t.w, Math.min(e.w, this.w)),
                this
            }
            clampScalar(t, e) {
                return this.x = Math.max(t, Math.min(e, this.x)),
                this.y = Math.max(t, Math.min(e, this.y)),
                this.z = Math.max(t, Math.min(e, this.z)),
                this.w = Math.max(t, Math.min(e, this.w)),
                this
            }
            clampLength(t, e) {
                const n = this.length();
                return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)))
            }
            floor() {
                return this.x = Math.floor(this.x),
                this.y = Math.floor(this.y),
                this.z = Math.floor(this.z),
                this.w = Math.floor(this.w),
                this
            }
            ceil() {
                return this.x = Math.ceil(this.x),
                this.y = Math.ceil(this.y),
                this.z = Math.ceil(this.z),
                this.w = Math.ceil(this.w),
                this
            }
            round() {
                return this.x = Math.round(this.x),
                this.y = Math.round(this.y),
                this.z = Math.round(this.z),
                this.w = Math.round(this.w),
                this
            }
            roundToZero() {
                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
                this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
                this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z),
                this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w),
                this
            }
            negate() {
                return this.x = -this.x,
                this.y = -this.y,
                this.z = -this.z,
                this.w = -this.w,
                this
            }
            dot(t) {
                return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w
            }
            lengthSq() {
                return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
            }
            length() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)
            }
            manhattanLength() {
                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w)
            }
            normalize() {
                return this.divideScalar(this.length() || 1)
            }
            setLength(t) {
                return this.normalize().multiplyScalar(t)
            }
            lerp(t, e) {
                return this.x += (t.x - this.x) * e,
                this.y += (t.y - this.y) * e,
                this.z += (t.z - this.z) * e,
                this.w += (t.w - this.w) * e,
                this
            }
            lerpVectors(t, e, n) {
                return this.x = t.x + (e.x - t.x) * n,
                this.y = t.y + (e.y - t.y) * n,
                this.z = t.z + (e.z - t.z) * n,
                this.w = t.w + (e.w - t.w) * n,
                this
            }
            equals(t) {
                return t.x === this.x && t.y === this.y && t.z === this.z && t.w === this.w
            }
            fromArray(t, e=0) {
                return this.x = t[e],
                this.y = t[e + 1],
                this.z = t[e + 2],
                this.w = t[e + 3],
                this
            }
            toArray(t=[], e=0) {
                return t[e] = this.x,
                t[e + 1] = this.y,
                t[e + 2] = this.z,
                t[e + 3] = this.w,
                t
            }
            fromBufferAttribute(t, e, n) {
                return void 0 !== n && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),
                this.x = t.getX(e),
                this.y = t.getY(e),
                this.z = t.getZ(e),
                this.w = t.getW(e),
                this
            }
            random() {
                return this.x = Math.random(),
                this.y = Math.random(),
                this.z = Math.random(),
                this.w = Math.random(),
                this
            }
            *[Symbol.iterator]() {
                yield this.x,
                yield this.y,
                yield this.z,
                yield this.w
            }
        }
        r.prototype.isVector4 = !0
    },
    264: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return L
        }
        ));
        var r = n(241)
          , o = n(249)
          , l = n(297)
          , c = n(262)
          , h = n(261)
          , d = n(290)
          , f = n(265)
          , m = n(258)
          , v = n(259)
          , _ = n(248)
          , x = n(260);
        let y = 0;
        const M = new m.a
          , w = new f.a
          , S = new r.a
          , T = new l.a
          , E = new l.a
          , A = new r.a;
        class L extends c.a {
            constructor() {
                super(),
                Object.defineProperty(this, "id", {
                    value: y++
                }),
                this.uuid = _.f(),
                this.name = "",
                this.type = "BufferGeometry",
                this.index = null,
                this.attributes = {},
                this.morphAttributes = {},
                this.morphTargetsRelative = !1,
                this.groups = [],
                this.boundingBox = null,
                this.boundingSphere = null,
                this.drawRange = {
                    start: 0,
                    count: 1 / 0
                },
                this.userData = {}
            }
            getIndex() {
                return this.index
            }
            setIndex(t) {
                return Array.isArray(t) ? this.index = new (Object(x.a)(t) > 65535 ? h.d : h.c)(t,1) : this.index = t,
                this
            }
            getAttribute(t) {
                return this.attributes[t]
            }
            setAttribute(t, e) {
                return this.attributes[t] = e,
                this
            }
            deleteAttribute(t) {
                return delete this.attributes[t],
                this
            }
            hasAttribute(t) {
                return void 0 !== this.attributes[t]
            }
            addGroup(t, e, n=0) {
                this.groups.push({
                    start: t,
                    count: e,
                    materialIndex: n
                })
            }
            clearGroups() {
                this.groups = []
            }
            setDrawRange(t, e) {
                this.drawRange.start = t,
                this.drawRange.count = e
            }
            applyMatrix4(t) {
                const e = this.attributes.position;
                void 0 !== e && (e.applyMatrix4(t),
                e.needsUpdate = !0);
                const n = this.attributes.normal;
                if (void 0 !== n) {
                    const e = (new v.a).getNormalMatrix(t);
                    n.applyNormalMatrix(e),
                    n.needsUpdate = !0
                }
                const r = this.attributes.tangent;
                return void 0 !== r && (r.transformDirection(t),
                r.needsUpdate = !0),
                null !== this.boundingBox && this.computeBoundingBox(),
                null !== this.boundingSphere && this.computeBoundingSphere(),
                this
            }
            applyQuaternion(q) {
                return M.makeRotationFromQuaternion(q),
                this.applyMatrix4(M),
                this
            }
            rotateX(t) {
                return M.makeRotationX(t),
                this.applyMatrix4(M),
                this
            }
            rotateY(t) {
                return M.makeRotationY(t),
                this.applyMatrix4(M),
                this
            }
            rotateZ(t) {
                return M.makeRotationZ(t),
                this.applyMatrix4(M),
                this
            }
            translate(t, e, n) {
                return M.makeTranslation(t, e, n),
                this.applyMatrix4(M),
                this
            }
            scale(t, e, n) {
                return M.makeScale(t, e, n),
                this.applyMatrix4(M),
                this
            }
            lookAt(t) {
                return w.lookAt(t),
                w.updateMatrix(),
                this.applyMatrix4(w.matrix),
                this
            }
            center() {
                return this.computeBoundingBox(),
                this.boundingBox.getCenter(S).negate(),
                this.translate(S.x, S.y, S.z),
                this
            }
            setFromPoints(t) {
                const e = [];
                for (let i = 0, n = t.length; i < n; i++) {
                    const n = t[i];
                    e.push(n.x, n.y, n.z || 0)
                }
                return this.setAttribute("position", new h.b(e,3)),
                this
            }
            computeBoundingBox() {
                null === this.boundingBox && (this.boundingBox = new l.a);
                const t = this.attributes.position
                  , e = this.morphAttributes.position;
                if (t && t.isGLBufferAttribute)
                    return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this),
                    void this.boundingBox.set(new r.a(-1 / 0,-1 / 0,-1 / 0), new r.a(1 / 0,1 / 0,1 / 0));
                if (void 0 !== t) {
                    if (this.boundingBox.setFromBufferAttribute(t),
                    e)
                        for (let i = 0, t = e.length; i < t; i++) {
                            const t = e[i];
                            T.setFromBufferAttribute(t),
                            this.morphTargetsRelative ? (A.addVectors(this.boundingBox.min, T.min),
                            this.boundingBox.expandByPoint(A),
                            A.addVectors(this.boundingBox.max, T.max),
                            this.boundingBox.expandByPoint(A)) : (this.boundingBox.expandByPoint(T.min),
                            this.boundingBox.expandByPoint(T.max))
                        }
                } else
                    this.boundingBox.makeEmpty();
                (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this)
            }
            computeBoundingSphere() {
                null === this.boundingSphere && (this.boundingSphere = new d.a);
                const t = this.attributes.position
                  , e = this.morphAttributes.position;
                if (t && t.isGLBufferAttribute)
                    return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this),
                    void this.boundingSphere.set(new r.a, 1 / 0);
                if (t) {
                    const n = this.boundingSphere.center;
                    if (T.setFromBufferAttribute(t),
                    e)
                        for (let i = 0, t = e.length; i < t; i++) {
                            const t = e[i];
                            E.setFromBufferAttribute(t),
                            this.morphTargetsRelative ? (A.addVectors(T.min, E.min),
                            T.expandByPoint(A),
                            A.addVectors(T.max, E.max),
                            T.expandByPoint(A)) : (T.expandByPoint(E.min),
                            T.expandByPoint(E.max))
                        }
                    T.getCenter(n);
                    let r = 0;
                    for (let i = 0, e = t.count; i < e; i++)
                        A.fromBufferAttribute(t, i),
                        r = Math.max(r, n.distanceToSquared(A));
                    if (e)
                        for (let i = 0, o = e.length; i < o; i++) {
                            const o = e[i]
                              , l = this.morphTargetsRelative;
                            for (let e = 0, c = o.count; e < c; e++)
                                A.fromBufferAttribute(o, e),
                                l && (S.fromBufferAttribute(t, e),
                                A.add(S)),
                                r = Math.max(r, n.distanceToSquared(A))
                        }
                    this.boundingSphere.radius = Math.sqrt(r),
                    isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this)
                }
            }
            computeTangents() {
                const t = this.index
                  , e = this.attributes;
                if (null === t || void 0 === e.position || void 0 === e.normal || void 0 === e.uv)
                    return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
                const n = t.array
                  , l = e.position.array
                  , c = e.normal.array
                  , d = e.uv.array
                  , f = l.length / 3;
                void 0 === e.tangent && this.setAttribute("tangent", new h.a(new Float32Array(4 * f),4));
                const m = e.tangent.array
                  , v = []
                  , _ = [];
                for (let i = 0; i < f; i++)
                    v[i] = new r.a,
                    _[i] = new r.a;
                const x = new r.a
                  , y = new r.a
                  , M = new r.a
                  , w = new o.a
                  , S = new o.a
                  , T = new o.a
                  , E = new r.a
                  , A = new r.a;
                function L(a, b, t) {
                    x.fromArray(l, 3 * a),
                    y.fromArray(l, 3 * b),
                    M.fromArray(l, 3 * t),
                    w.fromArray(d, 2 * a),
                    S.fromArray(d, 2 * b),
                    T.fromArray(d, 2 * t),
                    y.sub(x),
                    M.sub(x),
                    S.sub(w),
                    T.sub(w);
                    const e = 1 / (S.x * T.y - T.x * S.y);
                    isFinite(e) && (E.copy(y).multiplyScalar(T.y).addScaledVector(M, -S.y).multiplyScalar(e),
                    A.copy(M).multiplyScalar(S.x).addScaledVector(y, -T.x).multiplyScalar(e),
                    v[a].add(E),
                    v[b].add(E),
                    v[t].add(E),
                    _[a].add(A),
                    _[b].add(A),
                    _[t].add(A))
                }
                let R = this.groups;
                0 === R.length && (R = [{
                    start: 0,
                    count: n.length
                }]);
                for (let i = 0, t = R.length; i < t; ++i) {
                    const t = R[i]
                      , e = t.start;
                    for (let r = e, o = e + t.count; r < o; r += 3)
                        L(n[r + 0], n[r + 1], n[r + 2])
                }
                const C = new r.a
                  , P = new r.a
                  , D = new r.a
                  , N = new r.a;
                function I(t) {
                    D.fromArray(c, 3 * t),
                    N.copy(D);
                    const e = v[t];
                    C.copy(e),
                    C.sub(D.multiplyScalar(D.dot(e))).normalize(),
                    P.crossVectors(N, e);
                    const n = P.dot(_[t]) < 0 ? -1 : 1;
                    m[4 * t] = C.x,
                    m[4 * t + 1] = C.y,
                    m[4 * t + 2] = C.z,
                    m[4 * t + 3] = n
                }
                for (let i = 0, t = R.length; i < t; ++i) {
                    const t = R[i]
                      , e = t.start;
                    for (let r = e, o = e + t.count; r < o; r += 3)
                        I(n[r + 0]),
                        I(n[r + 1]),
                        I(n[r + 2])
                }
            }
            computeVertexNormals() {
                const t = this.index
                  , e = this.getAttribute("position");
                if (void 0 !== e) {
                    let n = this.getAttribute("normal");
                    if (void 0 === n)
                        n = new h.a(new Float32Array(3 * e.count),3),
                        this.setAttribute("normal", n);
                    else
                        for (let i = 0, t = n.count; i < t; i++)
                            n.setXYZ(i, 0, 0, 0);
                    const o = new r.a
                      , l = new r.a
                      , c = new r.a
                      , d = new r.a
                      , f = new r.a
                      , m = new r.a
                      , v = new r.a
                      , _ = new r.a;
                    if (t)
                        for (let i = 0, r = t.count; i < r; i += 3) {
                            const r = t.getX(i + 0)
                              , h = t.getX(i + 1)
                              , x = t.getX(i + 2);
                            o.fromBufferAttribute(e, r),
                            l.fromBufferAttribute(e, h),
                            c.fromBufferAttribute(e, x),
                            v.subVectors(c, l),
                            _.subVectors(o, l),
                            v.cross(_),
                            d.fromBufferAttribute(n, r),
                            f.fromBufferAttribute(n, h),
                            m.fromBufferAttribute(n, x),
                            d.add(v),
                            f.add(v),
                            m.add(v),
                            n.setXYZ(r, d.x, d.y, d.z),
                            n.setXYZ(h, f.x, f.y, f.z),
                            n.setXYZ(x, m.x, m.y, m.z)
                        }
                    else
                        for (let i = 0, t = e.count; i < t; i += 3)
                            o.fromBufferAttribute(e, i + 0),
                            l.fromBufferAttribute(e, i + 1),
                            c.fromBufferAttribute(e, i + 2),
                            v.subVectors(c, l),
                            _.subVectors(o, l),
                            v.cross(_),
                            n.setXYZ(i + 0, v.x, v.y, v.z),
                            n.setXYZ(i + 1, v.x, v.y, v.z),
                            n.setXYZ(i + 2, v.x, v.y, v.z);
                    this.normalizeNormals(),
                    n.needsUpdate = !0
                }
            }
            merge(t, e) {
                if (!t || !t.isBufferGeometry)
                    return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", t);
                void 0 === e && (e = 0,
                console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));
                const n = this.attributes;
                for (const r in n) {
                    if (void 0 === t.attributes[r])
                        continue;
                    const o = n[r].array
                      , l = t.attributes[r]
                      , c = l.array
                      , h = l.itemSize * e
                      , d = Math.min(c.length, o.length - h);
                    for (let i = 0, t = h; i < d; i++,
                    t++)
                        o[t] = c[i]
                }
                return this
            }
            normalizeNormals() {
                const t = this.attributes.normal;
                for (let i = 0, e = t.count; i < e; i++)
                    A.fromBufferAttribute(t, i),
                    A.normalize(),
                    t.setXYZ(i, A.x, A.y, A.z)
            }
            toNonIndexed() {
                function t(t, e) {
                    const n = t.array
                      , r = t.itemSize
                      , o = t.normalized
                      , l = new n.constructor(e.length * r);
                    let c = 0
                      , d = 0;
                    for (let i = 0, o = e.length; i < o; i++) {
                        c = t.isInterleavedBufferAttribute ? e[i] * t.data.stride + t.offset : e[i] * r;
                        for (let t = 0; t < r; t++)
                            l[d++] = n[c++]
                    }
                    return new h.a(l,r,o)
                }
                if (null === this.index)
                    return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),
                    this;
                const e = new L
                  , n = this.index.array
                  , r = this.attributes;
                for (const o in r) {
                    const l = t(r[o], n);
                    e.setAttribute(o, l)
                }
                const o = this.morphAttributes;
                for (const r in o) {
                    const l = []
                      , c = o[r];
                    for (let i = 0, e = c.length; i < e; i++) {
                        const e = t(c[i], n);
                        l.push(e)
                    }
                    e.morphAttributes[r] = l
                }
                e.morphTargetsRelative = this.morphTargetsRelative;
                const l = this.groups;
                for (let i = 0, t = l.length; i < t; i++) {
                    const t = l[i];
                    e.addGroup(t.start, t.count, t.materialIndex)
                }
                return e
            }
            toJSON() {
                const data = {
                    metadata: {
                        version: 4.5,
                        type: "BufferGeometry",
                        generator: "BufferGeometry.toJSON"
                    }
                };
                if (data.uuid = this.uuid,
                data.type = this.type,
                "" !== this.name && (data.name = this.name),
                Object.keys(this.userData).length > 0 && (data.userData = this.userData),
                void 0 !== this.parameters) {
                    const t = this.parameters;
                    for (const e in t)
                        void 0 !== t[e] && (data[e] = t[e]);
                    return data
                }
                data.data = {
                    attributes: {}
                };
                const t = this.index;
                null !== t && (data.data.index = {
                    type: t.array.constructor.name,
                    array: Array.prototype.slice.call(t.array)
                });
                const e = this.attributes;
                for (const t in e) {
                    const n = e[t];
                    data.data.attributes[t] = n.toJSON(data.data)
                }
                const n = {};
                let r = !1;
                for (const t in this.morphAttributes) {
                    const e = this.morphAttributes[t]
                      , o = [];
                    for (let i = 0, t = e.length; i < t; i++) {
                        const t = e[i];
                        o.push(t.toJSON(data.data))
                    }
                    o.length > 0 && (n[t] = o,
                    r = !0)
                }
                r && (data.data.morphAttributes = n,
                data.data.morphTargetsRelative = this.morphTargetsRelative);
                const o = this.groups;
                o.length > 0 && (data.data.groups = JSON.parse(JSON.stringify(o)));
                const l = this.boundingSphere;
                return null !== l && (data.data.boundingSphere = {
                    center: l.center.toArray(),
                    radius: l.radius
                }),
                data
            }
            clone() {
                return (new this.constructor).copy(this)
            }
            copy(source) {
                this.index = null,
                this.attributes = {},
                this.morphAttributes = {},
                this.groups = [],
                this.boundingBox = null,
                this.boundingSphere = null;
                const data = {};
                this.name = source.name;
                const t = source.index;
                null !== t && this.setIndex(t.clone(data));
                const e = source.attributes;
                for (const t in e) {
                    const n = e[t];
                    this.setAttribute(t, n.clone(data))
                }
                const n = source.morphAttributes;
                for (const t in n) {
                    const e = []
                      , r = n[t];
                    for (let i = 0, t = r.length; i < t; i++)
                        e.push(r[i].clone(data));
                    this.morphAttributes[t] = e
                }
                this.morphTargetsRelative = source.morphTargetsRelative;
                const r = source.groups;
                for (let i = 0, t = r.length; i < t; i++) {
                    const t = r[i];
                    this.addGroup(t.start, t.count, t.materialIndex)
                }
                const o = source.boundingBox;
                null !== o && (this.boundingBox = o.clone());
                const l = source.boundingSphere;
                return null !== l && (this.boundingSphere = l.clone()),
                this.drawRange.start = source.drawRange.start,
                this.drawRange.count = source.drawRange.count,
                this.userData = source.userData,
                void 0 !== source.parameters && (this.parameters = Object.assign({}, source.parameters)),
                this
            }
            dispose() {
                this.dispatchEvent({
                    type: "dispose"
                })
            }
        }
        L.prototype.isBufferGeometry = !0
    },
    265: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return N
        }
        ));
        var r = n(289)
          , o = n(241)
          , l = n(258)
          , c = n(262)
          , h = n(248);
        const d = new l.a
          , f = new r.a;
        class m {
            constructor(t=0, e=0, n=0, r=m.DefaultOrder) {
                this._x = t,
                this._y = e,
                this._z = n,
                this._order = r
            }
            get x() {
                return this._x
            }
            set x(t) {
                this._x = t,
                this._onChangeCallback()
            }
            get y() {
                return this._y
            }
            set y(t) {
                this._y = t,
                this._onChangeCallback()
            }
            get z() {
                return this._z
            }
            set z(t) {
                this._z = t,
                this._onChangeCallback()
            }
            get order() {
                return this._order
            }
            set order(t) {
                this._order = t,
                this._onChangeCallback()
            }
            set(t, e, n, r=this._order) {
                return this._x = t,
                this._y = e,
                this._z = n,
                this._order = r,
                this._onChangeCallback(),
                this
            }
            clone() {
                return new this.constructor(this._x,this._y,this._z,this._order)
            }
            copy(t) {
                return this._x = t._x,
                this._y = t._y,
                this._z = t._z,
                this._order = t._order,
                this._onChangeCallback(),
                this
            }
            setFromRotationMatrix(t, e=this._order, n=!0) {
                const r = t.elements
                  , o = r[0]
                  , l = r[4]
                  , c = r[8]
                  , d = r[1]
                  , f = r[5]
                  , m = r[9]
                  , v = r[2]
                  , _ = r[6]
                  , x = r[10];
                switch (e) {
                case "XYZ":
                    this._y = Math.asin(Object(h.c)(c, -1, 1)),
                    Math.abs(c) < .9999999 ? (this._x = Math.atan2(-m, x),
                    this._z = Math.atan2(-l, o)) : (this._x = Math.atan2(_, f),
                    this._z = 0);
                    break;
                case "YXZ":
                    this._x = Math.asin(-Object(h.c)(m, -1, 1)),
                    Math.abs(m) < .9999999 ? (this._y = Math.atan2(c, x),
                    this._z = Math.atan2(d, f)) : (this._y = Math.atan2(-v, o),
                    this._z = 0);
                    break;
                case "ZXY":
                    this._x = Math.asin(Object(h.c)(_, -1, 1)),
                    Math.abs(_) < .9999999 ? (this._y = Math.atan2(-v, x),
                    this._z = Math.atan2(-l, f)) : (this._y = 0,
                    this._z = Math.atan2(d, o));
                    break;
                case "ZYX":
                    this._y = Math.asin(-Object(h.c)(v, -1, 1)),
                    Math.abs(v) < .9999999 ? (this._x = Math.atan2(_, x),
                    this._z = Math.atan2(d, o)) : (this._x = 0,
                    this._z = Math.atan2(-l, f));
                    break;
                case "YZX":
                    this._z = Math.asin(Object(h.c)(d, -1, 1)),
                    Math.abs(d) < .9999999 ? (this._x = Math.atan2(-m, f),
                    this._y = Math.atan2(-v, o)) : (this._x = 0,
                    this._y = Math.atan2(c, x));
                    break;
                case "XZY":
                    this._z = Math.asin(-Object(h.c)(l, -1, 1)),
                    Math.abs(l) < .9999999 ? (this._x = Math.atan2(_, f),
                    this._y = Math.atan2(c, o)) : (this._x = Math.atan2(-m, x),
                    this._y = 0);
                    break;
                default:
                    console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + e)
                }
                return this._order = e,
                !0 === n && this._onChangeCallback(),
                this
            }
            setFromQuaternion(q, t, e) {
                return d.makeRotationFromQuaternion(q),
                this.setFromRotationMatrix(d, t, e)
            }
            setFromVector3(t, e=this._order) {
                return this.set(t.x, t.y, t.z, e)
            }
            reorder(t) {
                return f.setFromEuler(this),
                this.setFromQuaternion(f, t)
            }
            equals(t) {
                return t._x === this._x && t._y === this._y && t._z === this._z && t._order === this._order
            }
            fromArray(t) {
                return this._x = t[0],
                this._y = t[1],
                this._z = t[2],
                void 0 !== t[3] && (this._order = t[3]),
                this._onChangeCallback(),
                this
            }
            toArray(t=[], e=0) {
                return t[e] = this._x,
                t[e + 1] = this._y,
                t[e + 2] = this._z,
                t[e + 3] = this._order,
                t
            }
            toVector3(t) {
                return t ? t.set(this._x, this._y, this._z) : new o.a(this._x,this._y,this._z)
            }
            _onChange(t) {
                return this._onChangeCallback = t,
                this
            }
            _onChangeCallback() {}
        }
        m.prototype.isEuler = !0,
        m.DefaultOrder = "XYZ",
        m.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"];
        class v {
            constructor() {
                this.mask = 1
            }
            set(t) {
                this.mask = 1 << t | 0
            }
            enable(t) {
                this.mask |= 1 << t | 0
            }
            enableAll() {
                this.mask = -1
            }
            toggle(t) {
                this.mask ^= 1 << t | 0
            }
            disable(t) {
                this.mask &= ~(1 << t | 0)
            }
            disableAll() {
                this.mask = 0
            }
            test(t) {
                return 0 != (this.mask & t.mask)
            }
        }
        var _ = n(259);
        let x = 0;
        const y = new o.a
          , M = new r.a
          , w = new l.a
          , S = new o.a
          , T = new o.a
          , E = new o.a
          , A = new r.a
          , L = new o.a(1,0,0)
          , R = new o.a(0,1,0)
          , C = new o.a(0,0,1)
          , P = {
            type: "added"
        }
          , D = {
            type: "removed"
        };
        class N extends c.a {
            constructor() {
                super(),
                Object.defineProperty(this, "id", {
                    value: x++
                }),
                this.uuid = h.f(),
                this.name = "",
                this.type = "Object3D",
                this.parent = null,
                this.children = [],
                this.up = N.DefaultUp.clone();
                const t = new o.a
                  , e = new m
                  , n = new r.a
                  , c = new o.a(1,1,1);
                e._onChange((function() {
                    n.setFromEuler(e, !1)
                }
                )),
                n._onChange((function() {
                    e.setFromQuaternion(n, void 0, !1)
                }
                )),
                Object.defineProperties(this, {
                    position: {
                        configurable: !0,
                        enumerable: !0,
                        value: t
                    },
                    rotation: {
                        configurable: !0,
                        enumerable: !0,
                        value: e
                    },
                    quaternion: {
                        configurable: !0,
                        enumerable: !0,
                        value: n
                    },
                    scale: {
                        configurable: !0,
                        enumerable: !0,
                        value: c
                    },
                    modelViewMatrix: {
                        value: new l.a
                    },
                    normalMatrix: {
                        value: new _.a
                    }
                }),
                this.matrix = new l.a,
                this.matrixWorld = new l.a,
                this.matrixAutoUpdate = N.DefaultMatrixAutoUpdate,
                this.matrixWorldNeedsUpdate = !1,
                this.layers = new v,
                this.visible = !0,
                this.castShadow = !1,
                this.receiveShadow = !1,
                this.frustumCulled = !0,
                this.renderOrder = 0,
                this.animations = [],
                this.userData = {}
            }
            onBeforeRender() {}
            onAfterRender() {}
            applyMatrix4(t) {
                this.matrixAutoUpdate && this.updateMatrix(),
                this.matrix.premultiply(t),
                this.matrix.decompose(this.position, this.quaternion, this.scale)
            }
            applyQuaternion(q) {
                return this.quaternion.premultiply(q),
                this
            }
            setRotationFromAxisAngle(t, e) {
                this.quaternion.setFromAxisAngle(t, e)
            }
            setRotationFromEuler(t) {
                this.quaternion.setFromEuler(t, !0)
            }
            setRotationFromMatrix(t) {
                this.quaternion.setFromRotationMatrix(t)
            }
            setRotationFromQuaternion(q) {
                this.quaternion.copy(q)
            }
            rotateOnAxis(t, e) {
                return M.setFromAxisAngle(t, e),
                this.quaternion.multiply(M),
                this
            }
            rotateOnWorldAxis(t, e) {
                return M.setFromAxisAngle(t, e),
                this.quaternion.premultiply(M),
                this
            }
            rotateX(t) {
                return this.rotateOnAxis(L, t)
            }
            rotateY(t) {
                return this.rotateOnAxis(R, t)
            }
            rotateZ(t) {
                return this.rotateOnAxis(C, t)
            }
            translateOnAxis(t, e) {
                return y.copy(t).applyQuaternion(this.quaternion),
                this.position.add(y.multiplyScalar(e)),
                this
            }
            translateX(t) {
                return this.translateOnAxis(L, t)
            }
            translateY(t) {
                return this.translateOnAxis(R, t)
            }
            translateZ(t) {
                return this.translateOnAxis(C, t)
            }
            localToWorld(t) {
                return t.applyMatrix4(this.matrixWorld)
            }
            worldToLocal(t) {
                return t.applyMatrix4(w.copy(this.matrixWorld).invert())
            }
            lookAt(t, e, n) {
                t.isVector3 ? S.copy(t) : S.set(t, e, n);
                const r = this.parent;
                this.updateWorldMatrix(!0, !1),
                T.setFromMatrixPosition(this.matrixWorld),
                this.isCamera || this.isLight ? w.lookAt(T, S, this.up) : w.lookAt(S, T, this.up),
                this.quaternion.setFromRotationMatrix(w),
                r && (w.extractRotation(r.matrixWorld),
                M.setFromRotationMatrix(w),
                this.quaternion.premultiply(M.invert()))
            }
            add(object) {
                if (arguments.length > 1) {
                    for (let i = 0; i < arguments.length; i++)
                        this.add(arguments[i]);
                    return this
                }
                return object === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", object),
                this) : (object && object.isObject3D ? (null !== object.parent && object.parent.remove(object),
                object.parent = this,
                this.children.push(object),
                object.dispatchEvent(P)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object),
                this)
            }
            remove(object) {
                if (arguments.length > 1) {
                    for (let i = 0; i < arguments.length; i++)
                        this.remove(arguments[i]);
                    return this
                }
                const t = this.children.indexOf(object);
                return -1 !== t && (object.parent = null,
                this.children.splice(t, 1),
                object.dispatchEvent(D)),
                this
            }
            removeFromParent() {
                const t = this.parent;
                return null !== t && t.remove(this),
                this
            }
            clear() {
                for (let i = 0; i < this.children.length; i++) {
                    const object = this.children[i];
                    object.parent = null,
                    object.dispatchEvent(D)
                }
                return this.children.length = 0,
                this
            }
            attach(object) {
                return this.updateWorldMatrix(!0, !1),
                w.copy(this.matrixWorld).invert(),
                null !== object.parent && (object.parent.updateWorldMatrix(!0, !1),
                w.multiply(object.parent.matrixWorld)),
                object.applyMatrix4(w),
                this.add(object),
                object.updateWorldMatrix(!1, !0),
                this
            }
            getObjectById(t) {
                return this.getObjectByProperty("id", t)
            }
            getObjectByName(t) {
                return this.getObjectByProperty("name", t)
            }
            getObjectByProperty(t, e) {
                if (this[t] === e)
                    return this;
                for (let i = 0, n = this.children.length; i < n; i++) {
                    const object = this.children[i].getObjectByProperty(t, e);
                    if (void 0 !== object)
                        return object
                }
            }
            getWorldPosition(t) {
                return this.updateWorldMatrix(!0, !1),
                t.setFromMatrixPosition(this.matrixWorld)
            }
            getWorldQuaternion(t) {
                return this.updateWorldMatrix(!0, !1),
                this.matrixWorld.decompose(T, t, E),
                t
            }
            getWorldScale(t) {
                return this.updateWorldMatrix(!0, !1),
                this.matrixWorld.decompose(T, A, t),
                t
            }
            getWorldDirection(t) {
                this.updateWorldMatrix(!0, !1);
                const e = this.matrixWorld.elements;
                return t.set(e[8], e[9], e[10]).normalize()
            }
            raycast() {}
            traverse(t) {
                t(this);
                const e = this.children;
                for (let i = 0, n = e.length; i < n; i++)
                    e[i].traverse(t)
            }
            traverseVisible(t) {
                if (!1 === this.visible)
                    return;
                t(this);
                const e = this.children;
                for (let i = 0, n = e.length; i < n; i++)
                    e[i].traverseVisible(t)
            }
            traverseAncestors(t) {
                const e = this.parent;
                null !== e && (t(e),
                e.traverseAncestors(t))
            }
            updateMatrix() {
                this.matrix.compose(this.position, this.quaternion, this.scale),
                this.matrixWorldNeedsUpdate = !0
            }
            updateMatrixWorld(t) {
                this.matrixAutoUpdate && this.updateMatrix(),
                (this.matrixWorldNeedsUpdate || t) && (null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix),
                this.matrixWorldNeedsUpdate = !1,
                t = !0);
                const e = this.children;
                for (let i = 0, n = e.length; i < n; i++)
                    e[i].updateMatrixWorld(t)
            }
            updateWorldMatrix(t, e) {
                const n = this.parent;
                if (!0 === t && null !== n && n.updateWorldMatrix(!0, !1),
                this.matrixAutoUpdate && this.updateMatrix(),
                null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix),
                !0 === e) {
                    const t = this.children;
                    for (let i = 0, e = t.length; i < e; i++)
                        t[i].updateWorldMatrix(!1, !0)
                }
            }
            toJSON(meta) {
                const t = void 0 === meta || "string" == typeof meta
                  , output = {};
                t && (meta = {
                    geometries: {},
                    materials: {},
                    textures: {},
                    images: {},
                    shapes: {},
                    skeletons: {},
                    animations: {}
                },
                output.metadata = {
                    version: 4.5,
                    type: "Object",
                    generator: "Object3D.toJSON"
                });
                const object = {};
                function e(t, element) {
                    return void 0 === t[element.uuid] && (t[element.uuid] = element.toJSON(meta)),
                    element.uuid
                }
                if (object.uuid = this.uuid,
                object.type = this.type,
                "" !== this.name && (object.name = this.name),
                !0 === this.castShadow && (object.castShadow = !0),
                !0 === this.receiveShadow && (object.receiveShadow = !0),
                !1 === this.visible && (object.visible = !1),
                !1 === this.frustumCulled && (object.frustumCulled = !1),
                0 !== this.renderOrder && (object.renderOrder = this.renderOrder),
                "{}" !== JSON.stringify(this.userData) && (object.userData = this.userData),
                object.layers = this.layers.mask,
                object.matrix = this.matrix.toArray(),
                !1 === this.matrixAutoUpdate && (object.matrixAutoUpdate = !1),
                this.isInstancedMesh && (object.type = "InstancedMesh",
                object.count = this.count,
                object.instanceMatrix = this.instanceMatrix.toJSON(),
                null !== this.instanceColor && (object.instanceColor = this.instanceColor.toJSON())),
                this.isScene)
                    this.background && (this.background.isColor ? object.background = this.background.toJSON() : this.background.isTexture && (object.background = this.background.toJSON(meta).uuid)),
                    this.environment && this.environment.isTexture && (object.environment = this.environment.toJSON(meta).uuid);
                else if (this.isMesh || this.isLine || this.isPoints) {
                    object.geometry = e(meta.geometries, this.geometry);
                    const t = this.geometry.parameters;
                    if (void 0 !== t && void 0 !== t.shapes) {
                        const n = t.shapes;
                        if (Array.isArray(n))
                            for (let i = 0, t = n.length; i < t; i++) {
                                const t = n[i];
                                e(meta.shapes, t)
                            }
                        else
                            e(meta.shapes, n)
                    }
                }
                if (this.isSkinnedMesh && (object.bindMode = this.bindMode,
                object.bindMatrix = this.bindMatrix.toArray(),
                void 0 !== this.skeleton && (e(meta.skeletons, this.skeleton),
                object.skeleton = this.skeleton.uuid)),
                void 0 !== this.material)
                    if (Array.isArray(this.material)) {
                        const t = [];
                        for (let i = 0, n = this.material.length; i < n; i++)
                            t.push(e(meta.materials, this.material[i]));
                        object.material = t
                    } else
                        object.material = e(meta.materials, this.material);
                if (this.children.length > 0) {
                    object.children = [];
                    for (let i = 0; i < this.children.length; i++)
                        object.children.push(this.children[i].toJSON(meta).object)
                }
                if (this.animations.length > 0) {
                    object.animations = [];
                    for (let i = 0; i < this.animations.length; i++) {
                        const t = this.animations[i];
                        object.animations.push(e(meta.animations, t))
                    }
                }
                if (t) {
                    const t = n(meta.geometries)
                      , e = n(meta.materials)
                      , r = n(meta.textures)
                      , o = n(meta.images)
                      , l = n(meta.shapes)
                      , c = n(meta.skeletons)
                      , h = n(meta.animations);
                    t.length > 0 && (output.geometries = t),
                    e.length > 0 && (output.materials = e),
                    r.length > 0 && (output.textures = r),
                    o.length > 0 && (output.images = o),
                    l.length > 0 && (output.shapes = l),
                    c.length > 0 && (output.skeletons = c),
                    h.length > 0 && (output.animations = h)
                }
                return output.object = object,
                output;
                function n(t) {
                    const e = [];
                    for (const n in t) {
                        const data = t[n];
                        delete data.metadata,
                        e.push(data)
                    }
                    return e
                }
            }
            clone(t) {
                return (new this.constructor).copy(this, t)
            }
            copy(source, t=!0) {
                if (this.name = source.name,
                this.up.copy(source.up),
                this.position.copy(source.position),
                this.rotation.order = source.rotation.order,
                this.quaternion.copy(source.quaternion),
                this.scale.copy(source.scale),
                this.matrix.copy(source.matrix),
                this.matrixWorld.copy(source.matrixWorld),
                this.matrixAutoUpdate = source.matrixAutoUpdate,
                this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate,
                this.layers.mask = source.layers.mask,
                this.visible = source.visible,
                this.castShadow = source.castShadow,
                this.receiveShadow = source.receiveShadow,
                this.frustumCulled = source.frustumCulled,
                this.renderOrder = source.renderOrder,
                this.userData = JSON.parse(JSON.stringify(source.userData)),
                !0 === t)
                    for (let i = 0; i < source.children.length; i++) {
                        const t = source.children[i];
                        this.add(t.clone())
                    }
                return this
            }
        }
        N.DefaultUp = new o.a(0,1,0),
        N.DefaultMatrixAutoUpdate = !0,
        N.prototype.isObject3D = !0
    },
    266: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return v
        }
        ));
        var r = n(262)
          , o = n(240)
          , l = n(248)
          , c = n(249)
          , h = n(259)
          , d = n(260);
        let f;
        let m = 0;
        class v extends r.a {
            constructor(image=v.DEFAULT_IMAGE, t=v.DEFAULT_MAPPING, e=o.l, n=o.l, r=o.Q, d=o.R, f=o.ub, _=o.Hc, x=1, y=o.P) {
                super(),
                Object.defineProperty(this, "id", {
                    value: m++
                }),
                this.uuid = l.f(),
                this.name = "",
                this.image = image,
                this.mipmaps = [],
                this.mapping = t,
                this.wrapS = e,
                this.wrapT = n,
                this.magFilter = r,
                this.minFilter = d,
                this.anisotropy = x,
                this.format = f,
                this.internalFormat = null,
                this.type = _,
                this.offset = new c.a(0,0),
                this.repeat = new c.a(1,1),
                this.center = new c.a(0,0),
                this.rotation = 0,
                this.matrixAutoUpdate = !0,
                this.matrix = new h.a,
                this.generateMipmaps = !0,
                this.premultiplyAlpha = !1,
                this.flipY = !0,
                this.unpackAlignment = 4,
                this.encoding = y,
                this.userData = {},
                this.version = 0,
                this.onUpdate = null,
                this.isRenderTargetTexture = !1
            }
            updateMatrix() {
                this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y)
            }
            clone() {
                return (new this.constructor).copy(this)
            }
            copy(source) {
                return this.name = source.name,
                this.image = source.image,
                this.mipmaps = source.mipmaps.slice(0),
                this.mapping = source.mapping,
                this.wrapS = source.wrapS,
                this.wrapT = source.wrapT,
                this.magFilter = source.magFilter,
                this.minFilter = source.minFilter,
                this.anisotropy = source.anisotropy,
                this.format = source.format,
                this.internalFormat = source.internalFormat,
                this.type = source.type,
                this.offset.copy(source.offset),
                this.repeat.copy(source.repeat),
                this.center.copy(source.center),
                this.rotation = source.rotation,
                this.matrixAutoUpdate = source.matrixAutoUpdate,
                this.matrix.copy(source.matrix),
                this.generateMipmaps = source.generateMipmaps,
                this.premultiplyAlpha = source.premultiplyAlpha,
                this.flipY = source.flipY,
                this.unpackAlignment = source.unpackAlignment,
                this.encoding = source.encoding,
                this.userData = JSON.parse(JSON.stringify(source.userData)),
                this
            }
            toJSON(meta) {
                const t = void 0 === meta || "string" == typeof meta;
                if (!t && void 0 !== meta.textures[this.uuid])
                    return meta.textures[this.uuid];
                const output = {
                    metadata: {
                        version: 4.5,
                        type: "Texture",
                        generator: "Texture.toJSON"
                    },
                    uuid: this.uuid,
                    name: this.name,
                    mapping: this.mapping,
                    repeat: [this.repeat.x, this.repeat.y],
                    offset: [this.offset.x, this.offset.y],
                    center: [this.center.x, this.center.y],
                    rotation: this.rotation,
                    wrap: [this.wrapS, this.wrapT],
                    format: this.format,
                    type: this.type,
                    encoding: this.encoding,
                    minFilter: this.minFilter,
                    magFilter: this.magFilter,
                    anisotropy: this.anisotropy,
                    flipY: this.flipY,
                    premultiplyAlpha: this.premultiplyAlpha,
                    unpackAlignment: this.unpackAlignment
                };
                if (void 0 !== this.image) {
                    const image = this.image;
                    if (void 0 === image.uuid && (image.uuid = l.f()),
                    !t && void 0 === meta.images[image.uuid]) {
                        let t;
                        if (Array.isArray(image)) {
                            t = [];
                            for (let i = 0, e = image.length; i < e; i++)
                                image[i].isDataTexture ? t.push(_(image[i].image)) : t.push(_(image[i]))
                        } else
                            t = _(image);
                        meta.images[image.uuid] = {
                            uuid: image.uuid,
                            url: t
                        }
                    }
                    output.image = image.uuid
                }
                return "{}" !== JSON.stringify(this.userData) && (output.userData = this.userData),
                t || (meta.textures[this.uuid] = output),
                output
            }
            dispose() {
                this.dispatchEvent({
                    type: "dispose"
                })
            }
            transformUv(t) {
                if (this.mapping !== o.Gc)
                    return t;
                if (t.applyMatrix3(this.matrix),
                t.x < 0 || t.x > 1)
                    switch (this.wrapS) {
                    case o.ic:
                        t.x = t.x - Math.floor(t.x);
                        break;
                    case o.l:
                        t.x = t.x < 0 ? 0 : 1;
                        break;
                    case o.Z:
                        1 === Math.abs(Math.floor(t.x) % 2) ? t.x = Math.ceil(t.x) - t.x : t.x = t.x - Math.floor(t.x)
                    }
                if (t.y < 0 || t.y > 1)
                    switch (this.wrapT) {
                    case o.ic:
                        t.y = t.y - Math.floor(t.y);
                        break;
                    case o.l:
                        t.y = t.y < 0 ? 0 : 1;
                        break;
                    case o.Z:
                        1 === Math.abs(Math.floor(t.y) % 2) ? t.y = Math.ceil(t.y) - t.y : t.y = t.y - Math.floor(t.y)
                    }
                return this.flipY && (t.y = 1 - t.y),
                t
            }
            set needsUpdate(t) {
                !0 === t && this.version++
            }
        }
        function _(image) {
            return "undefined" != typeof HTMLImageElement && image instanceof HTMLImageElement || "undefined" != typeof HTMLCanvasElement && image instanceof HTMLCanvasElement || "undefined" != typeof ImageBitmap && image instanceof ImageBitmap ? class {
                static getDataURL(image) {
                    if (/^data:/i.test(image.src))
                        return image.src;
                    if ("undefined" == typeof HTMLCanvasElement)
                        return image.src;
                    let canvas;
                    if (image instanceof HTMLCanvasElement)
                        canvas = image;
                    else {
                        void 0 === f && (f = Object(d.b)("canvas")),
                        f.width = image.width,
                        f.height = image.height;
                        const t = f.getContext("2d");
                        image instanceof ImageData ? t.putImageData(image, 0, 0) : t.drawImage(image, 0, 0, image.width, image.height),
                        canvas = f
                    }
                    return canvas.width > 2048 || canvas.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", image),
                    canvas.toDataURL("image/jpeg", .6)) : canvas.toDataURL("image/png")
                }
            }
            .getDataURL(image) : image.data ? {
                data: Array.prototype.slice.call(image.data),
                width: image.width,
                height: image.height,
                type: image.data.constructor.name
            } : (console.warn("THREE.Texture: Unable to serialize Texture."),
            {})
        }
        v.DEFAULT_IMAGE = void 0,
        v.DEFAULT_MAPPING = o.Gc,
        v.prototype.isTexture = !0
    },
    270: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return l
        }
        ));
        var r = n(296)
          , o = n(248);
        class l extends r.a {
            constructor(t=50, e=1, n=.1, r=2e3) {
                super(),
                this.type = "PerspectiveCamera",
                this.fov = t,
                this.zoom = 1,
                this.near = n,
                this.far = r,
                this.focus = 10,
                this.aspect = e,
                this.view = null,
                this.filmGauge = 35,
                this.filmOffset = 0,
                this.updateProjectionMatrix()
            }
            copy(source, t) {
                return super.copy(source, t),
                this.fov = source.fov,
                this.zoom = source.zoom,
                this.near = source.near,
                this.far = source.far,
                this.focus = source.focus,
                this.aspect = source.aspect,
                this.view = null === source.view ? null : Object.assign({}, source.view),
                this.filmGauge = source.filmGauge,
                this.filmOffset = source.filmOffset,
                this
            }
            setFocalLength(t) {
                const e = .5 * this.getFilmHeight() / t;
                this.fov = 2 * o.b * Math.atan(e),
                this.updateProjectionMatrix()
            }
            getFocalLength() {
                const t = Math.tan(.5 * o.a * this.fov);
                return .5 * this.getFilmHeight() / t
            }
            getEffectiveFOV() {
                return 2 * o.b * Math.atan(Math.tan(.5 * o.a * this.fov) / this.zoom)
            }
            getFilmWidth() {
                return this.filmGauge * Math.min(this.aspect, 1)
            }
            getFilmHeight() {
                return this.filmGauge / Math.max(this.aspect, 1)
            }
            setViewOffset(t, e, n, r, o, l) {
                this.aspect = t / e,
                null === this.view && (this.view = {
                    enabled: !0,
                    fullWidth: 1,
                    fullHeight: 1,
                    offsetX: 0,
                    offsetY: 0,
                    width: 1,
                    height: 1
                }),
                this.view.enabled = !0,
                this.view.fullWidth = t,
                this.view.fullHeight = e,
                this.view.offsetX = n,
                this.view.offsetY = r,
                this.view.width = o,
                this.view.height = l,
                this.updateProjectionMatrix()
            }
            clearViewOffset() {
                null !== this.view && (this.view.enabled = !1),
                this.updateProjectionMatrix()
            }
            updateProjectionMatrix() {
                const t = this.near;
                let e = t * Math.tan(.5 * o.a * this.fov) / this.zoom
                  , n = 2 * e
                  , r = this.aspect * n
                  , l = -.5 * r;
                const view = this.view;
                if (null !== this.view && this.view.enabled) {
                    const t = view.fullWidth
                      , o = view.fullHeight;
                    l += view.offsetX * r / t,
                    e -= view.offsetY * n / o,
                    r *= view.width / t,
                    n *= view.height / o
                }
                const c = this.filmOffset;
                0 !== c && (l += t * c / this.getFilmWidth()),
                this.projectionMatrix.makePerspective(l, l + r, e, e - n, t, this.far),
                this.projectionMatrixInverse.copy(this.projectionMatrix).invert()
            }
            toJSON(meta) {
                const data = super.toJSON(meta);
                return data.object.fov = this.fov,
                data.object.zoom = this.zoom,
                data.object.near = this.near,
                data.object.far = this.far,
                data.object.focus = this.focus,
                data.object.aspect = this.aspect,
                null !== this.view && (data.object.view = Object.assign({}, this.view)),
                data.object.filmGauge = this.filmGauge,
                data.object.filmOffset = this.filmOffset,
                data
            }
        }
        l.prototype.isPerspectiveCamera = !0
    },
    271: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return et
        }
        ));
        var r = n(241)
          , o = n(249)
          , l = n(290);
        const c = new r.a
          , h = new r.a
          , d = new r.a
          , f = new r.a
          , m = new r.a
          , v = new r.a
          , _ = new r.a;
        class x {
            constructor(t=new r.a, e=new r.a(0,0,-1)) {
                this.origin = t,
                this.direction = e
            }
            set(t, e) {
                return this.origin.copy(t),
                this.direction.copy(e),
                this
            }
            copy(t) {
                return this.origin.copy(t.origin),
                this.direction.copy(t.direction),
                this
            }
            at(t, e) {
                return e.copy(this.direction).multiplyScalar(t).add(this.origin)
            }
            lookAt(t) {
                return this.direction.copy(t).sub(this.origin).normalize(),
                this
            }
            recast(t) {
                return this.origin.copy(this.at(t, c)),
                this
            }
            closestPointToPoint(t, e) {
                e.subVectors(t, this.origin);
                const n = e.dot(this.direction);
                return n < 0 ? e.copy(this.origin) : e.copy(this.direction).multiplyScalar(n).add(this.origin)
            }
            distanceToPoint(t) {
                return Math.sqrt(this.distanceSqToPoint(t))
            }
            distanceSqToPoint(t) {
                const e = c.subVectors(t, this.origin).dot(this.direction);
                return e < 0 ? this.origin.distanceToSquared(t) : (c.copy(this.direction).multiplyScalar(e).add(this.origin),
                c.distanceToSquared(t))
            }
            distanceSqToSegment(t, e, n, r) {
                h.copy(t).add(e).multiplyScalar(.5),
                d.copy(e).sub(t).normalize(),
                f.copy(this.origin).sub(h);
                const o = .5 * t.distanceTo(e)
                  , l = -this.direction.dot(d)
                  , c = f.dot(this.direction)
                  , m = -f.dot(d)
                  , v = f.lengthSq()
                  , _ = Math.abs(1 - l * l);
                let x, y, M, w;
                if (_ > 0)
                    if (x = l * m - c,
                    y = l * c - m,
                    w = o * _,
                    x >= 0)
                        if (y >= -w)
                            if (y <= w) {
                                const t = 1 / _;
                                x *= t,
                                y *= t,
                                M = x * (x + l * y + 2 * c) + y * (l * x + y + 2 * m) + v
                            } else
                                y = o,
                                x = Math.max(0, -(l * y + c)),
                                M = -x * x + y * (y + 2 * m) + v;
                        else
                            y = -o,
                            x = Math.max(0, -(l * y + c)),
                            M = -x * x + y * (y + 2 * m) + v;
                    else
                        y <= -w ? (x = Math.max(0, -(-l * o + c)),
                        y = x > 0 ? -o : Math.min(Math.max(-o, -m), o),
                        M = -x * x + y * (y + 2 * m) + v) : y <= w ? (x = 0,
                        y = Math.min(Math.max(-o, -m), o),
                        M = y * (y + 2 * m) + v) : (x = Math.max(0, -(l * o + c)),
                        y = x > 0 ? o : Math.min(Math.max(-o, -m), o),
                        M = -x * x + y * (y + 2 * m) + v);
                else
                    y = l > 0 ? -o : o,
                    x = Math.max(0, -(l * y + c)),
                    M = -x * x + y * (y + 2 * m) + v;
                return n && n.copy(this.direction).multiplyScalar(x).add(this.origin),
                r && r.copy(d).multiplyScalar(y).add(h),
                M
            }
            intersectSphere(t, e) {
                c.subVectors(t.center, this.origin);
                const n = c.dot(this.direction)
                  , r = c.dot(c) - n * n
                  , o = t.radius * t.radius;
                if (r > o)
                    return null;
                const l = Math.sqrt(o - r)
                  , h = n - l
                  , d = n + l;
                return h < 0 && d < 0 ? null : h < 0 ? this.at(d, e) : this.at(h, e)
            }
            intersectsSphere(t) {
                return this.distanceSqToPoint(t.center) <= t.radius * t.radius
            }
            distanceToPlane(t) {
                const e = t.normal.dot(this.direction);
                if (0 === e)
                    return 0 === t.distanceToPoint(this.origin) ? 0 : null;
                const n = -(this.origin.dot(t.normal) + t.constant) / e;
                return n >= 0 ? n : null
            }
            intersectPlane(t, e) {
                const n = this.distanceToPlane(t);
                return null === n ? null : this.at(n, e)
            }
            intersectsPlane(t) {
                const e = t.distanceToPoint(this.origin);
                if (0 === e)
                    return !0;
                return t.normal.dot(this.direction) * e < 0
            }
            intersectBox(t, e) {
                let n, r, o, l, c, h;
                const d = 1 / this.direction.x
                  , f = 1 / this.direction.y
                  , m = 1 / this.direction.z
                  , v = this.origin;
                return d >= 0 ? (n = (t.min.x - v.x) * d,
                r = (t.max.x - v.x) * d) : (n = (t.max.x - v.x) * d,
                r = (t.min.x - v.x) * d),
                f >= 0 ? (o = (t.min.y - v.y) * f,
                l = (t.max.y - v.y) * f) : (o = (t.max.y - v.y) * f,
                l = (t.min.y - v.y) * f),
                n > l || o > r ? null : ((o > n || n != n) && (n = o),
                (l < r || r != r) && (r = l),
                m >= 0 ? (c = (t.min.z - v.z) * m,
                h = (t.max.z - v.z) * m) : (c = (t.max.z - v.z) * m,
                h = (t.min.z - v.z) * m),
                n > h || c > r ? null : ((c > n || n != n) && (n = c),
                (h < r || r != r) && (r = h),
                r < 0 ? null : this.at(n >= 0 ? n : r, e)))
            }
            intersectsBox(t) {
                return null !== this.intersectBox(t, c)
            }
            intersectTriangle(a, b, t, e, n) {
                m.subVectors(b, a),
                v.subVectors(t, a),
                _.crossVectors(m, v);
                let r, o = this.direction.dot(_);
                if (o > 0) {
                    if (e)
                        return null;
                    r = 1
                } else {
                    if (!(o < 0))
                        return null;
                    r = -1,
                    o = -o
                }
                f.subVectors(this.origin, a);
                const l = r * this.direction.dot(v.crossVectors(f, v));
                if (l < 0)
                    return null;
                const c = r * this.direction.dot(m.cross(f));
                if (c < 0)
                    return null;
                if (l + c > o)
                    return null;
                const h = -r * f.dot(_);
                return h < 0 ? null : this.at(h / o, n)
            }
            applyMatrix4(t) {
                return this.origin.applyMatrix4(t),
                this.direction.transformDirection(t),
                this
            }
            equals(t) {
                return t.origin.equals(this.origin) && t.direction.equals(this.direction)
            }
            clone() {
                return (new this.constructor).copy(this)
            }
        }
        var y = n(258)
          , M = n(265);
        const w = new r.a
          , S = new r.a
          , T = new r.a
          , E = new r.a
          , A = new r.a
          , L = new r.a
          , R = new r.a
          , C = new r.a
          , P = new r.a
          , D = new r.a;
        class N {
            constructor(a=new r.a, b=new r.a, t=new r.a) {
                this.a = a,
                this.b = b,
                this.c = t
            }
            static getNormal(a, b, t, e) {
                e.subVectors(t, b),
                w.subVectors(a, b),
                e.cross(w);
                const n = e.lengthSq();
                return n > 0 ? e.multiplyScalar(1 / Math.sqrt(n)) : e.set(0, 0, 0)
            }
            static getBarycoord(t, a, b, e, n) {
                w.subVectors(e, a),
                S.subVectors(b, a),
                T.subVectors(t, a);
                const r = w.dot(w)
                  , o = w.dot(S)
                  , l = w.dot(T)
                  , c = S.dot(S)
                  , h = S.dot(T)
                  , d = r * c - o * o;
                if (0 === d)
                    return n.set(-2, -1, -1);
                const f = 1 / d
                  , u = (c * l - o * h) * f
                  , m = (r * h - o * l) * f;
                return n.set(1 - u - m, m, u)
            }
            static containsPoint(t, a, b, e) {
                return this.getBarycoord(t, a, b, e, E),
                E.x >= 0 && E.y >= 0 && E.x + E.y <= 1
            }
            static getUV(t, e, n, r, o, l, c, h) {
                return this.getBarycoord(t, e, n, r, E),
                h.set(0, 0),
                h.addScaledVector(o, E.x),
                h.addScaledVector(l, E.y),
                h.addScaledVector(c, E.z),
                h
            }
            static isFrontFacing(a, b, t, e) {
                return w.subVectors(t, b),
                S.subVectors(a, b),
                w.cross(S).dot(e) < 0
            }
            set(a, b, t) {
                return this.a.copy(a),
                this.b.copy(b),
                this.c.copy(t),
                this
            }
            setFromPointsAndIndices(t, e, n, r) {
                return this.a.copy(t[e]),
                this.b.copy(t[n]),
                this.c.copy(t[r]),
                this
            }
            setFromAttributeAndIndices(t, e, n, r) {
                return this.a.fromBufferAttribute(t, e),
                this.b.fromBufferAttribute(t, n),
                this.c.fromBufferAttribute(t, r),
                this
            }
            clone() {
                return (new this.constructor).copy(this)
            }
            copy(t) {
                return this.a.copy(t.a),
                this.b.copy(t.b),
                this.c.copy(t.c),
                this
            }
            getArea() {
                return w.subVectors(this.c, this.b),
                S.subVectors(this.a, this.b),
                .5 * w.cross(S).length()
            }
            getMidpoint(t) {
                return t.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3)
            }
            getNormal(t) {
                return N.getNormal(this.a, this.b, this.c, t)
            }
            getPlane(t) {
                return t.setFromCoplanarPoints(this.a, this.b, this.c)
            }
            getBarycoord(t, e) {
                return N.getBarycoord(t, this.a, this.b, this.c, e)
            }
            getUV(t, e, n, r, o) {
                return N.getUV(t, this.a, this.b, this.c, e, n, r, o)
            }
            containsPoint(t) {
                return N.containsPoint(t, this.a, this.b, this.c)
            }
            isFrontFacing(t) {
                return N.isFrontFacing(this.a, this.b, this.c, t)
            }
            intersectsBox(t) {
                return t.intersectsTriangle(this)
            }
            closestPointToPoint(p, t) {
                const a = this.a
                  , b = this.b
                  , e = this.c;
                let n, r;
                A.subVectors(b, a),
                L.subVectors(e, a),
                C.subVectors(p, a);
                const o = A.dot(C)
                  , l = L.dot(C);
                if (o <= 0 && l <= 0)
                    return t.copy(a);
                P.subVectors(p, b);
                const c = A.dot(P)
                  , h = L.dot(P);
                if (c >= 0 && h <= c)
                    return t.copy(b);
                const d = o * h - c * l;
                if (d <= 0 && o >= 0 && c <= 0)
                    return n = o / (o - c),
                    t.copy(a).addScaledVector(A, n);
                D.subVectors(p, e);
                const f = A.dot(D)
                  , m = L.dot(D);
                if (m >= 0 && f <= m)
                    return t.copy(e);
                const v = f * l - o * m;
                if (v <= 0 && l >= 0 && m <= 0)
                    return r = l / (l - m),
                    t.copy(a).addScaledVector(L, r);
                const _ = c * m - f * h;
                if (_ <= 0 && h - c >= 0 && f - m >= 0)
                    return R.subVectors(e, b),
                    r = (h - c) / (h - c + (f - m)),
                    t.copy(b).addScaledVector(R, r);
                const x = 1 / (_ + v + d);
                return n = v * x,
                r = d * x,
                t.copy(a).addScaledVector(A, n).addScaledVector(L, r)
            }
            equals(t) {
                return t.a.equals(this.a) && t.b.equals(this.b) && t.c.equals(this.c)
            }
        }
        var I = n(240)
          , O = n(291)
          , F = n(264);
        const U = new y.a
          , z = new x
          , B = new l.a
          , G = new r.a
          , H = new r.a
          , k = new r.a
          , V = new r.a
          , W = new r.a
          , j = new r.a
          , X = new r.a
          , Y = new r.a
          , Z = new r.a
          , J = new o.a
          , K = new o.a
          , Q = new o.a
          , $ = new r.a
          , tt = new r.a;
        class et extends M.a {
            constructor(t=new F.a, e=new O.a) {
                super(),
                this.type = "Mesh",
                this.geometry = t,
                this.material = e,
                this.updateMorphTargets()
            }
            copy(source) {
                return super.copy(source),
                void 0 !== source.morphTargetInfluences && (this.morphTargetInfluences = source.morphTargetInfluences.slice()),
                void 0 !== source.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary)),
                this.material = source.material,
                this.geometry = source.geometry,
                this
            }
            updateMorphTargets() {
                const t = this.geometry;
                if (t.isBufferGeometry) {
                    const e = t.morphAttributes
                      , n = Object.keys(e);
                    if (n.length > 0) {
                        const t = e[n[0]];
                        if (void 0 !== t) {
                            this.morphTargetInfluences = [],
                            this.morphTargetDictionary = {};
                            for (let e = 0, n = t.length; e < n; e++) {
                                const n = t[e].name || String(e);
                                this.morphTargetInfluences.push(0),
                                this.morphTargetDictionary[n] = e
                            }
                        }
                    }
                } else {
                    const e = t.morphTargets;
                    void 0 !== e && e.length > 0 && console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")
                }
            }
            raycast(t, e) {
                const n = this.geometry
                  , r = this.material
                  , o = this.matrixWorld;
                if (void 0 === r)
                    return;
                if (null === n.boundingSphere && n.computeBoundingSphere(),
                B.copy(n.boundingSphere),
                B.applyMatrix4(o),
                !1 === t.ray.intersectsSphere(B))
                    return;
                if (U.copy(o).invert(),
                z.copy(t.ray).applyMatrix4(U),
                null !== n.boundingBox && !1 === z.intersectsBox(n.boundingBox))
                    return;
                let l;
                if (n.isBufferGeometry) {
                    const o = n.index
                      , c = n.attributes.position
                      , h = n.morphAttributes.position
                      , d = n.morphTargetsRelative
                      , f = n.attributes.uv
                      , m = n.attributes.uv2
                      , v = n.groups
                      , _ = n.drawRange;
                    if (null !== o)
                        if (Array.isArray(r))
                            for (let i = 0, n = v.length; i < n; i++) {
                                const n = v[i]
                                  , x = r[n.materialIndex];
                                for (let r = Math.max(n.start, _.start), v = Math.min(o.count, Math.min(n.start + n.count, _.start + _.count)); r < v; r += 3) {
                                    const a = o.getX(r)
                                      , b = o.getX(r + 1)
                                      , v = o.getX(r + 2);
                                    l = nt(this, x, t, z, c, h, d, f, m, a, b, v),
                                    l && (l.faceIndex = Math.floor(r / 3),
                                    l.face.materialIndex = n.materialIndex,
                                    e.push(l))
                                }
                            }
                        else {
                            for (let i = Math.max(0, _.start), n = Math.min(o.count, _.start + _.count); i < n; i += 3) {
                                const a = o.getX(i)
                                  , b = o.getX(i + 1)
                                  , n = o.getX(i + 2);
                                l = nt(this, r, t, z, c, h, d, f, m, a, b, n),
                                l && (l.faceIndex = Math.floor(i / 3),
                                e.push(l))
                            }
                        }
                    else if (void 0 !== c)
                        if (Array.isArray(r))
                            for (let i = 0, n = v.length; i < n; i++) {
                                const n = v[i]
                                  , o = r[n.materialIndex];
                                for (let r = Math.max(n.start, _.start), v = Math.min(c.count, Math.min(n.start + n.count, _.start + _.count)); r < v; r += 3) {
                                    l = nt(this, o, t, z, c, h, d, f, m, r, r + 1, r + 2),
                                    l && (l.faceIndex = Math.floor(r / 3),
                                    l.face.materialIndex = n.materialIndex,
                                    e.push(l))
                                }
                            }
                        else {
                            for (let i = Math.max(0, _.start), n = Math.min(c.count, _.start + _.count); i < n; i += 3) {
                                l = nt(this, r, t, z, c, h, d, f, m, i, i + 1, i + 2),
                                l && (l.faceIndex = Math.floor(i / 3),
                                e.push(l))
                            }
                        }
                } else
                    n.isGeometry && console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")
            }
        }
        function nt(object, t, e, n, l, c, h, d, f, a, b, m) {
            G.fromBufferAttribute(l, a),
            H.fromBufferAttribute(l, b),
            k.fromBufferAttribute(l, m);
            const v = object.morphTargetInfluences;
            if (c && v) {
                X.set(0, 0, 0),
                Y.set(0, 0, 0),
                Z.set(0, 0, 0);
                for (let i = 0, t = c.length; i < t; i++) {
                    const t = v[i]
                      , e = c[i];
                    0 !== t && (V.fromBufferAttribute(e, a),
                    W.fromBufferAttribute(e, b),
                    j.fromBufferAttribute(e, m),
                    h ? (X.addScaledVector(V, t),
                    Y.addScaledVector(W, t),
                    Z.addScaledVector(j, t)) : (X.addScaledVector(V.sub(G), t),
                    Y.addScaledVector(W.sub(H), t),
                    Z.addScaledVector(j.sub(k), t)))
                }
                G.add(X),
                H.add(Y),
                k.add(Z)
            }
            object.isSkinnedMesh && (object.boneTransform(a, G),
            object.boneTransform(b, H),
            object.boneTransform(m, k));
            const _ = function(object, t, e, n, r, o, l, c) {
                let h;
                if (h = t.side === I.h ? n.intersectTriangle(l, o, r, !0, c) : n.intersectTriangle(r, o, l, t.side !== I.x, c),
                null === h)
                    return null;
                tt.copy(c),
                tt.applyMatrix4(object.matrixWorld);
                const d = e.ray.origin.distanceTo(tt);
                return d < e.near || d > e.far ? null : {
                    distance: d,
                    point: tt.clone(),
                    object: object
                }
            }(object, t, e, n, G, H, k, $);
            if (_) {
                d && (J.fromBufferAttribute(d, a),
                K.fromBufferAttribute(d, b),
                Q.fromBufferAttribute(d, m),
                _.uv = N.getUV($, G, H, k, J, K, Q, new o.a)),
                f && (J.fromBufferAttribute(f, a),
                K.fromBufferAttribute(f, b),
                Q.fromBufferAttribute(f, m),
                _.uv2 = N.getUV($, G, H, k, J, K, Q, new o.a));
                const t = {
                    a: a,
                    b: b,
                    c: m,
                    normal: new r.a,
                    materialIndex: 0
                };
                N.getNormal(G, H, k, t.normal),
                _.face = t
            }
            return _
        }
        et.prototype.isMesh = !0
    },
    280: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return h
        }
        ));
        var r = n(262)
          , o = n(240)
          , l = n(248);
        let c = 0;
        class h extends r.a {
            constructor() {
                super(),
                Object.defineProperty(this, "id", {
                    value: c++
                }),
                this.uuid = l.f(),
                this.name = "",
                this.type = "Material",
                this.fog = !0,
                this.blending = o.jb,
                this.side = o.F,
                this.vertexColors = !1,
                this.opacity = 1,
                this.format = o.ub,
                this.transparent = !1,
                this.blendSrc = o.zc,
                this.blendDst = o.pb,
                this.blendEquation = o.b,
                this.blendSrcAlpha = null,
                this.blendDstAlpha = null,
                this.blendEquationAlpha = null,
                this.depthFunc = o.O,
                this.depthTest = !0,
                this.depthWrite = !0,
                this.stencilWriteMask = 255,
                this.stencilFunc = o.g,
                this.stencilRef = 0,
                this.stencilFuncMask = 255,
                this.stencilFail = o.M,
                this.stencilZFail = o.M,
                this.stencilZPass = o.M,
                this.stencilWrite = !1,
                this.clippingPlanes = null,
                this.clipIntersection = !1,
                this.clipShadows = !1,
                this.shadowSide = null,
                this.colorWrite = !0,
                this.precision = null,
                this.polygonOffset = !1,
                this.polygonOffsetFactor = 0,
                this.polygonOffsetUnits = 0,
                this.dithering = !1,
                this.alphaToCoverage = !1,
                this.premultipliedAlpha = !1,
                this.visible = !0,
                this.toneMapped = !0,
                this.userData = {},
                this.version = 0,
                this._alphaTest = 0
            }
            get alphaTest() {
                return this._alphaTest
            }
            set alphaTest(t) {
                this._alphaTest > 0 != t > 0 && this.version++,
                this._alphaTest = t
            }
            onBuild() {}
            onBeforeRender() {}
            onBeforeCompile() {}
            customProgramCacheKey() {
                return this.onBeforeCompile.toString()
            }
            setValues(t) {
                if (void 0 !== t)
                    for (const e in t) {
                        const n = t[e];
                        if (void 0 === n) {
                            console.warn("THREE.Material: '" + e + "' parameter is undefined.");
                            continue
                        }
                        if ("shading" === e) {
                            console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."),
                            this.flatShading = n === o.D;
                            continue
                        }
                        const r = this[e];
                        void 0 !== r ? r && r.isColor ? r.set(n) : r && r.isVector3 && n && n.isVector3 ? r.copy(n) : this[e] = n : console.warn("THREE." + this.type + ": '" + e + "' is not a property of this material.")
                    }
            }
            toJSON(meta) {
                const t = void 0 === meta || "string" == typeof meta;
                t && (meta = {
                    textures: {},
                    images: {}
                });
                const data = {
                    metadata: {
                        version: 4.5,
                        type: "Material",
                        generator: "Material.toJSON"
                    }
                };
                function e(t) {
                    const e = [];
                    for (const n in t) {
                        const data = t[n];
                        delete data.metadata,
                        e.push(data)
                    }
                    return e
                }
                if (data.uuid = this.uuid,
                data.type = this.type,
                "" !== this.name && (data.name = this.name),
                this.color && this.color.isColor && (data.color = this.color.getHex()),
                void 0 !== this.roughness && (data.roughness = this.roughness),
                void 0 !== this.metalness && (data.metalness = this.metalness),
                void 0 !== this.sheen && (data.sheen = this.sheen),
                this.sheenColor && this.sheenColor.isColor && (data.sheenColor = this.sheenColor.getHex()),
                void 0 !== this.sheenRoughness && (data.sheenRoughness = this.sheenRoughness),
                this.emissive && this.emissive.isColor && (data.emissive = this.emissive.getHex()),
                this.emissiveIntensity && 1 !== this.emissiveIntensity && (data.emissiveIntensity = this.emissiveIntensity),
                this.specular && this.specular.isColor && (data.specular = this.specular.getHex()),
                void 0 !== this.specularIntensity && (data.specularIntensity = this.specularIntensity),
                this.specularColor && this.specularColor.isColor && (data.specularColor = this.specularColor.getHex()),
                void 0 !== this.shininess && (data.shininess = this.shininess),
                void 0 !== this.clearcoat && (data.clearcoat = this.clearcoat),
                void 0 !== this.clearcoatRoughness && (data.clearcoatRoughness = this.clearcoatRoughness),
                this.clearcoatMap && this.clearcoatMap.isTexture && (data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid),
                this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid),
                this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid,
                data.clearcoatNormalScale = this.clearcoatNormalScale.toArray()),
                this.map && this.map.isTexture && (data.map = this.map.toJSON(meta).uuid),
                this.matcap && this.matcap.isTexture && (data.matcap = this.matcap.toJSON(meta).uuid),
                this.alphaMap && this.alphaMap.isTexture && (data.alphaMap = this.alphaMap.toJSON(meta).uuid),
                this.lightMap && this.lightMap.isTexture && (data.lightMap = this.lightMap.toJSON(meta).uuid,
                data.lightMapIntensity = this.lightMapIntensity),
                this.aoMap && this.aoMap.isTexture && (data.aoMap = this.aoMap.toJSON(meta).uuid,
                data.aoMapIntensity = this.aoMapIntensity),
                this.bumpMap && this.bumpMap.isTexture && (data.bumpMap = this.bumpMap.toJSON(meta).uuid,
                data.bumpScale = this.bumpScale),
                this.normalMap && this.normalMap.isTexture && (data.normalMap = this.normalMap.toJSON(meta).uuid,
                data.normalMapType = this.normalMapType,
                data.normalScale = this.normalScale.toArray()),
                this.displacementMap && this.displacementMap.isTexture && (data.displacementMap = this.displacementMap.toJSON(meta).uuid,
                data.displacementScale = this.displacementScale,
                data.displacementBias = this.displacementBias),
                this.roughnessMap && this.roughnessMap.isTexture && (data.roughnessMap = this.roughnessMap.toJSON(meta).uuid),
                this.metalnessMap && this.metalnessMap.isTexture && (data.metalnessMap = this.metalnessMap.toJSON(meta).uuid),
                this.emissiveMap && this.emissiveMap.isTexture && (data.emissiveMap = this.emissiveMap.toJSON(meta).uuid),
                this.specularMap && this.specularMap.isTexture && (data.specularMap = this.specularMap.toJSON(meta).uuid),
                this.specularIntensityMap && this.specularIntensityMap.isTexture && (data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid),
                this.specularColorMap && this.specularColorMap.isTexture && (data.specularColorMap = this.specularColorMap.toJSON(meta).uuid),
                this.envMap && this.envMap.isTexture && (data.envMap = this.envMap.toJSON(meta).uuid,
                void 0 !== this.combine && (data.combine = this.combine)),
                void 0 !== this.envMapIntensity && (data.envMapIntensity = this.envMapIntensity),
                void 0 !== this.reflectivity && (data.reflectivity = this.reflectivity),
                void 0 !== this.refractionRatio && (data.refractionRatio = this.refractionRatio),
                this.gradientMap && this.gradientMap.isTexture && (data.gradientMap = this.gradientMap.toJSON(meta).uuid),
                void 0 !== this.transmission && (data.transmission = this.transmission),
                this.transmissionMap && this.transmissionMap.isTexture && (data.transmissionMap = this.transmissionMap.toJSON(meta).uuid),
                void 0 !== this.thickness && (data.thickness = this.thickness),
                this.thicknessMap && this.thicknessMap.isTexture && (data.thicknessMap = this.thicknessMap.toJSON(meta).uuid),
                void 0 !== this.attenuationDistance && (data.attenuationDistance = this.attenuationDistance),
                void 0 !== this.attenuationColor && (data.attenuationColor = this.attenuationColor.getHex()),
                void 0 !== this.size && (data.size = this.size),
                null !== this.shadowSide && (data.shadowSide = this.shadowSide),
                void 0 !== this.sizeAttenuation && (data.sizeAttenuation = this.sizeAttenuation),
                this.blending !== o.jb && (data.blending = this.blending),
                this.side !== o.F && (data.side = this.side),
                this.vertexColors && (data.vertexColors = !0),
                this.opacity < 1 && (data.opacity = this.opacity),
                this.format !== o.ub && (data.format = this.format),
                !0 === this.transparent && (data.transparent = this.transparent),
                data.depthFunc = this.depthFunc,
                data.depthTest = this.depthTest,
                data.depthWrite = this.depthWrite,
                data.colorWrite = this.colorWrite,
                data.stencilWrite = this.stencilWrite,
                data.stencilWriteMask = this.stencilWriteMask,
                data.stencilFunc = this.stencilFunc,
                data.stencilRef = this.stencilRef,
                data.stencilFuncMask = this.stencilFuncMask,
                data.stencilFail = this.stencilFail,
                data.stencilZFail = this.stencilZFail,
                data.stencilZPass = this.stencilZPass,
                this.rotation && 0 !== this.rotation && (data.rotation = this.rotation),
                !0 === this.polygonOffset && (data.polygonOffset = !0),
                0 !== this.polygonOffsetFactor && (data.polygonOffsetFactor = this.polygonOffsetFactor),
                0 !== this.polygonOffsetUnits && (data.polygonOffsetUnits = this.polygonOffsetUnits),
                this.linewidth && 1 !== this.linewidth && (data.linewidth = this.linewidth),
                void 0 !== this.dashSize && (data.dashSize = this.dashSize),
                void 0 !== this.gapSize && (data.gapSize = this.gapSize),
                void 0 !== this.scale && (data.scale = this.scale),
                !0 === this.dithering && (data.dithering = !0),
                this.alphaTest > 0 && (data.alphaTest = this.alphaTest),
                !0 === this.alphaToCoverage && (data.alphaToCoverage = this.alphaToCoverage),
                !0 === this.premultipliedAlpha && (data.premultipliedAlpha = this.premultipliedAlpha),
                !0 === this.wireframe && (data.wireframe = this.wireframe),
                this.wireframeLinewidth > 1 && (data.wireframeLinewidth = this.wireframeLinewidth),
                "round" !== this.wireframeLinecap && (data.wireframeLinecap = this.wireframeLinecap),
                "round" !== this.wireframeLinejoin && (data.wireframeLinejoin = this.wireframeLinejoin),
                !0 === this.flatShading && (data.flatShading = this.flatShading),
                !1 === this.visible && (data.visible = !1),
                !1 === this.toneMapped && (data.toneMapped = !1),
                "{}" !== JSON.stringify(this.userData) && (data.userData = this.userData),
                t) {
                    const t = e(meta.textures)
                      , n = e(meta.images);
                    t.length > 0 && (data.textures = t),
                    n.length > 0 && (data.images = n)
                }
                return data
            }
            clone() {
                return (new this.constructor).copy(this)
            }
            copy(source) {
                this.name = source.name,
                this.fog = source.fog,
                this.blending = source.blending,
                this.side = source.side,
                this.vertexColors = source.vertexColors,
                this.opacity = source.opacity,
                this.format = source.format,
                this.transparent = source.transparent,
                this.blendSrc = source.blendSrc,
                this.blendDst = source.blendDst,
                this.blendEquation = source.blendEquation,
                this.blendSrcAlpha = source.blendSrcAlpha,
                this.blendDstAlpha = source.blendDstAlpha,
                this.blendEquationAlpha = source.blendEquationAlpha,
                this.depthFunc = source.depthFunc,
                this.depthTest = source.depthTest,
                this.depthWrite = source.depthWrite,
                this.stencilWriteMask = source.stencilWriteMask,
                this.stencilFunc = source.stencilFunc,
                this.stencilRef = source.stencilRef,
                this.stencilFuncMask = source.stencilFuncMask,
                this.stencilFail = source.stencilFail,
                this.stencilZFail = source.stencilZFail,
                this.stencilZPass = source.stencilZPass,
                this.stencilWrite = source.stencilWrite;
                const t = source.clippingPlanes;
                let e = null;
                if (null !== t) {
                    const n = t.length;
                    e = new Array(n);
                    for (let i = 0; i !== n; ++i)
                        e[i] = t[i].clone()
                }
                return this.clippingPlanes = e,
                this.clipIntersection = source.clipIntersection,
                this.clipShadows = source.clipShadows,
                this.shadowSide = source.shadowSide,
                this.colorWrite = source.colorWrite,
                this.precision = source.precision,
                this.polygonOffset = source.polygonOffset,
                this.polygonOffsetFactor = source.polygonOffsetFactor,
                this.polygonOffsetUnits = source.polygonOffsetUnits,
                this.dithering = source.dithering,
                this.alphaTest = source.alphaTest,
                this.alphaToCoverage = source.alphaToCoverage,
                this.premultipliedAlpha = source.premultipliedAlpha,
                this.visible = source.visible,
                this.toneMapped = source.toneMapped,
                this.userData = JSON.parse(JSON.stringify(source.userData)),
                this
            }
            dispose() {
                this.dispatchEvent({
                    type: "dispose"
                })
            }
            set needsUpdate(t) {
                !0 === t && this.version++
            }
        }
        h.prototype.isMaterial = !0
    },
    289: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return o
        }
        ));
        var r = n(248);
        class o {
            constructor(t=0, e=0, n=0, r=1) {
                this._x = t,
                this._y = e,
                this._z = n,
                this._w = r
            }
            static slerp(t, e, n, r) {
                return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),
                n.slerpQuaternions(t, e, r)
            }
            static slerpFlat(t, e, n, r, o, l, c) {
                let h = n[r + 0]
                  , d = n[r + 1]
                  , f = n[r + 2]
                  , m = n[r + 3];
                const v = o[l + 0]
                  , _ = o[l + 1]
                  , x = o[l + 2]
                  , y = o[l + 3];
                if (0 === c)
                    return t[e + 0] = h,
                    t[e + 1] = d,
                    t[e + 2] = f,
                    void (t[e + 3] = m);
                if (1 === c)
                    return t[e + 0] = v,
                    t[e + 1] = _,
                    t[e + 2] = x,
                    void (t[e + 3] = y);
                if (m !== y || h !== v || d !== _ || f !== x) {
                    let s = 1 - c;
                    const t = h * v + d * _ + f * x + m * y
                      , e = t >= 0 ? 1 : -1
                      , n = 1 - t * t;
                    if (n > Number.EPSILON) {
                        const r = Math.sqrt(n)
                          , o = Math.atan2(r, t * e);
                        s = Math.sin(s * o) / r,
                        c = Math.sin(c * o) / r
                    }
                    const r = c * e;
                    if (h = h * s + v * r,
                    d = d * s + _ * r,
                    f = f * s + x * r,
                    m = m * s + y * r,
                    s === 1 - c) {
                        const t = 1 / Math.sqrt(h * h + d * d + f * f + m * m);
                        h *= t,
                        d *= t,
                        f *= t,
                        m *= t
                    }
                }
                t[e] = h,
                t[e + 1] = d,
                t[e + 2] = f,
                t[e + 3] = m
            }
            static multiplyQuaternionsFlat(t, e, n, r, o, l) {
                const c = n[r]
                  , h = n[r + 1]
                  , d = n[r + 2]
                  , f = n[r + 3]
                  , m = o[l]
                  , v = o[l + 1]
                  , _ = o[l + 2]
                  , x = o[l + 3];
                return t[e] = c * x + f * m + h * _ - d * v,
                t[e + 1] = h * x + f * v + d * m - c * _,
                t[e + 2] = d * x + f * _ + c * v - h * m,
                t[e + 3] = f * x - c * m - h * v - d * _,
                t
            }
            get x() {
                return this._x
            }
            set x(t) {
                this._x = t,
                this._onChangeCallback()
            }
            get y() {
                return this._y
            }
            set y(t) {
                this._y = t,
                this._onChangeCallback()
            }
            get z() {
                return this._z
            }
            set z(t) {
                this._z = t,
                this._onChangeCallback()
            }
            get w() {
                return this._w
            }
            set w(t) {
                this._w = t,
                this._onChangeCallback()
            }
            set(t, e, n, r) {
                return this._x = t,
                this._y = e,
                this._z = n,
                this._w = r,
                this._onChangeCallback(),
                this
            }
            clone() {
                return new this.constructor(this._x,this._y,this._z,this._w)
            }
            copy(t) {
                return this._x = t.x,
                this._y = t.y,
                this._z = t.z,
                this._w = t.w,
                this._onChangeCallback(),
                this
            }
            setFromEuler(t, e) {
                if (!t || !t.isEuler)
                    throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
                const n = t._x
                  , r = t._y
                  , o = t._z
                  , l = t._order
                  , c = Math.cos
                  , h = Math.sin
                  , d = c(n / 2)
                  , f = c(r / 2)
                  , m = c(o / 2)
                  , v = h(n / 2)
                  , _ = h(r / 2)
                  , x = h(o / 2);
                switch (l) {
                case "XYZ":
                    this._x = v * f * m + d * _ * x,
                    this._y = d * _ * m - v * f * x,
                    this._z = d * f * x + v * _ * m,
                    this._w = d * f * m - v * _ * x;
                    break;
                case "YXZ":
                    this._x = v * f * m + d * _ * x,
                    this._y = d * _ * m - v * f * x,
                    this._z = d * f * x - v * _ * m,
                    this._w = d * f * m + v * _ * x;
                    break;
                case "ZXY":
                    this._x = v * f * m - d * _ * x,
                    this._y = d * _ * m + v * f * x,
                    this._z = d * f * x + v * _ * m,
                    this._w = d * f * m - v * _ * x;
                    break;
                case "ZYX":
                    this._x = v * f * m - d * _ * x,
                    this._y = d * _ * m + v * f * x,
                    this._z = d * f * x - v * _ * m,
                    this._w = d * f * m + v * _ * x;
                    break;
                case "YZX":
                    this._x = v * f * m + d * _ * x,
                    this._y = d * _ * m + v * f * x,
                    this._z = d * f * x - v * _ * m,
                    this._w = d * f * m - v * _ * x;
                    break;
                case "XZY":
                    this._x = v * f * m - d * _ * x,
                    this._y = d * _ * m - v * f * x,
                    this._z = d * f * x + v * _ * m,
                    this._w = d * f * m + v * _ * x;
                    break;
                default:
                    console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + l)
                }
                return !1 !== e && this._onChangeCallback(),
                this
            }
            setFromAxisAngle(t, e) {
                const n = e / 2
                  , s = Math.sin(n);
                return this._x = t.x * s,
                this._y = t.y * s,
                this._z = t.z * s,
                this._w = Math.cos(n),
                this._onChangeCallback(),
                this
            }
            setFromRotationMatrix(t) {
                const e = t.elements
                  , n = e[0]
                  , r = e[4]
                  , o = e[8]
                  , l = e[1]
                  , c = e[5]
                  , h = e[9]
                  , d = e[2]
                  , f = e[6]
                  , m = e[10]
                  , v = n + c + m;
                if (v > 0) {
                    const s = .5 / Math.sqrt(v + 1);
                    this._w = .25 / s,
                    this._x = (f - h) * s,
                    this._y = (o - d) * s,
                    this._z = (l - r) * s
                } else if (n > c && n > m) {
                    const s = 2 * Math.sqrt(1 + n - c - m);
                    this._w = (f - h) / s,
                    this._x = .25 * s,
                    this._y = (r + l) / s,
                    this._z = (o + d) / s
                } else if (c > m) {
                    const s = 2 * Math.sqrt(1 + c - n - m);
                    this._w = (o - d) / s,
                    this._x = (r + l) / s,
                    this._y = .25 * s,
                    this._z = (h + f) / s
                } else {
                    const s = 2 * Math.sqrt(1 + m - n - c);
                    this._w = (l - r) / s,
                    this._x = (o + d) / s,
                    this._y = (h + f) / s,
                    this._z = .25 * s
                }
                return this._onChangeCallback(),
                this
            }
            setFromUnitVectors(t, e) {
                let n = t.dot(e) + 1;
                return n < Number.EPSILON ? (n = 0,
                Math.abs(t.x) > Math.abs(t.z) ? (this._x = -t.y,
                this._y = t.x,
                this._z = 0,
                this._w = n) : (this._x = 0,
                this._y = -t.z,
                this._z = t.y,
                this._w = n)) : (this._x = t.y * e.z - t.z * e.y,
                this._y = t.z * e.x - t.x * e.z,
                this._z = t.x * e.y - t.y * e.x,
                this._w = n),
                this.normalize()
            }
            angleTo(q) {
                return 2 * Math.acos(Math.abs(r.c(this.dot(q), -1, 1)))
            }
            rotateTowards(q, t) {
                const e = this.angleTo(q);
                if (0 === e)
                    return this;
                const n = Math.min(1, t / e);
                return this.slerp(q, n),
                this
            }
            identity() {
                return this.set(0, 0, 0, 1)
            }
            invert() {
                return this.conjugate()
            }
            conjugate() {
                return this._x *= -1,
                this._y *= -1,
                this._z *= -1,
                this._onChangeCallback(),
                this
            }
            dot(t) {
                return this._x * t._x + this._y * t._y + this._z * t._z + this._w * t._w
            }
            lengthSq() {
                return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w
            }
            length() {
                return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w)
            }
            normalize() {
                let t = this.length();
                return 0 === t ? (this._x = 0,
                this._y = 0,
                this._z = 0,
                this._w = 1) : (t = 1 / t,
                this._x = this._x * t,
                this._y = this._y * t,
                this._z = this._z * t,
                this._w = this._w * t),
                this._onChangeCallback(),
                this
            }
            multiply(q, p) {
                return void 0 !== p ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),
                this.multiplyQuaternions(q, p)) : this.multiplyQuaternions(this, q)
            }
            premultiply(q) {
                return this.multiplyQuaternions(q, this)
            }
            multiplyQuaternions(a, b) {
                const t = a._x
                  , e = a._y
                  , n = a._z
                  , r = a._w
                  , o = b._x
                  , l = b._y
                  , c = b._z
                  , h = b._w;
                return this._x = t * h + r * o + e * c - n * l,
                this._y = e * h + r * l + n * o - t * c,
                this._z = n * h + r * c + t * l - e * o,
                this._w = r * h - t * o - e * l - n * c,
                this._onChangeCallback(),
                this
            }
            slerp(t, e) {
                if (0 === e)
                    return this;
                if (1 === e)
                    return this.copy(t);
                const n = this._x
                  , r = this._y
                  , o = this._z
                  , l = this._w;
                let c = l * t._w + n * t._x + r * t._y + o * t._z;
                if (c < 0 ? (this._w = -t._w,
                this._x = -t._x,
                this._y = -t._y,
                this._z = -t._z,
                c = -c) : this.copy(t),
                c >= 1)
                    return this._w = l,
                    this._x = n,
                    this._y = r,
                    this._z = o,
                    this;
                const h = 1 - c * c;
                if (h <= Number.EPSILON) {
                    const s = 1 - e;
                    return this._w = s * l + e * this._w,
                    this._x = s * n + e * this._x,
                    this._y = s * r + e * this._y,
                    this._z = s * o + e * this._z,
                    this.normalize(),
                    this._onChangeCallback(),
                    this
                }
                const d = Math.sqrt(h)
                  , f = Math.atan2(d, c)
                  , m = Math.sin((1 - e) * f) / d
                  , v = Math.sin(e * f) / d;
                return this._w = l * m + this._w * v,
                this._x = n * m + this._x * v,
                this._y = r * m + this._y * v,
                this._z = o * m + this._z * v,
                this._onChangeCallback(),
                this
            }
            slerpQuaternions(t, e, n) {
                this.copy(t).slerp(e, n)
            }
            random() {
                const t = Math.random()
                  , e = Math.sqrt(1 - t)
                  , n = Math.sqrt(t)
                  , r = 2 * Math.PI * Math.random()
                  , o = 2 * Math.PI * Math.random();
                return this.set(e * Math.cos(r), n * Math.sin(o), n * Math.cos(o), e * Math.sin(r))
            }
            equals(t) {
                return t._x === this._x && t._y === this._y && t._z === this._z && t._w === this._w
            }
            fromArray(t, e=0) {
                return this._x = t[e],
                this._y = t[e + 1],
                this._z = t[e + 2],
                this._w = t[e + 3],
                this._onChangeCallback(),
                this
            }
            toArray(t=[], e=0) {
                return t[e] = this._x,
                t[e + 1] = this._y,
                t[e + 2] = this._z,
                t[e + 3] = this._w,
                t
            }
            fromBufferAttribute(t, e) {
                return this._x = t.getX(e),
                this._y = t.getY(e),
                this._z = t.getZ(e),
                this._w = t.getW(e),
                this
            }
            _onChange(t) {
                return this._onChangeCallback = t,
                this
            }
            _onChangeCallback() {}
        }
        o.prototype.isQuaternion = !0
    },
    290: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return f
        }
        ));
        var r = n(297)
          , o = n(241);
        const l = new r.a
          , c = new o.a
          , h = new o.a
          , d = new o.a;
        class f {
            constructor(t=new o.a, e=-1) {
                this.center = t,
                this.radius = e
            }
            set(t, e) {
                return this.center.copy(t),
                this.radius = e,
                this
            }
            setFromPoints(t, e) {
                const n = this.center;
                void 0 !== e ? n.copy(e) : l.setFromPoints(t).getCenter(n);
                let r = 0;
                for (let i = 0, e = t.length; i < e; i++)
                    r = Math.max(r, n.distanceToSquared(t[i]));
                return this.radius = Math.sqrt(r),
                this
            }
            copy(t) {
                return this.center.copy(t.center),
                this.radius = t.radius,
                this
            }
            isEmpty() {
                return this.radius < 0
            }
            makeEmpty() {
                return this.center.set(0, 0, 0),
                this.radius = -1,
                this
            }
            containsPoint(t) {
                return t.distanceToSquared(this.center) <= this.radius * this.radius
            }
            distanceToPoint(t) {
                return t.distanceTo(this.center) - this.radius
            }
            intersectsSphere(t) {
                const e = this.radius + t.radius;
                return t.center.distanceToSquared(this.center) <= e * e
            }
            intersectsBox(t) {
                return t.intersectsSphere(this)
            }
            intersectsPlane(t) {
                return Math.abs(t.distanceToPoint(this.center)) <= this.radius
            }
            clampPoint(t, e) {
                const n = this.center.distanceToSquared(t);
                return e.copy(t),
                n > this.radius * this.radius && (e.sub(this.center).normalize(),
                e.multiplyScalar(this.radius).add(this.center)),
                e
            }
            getBoundingBox(t) {
                return this.isEmpty() ? (t.makeEmpty(),
                t) : (t.set(this.center, this.center),
                t.expandByScalar(this.radius),
                t)
            }
            applyMatrix4(t) {
                return this.center.applyMatrix4(t),
                this.radius = this.radius * t.getMaxScaleOnAxis(),
                this
            }
            translate(t) {
                return this.center.add(t),
                this
            }
            expandByPoint(t) {
                d.subVectors(t, this.center);
                const e = d.lengthSq();
                if (e > this.radius * this.radius) {
                    const t = Math.sqrt(e)
                      , n = .5 * (t - this.radius);
                    this.center.add(d.multiplyScalar(n / t)),
                    this.radius += n
                }
                return this
            }
            union(t) {
                return h.subVectors(t.center, this.center).normalize().multiplyScalar(t.radius),
                this.expandByPoint(c.copy(t.center).add(h)),
                this.expandByPoint(c.copy(t.center).sub(h)),
                this
            }
            equals(t) {
                return t.center.equals(this.center) && t.radius === this.radius
            }
            clone() {
                return (new this.constructor).copy(this)
            }
        }
    },
    291: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return c
        }
        ));
        var r = n(280)
          , o = n(240)
          , l = n(256);
        class c extends r.a {
            constructor(t) {
                super(),
                this.type = "MeshBasicMaterial",
                this.color = new l.a(16777215),
                this.map = null,
                this.lightMap = null,
                this.lightMapIntensity = 1,
                this.aoMap = null,
                this.aoMapIntensity = 1,
                this.specularMap = null,
                this.alphaMap = null,
                this.envMap = null,
                this.combine = o.cb,
                this.reflectivity = 1,
                this.refractionRatio = .98,
                this.wireframe = !1,
                this.wireframeLinewidth = 1,
                this.wireframeLinecap = "round",
                this.wireframeLinejoin = "round",
                this.setValues(t)
            }
            copy(source) {
                return super.copy(source),
                this.color.copy(source.color),
                this.map = source.map,
                this.lightMap = source.lightMap,
                this.lightMapIntensity = source.lightMapIntensity,
                this.aoMap = source.aoMap,
                this.aoMapIntensity = source.aoMapIntensity,
                this.specularMap = source.specularMap,
                this.alphaMap = source.alphaMap,
                this.envMap = source.envMap,
                this.combine = source.combine,
                this.reflectivity = source.reflectivity,
                this.refractionRatio = source.refractionRatio,
                this.wireframe = source.wireframe,
                this.wireframeLinewidth = source.wireframeLinewidth,
                this.wireframeLinecap = source.wireframeLinecap,
                this.wireframeLinejoin = source.wireframeLinejoin,
                this
            }
        }
        c.prototype.isMeshBasicMaterial = !0
    },
    293: function(t, e) {
        t.exports = function(t) {
            var e = typeof t;
            return null != t && ("object" == e || "function" == e)
        }
    },
    294: function(t, e, n) {
        var r = n(365)
          , o = "object" == typeof self && self && self.Object === Object && self
          , l = r || o || Function("return this")();
        t.exports = l
    },
    295: function(t, e, n) {
        var r = n(294).Symbol;
        t.exports = r
    },
    296: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return l
        }
        ));
        var r = n(258)
          , o = n(265);
        class l extends o.a {
            constructor() {
                super(),
                this.type = "Camera",
                this.matrixWorldInverse = new r.a,
                this.projectionMatrix = new r.a,
                this.projectionMatrixInverse = new r.a
            }
            copy(source, t) {
                return super.copy(source, t),
                this.matrixWorldInverse.copy(source.matrixWorldInverse),
                this.projectionMatrix.copy(source.projectionMatrix),
                this.projectionMatrixInverse.copy(source.projectionMatrixInverse),
                this
            }
            getWorldDirection(t) {
                this.updateWorldMatrix(!0, !1);
                const e = this.matrixWorld.elements;
                return t.set(-e[8], -e[9], -e[10]).normalize()
            }
            updateMatrixWorld(t) {
                super.updateMatrixWorld(t),
                this.matrixWorldInverse.copy(this.matrixWorld).invert()
            }
            updateWorldMatrix(t, e) {
                super.updateWorldMatrix(t, e),
                this.matrixWorldInverse.copy(this.matrixWorld).invert()
            }
            clone() {
                return (new this.constructor).copy(this)
            }
        }
        l.prototype.isCamera = !0
    },
    297: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return o
        }
        ));
        var r = n(241);
        class o {
            constructor(t=new r.a(1 / 0,1 / 0,1 / 0), e=new r.a(-1 / 0,-1 / 0,-1 / 0)) {
                this.min = t,
                this.max = e
            }
            set(t, e) {
                return this.min.copy(t),
                this.max.copy(e),
                this
            }
            setFromArray(t) {
                let e = 1 / 0
                  , n = 1 / 0
                  , r = 1 / 0
                  , o = -1 / 0
                  , l = -1 / 0
                  , c = -1 / 0;
                for (let i = 0, h = t.length; i < h; i += 3) {
                    const h = t[i]
                      , d = t[i + 1]
                      , f = t[i + 2];
                    h < e && (e = h),
                    d < n && (n = d),
                    f < r && (r = f),
                    h > o && (o = h),
                    d > l && (l = d),
                    f > c && (c = f)
                }
                return this.min.set(e, n, r),
                this.max.set(o, l, c),
                this
            }
            setFromBufferAttribute(t) {
                let e = 1 / 0
                  , n = 1 / 0
                  , r = 1 / 0
                  , o = -1 / 0
                  , l = -1 / 0
                  , c = -1 / 0;
                for (let i = 0, h = t.count; i < h; i++) {
                    const h = t.getX(i)
                      , d = t.getY(i)
                      , f = t.getZ(i);
                    h < e && (e = h),
                    d < n && (n = d),
                    f < r && (r = f),
                    h > o && (o = h),
                    d > l && (l = d),
                    f > c && (c = f)
                }
                return this.min.set(e, n, r),
                this.max.set(o, l, c),
                this
            }
            setFromPoints(t) {
                this.makeEmpty();
                for (let i = 0, e = t.length; i < e; i++)
                    this.expandByPoint(t[i]);
                return this
            }
            setFromCenterAndSize(t, e) {
                const n = c.copy(e).multiplyScalar(.5);
                return this.min.copy(t).sub(n),
                this.max.copy(t).add(n),
                this
            }
            setFromObject(object) {
                return this.makeEmpty(),
                this.expandByObject(object)
            }
            clone() {
                return (new this.constructor).copy(this)
            }
            copy(t) {
                return this.min.copy(t.min),
                this.max.copy(t.max),
                this
            }
            makeEmpty() {
                return this.min.x = this.min.y = this.min.z = 1 / 0,
                this.max.x = this.max.y = this.max.z = -1 / 0,
                this
            }
            isEmpty() {
                return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z
            }
            getCenter(t) {
                return this.isEmpty() ? t.set(0, 0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5)
            }
            getSize(t) {
                return this.isEmpty() ? t.set(0, 0, 0) : t.subVectors(this.max, this.min)
            }
            expandByPoint(t) {
                return this.min.min(t),
                this.max.max(t),
                this
            }
            expandByVector(t) {
                return this.min.sub(t),
                this.max.add(t),
                this
            }
            expandByScalar(t) {
                return this.min.addScalar(-t),
                this.max.addScalar(t),
                this
            }
            expandByObject(object) {
                object.updateWorldMatrix(!1, !1);
                const t = object.geometry;
                void 0 !== t && (null === t.boundingBox && t.computeBoundingBox(),
                h.copy(t.boundingBox),
                h.applyMatrix4(object.matrixWorld),
                this.union(h));
                const e = object.children;
                for (let i = 0, t = e.length; i < t; i++)
                    this.expandByObject(e[i]);
                return this
            }
            containsPoint(t) {
                return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y || t.z < this.min.z || t.z > this.max.z)
            }
            containsBox(t) {
                return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y && this.min.z <= t.min.z && t.max.z <= this.max.z
            }
            getParameter(t, e) {
                return e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y), (t.z - this.min.z) / (this.max.z - this.min.z))
            }
            intersectsBox(t) {
                return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y || t.max.z < this.min.z || t.min.z > this.max.z)
            }
            intersectsSphere(t) {
                return this.clampPoint(t.center, c),
                c.distanceToSquared(t.center) <= t.radius * t.radius
            }
            intersectsPlane(t) {
                let e, n;
                return t.normal.x > 0 ? (e = t.normal.x * this.min.x,
                n = t.normal.x * this.max.x) : (e = t.normal.x * this.max.x,
                n = t.normal.x * this.min.x),
                t.normal.y > 0 ? (e += t.normal.y * this.min.y,
                n += t.normal.y * this.max.y) : (e += t.normal.y * this.max.y,
                n += t.normal.y * this.min.y),
                t.normal.z > 0 ? (e += t.normal.z * this.min.z,
                n += t.normal.z * this.max.z) : (e += t.normal.z * this.max.z,
                n += t.normal.z * this.min.z),
                e <= -t.constant && n >= -t.constant
            }
            intersectsTriangle(t) {
                if (this.isEmpty())
                    return !1;
                this.getCenter(y),
                M.subVectors(this.max, y),
                d.subVectors(t.a, y),
                f.subVectors(t.b, y),
                m.subVectors(t.c, y),
                v.subVectors(f, d),
                _.subVectors(m, f),
                x.subVectors(d, m);
                let e = [0, -v.z, v.y, 0, -_.z, _.y, 0, -x.z, x.y, v.z, 0, -v.x, _.z, 0, -_.x, x.z, 0, -x.x, -v.y, v.x, 0, -_.y, _.x, 0, -x.y, x.x, 0];
                return !!T(e, d, f, m, M) && (e = [1, 0, 0, 0, 1, 0, 0, 0, 1],
                !!T(e, d, f, m, M) && (w.crossVectors(v, _),
                e = [w.x, w.y, w.z],
                T(e, d, f, m, M)))
            }
            clampPoint(t, e) {
                return e.copy(t).clamp(this.min, this.max)
            }
            distanceToPoint(t) {
                return c.copy(t).clamp(this.min, this.max).sub(t).length()
            }
            getBoundingSphere(t) {
                return this.getCenter(t.center),
                t.radius = .5 * this.getSize(c).length(),
                t
            }
            intersect(t) {
                return this.min.max(t.min),
                this.max.min(t.max),
                this.isEmpty() && this.makeEmpty(),
                this
            }
            union(t) {
                return this.min.min(t.min),
                this.max.max(t.max),
                this
            }
            applyMatrix4(t) {
                return this.isEmpty() || (l[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(t),
                l[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(t),
                l[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(t),
                l[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(t),
                l[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(t),
                l[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(t),
                l[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(t),
                l[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(t),
                this.setFromPoints(l)),
                this
            }
            translate(t) {
                return this.min.add(t),
                this.max.add(t),
                this
            }
            equals(t) {
                return t.min.equals(this.min) && t.max.equals(this.max)
            }
        }
        o.prototype.isBox3 = !0;
        const l = [new r.a, new r.a, new r.a, new r.a, new r.a, new r.a, new r.a, new r.a]
          , c = new r.a
          , h = new o
          , d = new r.a
          , f = new r.a
          , m = new r.a
          , v = new r.a
          , _ = new r.a
          , x = new r.a
          , y = new r.a
          , M = new r.a
          , w = new r.a
          , S = new r.a;
        function T(t, e, n, r, o) {
            for (let i = 0, l = t.length - 3; i <= l; i += 3) {
                S.fromArray(t, i);
                const l = o.x * Math.abs(S.x) + o.y * Math.abs(S.y) + o.z * Math.abs(S.z)
                  , c = e.dot(S)
                  , h = n.dot(S)
                  , d = r.dot(S);
                if (Math.max(-Math.max(c, h, d), Math.min(c, h, d)) > l)
                    return !1
            }
            return !0
        }
    },
    363: function(t, e, n) {
        var r = n(293)
          , o = n(364)
          , l = n(366)
          , c = Math.max
          , h = Math.min;
        t.exports = function(t, e, n) {
            var d, f, m, v, _, x, y = 0, M = !1, w = !1, S = !0;
            if ("function" != typeof t)
                throw new TypeError("Expected a function");
            function T(time) {
                var e = d
                  , n = f;
                return d = f = void 0,
                y = time,
                v = t.apply(n, e)
            }
            function E(time) {
                return y = time,
                _ = setTimeout(L, e),
                M ? T(time) : v
            }
            function A(time) {
                var t = time - x;
                return void 0 === x || t >= e || t < 0 || w && time - y >= m
            }
            function L() {
                var time = o();
                if (A(time))
                    return R(time);
                _ = setTimeout(L, function(time) {
                    var t = e - (time - x);
                    return w ? h(t, m - (time - y)) : t
                }(time))
            }
            function R(time) {
                return _ = void 0,
                S && d ? T(time) : (d = f = void 0,
                v)
            }
            function C() {
                var time = o()
                  , t = A(time);
                if (d = arguments,
                f = this,
                x = time,
                t) {
                    if (void 0 === _)
                        return E(x);
                    if (w)
                        return clearTimeout(_),
                        _ = setTimeout(L, e),
                        T(x)
                }
                return void 0 === _ && (_ = setTimeout(L, e)),
                v
            }
            return e = l(e) || 0,
            r(n) && (M = !!n.leading,
            m = (w = "maxWait"in n) ? c(l(n.maxWait) || 0, e) : m,
            S = "trailing"in n ? !!n.trailing : S),
            C.cancel = function() {
                void 0 !== _ && clearTimeout(_),
                y = 0,
                d = x = f = _ = void 0
            }
            ,
            C.flush = function() {
                return void 0 === _ ? v : R(o())
            }
            ,
            C
        }
    },
    364: function(t, e, n) {
        var r = n(294);
        t.exports = function() {
            return r.Date.now()
        }
    },
    365: function(t, e, n) {
        (function(e) {
            var n = "object" == typeof e && e && e.Object === Object && e;
            t.exports = n
        }
        ).call(this, n(32))
    },
    366: function(t, e, n) {
        var r = n(367)
          , o = n(293)
          , l = n(369)
          , c = /^[-+]0x[0-9a-f]+$/i
          , h = /^0b[01]+$/i
          , d = /^0o[0-7]+$/i
          , f = parseInt;
        t.exports = function(t) {
            if ("number" == typeof t)
                return t;
            if (l(t))
                return NaN;
            if (o(t)) {
                var e = "function" == typeof t.valueOf ? t.valueOf() : t;
                t = o(e) ? e + "" : e
            }
            if ("string" != typeof t)
                return 0 === t ? t : +t;
            t = r(t);
            var n = h.test(t);
            return n || d.test(t) ? f(t.slice(2), n ? 2 : 8) : c.test(t) ? NaN : +t
        }
    },
    367: function(t, e, n) {
        var r = n(368)
          , o = /^\s+/;
        t.exports = function(t) {
            return t ? t.slice(0, r(t) + 1).replace(o, "") : t
        }
    },
    368: function(t, e) {
        var n = /\s/;
        t.exports = function(t) {
            for (var e = t.length; e-- && n.test(t.charAt(e)); )
                ;
            return e
        }
    },
    369: function(t, e, n) {
        var r = n(370)
          , o = n(373);
        t.exports = function(t) {
            return "symbol" == typeof t || o(t) && "[object Symbol]" == r(t)
        }
    },
    370: function(t, e, n) {
        var r = n(295)
          , o = n(371)
          , l = n(372)
          , c = r ? r.toStringTag : void 0;
        t.exports = function(t) {
            return null == t ? void 0 === t ? "[object Undefined]" : "[object Null]" : c && c in Object(t) ? o(t) : l(t)
        }
    },
    371: function(t, e, n) {
        var r = n(295)
          , o = Object.prototype
          , l = o.hasOwnProperty
          , c = o.toString
          , h = r ? r.toStringTag : void 0;
        t.exports = function(t) {
            var e = l.call(t, h)
              , n = t[h];
            try {
                t[h] = void 0;
                var r = !0
            } catch (t) {}
            var o = c.call(t);
            return r && (e ? t[h] = n : delete t[h]),
            o
        }
    },
    372: function(t, e) {
        var n = Object.prototype.toString;
        t.exports = function(t) {
            return n.call(t)
        }
    },
    373: function(t, e) {
        t.exports = function(t) {
            return null != t && "object" == typeof t
        }
    },
    374: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return o
        }
        ));
        var r = n(265);
        class o extends r.a {
            constructor() {
                super(),
                this.type = "Scene",
                this.background = null,
                this.environment = null,
                this.fog = null,
                this.overrideMaterial = null,
                this.autoUpdate = !0,
                "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{
                    detail: this
                }))
            }
            copy(source, t) {
                return super.copy(source, t),
                null !== source.background && (this.background = source.background.clone()),
                null !== source.environment && (this.environment = source.environment.clone()),
                null !== source.fog && (this.fog = source.fog.clone()),
                null !== source.overrideMaterial && (this.overrideMaterial = source.overrideMaterial.clone()),
                this.autoUpdate = source.autoUpdate,
                this.matrixAutoUpdate = source.matrixAutoUpdate,
                this
            }
            toJSON(meta) {
                const data = super.toJSON(meta);
                return null !== this.fog && (data.object.fog = this.fog.toJSON()),
                data
            }
        }
        o.prototype.isScene = !0
    },
    375: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return c
        }
        ));
        var r = n(264)
          , o = n(261)
          , l = n(241);
        class c extends r.a {
            constructor(t=1, e=32, n=16, r=0, c=2 * Math.PI, h=0, d=Math.PI) {
                super(),
                this.type = "SphereGeometry",
                this.parameters = {
                    radius: t,
                    widthSegments: e,
                    heightSegments: n,
                    phiStart: r,
                    phiLength: c,
                    thetaStart: h,
                    thetaLength: d
                },
                e = Math.max(3, Math.floor(e)),
                n = Math.max(2, Math.floor(n));
                const f = Math.min(h + d, Math.PI);
                let m = 0;
                const v = []
                  , _ = new l.a
                  , x = new l.a
                  , y = []
                  , M = []
                  , w = []
                  , S = [];
                for (let o = 0; o <= n; o++) {
                    const l = []
                      , y = o / n;
                    let T = 0;
                    0 == o && 0 == h ? T = .5 / e : o == n && f == Math.PI && (T = -.5 / e);
                    for (let n = 0; n <= e; n++) {
                        const u = n / e;
                        _.x = -t * Math.cos(r + u * c) * Math.sin(h + y * d),
                        _.y = t * Math.cos(h + y * d),
                        _.z = t * Math.sin(r + u * c) * Math.sin(h + y * d),
                        M.push(_.x, _.y, _.z),
                        x.copy(_).normalize(),
                        w.push(x.x, x.y, x.z),
                        S.push(u + T, 1 - y),
                        l.push(m++)
                    }
                    v.push(l)
                }
                for (let t = 0; t < n; t++)
                    for (let r = 0; r < e; r++) {
                        const a = v[t][r + 1]
                          , b = v[t][r]
                          , e = v[t + 1][r]
                          , o = v[t + 1][r + 1];
                        (0 !== t || h > 0) && y.push(a, b, o),
                        (t !== n - 1 || f < Math.PI) && y.push(b, e, o)
                    }
                this.setIndex(y),
                this.setAttribute("position", new o.b(M,3)),
                this.setAttribute("normal", new o.b(w,3)),
                this.setAttribute("uv", new o.b(S,2))
            }
            static fromJSON(data) {
                return new c(data.radius,data.widthSegments,data.heightSegments,data.phiStart,data.phiLength,data.thetaStart,data.thetaLength)
            }
        }
    },
    376: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return Bn
        }
        ));
        var r = n(240)
          , o = n(241)
          , l = n(290)
          , c = n(259);
        const h = new o.a
          , d = new o.a
          , f = new c.a;
        class m {
            constructor(t=new o.a(1,0,0), e=0) {
                this.normal = t,
                this.constant = e
            }
            set(t, e) {
                return this.normal.copy(t),
                this.constant = e,
                this
            }
            setComponents(t, e, n, r) {
                return this.normal.set(t, e, n),
                this.constant = r,
                this
            }
            setFromNormalAndCoplanarPoint(t, e) {
                return this.normal.copy(t),
                this.constant = -e.dot(this.normal),
                this
            }
            setFromCoplanarPoints(a, b, t) {
                const e = h.subVectors(t, b).cross(d.subVectors(a, b)).normalize();
                return this.setFromNormalAndCoplanarPoint(e, a),
                this
            }
            copy(t) {
                return this.normal.copy(t.normal),
                this.constant = t.constant,
                this
            }
            normalize() {
                const t = 1 / this.normal.length();
                return this.normal.multiplyScalar(t),
                this.constant *= t,
                this
            }
            negate() {
                return this.constant *= -1,
                this.normal.negate(),
                this
            }
            distanceToPoint(t) {
                return this.normal.dot(t) + this.constant
            }
            distanceToSphere(t) {
                return this.distanceToPoint(t.center) - t.radius
            }
            projectPoint(t, e) {
                return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)
            }
            intersectLine(line, t) {
                const e = line.delta(h)
                  , n = this.normal.dot(e);
                if (0 === n)
                    return 0 === this.distanceToPoint(line.start) ? t.copy(line.start) : null;
                const r = -(line.start.dot(this.normal) + this.constant) / n;
                return r < 0 || r > 1 ? null : t.copy(e).multiplyScalar(r).add(line.start)
            }
            intersectsLine(line) {
                const t = this.distanceToPoint(line.start)
                  , e = this.distanceToPoint(line.end);
                return t < 0 && e > 0 || e < 0 && t > 0
            }
            intersectsBox(t) {
                return t.intersectsPlane(this)
            }
            intersectsSphere(t) {
                return t.intersectsPlane(this)
            }
            coplanarPoint(t) {
                return t.copy(this.normal).multiplyScalar(-this.constant)
            }
            applyMatrix4(t, e) {
                const n = e || f.getNormalMatrix(t)
                  , r = this.coplanarPoint(h).applyMatrix4(t)
                  , o = this.normal.applyMatrix3(n).normalize();
                return this.constant = -r.dot(o),
                this
            }
            translate(t) {
                return this.constant -= t.dot(this.normal),
                this
            }
            equals(t) {
                return t.normal.equals(this.normal) && t.constant === this.constant
            }
            clone() {
                return (new this.constructor).copy(this)
            }
        }
        m.prototype.isPlane = !0;
        const v = new l.a
          , _ = new o.a;
        class x {
            constructor(t=new m, e=new m, n=new m, r=new m, o=new m, l=new m) {
                this.planes = [t, e, n, r, o, l]
            }
            set(t, e, n, r, o, l) {
                const c = this.planes;
                return c[0].copy(t),
                c[1].copy(e),
                c[2].copy(n),
                c[3].copy(r),
                c[4].copy(o),
                c[5].copy(l),
                this
            }
            copy(t) {
                const e = this.planes;
                for (let i = 0; i < 6; i++)
                    e[i].copy(t.planes[i]);
                return this
            }
            setFromProjectionMatrix(t) {
                const e = this.planes
                  , n = t.elements
                  , r = n[0]
                  , o = n[1]
                  , l = n[2]
                  , c = n[3]
                  , h = n[4]
                  , d = n[5]
                  , f = n[6]
                  , m = n[7]
                  , v = n[8]
                  , _ = n[9]
                  , x = n[10]
                  , y = n[11]
                  , M = n[12]
                  , w = n[13]
                  , S = n[14]
                  , T = n[15];
                return e[0].setComponents(c - r, m - h, y - v, T - M).normalize(),
                e[1].setComponents(c + r, m + h, y + v, T + M).normalize(),
                e[2].setComponents(c + o, m + d, y + _, T + w).normalize(),
                e[3].setComponents(c - o, m - d, y - _, T - w).normalize(),
                e[4].setComponents(c - l, m - f, y - x, T - S).normalize(),
                e[5].setComponents(c + l, m + f, y + x, T + S).normalize(),
                this
            }
            intersectsObject(object) {
                const t = object.geometry;
                return null === t.boundingSphere && t.computeBoundingSphere(),
                v.copy(t.boundingSphere).applyMatrix4(object.matrixWorld),
                this.intersectsSphere(v)
            }
            intersectsSprite(t) {
                return v.center.set(0, 0, 0),
                v.radius = .7071067811865476,
                v.applyMatrix4(t.matrixWorld),
                this.intersectsSphere(v)
            }
            intersectsSphere(t) {
                const e = this.planes
                  , n = t.center
                  , r = -t.radius;
                for (let i = 0; i < 6; i++) {
                    if (e[i].distanceToPoint(n) < r)
                        return !1
                }
                return !0
            }
            intersectsBox(t) {
                const e = this.planes;
                for (let i = 0; i < 6; i++) {
                    const n = e[i];
                    if (_.x = n.normal.x > 0 ? t.max.x : t.min.x,
                    _.y = n.normal.y > 0 ? t.max.y : t.min.y,
                    _.z = n.normal.z > 0 ? t.max.z : t.min.z,
                    n.distanceToPoint(_) < 0)
                        return !1
                }
                return !0
            }
            containsPoint(t) {
                const e = this.planes;
                for (let i = 0; i < 6; i++)
                    if (e[i].distanceToPoint(t) < 0)
                        return !1;
                return !0
            }
            clone() {
                return (new this.constructor).copy(this)
            }
        }
        var y = n(258)
          , M = n(263);
        function w() {
            let t = null
              , e = !1
              , n = null
              , r = null;
            function o(time, e) {
                n(time, e),
                r = t.requestAnimationFrame(o)
            }
            return {
                start: function() {
                    !0 !== e && null !== n && (r = t.requestAnimationFrame(o),
                    e = !0)
                },
                stop: function() {
                    t.cancelAnimationFrame(r),
                    e = !1
                },
                setAnimationLoop: function(t) {
                    n = t
                },
                setContext: function(e) {
                    t = e
                }
            }
        }
        function S(t, e) {
            const n = e.isWebGL2
              , r = new WeakMap;
            return {
                get: function(t) {
                    return t.isInterleavedBufferAttribute && (t = t.data),
                    r.get(t)
                },
                remove: function(e) {
                    e.isInterleavedBufferAttribute && (e = e.data);
                    const data = r.get(e);
                    data && (t.deleteBuffer(data.buffer),
                    r.delete(e))
                },
                update: function(e, o) {
                    if (e.isGLBufferAttribute) {
                        const t = r.get(e);
                        return void ((!t || t.version < e.version) && r.set(e, {
                            buffer: e.buffer,
                            type: e.type,
                            bytesPerElement: e.elementSize,
                            version: e.version
                        }))
                    }
                    e.isInterleavedBufferAttribute && (e = e.data);
                    const data = r.get(e);
                    void 0 === data ? r.set(e, function(e, r) {
                        const o = e.array
                          , l = e.usage
                          , c = t.createBuffer();
                        t.bindBuffer(r, c),
                        t.bufferData(r, o, l),
                        e.onUploadCallback();
                        let h = t.FLOAT;
                        return o instanceof Float32Array ? h = t.FLOAT : o instanceof Float64Array ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.") : o instanceof Uint16Array ? e.isFloat16BufferAttribute ? n ? h = t.HALF_FLOAT : console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.") : h = t.UNSIGNED_SHORT : o instanceof Int16Array ? h = t.SHORT : o instanceof Uint32Array ? h = t.UNSIGNED_INT : o instanceof Int32Array ? h = t.INT : o instanceof Int8Array ? h = t.BYTE : (o instanceof Uint8Array || o instanceof Uint8ClampedArray) && (h = t.UNSIGNED_BYTE),
                        {
                            buffer: c,
                            type: h,
                            bytesPerElement: o.BYTES_PER_ELEMENT,
                            version: e.version
                        }
                    }(e, o)) : data.version < e.version && (!function(e, r, o) {
                        const l = r.array
                          , c = r.updateRange;
                        t.bindBuffer(o, e),
                        -1 === c.count ? t.bufferSubData(o, 0, l) : (n ? t.bufferSubData(o, c.offset * l.BYTES_PER_ELEMENT, l, c.offset, c.count) : t.bufferSubData(o, c.offset * l.BYTES_PER_ELEMENT, l.subarray(c.offset, c.offset + c.count)),
                        c.count = -1)
                    }(data.buffer, e, o),
                    data.version = e.version)
                }
            }
        }
        var T = n(264)
          , E = n(261);
        class A extends T.a {
            constructor(t=1, e=1, n=1, r=1, l=1, c=1) {
                super(),
                this.type = "BoxGeometry",
                this.parameters = {
                    width: t,
                    height: e,
                    depth: n,
                    widthSegments: r,
                    heightSegments: l,
                    depthSegments: c
                };
                const h = this;
                r = Math.floor(r),
                l = Math.floor(l),
                c = Math.floor(c);
                const d = []
                  , f = []
                  , m = []
                  , v = [];
                let _ = 0
                  , x = 0;
                function y(u, t, e, n, r, l, c, y, M, w, S) {
                    const T = l / M
                      , E = c / w
                      , A = l / 2
                      , L = c / 2
                      , R = y / 2
                      , C = M + 1
                      , P = w + 1;
                    let D = 0
                      , N = 0;
                    const I = new o.a;
                    for (let o = 0; o < P; o++) {
                        const l = o * E - L;
                        for (let c = 0; c < C; c++) {
                            const h = c * T - A;
                            I[u] = h * n,
                            I[t] = l * r,
                            I[e] = R,
                            f.push(I.x, I.y, I.z),
                            I[u] = 0,
                            I[t] = 0,
                            I[e] = y > 0 ? 1 : -1,
                            m.push(I.x, I.y, I.z),
                            v.push(c / M),
                            v.push(1 - o / w),
                            D += 1
                        }
                    }
                    for (let t = 0; t < w; t++)
                        for (let e = 0; e < M; e++) {
                            const a = _ + e + C * t
                              , b = _ + e + C * (t + 1)
                              , n = _ + (e + 1) + C * (t + 1)
                              , r = _ + (e + 1) + C * t;
                            d.push(a, b, r),
                            d.push(b, n, r),
                            N += 6
                        }
                    h.addGroup(x, N, S),
                    x += N,
                    _ += D
                }
                y("z", "y", "x", -1, -1, n, e, t, c, l, 0),
                y("z", "y", "x", 1, -1, n, e, -t, c, l, 1),
                y("x", "z", "y", 1, 1, t, n, e, r, c, 2),
                y("x", "z", "y", 1, -1, t, n, -e, r, c, 3),
                y("x", "y", "z", 1, -1, t, e, n, r, l, 4),
                y("x", "y", "z", -1, -1, t, e, -n, r, l, 5),
                this.setIndex(d),
                this.setAttribute("position", new E.b(f,3)),
                this.setAttribute("normal", new E.b(m,3)),
                this.setAttribute("uv", new E.b(v,2))
            }
            static fromJSON(data) {
                return new A(data.width,data.height,data.depth,data.widthSegments,data.heightSegments,data.depthSegments)
            }
        }
        class L extends T.a {
            constructor(t=1, e=1, n=1, r=1) {
                super(),
                this.type = "PlaneGeometry",
                this.parameters = {
                    width: t,
                    height: e,
                    widthSegments: n,
                    heightSegments: r
                };
                const o = t / 2
                  , l = e / 2
                  , c = Math.floor(n)
                  , h = Math.floor(r)
                  , d = c + 1
                  , f = h + 1
                  , m = t / c
                  , v = e / h
                  , _ = []
                  , x = []
                  , y = []
                  , M = [];
                for (let t = 0; t < f; t++) {
                    const e = t * v - l;
                    for (let n = 0; n < d; n++) {
                        const r = n * m - o;
                        x.push(r, -e, 0),
                        y.push(0, 0, 1),
                        M.push(n / c),
                        M.push(1 - t / h)
                    }
                }
                for (let t = 0; t < h; t++)
                    for (let e = 0; e < c; e++) {
                        const a = e + d * t
                          , b = e + d * (t + 1)
                          , n = e + 1 + d * (t + 1)
                          , r = e + 1 + d * t;
                        _.push(a, b, r),
                        _.push(b, n, r)
                    }
                this.setIndex(_),
                this.setAttribute("position", new E.b(x,3)),
                this.setAttribute("normal", new E.b(y,3)),
                this.setAttribute("uv", new E.b(M,2))
            }
            static fromJSON(data) {
                return new L(data.width,data.height,data.widthSegments,data.heightSegments)
            }
        }
        var R = n(280);
        function C(t) {
            const e = {};
            for (const u in t) {
                e[u] = {};
                for (const p in t[u]) {
                    const n = t[u][p];
                    n && (n.isColor || n.isMatrix3 || n.isMatrix4 || n.isVector2 || n.isVector3 || n.isVector4 || n.isTexture || n.isQuaternion) ? e[u][p] = n.clone() : Array.isArray(n) ? e[u][p] = n.slice() : e[u][p] = n
                }
            }
            return e
        }
        function P(t) {
            const e = {};
            for (let u = 0; u < t.length; u++) {
                const n = C(t[u]);
                for (const p in n)
                    e[p] = n[p]
            }
            return e
        }
        const D = {
            clone: C,
            merge: P
        };
        class N extends R.a {
            constructor(t) {
                super(),
                this.type = "ShaderMaterial",
                this.defines = {},
                this.uniforms = {},
                this.vertexShader = "\nvoid main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n",
                this.fragmentShader = "\nvoid main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}\n",
                this.linewidth = 1,
                this.wireframe = !1,
                this.wireframeLinewidth = 1,
                this.fog = !1,
                this.lights = !1,
                this.clipping = !1,
                this.extensions = {
                    derivatives: !1,
                    fragDepth: !1,
                    drawBuffers: !1,
                    shaderTextureLOD: !1
                },
                this.defaultAttributeValues = {
                    color: [1, 1, 1],
                    uv: [0, 0],
                    uv2: [0, 0]
                },
                this.index0AttributeName = void 0,
                this.uniformsNeedUpdate = !1,
                this.glslVersion = null,
                void 0 !== t && (void 0 !== t.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),
                this.setValues(t))
            }
            copy(source) {
                return super.copy(source),
                this.fragmentShader = source.fragmentShader,
                this.vertexShader = source.vertexShader,
                this.uniforms = C(source.uniforms),
                this.defines = Object.assign({}, source.defines),
                this.wireframe = source.wireframe,
                this.wireframeLinewidth = source.wireframeLinewidth,
                this.lights = source.lights,
                this.clipping = source.clipping,
                this.extensions = Object.assign({}, source.extensions),
                this.glslVersion = source.glslVersion,
                this
            }
            toJSON(meta) {
                const data = super.toJSON(meta);
                data.glslVersion = this.glslVersion,
                data.uniforms = {};
                for (const t in this.uniforms) {
                    const e = this.uniforms[t].value;
                    e && e.isTexture ? data.uniforms[t] = {
                        type: "t",
                        value: e.toJSON(meta).uuid
                    } : e && e.isColor ? data.uniforms[t] = {
                        type: "c",
                        value: e.getHex()
                    } : e && e.isVector2 ? data.uniforms[t] = {
                        type: "v2",
                        value: e.toArray()
                    } : e && e.isVector3 ? data.uniforms[t] = {
                        type: "v3",
                        value: e.toArray()
                    } : e && e.isVector4 ? data.uniforms[t] = {
                        type: "v4",
                        value: e.toArray()
                    } : e && e.isMatrix3 ? data.uniforms[t] = {
                        type: "m3",
                        value: e.toArray()
                    } : e && e.isMatrix4 ? data.uniforms[t] = {
                        type: "m4",
                        value: e.toArray()
                    } : data.uniforms[t] = {
                        value: e
                    }
                }
                Object.keys(this.defines).length > 0 && (data.defines = this.defines),
                data.vertexShader = this.vertexShader,
                data.fragmentShader = this.fragmentShader;
                const t = {};
                for (const e in this.extensions)
                    !0 === this.extensions[e] && (t[e] = !0);
                return Object.keys(t).length > 0 && (data.extensions = t),
                data
            }
        }
        N.prototype.isShaderMaterial = !0;
        var I = n(256)
          , O = n(271);
        const F = {
            alphamap_fragment: "\n#ifdef USE_ALPHAMAP\n\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n\n#endif\n",
            alphamap_pars_fragment: "\n#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n",
            alphatest_fragment: "\n#ifdef USE_ALPHATEST\n\n\tif ( diffuseColor.a < alphaTest ) discard;\n\n#endif\n",
            alphatest_pars_fragment: "\n#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif\n",
            aomap_fragment: "\n#ifdef USE_AOMAP\n\n\t// reads channel R, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\n\t#endif\n\n#endif\n",
            aomap_pars_fragment: "\n#ifdef USE_AOMAP\n\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n\n#endif\n",
            begin_vertex: "\nvec3 transformed = vec3( position );\n",
            beginnormal_vertex: "\nvec3 objectNormal = vec3( normal );\n\n#ifdef USE_TANGENT\n\n\tvec3 objectTangent = vec3( tangent.xyz );\n\n#endif\n",
            bsdfs: '\n\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\n\treturn RECIPROCAL_PI * diffuseColor;\n\n} // validated\n\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\n\t// Original approximation by Christophe Schlick \'94\n\t// float fresnel = pow( 1.0 - dotVH, 5.0 );\n\n\t// Optimized variant (presented by Epic at SIGGRAPH \'13)\n\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n\n} // validated\n\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\n\tfloat a2 = pow2( alpha );\n\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\n\treturn 0.5 / max( gv + gl, EPSILON );\n\n}\n\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\n// alpha is "roughness squared" in Disney’s reparameterization\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\n\tfloat a2 = pow2( alpha );\n\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0; // avoid alpha = 0 with dotNH = 1\n\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n\n}\n\n// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\n\tfloat alpha = pow2( roughness ); // UE4\'s roughness\n\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\n\tfloat D = D_GGX( alpha, dotNH );\n\n\treturn F * ( V * D );\n\n}\n\n// Rect Area Light\n\n// Real-Time Polygonal-Light Shading with Linearly Transformed Cosines\n// by Eric Heitz, Jonathan Dupuy, Stephen Hill and David Neubelt\n// code: https://github.com/selfshadow/ltc_code/\n\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\n\tfloat dotNV = saturate( dot( N, V ) );\n\n\t// texture parameterized by sqrt( GGX alpha ) and sqrt( 1 - cos( theta ) )\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\n\treturn uv;\n\n}\n\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\n\t// Real-Time Area Lighting: a Journey from Research to Production (p.102)\n\t// An approximation of the form factor of a horizon-clipped rectangle.\n\n\tfloat l = length( f );\n\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n\n}\n\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\n\tfloat x = dot( v1, v2 );\n\n\tfloat y = abs( x );\n\n\t// rational polynomial approximation to theta / sin( theta ) / 2PI\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\n\treturn cross( v1, v2 ) * theta_sintheta;\n\n}\n\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\n\t// bail if point is on back side of plane of light\n\t// assumes ccw winding order of light vertices\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\n\t// construct orthonormal basis around N\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 ); // negated from paper; possibly due to a different handedness of world coordinate system\n\n\t// compute transform\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\n\t// transform rect\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\n\t// project rect onto sphere\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\n\t// calculate vector form factor\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\n\t// adjust for horizon clipping\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\n/*\n\t// alternate method of adjusting for horizon clipping (see referece)\n\t// refactoring required\n\tfloat len = length( vectorFormFactor );\n\tfloat z = vectorFormFactor.z / len;\n\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\n\t// tabulated horizon-clipped sphere, apparently...\n\tvec2 uv = vec2( z * 0.5 + 0.5, len );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\n\tfloat scale = texture2D( ltc_2, uv ).w;\n\n\tfloat result = len * scale;\n*/\n\n\treturn vec3( result );\n\n}\n\n// End Rect Area Light\n\n\nfloat G_BlinnPhong_Implicit( /* const in float dotNL, const in float dotNV */ ) {\n\n\t// geometry term is (n dot l)(n dot v) / 4(n dot l)(n dot v)\n\treturn 0.25;\n\n}\n\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n\n}\n\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\n\tfloat G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\n\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\n\treturn F * ( G * D );\n\n} // validated\n\n#if defined( USE_SHEEN )\n\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs\nfloat D_Charlie( float roughness, float dotNH ) {\n\n\tfloat alpha = pow2( roughness );\n\n\t// Estevez and Kulla 2017, "Production Friendly Microfacet Sheen BRDF"\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 ); // 2^(-14/2), so sin2h^2 > 0 in fp16\n\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n\n}\n\n// https://github.com/google/filament/blob/master/shaders/src/brdf.fs\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\n\t// Neubelt and Pettineo 2013, "Crafting a Next-gen Material Pipeline for The Order: 1886"\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n\n}\n\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\n\treturn sheenColor * ( D * V );\n\n}\n\n#endif\n',
            bumpmap_pars_fragment: "\n#ifdef USE_BUMPMAP\n\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\n\t// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen\n\t// http://api.unrealengine.com/attachments/Engine/Rendering/LightingAndShadows/BumpMappingWithoutTangentSpace/mm_sfgrad_bump.pdf\n\n\t// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n\tvec2 dHdxy_fwd() {\n\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n\t\treturn vec2( dBx, dBy );\n\n\t}\n\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\n\t\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\t\t// normalized\n\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\n\t}\n\n#endif\n",
            clipping_planes_fragment: "\n#if NUM_CLIPPING_PLANES > 0\n\n\tvec4 plane;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\n\t\tbool clipped = true;\n\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\n\t\t}\n\t\t#pragma unroll_loop_end\n\n\t\tif ( clipped ) discard;\n\n\t#endif\n\n#endif\n",
            clipping_planes_pars_fragment: "\n#if NUM_CLIPPING_PLANES > 0\n\n\tvarying vec3 vClipPosition;\n\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n\n#endif\n",
            clipping_planes_pars_vertex: "\n#if NUM_CLIPPING_PLANES > 0\n\n\tvarying vec3 vClipPosition;\n\n#endif\n",
            clipping_planes_vertex: "\n#if NUM_CLIPPING_PLANES > 0\n\n\tvClipPosition = - mvPosition.xyz;\n\n#endif\n",
            color_fragment: "\n#if defined( USE_COLOR_ALPHA )\n\n\tdiffuseColor *= vColor;\n\n#elif defined( USE_COLOR )\n\n\tdiffuseColor.rgb *= vColor;\n\n#endif\n",
            color_pars_fragment: "\n#if defined( USE_COLOR_ALPHA )\n\n\tvarying vec4 vColor;\n\n#elif defined( USE_COLOR )\n\n\tvarying vec3 vColor;\n\n#endif\n",
            color_pars_vertex: "\n#if defined( USE_COLOR_ALPHA )\n\n\tvarying vec4 vColor;\n\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\n\tvarying vec3 vColor;\n\n#endif\n",
            color_vertex: "\n#if defined( USE_COLOR_ALPHA )\n\n\tvColor = vec4( 1.0 );\n\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\n\tvColor = vec3( 1.0 );\n\n#endif\n\n#ifdef USE_COLOR\n\n\tvColor *= color;\n\n#endif\n\n#ifdef USE_INSTANCING_COLOR\n\n\tvColor.xyz *= instanceColor.xyz;\n\n#endif\n",
            common: "\n#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n\n#ifndef saturate\n// <tonemapping_pars_fragment> may have defined saturate() already\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\n\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\n\n// expects values in the range of [0,1]x[0,1], returns values in the [0,1] range.\n// do not collapse into a single function per: http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\nhighp float rand( const in vec2 uv ) {\n\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\n\treturn fract( sin( sn ) * c );\n\n}\n\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\n\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\n\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\n\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n}\n\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t// dir can be either a direction vector or a normal vector\n\t// upper-left 3x3 of matrix is assumed to be orthogonal\n\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n\n}\n\nmat3 transposeMat3( const in mat3 m ) {\n\n\tmat3 tmp;\n\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\n\treturn tmp;\n\n}\n\n// https://en.wikipedia.org/wiki/Relative_luminance\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\n\treturn dot( weights, color.rgb );\n\n}\n\nbool isPerspectiveMatrix( mat4 m ) {\n\n\treturn m[ 2 ][ 3 ] == - 1.0;\n\n}\n\nvec2 equirectUv( in vec3 dir ) {\n\n\t// dir is assumed to be unit length\n\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\n\treturn vec2( u, v );\n\n}\n",
            cube_uv_reflection_fragment: "\n#ifdef ENVMAP_TYPE_CUBE_UV\n\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\n\t// These shader functions convert between the UV coordinates of a single face of\n\t// a cubemap, the 0-5 integer index of a cube face, and the direction vector for\n\t// sampling a textureCube (not generally normalized ).\n\n\tfloat getFace( vec3 direction ) {\n\n\t\tvec3 absDirection = abs( direction );\n\n\t\tfloat face = - 1.0;\n\n\t\tif ( absDirection.x > absDirection.z ) {\n\n\t\t\tif ( absDirection.x > absDirection.y )\n\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\n\t\t\telse\n\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\n\t\t} else {\n\n\t\t\tif ( absDirection.z > absDirection.y )\n\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\n\t\t\telse\n\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\n\t\t}\n\n\t\treturn face;\n\n\t}\n\n\t// RH coordinate system; PMREM face-indexing convention\n\tvec2 getUV( vec3 direction, float face ) {\n\n\t\tvec2 uv;\n\n\t\tif ( face == 0.0 ) {\n\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x ); // pos x\n\n\t\t} else if ( face == 1.0 ) {\n\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y ); // pos y\n\n\t\t} else if ( face == 2.0 ) {\n\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z ); // pos z\n\n\t\t} else if ( face == 3.0 ) {\n\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x ); // neg x\n\n\t\t} else if ( face == 4.0 ) {\n\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y ); // neg y\n\n\t\t} else {\n\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z ); // neg z\n\n\t\t}\n\n\t\treturn 0.5 * ( uv + 1.0 );\n\n\t}\n\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\n\t\tfloat face = getFace( direction );\n\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\n\t\tfloat faceSize = exp2( mipInt );\n\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\n\t\tvec2 f = fract( uv );\n\n\t\tuv += 0.5 - f;\n\n\t\tif ( face > 2.0 ) {\n\n\t\t\tuv.y += faceSize;\n\n\t\t\tface -= 3.0;\n\n\t\t}\n\n\t\tuv.x += face * faceSize;\n\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\n\t\t}\n\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\n\t\tuv *= texelSize;\n\n\t\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\n\t\tuv.x += texelSize;\n\n\t\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\n\t\tuv.y += texelSize;\n\n\t\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\n\t\tuv.x -= texelSize;\n\n\t\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\n\t\tvec3 tm = mix( tl, tr, f.x );\n\n\t\tvec3 bm = mix( bl, br, f.x );\n\n\t\treturn mix( tm, bm, f.y );\n\n\t}\n\n\t// These defines must match with PMREMGenerator\n\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\n\tfloat roughnessToMip( float roughness ) {\n\n\t\tfloat mip = 0.0;\n\n\t\tif ( roughness >= r1 ) {\n\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\n\t\t} else if ( roughness >= r4 ) {\n\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\n\t\t} else if ( roughness >= r5 ) {\n\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\n\t\t} else if ( roughness >= r6 ) {\n\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\n\t\t} else {\n\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness ); // 1.16 = 1.79^0.25\n\t\t}\n\n\t\treturn mip;\n\n\t}\n\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\n\t\tfloat mipF = fract( mip );\n\n\t\tfloat mipInt = floor( mip );\n\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\n\t\tif ( mipF == 0.0 ) {\n\n\t\t\treturn vec4( color0, 1.0 );\n\n\t\t} else {\n\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\n\t\t}\n\n\t}\n\n#endif\n",
            defaultnormal_vertex: "\nvec3 transformedNormal = objectNormal;\n\n#ifdef USE_INSTANCING\n\n\t// this is in lieu of a per-instance normal-matrix\n\t// shear transforms in the instance matrix are not supported\n\n\tmat3 m = mat3( instanceMatrix );\n\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\n\ttransformedNormal = m * transformedNormal;\n\n#endif\n\ntransformedNormal = normalMatrix * transformedNormal;\n\n#ifdef FLIP_SIDED\n\n\ttransformedNormal = - transformedNormal;\n\n#endif\n\n#ifdef USE_TANGENT\n\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\n\t#ifdef FLIP_SIDED\n\n\t\ttransformedTangent = - transformedTangent;\n\n\t#endif\n\n#endif\n",
            displacementmap_pars_vertex: "\n#ifdef USE_DISPLACEMENTMAP\n\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n\n#endif\n",
            displacementmap_vertex: "\n#ifdef USE_DISPLACEMENTMAP\n\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n\n#endif\n",
            emissivemap_fragment: "\n#ifdef USE_EMISSIVEMAP\n\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n\n#endif\n",
            emissivemap_pars_fragment: "\n#ifdef USE_EMISSIVEMAP\n\n\tuniform sampler2D emissiveMap;\n\n#endif\n",
            encodings_fragment: "\ngl_FragColor = linearToOutputTexel( gl_FragColor );\n",
            encodings_pars_fragment: "\n// For a discussion of what this is, please read this: http://lousodrome.net/blog/light/2013/05/26/gamma-correct-and-hdr-rendering-in-a-32-bits-buffer/\n\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\n\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\n\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\n\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\n\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\n\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\n\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n\t// return vec4( value.brg, ( 3.0 + 128.0 ) / 256.0 );\n}\n\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\n\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\n\n// reference: http://iwasbeingirony.blogspot.ca/2010/06/difference-between-rgbm-and-rgbd.html\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\n\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\t// NOTE: The implementation with min causes the shader to not compile on\n\t// a common Alcatel A502DL in Chrome 78/Android 8.1. Some research suggests \n\t// that the chipset is Mediatek MT6739 w/ IMG PowerVR GE8100 GPU.\n\t// D = min( floor( D ) / 255.0, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\n\n// LogLuv reference: http://graphicrants.blogspot.ca/2009/04/rgbm-color-encoding.html\n\n// M matrix, for encoding\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\n\n// Inverse M matrix, for decoding\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}\n",
            envmap_fragment: "\n#ifdef USE_ENVMAP\n\n\t#ifdef ENV_WORLDPOS\n\n\t\tvec3 cameraToFrag;\n\n\t\tif ( isOrthographic ) {\n\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\n\t\t} else {\n\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\n\t\t}\n\n\t\t// Transforming Normal Vectors with the Inverse Transformation\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\n\t\t#else\n\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#else\n\n\t\tvec3 reflectVec = vReflect;\n\n\t#endif\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n\t\tenvColor = envMapTexelToLinear( envColor );\n\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\n\t#else\n\n\t\tvec4 envColor = vec4( 0.0 );\n\n\t#endif\n\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\n\t#endif\n\n#endif\n",
            envmap_common_pars_fragment: "\n#ifdef USE_ENVMAP\n\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif\n",
            envmap_pars_fragment: "\n#ifdef USE_ENVMAP\n\n\tuniform float reflectivity;\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n\t\t#define ENV_WORLDPOS\n\n\t#endif\n\n\t#ifdef ENV_WORLDPOS\n\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n\n#endif\n",
            envmap_pars_vertex: "\n#ifdef USE_ENVMAP\n\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\n\t\t#define ENV_WORLDPOS\n\n\t#endif\n\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\n\t#else\n\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\n\t#endif\n\n#endif\n",
            envmap_physical_pars_fragment: "\n#if defined( USE_ENVMAP )\n\n\t#ifdef ENVMAP_MODE_REFRACTION\n\n\t\tuniform float refractionRatio;\n\n\t#endif\n\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\n\t\t#else\n\n\t\t\treturn vec3( 0.0 );\n\n\t\t#endif\n\n\t}\n\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\t\tvec3 reflectVec;\n\n\t\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\t\treflectVec = reflect( - viewDir, normal );\n\n\t\t\t\t// Mixing the reflection with the normal is more accurate and keeps rough objects from gathering light from behind their tangent plane.\n\t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\n\t\t\t#else\n\n\t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );\n\n\t\t\t#endif\n\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\n\t\t#else\n\n\t\t\treturn vec3( 0.0 );\n\n\t\t#endif\n\n\t}\n\n#endif\n",
            envmap_vertex: "\n#ifdef USE_ENVMAP\n\n\t#ifdef ENV_WORLDPOS\n\n\t\tvWorldPosition = worldPosition.xyz;\n\n\t#else\n\n\t\tvec3 cameraToVertex;\n\n\t\tif ( isOrthographic ) {\n\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\n\t\t} else {\n\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n\t\t}\n\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\n\t\t#else\n\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n\t\t#endif\n\n\t#endif\n\n#endif\n",
            fog_vertex: "\n#ifdef USE_FOG\n\n\tvFogDepth = - mvPosition.z;\n\n#endif\n",
            fog_pars_vertex: "\n#ifdef USE_FOG\n\n\tvarying float vFogDepth;\n\n#endif\n",
            fog_fragment: "\n#ifdef USE_FOG\n\n\t#ifdef FOG_EXP2\n\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\n\t#else\n\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\n\t#endif\n\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n\n#endif\n",
            fog_pars_fragment: "\n#ifdef USE_FOG\n\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\n\t#ifdef FOG_EXP2\n\n\t\tuniform float fogDensity;\n\n\t#else\n\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\n\t#endif\n\n#endif\n",
            gradientmap_pars_fragment: "\n\n#ifdef USE_GRADIENTMAP\n\n\tuniform sampler2D gradientMap;\n\n#endif\n\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\n\t// dotNL will be from -1.0 to 1.0\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\n\t#ifdef USE_GRADIENTMAP\n\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\n\t#else\n\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\n\t#endif\n\n}\n",
            lightmap_fragment: "\n#ifdef USE_LIGHTMAP\n\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\tlightMapIrradiance *= PI;\n\n\t#endif\n\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n\n#endif\n",
            lightmap_pars_fragment: "\n#ifdef USE_LIGHTMAP\n\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n\n#endif\n",
            lights_lambert_vertex: "\nvec3 diffuse = vec3( 1.0 );\n\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\n\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\n\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\n\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\n\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n\n#ifdef DOUBLE_SIDED\n\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n\n#endif\n\n#if NUM_POINT_LIGHTS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\n\t\t#endif\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if NUM_SPOT_LIGHTS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if NUM_DIR_LIGHTS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\n\t\t#endif\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if NUM_HEMI_LIGHTS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\n\t\t#endif\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n",
            lights_pars_begin: "\nuniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\n\n// get the irradiance (radiance convolved with cosine lobe) at the point 'normal' on the unit sphere\n// source: https://graphics.stanford.edu/papers/envmap/envmap.pdf\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\n\t// normal is assumed to have unit length\n\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\n\t// band 0\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\n\t// band 1\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\n\t// band 2\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\n\treturn result;\n\n}\n\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\n\treturn irradiance;\n\n}\n\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\n\tvec3 irradiance = ambientLightColor;\n\n\treturn irradiance;\n\n}\n\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\n\t\t// based upon Frostbite 3 Moving to Physically-based Rendering\n\t\t// page 32, equation 26: E[window1]\n\t\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\n\t\tif ( cutoffDistance > 0.0 ) {\n\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\n\t\t}\n\n\t\treturn distanceFalloff;\n\n\t#else\n\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\n\t\t}\n\n\t\treturn 1.0;\n\n\t#endif\n\n}\n\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n\n}\n\n#if NUM_DIR_LIGHTS > 0\n\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\n\t}\n\n#endif\n\n\n#if NUM_POINT_LIGHTS > 0\n\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\n\t// light is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\n\t\tlight.direction = normalize( lVector );\n\n\t\tfloat lightDistance = length( lVector );\n\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\n\t}\n\n#endif\n\n\n#if NUM_SPOT_LIGHTS > 0\n\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\n\t// light is an out parameter as having it as a return value caused compiler errors on some devices\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\n\t\tlight.direction = normalize( lVector );\n\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\n\t\tif ( spotAttenuation > 0.0 ) {\n\n\t\t\tfloat lightDistance = length( lVector );\n\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\n\t\t} else {\n\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\n\t\t}\n\n\t}\n\n#endif\n\n\n#if NUM_RECT_AREA_LIGHTS > 0\n\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\n\t// Pre-computed values of LinearTransformedCosine approximation of BRDF\n\t// BRDF approximation Texture is 64x64\n\tuniform sampler2D ltc_1; // RGBA Float\n\tuniform sampler2D ltc_2; // RGBA Float\n\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n\n#endif\n\n\n#if NUM_HEMI_LIGHTS > 0\n\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\n\t\treturn irradiance;\n\n\t}\n\n#endif\n",
            lights_toon_fragment: "\nToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\n",
            lights_toon_pars_fragment: "\nvarying vec3 vViewPosition;\n\nstruct ToonMaterial {\n\n\tvec3 diffuseColor;\n\n};\n\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n}\n\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n\n#define Material_LightProbeLOD( material )\t(0)\n",
            lights_phong_fragment: "\nBlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n",
            lights_phong_pars_fragment: "\nvarying vec3 vViewPosition;\n\nstruct BlinnPhongMaterial {\n\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n\n};\n\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n\n}\n\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n\n#define Material_LightProbeLOD( material )\t(0)\n",
            lights_physical_fragment: "\nPhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\n\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\n\nmaterial.roughness = max( roughnessFactor, 0.0525 );// 0.0525 corresponds to the base mip of a 256 cubemap.\nmaterial.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n\n#ifdef IOR\n\n\t#ifdef SPECULAR\n\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\n\t\t#endif\n\n\t\t#ifdef USE_SPECULARCOLORMAP\n\n\t\t\tspecularColorFactor *= specularColorMapTexelToLinear( texture2D( specularColorMap, vUv ) ).rgb;\n\n\t\t#endif\n\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\n\t#else\n\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\n\t#endif\n\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n\n#else\n\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n\n#endif\n\n#ifdef USE_CLEARCOAT\n\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\n\t#ifdef USE_CLEARCOATMAP\n\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\n\t#endif\n\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\n\t#endif\n\n\tmaterial.clearcoat = saturate( material.clearcoat ); // Burley clearcoat model\n\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n\n#endif\n\n#ifdef USE_SHEEN\n\n\tmaterial.sheenColor = sheenColor;\n\n\t#ifdef USE_SHEENCOLORMAP\n\n\t\tmaterial.sheenColor *= sheenColorMapTexelToLinear( texture2D( sheenColorMap, vUv ) ).rgb;\n\n\t#endif\n\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\n\t#ifdef USE_SHEENROUGHNESSMAP\n\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\n\t#endif\n\n#endif\n",
            lights_physical_pars_fragment: '\nstruct PhysicalMaterial {\n\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\n};\n\n// temporary\nvec3 clearcoatSpecular = vec3( 0.0 );\n\n// Analytical approximation of the DFG LUT, one half of the\n// split-sum approximation used in indirect specular lighting.\n// via \'environmentBRDF\' from "Physically Based Shading on Mobile"\n// https://www.unrealengine.com/blog/physically-based-shading-on-mobile\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\n\tvec4 r = roughness * c0 + c1;\n\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\n\treturn fab;\n\n}\n\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\n\treturn specularColor * fab.x + specularF90 * fab.y;\n\n}\n\n// Fdez-Agüera\'s "Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting"\n// Approximates multiscattering in order to preserve energy.\n// http://www.jcgt.org/published/0008/01/03/\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\n\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619; // 1/21\n\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n\n}\n\n#if NUM_RECT_AREA_LIGHTS > 0\n\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight; // counterclockwise; light shines in local neg z direction\n\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\n\t\t// LTC Fresnel Approximation by Stephen Hill\n\t\t// http://blog.selfshadow.com/publications/s2016-advances/s2016_ltc_fresnel.pdf\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\n\t}\n\n#endif\n\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\n\tvec3 irradiance = dotNL * directLight.color;\n\n\t#ifdef USE_CLEARCOAT\n\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\n\t#endif\n\n\t#ifdef USE_SHEEN\n\n\t\treflectedLight.directSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\n\t#endif\n\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\n\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\n}\n\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\n\t#ifdef USE_CLEARCOAT\n\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\n\t#endif\n\n\t// Both indirect specular and indirect diffuse light accumulate here\n\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\n\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n\n}\n\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n\n// ref: https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n\n}\n',
            lights_fragment_begin: "\n/**\n * This is a template that can be used to light a material, it uses pluggable\n * RenderEquations (RE)for specific lighting scenarios.\n *\n * Instructions for use:\n * - Ensure that both RE_Direct, RE_IndirectDiffuse and RE_IndirectSpecular are defined\n * - If you have defined an RE_IndirectSpecular, you need to also provide a Material_LightProbeLOD. <---- ???\n * - Create a material parameter that is to be passed as the third parameter to your lighting functions.\n *\n * TODO:\n * - Add area light support.\n * - Add sphere light support.\n * - Add diffuse light probe (irradiance cubemap) support.\n */\n\nGeometricContext geometry;\n\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n\n#ifdef USE_CLEARCOAT\n\n\tgeometry.clearcoatNormal = clearcoatNormal;\n\n#endif\n\nIncidentLight directLight;\n\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\n\t\tpointLight = pointLights[ i ];\n\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\n\t\tspotLight = spotLights[ i ];\n\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\n\t\tdirectionalLight = directionalLights[ i ];\n\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\n\tRectAreaLight rectAreaLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\n\t}\n\t#pragma unroll_loop_end\n\n#endif\n\n#if defined( RE_IndirectDiffuse )\n\n\tvec3 iblIrradiance = vec3( 0.0 );\n\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\n\t\t}\n\t\t#pragma unroll_loop_end\n\n\t#endif\n\n#endif\n\n#if defined( RE_IndirectSpecular )\n\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n\n#endif\n",
            lights_fragment_maps: "\n#if defined( RE_IndirectDiffuse )\n\n\t#ifdef USE_LIGHTMAP\n\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\n\t\t\tlightMapIrradiance *= PI;\n\n\t\t#endif\n\n\t\tirradiance += lightMapIrradiance;\n\n\t#endif\n\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\n\t#endif\n\n#endif\n\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\n\t#ifdef USE_CLEARCOAT\n\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\n\t#endif\n\n#endif\n",
            lights_fragment_end: "\n#if defined( RE_IndirectDiffuse )\n\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n\n#endif\n\n#if defined( RE_IndirectSpecular )\n\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n\n#endif\n",
            logdepthbuf_fragment: "\n#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\n\t// Doing a strict comparison with == 1.0 can cause noise artifacts\n\t// on some platforms. See issue #17623.\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n\n#endif\n",
            logdepthbuf_pars_fragment: "\n#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n\n#endif\n",
            logdepthbuf_pars_vertex: "\n#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\n\t#else\n\n\t\tuniform float logDepthBufFC;\n\n\t#endif\n\n#endif\n",
            logdepthbuf_vertex: "\n#ifdef USE_LOGDEPTHBUF\n\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\n\t#else\n\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\n\t\t\tgl_Position.z *= gl_Position.w;\n\n\t\t}\n\n\t#endif\n\n#endif\n",
            map_fragment: "\n#ifdef USE_MAP\n\n\tvec4 texelColor = texture2D( map, vUv );\n\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n\n#endif\n",
            map_pars_fragment: "\n#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif\n",
            map_particle_fragment: "\n#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\n#endif\n\n#ifdef USE_MAP\n\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n\n#endif\n\n#ifdef USE_ALPHAMAP\n\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n\n#endif\n",
            map_particle_pars_fragment: "\n#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\n\tuniform mat3 uvTransform;\n\n#endif\n\n#ifdef USE_MAP\n\n\tuniform sampler2D map;\n\n#endif\n\n#ifdef USE_ALPHAMAP\n\n\tuniform sampler2D alphaMap;\n\n#endif\n",
            metalnessmap_fragment: "\nfloat metalnessFactor = metalness;\n\n#ifdef USE_METALNESSMAP\n\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\n\t// reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\tmetalnessFactor *= texelMetalness.b;\n\n#endif\n",
            metalnessmap_pars_fragment: "\n#ifdef USE_METALNESSMAP\n\n\tuniform sampler2D metalnessMap;\n\n#endif\n",
            morphnormal_vertex: "\n#ifdef USE_MORPHNORMALS\n\n\t// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:\n\t// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in normal = sum((target - base) * influence)\n\t// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting\n\tobjectNormal *= morphTargetBaseInfluence;\n\n\t#ifdef MORPHTARGETS_TEXTURE\n\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\n\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\n\n\t\t}\n\n\t#else\n\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\n\t#endif\n\n#endif\n",
            morphtarget_pars_vertex: "\n#ifdef USE_MORPHTARGETS\n\n\tuniform float morphTargetBaseInfluence;\n\n\t#ifdef MORPHTARGETS_TEXTURE\n\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform vec2 morphTargetsTextureSize;\n\n\t\tvec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\n\n\t\t\tfloat texelIndex = float( vertexIndex * stride + offset );\n\t\t\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\n\t\t\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\n\n\t\t\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n\t\t\treturn texture( morphTargetsTexture, morphUV ).xyz;\n\n\t\t}\n\n\t#else\n\n\t\t#ifndef USE_MORPHNORMALS\n\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\n\t\t#else\n\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\n\t\t#endif\n\n\t#endif\n\n#endif\n",
            morphtarget_vertex: "\n#ifdef USE_MORPHTARGETS\n\n\t// morphTargetBaseInfluence is set based on BufferGeometry.morphTargetsRelative value:\n\t// When morphTargetsRelative is false, this is set to 1 - sum(influences); this results in position = sum((target - base) * influence)\n\t// When morphTargetsRelative is true, this is set to 1; as a result, all morph targets are simply added to the base after weighting\n\ttransformed *= morphTargetBaseInfluence;\n\n\t#ifdef MORPHTARGETS_TEXTURE\n\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\n\t\t\t#ifndef USE_MORPHNORMALS\n\n\t\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\n\n\t\t\t#else\n\n\t\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\n\n\t\t\t#endif\n\n\t\t}\n\n\t#else\n\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\n\t\t#ifndef USE_MORPHNORMALS\n\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\n\t\t#endif\n\n\t#endif\n\n#endif\n",
            normal_fragment_begin: "\nfloat faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n\n#ifdef FLAT_SHADED\n\n\t// Workaround for Adreno GPUs not able to do dFdx( vViewPosition )\n\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n\n#else\n\n\tvec3 normal = normalize( vNormal );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tnormal = normal * faceDirection;\n\n\t#endif\n\n\t#ifdef USE_TANGENT\n\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\n\t\t#ifdef DOUBLE_SIDED\n\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\n\t\t#endif\n\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\n\t\t#endif\n\n\t#endif\n\n#endif\n\n// non perturbed normal for clearcoat among others\n\nvec3 geometryNormal = normal;\n\n",
            normal_fragment_maps: "\n\n#ifdef OBJECTSPACE_NORMALMAP\n\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0; // overrides both flatShading and attribute normals\n\n\t#ifdef FLIP_SIDED\n\n\t\tnormal = - normal;\n\n\t#endif\n\n\t#ifdef DOUBLE_SIDED\n\n\t\tnormal = normal * faceDirection;\n\n\t#endif\n\n\tnormal = normalize( normalMatrix * normal );\n\n#elif defined( TANGENTSPACE_NORMALMAP )\n\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\n\t#ifdef USE_TANGENT\n\n\t\tnormal = normalize( vTBN * mapN );\n\n\t#else\n\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\n\t#endif\n\n#elif defined( USE_BUMPMAP )\n\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n\n#endif\n",
            normal_pars_fragment: "\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n",
            normal_pars_vertex: "\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n\t#ifdef USE_TANGENT\n\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\n\t#endif\n\n#endif\n",
            normal_vertex: "\n#ifndef FLAT_SHADED // normal is computed with derivatives when FLAT_SHADED\n\n\tvNormal = normalize( transformedNormal );\n\n\t#ifdef USE_TANGENT\n\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\n\t#endif\n\n#endif\n",
            normalmap_pars_fragment: "\n#ifdef USE_NORMALMAP\n\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\n#endif\n\n#ifdef OBJECTSPACE_NORMALMAP\n\n\tuniform mat3 normalMatrix;\n\n#endif\n\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\n\t// Normal Mapping Without Precomputed Tangents\n\t// http://www.thetenthplanet.de/archives/1180\n\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\n\t\t// Workaround for Adreno 3XX dFd*( vec3 ) bug. See #9988\n\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\n\t\tvec3 N = surf_norm; // normalized\n\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\n\t}\n\n#endif\n",
            clearcoat_normal_fragment_begin: "\n#ifdef USE_CLEARCOAT\n\n\tvec3 clearcoatNormal = geometryNormal;\n\n#endif\n",
            clearcoat_normal_fragment_maps: "\n#ifdef USE_CLEARCOAT_NORMALMAP\n\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\n\t#ifdef USE_TANGENT\n\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\n\t#else\n\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\n\t#endif\n\n#endif\n",
            clearcoat_pars_fragment: "\n\n#ifdef USE_CLEARCOATMAP\n\n\tuniform sampler2D clearcoatMap;\n\n#endif\n\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\n\tuniform sampler2D clearcoatRoughnessMap;\n\n#endif\n\n#ifdef USE_CLEARCOAT_NORMALMAP\n\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n\n#endif\n",
            output_fragment: "\n#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n\n// https://github.com/mrdoob/three.js/pull/22425\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\n\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\n",
            packing: "\nvec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\n\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\n\nconst float PackUpscale = 256. / 255.; // fraction -> 0..1 (including 1)\nconst float UnpackDownscale = 255. / 256.; // 0..1 -> fraction (excluding 1)\n\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\n\nconst float ShiftRight8 = 1. / 256.;\n\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8; // tidy overflow\n\treturn r * PackUpscale;\n}\n\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\n\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\n\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\n\n// NOTE: viewZ/eyeZ is < 0 when in front of the camera per OpenGL conventions\n\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\n\n// NOTE: https://twitter.com/gonnavis/status/1377183786949959682\n\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n",
            premultiplied_alpha_fragment: "\n#ifdef PREMULTIPLIED_ALPHA\n\n\t// Get get normal blending with premultipled, use with CustomBlending, OneFactor, OneMinusSrcAlphaFactor, AddEquation.\n\tgl_FragColor.rgb *= gl_FragColor.a;\n\n#endif\n",
            project_vertex: "\nvec4 mvPosition = vec4( transformed, 1.0 );\n\n#ifdef USE_INSTANCING\n\n\tmvPosition = instanceMatrix * mvPosition;\n\n#endif\n\nmvPosition = modelViewMatrix * mvPosition;\n\ngl_Position = projectionMatrix * mvPosition;\n",
            dithering_fragment: "\n#ifdef DITHERING\n\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n\n#endif\n",
            dithering_pars_fragment: "\n#ifdef DITHERING\n\n\t// based on https://www.shadertoy.com/view/MslGR8\n\tvec3 dithering( vec3 color ) {\n\t\t//Calculate grid position\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\n\t\t//Shift the individual colors differently, thus making it even harder to see the dithering pattern\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\n\t\t//modify shift acording to grid position.\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\n\t\t//shift the color by dither_shift\n\t\treturn color + dither_shift_RGB;\n\t}\n\n#endif\n",
            roughnessmap_fragment: "\nfloat roughnessFactor = roughness;\n\n#ifdef USE_ROUGHNESSMAP\n\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\n\t// reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\n\troughnessFactor *= texelRoughness.g;\n\n#endif\n",
            roughnessmap_pars_fragment: "\n#ifdef USE_ROUGHNESSMAP\n\n\tuniform sampler2D roughnessMap;\n\n#endif\n",
            shadowmap_pars_fragment: "\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): create uniforms for area light shadows\n\n\t#endif\n\t*/\n\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\n\t}\n\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\n\t}\n\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\n\t\tfloat occlusion = 1.0;\n\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\n\t\tfloat hard_shadow = step( compare , distribution.x ); // Hard Shadow\n\n\t\tif (hard_shadow != 1.0 ) {\n\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance ); // Chebeyshevs inequality\n\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 ); // 0.3 reduces light bleed\n\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\n\t\t}\n\t\treturn occlusion;\n\n\t}\n\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\n\t\tfloat shadow = 1.0;\n\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\n\t\t// if ( something && something ) breaks ATI OpenGL shader compiler\n\t\t// if ( all( something, something ) ) using this instead\n\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\n\t\tbool frustumTest = all( frustumTestVec );\n\n\t\tif ( frustumTest ) {\n\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\n\t\t#else // no percentage-closer filtering:\n\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\n\t\t#endif\n\n\t\t}\n\n\t\treturn shadow;\n\n\t}\n\n\t// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D\n\t// vector suitable for 2D texture mapping. This code uses the following layout for the\n\t// 2D texture:\n\t//\n\t// xzXZ\n\t//  y Y\n\t//\n\t// Y - Positive y direction\n\t// y - Negative y direction\n\t// X - Positive x direction\n\t// x - Negative x direction\n\t// Z - Positive z direction\n\t// z - Negative z direction\n\t//\n\t// Source and test bed:\n\t// https://gist.github.com/tschw/da10c43c467ce8afd0c4\n\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\n\t\t// Number of texels to avoid at the edge of each square\n\n\t\tvec3 absV = abs( v );\n\n\t\t// Intersect unit cube\n\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\n\t\t// Apply scale to avoid seams\n\n\t\t// two texels less per square (one texel will do for NEAREST)\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\n\t\t// Unwrap\n\n\t\t// space: -1 ... 1 range for each square\n\t\t//\n\t\t// #X##\t\tdim    := ( 4 , 2 )\n\t\t//  # #\t\tcenter := ( 1 , 1 )\n\n\t\tvec2 planar = v.xy;\n\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\n\t\tif ( absV.z >= almostOne ) {\n\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\n\t\t} else if ( absV.x >= almostOne ) {\n\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\n\t\t} else if ( absV.y >= almostOne ) {\n\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\n\t\t}\n\n\t\t// Transform to UV space\n\n\t\t// scale := 0.5 / dim\n\t\t// translate := ( center + 0.5 ) / dim\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\n\t}\n\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\n\t\t// for point lights, the uniform @vShadowCoord is re-purposed to hold\n\t\t// the vector from the light to the world-space position of the fragment.\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\n\t\t// dp = normalized distance from light to fragment position\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear ); // need to clamp?\n\t\tdp += shadowBias;\n\n\t\t// bd3D = base direction 3D\n\t\tvec3 bd3D = normalize( lightToPosition );\n\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\n\t\t#else // no percentage-closer filtering\n\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\n\t\t#endif\n\n\t}\n\n#endif\n",
            shadowmap_pars_vertex: "\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): uniforms for area light shadows\n\n\t#endif\n\t*/\n\n#endif\n",
            shadowmap_vertex: "\n#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\n\t\t// Offsetting the position used for querying occlusion along the world normal can be used to reduce shadow acne.\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\n\t#endif\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): update vAreaShadowCoord with area light info\n\n\t#endif\n\t*/\n\n#endif\n",
            shadowmask_pars_fragment: "\nfloat getShadowMask() {\n\n\tfloat shadow = 1.0;\n\n\t#ifdef USE_SHADOWMAP\n\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\n\tDirectionalLightShadow directionalLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\n\tSpotLightShadow spotLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\n\tPointLightShadow pointLight;\n\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\n\t}\n\t#pragma unroll_loop_end\n\n\t#endif\n\n\t/*\n\t#if NUM_RECT_AREA_LIGHTS > 0\n\n\t\t// TODO (abelnation): update shadow for Area light\n\n\t#endif\n\t*/\n\n\t#endif\n\n\treturn shadow;\n\n}\n",
            skinbase_vertex: "\n#ifdef USE_SKINNING\n\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif\n",
            skinning_pars_vertex: "\n#ifdef USE_SKINNING\n\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\n\t#ifdef BONE_TEXTURE\n\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\n\t\t\ty = dy * ( y + 0.5 );\n\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\n\t\t\treturn bone;\n\n\t\t}\n\n\t#else\n\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\n\t\tmat4 getBoneMatrix( const in float i ) {\n\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\n\t\t}\n\n\t#endif\n\n#endif\n",
            skinning_vertex: "\n#ifdef USE_SKINNING\n\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n\n#endif\n",
            skinnormal_vertex: "\n#ifdef USE_SKINNING\n\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\n\t#ifdef USE_TANGENT\n\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\n\t#endif\n\n#endif\n",
            specularmap_fragment: "\nfloat specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n\n#else\n\n\tspecularStrength = 1.0;\n\n#endif\n",
            specularmap_pars_fragment: "\n#ifdef USE_SPECULARMAP\n\n\tuniform sampler2D specularMap;\n\n#endif\n",
            tonemapping_fragment: "\n#if defined( TONE_MAPPING )\n\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n\n#endif\n",
            tonemapping_pars_fragment: "\n#ifndef saturate\n// <common> may have defined saturate() already\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n\nuniform float toneMappingExposure;\n\n// exposure only\nvec3 LinearToneMapping( vec3 color ) {\n\n\treturn toneMappingExposure * color;\n\n}\n\n// source: https://www.cs.utah.edu/~reinhard/cdrom/\nvec3 ReinhardToneMapping( vec3 color ) {\n\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n\n}\n\n// source: http://filmicworlds.com/blog/filmic-tonemapping-operators/\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\n\t// optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n\n}\n\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\nvec3 RRTAndODTFit( vec3 v ) {\n\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n\n}\n\n// this implementation of ACES is modified to accommodate a brighter viewing environment.\n// the scale factor of 1/0.6 is subjective. see discussion in #19621.\n\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\n\t// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ), // transposed from source\n\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\n\t// ODT_SAT => XYZ => D60_2_D65 => sRGB\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ), // transposed from source\n\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\n\tcolor *= toneMappingExposure / 0.6;\n\n\tcolor = ACESInputMat * color;\n\n\t// Apply RRT and ODT\n\tcolor = RRTAndODTFit( color );\n\n\tcolor = ACESOutputMat * color;\n\n\t// Clamp to [0, 1]\n\treturn saturate( color );\n\n}\n\nvec3 CustomToneMapping( vec3 color ) { return color; }\n",
            transmission_fragment: "\n#ifdef USE_TRANSMISSION\n\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\n\t#ifdef USE_TRANSMISSIONMAP\n\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\n\t#endif\n\n\t#ifdef USE_THICKNESSMAP\n\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\n\t#endif\n\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif\n",
            transmission_pars_fragment: "\n#ifdef USE_TRANSMISSION\n\n\t// Transmission code is based on glTF-Sampler-Viewer\n\t// https://github.com/KhronosGroup/glTF-Sample-Viewer\n\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\n\t#ifdef USE_TRANSMISSIONMAP\n\n\t\tuniform sampler2D transmissionMap;\n\n\t#endif\n\n\t#ifdef USE_THICKNESSMAP\n\n\t\tuniform sampler2D thicknessMap;\n\n\t#endif\n\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\n\tvarying vec3 vWorldPosition;\n\n\tvec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {\n\n\t\t// Direction of refracted light.\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\n\t\t// Compute rotation-independant scaling of the model matrix.\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\n\t\t// The thickness is specified in local space.\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\n\t}\n\n\tfloat applyIorToRoughness( float roughness, float ior ) {\n\n\t\t// Scale roughness with IOR so that an IOR of 1.0 results in no microfacet refraction and\n\t\t// an IOR of 1.5 results in the default amount of microfacet refraction.\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\n\t}\n\n\tvec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {\n\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\n\t\t#ifdef TEXTURE_LOD_EXT\n\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\n\t\t#else\n\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\n\t\t#endif\n\n\t}\n\n\tvec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {\n\n\t\tif ( attenuationDistance == 0.0 ) {\n\n\t\t\t// Attenuation distance is +∞ (which we indicate by zero), i.e. the transmitted color is not attenuated at all.\n\t\t\treturn radiance;\n\n\t\t} else {\n\n\t\t\t// Compute light attenuation using Beer's law.\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance ); // Beer's law\n\t\t\treturn transmittance * radiance;\n\n\t\t}\n\n\t}\n\n\tvec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,\n\t\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\n\t\tvec3 attenuationColor, float attenuationDistance ) {\n\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\n\t\t// Project refracted vector on the framebuffer, while mapping to normalized device coordinates.\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\n\t\t// Sample framebuffer to get pixel the refracted ray hits.\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\n\t\t// Get the specular component.\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\n\t}\n#endif\n",
            uv_pars_fragment: "\n#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\n\tvarying vec2 vUv;\n\n#endif\n",
            uv_pars_vertex: "\n#ifdef USE_UV\n\n\t#ifdef UVS_VERTEX_ONLY\n\n\t\tvec2 vUv;\n\n\t#else\n\n\t\tvarying vec2 vUv;\n\n\t#endif\n\n\tuniform mat3 uvTransform;\n\n#endif\n",
            uv_vertex: "\n#ifdef USE_UV\n\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\n#endif\n",
            uv2_pars_fragment: "\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tvarying vec2 vUv2;\n\n#endif\n",
            uv2_pars_vertex: "\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\n\tuniform mat3 uv2Transform;\n\n#endif\n",
            uv2_vertex: "\n#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n\n#endif\n",
            worldpos_vertex: "\n#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\n\t#ifdef USE_INSTANCING\n\n\t\tworldPosition = instanceMatrix * worldPosition;\n\n\t#endif\n\n\tworldPosition = modelMatrix * worldPosition;\n\n#endif\n",
            background_vert: "\nvarying vec2 vUv;\nuniform mat3 uvTransform;\n\nvoid main() {\n\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n\n}\n",
            background_frag: "\nuniform sampler2D t2D;\n\nvarying vec2 vUv;\n\nvoid main() {\n\n\tvec4 texColor = texture2D( t2D, vUv );\n\n\tgl_FragColor = mapTexelToLinear( texColor );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\n}\n",
            cube_vert: "\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\n\tgl_Position.z = gl_Position.w; // set z to camera.far\n\n}\n",
            cube_frag: "\n#include <envmap_common_pars_fragment>\nuniform float opacity;\n\nvarying vec3 vWorldDirection;\n\n#include <cube_uv_reflection_fragment>\n\nvoid main() {\n\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\n}\n",
            depth_vert: "\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n// This is used for computing an equivalent of gl_FragCoord.z that is as high precision as possible.\n// Some platforms compute gl_FragCoord at a lower precision which makes the manually computed value better for\n// depth-based postprocessing effects. Reproduced on iPad with A10 processor / iPadOS 13.3.1.\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvHighPrecisionZW = gl_Position.zw;\n\n}\n",
            depth_frag: "\n#if DEPTH_PACKING == 3200\n\n\tuniform float opacity;\n\n#endif\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvarying vec2 vHighPrecisionZW;\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tdiffuseColor.a = opacity;\n\n\t#endif\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\t#include <logdepthbuf_fragment>\n\n\t// Higher precision equivalent of gl_FragCoord.z. This assumes depthRange has been left to its default values.\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\n\t#if DEPTH_PACKING == 3200\n\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\n\t#elif DEPTH_PACKING == 3201\n\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\n\t#endif\n\n}\n",
            distanceRGBA_vert: "\n#define DISTANCE\n\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <skinbase_vertex>\n\n\t#ifdef USE_DISPLACEMENTMAP\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvWorldPosition = worldPosition.xyz;\n\n}\n",
            distanceRGBA_frag: "\n#define DISTANCE\n\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main () {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( 1.0 );\n\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist ); // clamp to [ 0, 1 ]\n\n\tgl_FragColor = packDepthToRGBA( dist );\n\n}\n",
            equirect_vert: "\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\n}\n",
            equirect_frag: "\nuniform sampler2D tEquirect;\n\nvarying vec3 vWorldDirection;\n\n#include <common>\n\nvoid main() {\n\n\tvec3 direction = normalize( vWorldDirection );\n\n\tvec2 sampleUV = equirectUv( direction );\n\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\n\tgl_FragColor = mapTexelToLinear( texColor );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\n}\n",
            linedashed_vert: "\nuniform float scale;\nattribute float lineDistance;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\tvLineDistance = scale * lineDistance;\n\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n}\n",
            linedashed_frag: "\nuniform vec3 diffuse;\nuniform float opacity;\n\nuniform float dashSize;\nuniform float totalSize;\n\nvarying float vLineDistance;\n\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\n\t\tdiscard;\n\n\t}\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\n\toutgoingLight = diffuseColor.rgb; // simple shader\n\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\n}\n",
            meshbasic_vert: "\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\n\t#endif\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n\n}\n",
            meshbasic_frag: "\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifndef FLAT_SHADED\n\n\tvarying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n\t// accumulation (baked indirect lighting only)\n\t#ifdef USE_LIGHTMAP\n\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\n\t#endif\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
            meshlambert_vert: "\n#define LAMBERT\n\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n",
            meshlambert_frag: "\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\n\t#ifdef DOUBLE_SIDED\n\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\n\t#endif\n\n\t#include <lightmap_fragment>\n\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\n\t#ifdef DOUBLE_SIDED\n\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\n\t#else\n\n\t\treflectedLight.directDiffuse = vLightFront;\n\n\t#endif\n\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\n\t// modulation\n\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n",
            meshmatcap_vert: "\n#define MATCAP\n\nvarying vec3 vViewPosition;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n}\n",
            meshmatcap_frag: "\n#define MATCAP\n\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\n\nvarying vec3 vViewPosition;\n\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5; // 0.495 to remove artifacts caused by undersized matcap disks\n\n\t#ifdef USE_MATCAP\n\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\n\t#else\n\n\t\tvec4 matcapColor = vec4( 1.0 );\n\n\t#endif\n\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
            meshnormal_vert: "\n#define NORMAL\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\n\tvarying vec3 vViewPosition;\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\n\tvViewPosition = - mvPosition.xyz;\n\n#endif\n\n}\n",
            meshnormal_frag: "\n#define NORMAL\n\nuniform float opacity;\n\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\n\tvarying vec3 vViewPosition;\n\n#endif\n\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\n}\n",
            meshphong_vert: "\n#define PHONG\n\nvarying vec3 vViewPosition;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",
            meshphong_frag: "\n#define PHONG\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
            meshphysical_vert: "\n#define STANDARD\n\nvarying vec3 vViewPosition;\n\n#ifdef USE_TRANSMISSION\n\n\tvarying vec3 vWorldPosition;\n\n#endif\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n#ifdef USE_TRANSMISSION\n\n\tvWorldPosition = worldPosition.xyz;\n\n#endif\n}\n",
            meshphysical_frag: "\n#define STANDARD\n\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n\n#ifdef IOR\n\tuniform float ior;\n#endif\n\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n\nvarying vec3 vViewPosition;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\n\t#include <transmission_fragment>\n\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\n\t#ifdef USE_CLEARCOAT\n\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\n\t\toutgoingLight = outgoingLight * ( 1.0 - clearcoat * Fcc ) + clearcoatSpecular * clearcoat;\n\n\t#endif\n\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
            meshtoon_vert: "\n#define TOON\n\nvarying vec3 vViewPosition;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n\tvViewPosition = - mvPosition.xyz;\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",
            meshtoon_frag: "\n#define TOON\n\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\n\t// accumulation\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",
            points_vert: "\nuniform float size;\nuniform float scale;\n\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\n\tgl_PointSize = size;\n\n\t#ifdef USE_SIZEATTENUATION\n\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\n\t#endif\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n\n}\n",
            points_frag: "\nuniform vec3 diffuse;\nuniform float opacity;\n\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\n\toutgoingLight = diffuseColor.rgb;\n\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\n}\n",
            shadow_vert: "\n#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n\nvoid main() {\n\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n\n}\n",
            shadow_frag: "\nuniform vec3 color;\nuniform float opacity;\n\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n\nvoid main() {\n\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\n}\n",
            sprite_vert: "\nuniform float rotation;\nuniform vec2 center;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\n\t#ifndef USE_SIZEATTENUATION\n\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\n\t#endif\n\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\n\tmvPosition.xy += rotatedPosition;\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\n}\n",
            sprite_frag: "\nuniform vec3 diffuse;\nuniform float opacity;\n\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\n\toutgoingLight = diffuseColor.rgb;\n\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\n}\n"
        };
        var U = n(249);
        const z = {
            common: {
                diffuse: {
                    value: new I.a(16777215)
                },
                opacity: {
                    value: 1
                },
                map: {
                    value: null
                },
                uvTransform: {
                    value: new c.a
                },
                uv2Transform: {
                    value: new c.a
                },
                alphaMap: {
                    value: null
                },
                alphaTest: {
                    value: 0
                }
            },
            specularmap: {
                specularMap: {
                    value: null
                }
            },
            envmap: {
                envMap: {
                    value: null
                },
                flipEnvMap: {
                    value: -1
                },
                reflectivity: {
                    value: 1
                },
                ior: {
                    value: 1.5
                },
                refractionRatio: {
                    value: .98
                },
                maxMipLevel: {
                    value: 0
                }
            },
            aomap: {
                aoMap: {
                    value: null
                },
                aoMapIntensity: {
                    value: 1
                }
            },
            lightmap: {
                lightMap: {
                    value: null
                },
                lightMapIntensity: {
                    value: 1
                }
            },
            emissivemap: {
                emissiveMap: {
                    value: null
                }
            },
            bumpmap: {
                bumpMap: {
                    value: null
                },
                bumpScale: {
                    value: 1
                }
            },
            normalmap: {
                normalMap: {
                    value: null
                },
                normalScale: {
                    value: new U.a(1,1)
                }
            },
            displacementmap: {
                displacementMap: {
                    value: null
                },
                displacementScale: {
                    value: 1
                },
                displacementBias: {
                    value: 0
                }
            },
            roughnessmap: {
                roughnessMap: {
                    value: null
                }
            },
            metalnessmap: {
                metalnessMap: {
                    value: null
                }
            },
            gradientmap: {
                gradientMap: {
                    value: null
                }
            },
            fog: {
                fogDensity: {
                    value: 25e-5
                },
                fogNear: {
                    value: 1
                },
                fogFar: {
                    value: 2e3
                },
                fogColor: {
                    value: new I.a(16777215)
                }
            },
            lights: {
                ambientLightColor: {
                    value: []
                },
                lightProbe: {
                    value: []
                },
                directionalLights: {
                    value: [],
                    properties: {
                        direction: {},
                        color: {}
                    }
                },
                directionalLightShadows: {
                    value: [],
                    properties: {
                        shadowBias: {},
                        shadowNormalBias: {},
                        shadowRadius: {},
                        shadowMapSize: {}
                    }
                },
                directionalShadowMap: {
                    value: []
                },
                directionalShadowMatrix: {
                    value: []
                },
                spotLights: {
                    value: [],
                    properties: {
                        color: {},
                        position: {},
                        direction: {},
                        distance: {},
                        coneCos: {},
                        penumbraCos: {},
                        decay: {}
                    }
                },
                spotLightShadows: {
                    value: [],
                    properties: {
                        shadowBias: {},
                        shadowNormalBias: {},
                        shadowRadius: {},
                        shadowMapSize: {}
                    }
                },
                spotShadowMap: {
                    value: []
                },
                spotShadowMatrix: {
                    value: []
                },
                pointLights: {
                    value: [],
                    properties: {
                        color: {},
                        position: {},
                        decay: {},
                        distance: {}
                    }
                },
                pointLightShadows: {
                    value: [],
                    properties: {
                        shadowBias: {},
                        shadowNormalBias: {},
                        shadowRadius: {},
                        shadowMapSize: {},
                        shadowCameraNear: {},
                        shadowCameraFar: {}
                    }
                },
                pointShadowMap: {
                    value: []
                },
                pointShadowMatrix: {
                    value: []
                },
                hemisphereLights: {
                    value: [],
                    properties: {
                        direction: {},
                        skyColor: {},
                        groundColor: {}
                    }
                },
                rectAreaLights: {
                    value: [],
                    properties: {
                        color: {},
                        position: {},
                        width: {},
                        height: {}
                    }
                },
                ltc_1: {
                    value: null
                },
                ltc_2: {
                    value: null
                }
            },
            points: {
                diffuse: {
                    value: new I.a(16777215)
                },
                opacity: {
                    value: 1
                },
                size: {
                    value: 1
                },
                scale: {
                    value: 1
                },
                map: {
                    value: null
                },
                alphaMap: {
                    value: null
                },
                alphaTest: {
                    value: 0
                },
                uvTransform: {
                    value: new c.a
                }
            },
            sprite: {
                diffuse: {
                    value: new I.a(16777215)
                },
                opacity: {
                    value: 1
                },
                center: {
                    value: new U.a(.5,.5)
                },
                rotation: {
                    value: 0
                },
                map: {
                    value: null
                },
                alphaMap: {
                    value: null
                },
                alphaTest: {
                    value: 0
                },
                uvTransform: {
                    value: new c.a
                }
            }
        }
          , B = {
            basic: {
                uniforms: P([z.common, z.specularmap, z.envmap, z.aomap, z.lightmap, z.fog]),
                vertexShader: F.meshbasic_vert,
                fragmentShader: F.meshbasic_frag
            },
            lambert: {
                uniforms: P([z.common, z.specularmap, z.envmap, z.aomap, z.lightmap, z.emissivemap, z.fog, z.lights, {
                    emissive: {
                        value: new I.a(0)
                    }
                }]),
                vertexShader: F.meshlambert_vert,
                fragmentShader: F.meshlambert_frag
            },
            phong: {
                uniforms: P([z.common, z.specularmap, z.envmap, z.aomap, z.lightmap, z.emissivemap, z.bumpmap, z.normalmap, z.displacementmap, z.fog, z.lights, {
                    emissive: {
                        value: new I.a(0)
                    },
                    specular: {
                        value: new I.a(1118481)
                    },
                    shininess: {
                        value: 30
                    }
                }]),
                vertexShader: F.meshphong_vert,
                fragmentShader: F.meshphong_frag
            },
            standard: {
                uniforms: P([z.common, z.envmap, z.aomap, z.lightmap, z.emissivemap, z.bumpmap, z.normalmap, z.displacementmap, z.roughnessmap, z.metalnessmap, z.fog, z.lights, {
                    emissive: {
                        value: new I.a(0)
                    },
                    roughness: {
                        value: 1
                    },
                    metalness: {
                        value: 0
                    },
                    envMapIntensity: {
                        value: 1
                    }
                }]),
                vertexShader: F.meshphysical_vert,
                fragmentShader: F.meshphysical_frag
            },
            toon: {
                uniforms: P([z.common, z.aomap, z.lightmap, z.emissivemap, z.bumpmap, z.normalmap, z.displacementmap, z.gradientmap, z.fog, z.lights, {
                    emissive: {
                        value: new I.a(0)
                    }
                }]),
                vertexShader: F.meshtoon_vert,
                fragmentShader: F.meshtoon_frag
            },
            matcap: {
                uniforms: P([z.common, z.bumpmap, z.normalmap, z.displacementmap, z.fog, {
                    matcap: {
                        value: null
                    }
                }]),
                vertexShader: F.meshmatcap_vert,
                fragmentShader: F.meshmatcap_frag
            },
            points: {
                uniforms: P([z.points, z.fog]),
                vertexShader: F.points_vert,
                fragmentShader: F.points_frag
            },
            dashed: {
                uniforms: P([z.common, z.fog, {
                    scale: {
                        value: 1
                    },
                    dashSize: {
                        value: 1
                    },
                    totalSize: {
                        value: 2
                    }
                }]),
                vertexShader: F.linedashed_vert,
                fragmentShader: F.linedashed_frag
            },
            depth: {
                uniforms: P([z.common, z.displacementmap]),
                vertexShader: F.depth_vert,
                fragmentShader: F.depth_frag
            },
            normal: {
                uniforms: P([z.common, z.bumpmap, z.normalmap, z.displacementmap, {
                    opacity: {
                        value: 1
                    }
                }]),
                vertexShader: F.meshnormal_vert,
                fragmentShader: F.meshnormal_frag
            },
            sprite: {
                uniforms: P([z.sprite, z.fog]),
                vertexShader: F.sprite_vert,
                fragmentShader: F.sprite_frag
            },
            background: {
                uniforms: {
                    uvTransform: {
                        value: new c.a
                    },
                    t2D: {
                        value: null
                    }
                },
                vertexShader: F.background_vert,
                fragmentShader: F.background_frag
            },
            cube: {
                uniforms: P([z.envmap, {
                    opacity: {
                        value: 1
                    }
                }]),
                vertexShader: F.cube_vert,
                fragmentShader: F.cube_frag
            },
            equirect: {
                uniforms: {
                    tEquirect: {
                        value: null
                    }
                },
                vertexShader: F.equirect_vert,
                fragmentShader: F.equirect_frag
            },
            distanceRGBA: {
                uniforms: P([z.common, z.displacementmap, {
                    referencePosition: {
                        value: new o.a
                    },
                    nearDistance: {
                        value: 1
                    },
                    farDistance: {
                        value: 1e3
                    }
                }]),
                vertexShader: F.distanceRGBA_vert,
                fragmentShader: F.distanceRGBA_frag
            },
            shadow: {
                uniforms: P([z.lights, z.fog, {
                    color: {
                        value: new I.a(0)
                    },
                    opacity: {
                        value: 1
                    }
                }]),
                vertexShader: F.shadow_vert,
                fragmentShader: F.shadow_frag
            }
        };
        function G(t, e, n, o, l) {
            const c = new I.a(0);
            let h, d, f = 0, m = null, v = 0, _ = null;
            function x(t, e) {
                n.buffers.color.setClear(t.r, t.g, t.b, e, l)
            }
            return {
                getClearColor: function() {
                    return c
                },
                setClearColor: function(t, e=1) {
                    c.set(t),
                    f = e,
                    x(c, f)
                },
                getClearAlpha: function() {
                    return f
                },
                setClearAlpha: function(t) {
                    f = t,
                    x(c, f)
                },
                render: function(n, l) {
                    let y = !1
                      , M = !0 === l.isScene ? l.background : null;
                    M && M.isTexture && (M = e.get(M));
                    const w = t.xr
                      , S = w.getSession && w.getSession();
                    S && "additive" === S.environmentBlendMode && (M = null),
                    null === M ? x(c, f) : M && M.isColor && (x(M, 1),
                    y = !0),
                    (t.autoClear || y) && t.clear(t.autoClearColor, t.autoClearDepth, t.autoClearStencil),
                    M && (M.isCubeTexture || M.mapping === r.o) ? (void 0 === d && (d = new O.a(new A(1,1,1),new N({
                        name: "BackgroundCubeMaterial",
                        uniforms: C(B.cube.uniforms),
                        vertexShader: B.cube.vertexShader,
                        fragmentShader: B.cube.fragmentShader,
                        side: r.h,
                        depthTest: !1,
                        depthWrite: !1,
                        fog: !1
                    })),
                    d.geometry.deleteAttribute("normal"),
                    d.geometry.deleteAttribute("uv"),
                    d.onBeforeRender = function(t, e, n) {
                        this.matrixWorld.copyPosition(n.matrixWorld)
                    }
                    ,
                    Object.defineProperty(d.material, "envMap", {
                        get: function() {
                            return this.uniforms.envMap.value
                        }
                    }),
                    o.update(d)),
                    d.material.uniforms.envMap.value = M,
                    d.material.uniforms.flipEnvMap.value = M.isCubeTexture && !1 === M.isRenderTargetTexture ? -1 : 1,
                    m === M && v === M.version && _ === t.toneMapping || (d.material.needsUpdate = !0,
                    m = M,
                    v = M.version,
                    _ = t.toneMapping),
                    n.unshift(d, d.geometry, d.material, 0, 0, null)) : M && M.isTexture && (void 0 === h && (h = new O.a(new L(2,2),new N({
                        name: "BackgroundMaterial",
                        uniforms: C(B.background.uniforms),
                        vertexShader: B.background.vertexShader,
                        fragmentShader: B.background.fragmentShader,
                        side: r.F,
                        depthTest: !1,
                        depthWrite: !1,
                        fog: !1
                    })),
                    h.geometry.deleteAttribute("normal"),
                    Object.defineProperty(h.material, "map", {
                        get: function() {
                            return this.uniforms.t2D.value
                        }
                    }),
                    o.update(h)),
                    h.material.uniforms.t2D.value = M,
                    !0 === M.matrixAutoUpdate && M.updateMatrix(),
                    h.material.uniforms.uvTransform.value.copy(M.matrix),
                    m === M && v === M.version && _ === t.toneMapping || (h.material.needsUpdate = !0,
                    m = M,
                    v = M.version,
                    _ = t.toneMapping),
                    n.unshift(h, h.geometry, h.material, 0, 0, null))
                }
            }
        }
        function H(t, e, n, r) {
            const o = t.getParameter(t.MAX_VERTEX_ATTRIBS)
              , l = r.isWebGL2 ? null : e.get("OES_vertex_array_object")
              , c = r.isWebGL2 || null !== l
              , h = {}
              , d = _(null);
            let f = d;
            function m(e) {
                return r.isWebGL2 ? t.bindVertexArray(e) : l.bindVertexArrayOES(e)
            }
            function v(e) {
                return r.isWebGL2 ? t.deleteVertexArray(e) : l.deleteVertexArrayOES(e)
            }
            function _(t) {
                const e = []
                  , n = []
                  , r = [];
                for (let i = 0; i < o; i++)
                    e[i] = 0,
                    n[i] = 0,
                    r[i] = 0;
                return {
                    geometry: null,
                    program: null,
                    wireframe: !1,
                    newAttributes: e,
                    enabledAttributes: n,
                    attributeDivisors: r,
                    object: t,
                    attributes: {},
                    index: null
                }
            }
            function x() {
                const t = f.newAttributes;
                for (let i = 0, e = t.length; i < e; i++)
                    t[i] = 0
            }
            function y(t) {
                M(t, 0)
            }
            function M(n, o) {
                const l = f.newAttributes
                  , c = f.enabledAttributes
                  , h = f.attributeDivisors;
                if (l[n] = 1,
                0 === c[n] && (t.enableVertexAttribArray(n),
                c[n] = 1),
                h[n] !== o) {
                    (r.isWebGL2 ? t : e.get("ANGLE_instanced_arrays"))[r.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](n, o),
                    h[n] = o
                }
            }
            function w() {
                const e = f.newAttributes
                  , n = f.enabledAttributes;
                for (let i = 0, r = n.length; i < r; i++)
                    n[i] !== e[i] && (t.disableVertexAttribArray(i),
                    n[i] = 0)
            }
            function S(e, n, o, l, c, h) {
                !0 !== r.isWebGL2 || o !== t.INT && o !== t.UNSIGNED_INT ? t.vertexAttribPointer(e, n, o, l, c, h) : t.vertexAttribIPointer(e, n, o, c, h)
            }
            function T() {
                E(),
                f !== d && (f = d,
                m(f.object))
            }
            function E() {
                d.geometry = null,
                d.program = null,
                d.wireframe = !1
            }
            return {
                setup: function(object, o, d, v, T) {
                    let E = !1;
                    if (c) {
                        const e = function(e, n, o) {
                            const c = !0 === o.wireframe;
                            let d = h[e.id];
                            void 0 === d && (d = {},
                            h[e.id] = d);
                            let f = d[n.id];
                            void 0 === f && (f = {},
                            d[n.id] = f);
                            let m = f[c];
                            void 0 === m && (m = _(r.isWebGL2 ? t.createVertexArray() : l.createVertexArrayOES()),
                            f[c] = m);
                            return m
                        }(v, d, o);
                        f !== e && (f = e,
                        m(f.object)),
                        E = function(t, e) {
                            const n = f.attributes
                              , r = t.attributes;
                            let o = 0;
                            for (const t in r) {
                                const e = n[t]
                                  , l = r[t];
                                if (void 0 === e)
                                    return !0;
                                if (e.attribute !== l)
                                    return !0;
                                if (e.data !== l.data)
                                    return !0;
                                o++
                            }
                            return f.attributesNum !== o || f.index !== e
                        }(v, T),
                        E && function(t, e) {
                            const n = {}
                              , r = t.attributes;
                            let o = 0;
                            for (const t in r) {
                                const e = r[t]
                                  , data = {};
                                data.attribute = e,
                                e.data && (data.data = e.data),
                                n[t] = data,
                                o++
                            }
                            f.attributes = n,
                            f.attributesNum = o,
                            f.index = e
                        }(v, T)
                    } else {
                        const t = !0 === o.wireframe;
                        f.geometry === v.id && f.program === d.id && f.wireframe === t || (f.geometry = v.id,
                        f.program = d.id,
                        f.wireframe = t,
                        E = !0)
                    }
                    !0 === object.isInstancedMesh && (E = !0),
                    null !== T && n.update(T, t.ELEMENT_ARRAY_BUFFER),
                    E && (!function(object, o, l, c) {
                        if (!1 === r.isWebGL2 && (object.isInstancedMesh || c.isInstancedBufferGeometry) && null === e.get("ANGLE_instanced_arrays"))
                            return;
                        x();
                        const h = c.attributes
                          , d = l.getAttributes()
                          , f = o.defaultAttributeValues;
                        for (const e in d) {
                            const r = d[e];
                            if (r.location >= 0) {
                                let o = h[e];
                                if (void 0 === o && ("instanceMatrix" === e && object.instanceMatrix && (o = object.instanceMatrix),
                                "instanceColor" === e && object.instanceColor && (o = object.instanceColor)),
                                void 0 !== o) {
                                    const e = o.normalized
                                      , l = o.itemSize
                                      , h = n.get(o);
                                    if (void 0 === h)
                                        continue;
                                    const d = h.buffer
                                      , f = h.type
                                      , m = h.bytesPerElement;
                                    if (o.isInterleavedBufferAttribute) {
                                        const data = o.data
                                          , n = data.stride
                                          , h = o.offset;
                                        if (data && data.isInstancedInterleavedBuffer) {
                                            for (let i = 0; i < r.locationSize; i++)
                                                M(r.location + i, data.meshPerAttribute);
                                            !0 !== object.isInstancedMesh && void 0 === c._maxInstanceCount && (c._maxInstanceCount = data.meshPerAttribute * data.count)
                                        } else
                                            for (let i = 0; i < r.locationSize; i++)
                                                y(r.location + i);
                                        t.bindBuffer(t.ARRAY_BUFFER, d);
                                        for (let i = 0; i < r.locationSize; i++)
                                            S(r.location + i, l / r.locationSize, f, e, n * m, (h + l / r.locationSize * i) * m)
                                    } else {
                                        if (o.isInstancedBufferAttribute) {
                                            for (let i = 0; i < r.locationSize; i++)
                                                M(r.location + i, o.meshPerAttribute);
                                            !0 !== object.isInstancedMesh && void 0 === c._maxInstanceCount && (c._maxInstanceCount = o.meshPerAttribute * o.count)
                                        } else
                                            for (let i = 0; i < r.locationSize; i++)
                                                y(r.location + i);
                                        t.bindBuffer(t.ARRAY_BUFFER, d);
                                        for (let i = 0; i < r.locationSize; i++)
                                            S(r.location + i, l / r.locationSize, f, e, l * m, l / r.locationSize * i * m)
                                    }
                                } else if (void 0 !== f) {
                                    const n = f[e];
                                    if (void 0 !== n)
                                        switch (n.length) {
                                        case 2:
                                            t.vertexAttrib2fv(r.location, n);
                                            break;
                                        case 3:
                                            t.vertexAttrib3fv(r.location, n);
                                            break;
                                        case 4:
                                            t.vertexAttrib4fv(r.location, n);
                                            break;
                                        default:
                                            t.vertexAttrib1fv(r.location, n)
                                        }
                                }
                            }
                        }
                        w()
                    }(object, o, d, v),
                    null !== T && t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, n.get(T).buffer))
                },
                reset: T,
                resetDefaultState: E,
                dispose: function() {
                    T();
                    for (const t in h) {
                        const e = h[t];
                        for (const t in e) {
                            const n = e[t];
                            for (const t in n)
                                v(n[t].object),
                                delete n[t];
                            delete e[t]
                        }
                        delete h[t]
                    }
                },
                releaseStatesOfGeometry: function(t) {
                    if (void 0 === h[t.id])
                        return;
                    const e = h[t.id];
                    for (const t in e) {
                        const n = e[t];
                        for (const t in n)
                            v(n[t].object),
                            delete n[t];
                        delete e[t]
                    }
                    delete h[t.id]
                },
                releaseStatesOfProgram: function(t) {
                    for (const e in h) {
                        const n = h[e];
                        if (void 0 === n[t.id])
                            continue;
                        const r = n[t.id];
                        for (const t in r)
                            v(r[t].object),
                            delete r[t];
                        delete n[t.id]
                    }
                },
                initAttributes: x,
                enableAttribute: y,
                disableUnusedAttributes: w
            }
        }
        function k(t, e, n, r) {
            const o = r.isWebGL2;
            let l;
            this.setMode = function(t) {
                l = t
            }
            ,
            this.render = function(e, r) {
                t.drawArrays(l, e, r),
                n.update(r, l, 1)
            }
            ,
            this.renderInstances = function(r, c, h) {
                if (0 === h)
                    return;
                let d, f;
                if (o)
                    d = t,
                    f = "drawArraysInstanced";
                else if (d = e.get("ANGLE_instanced_arrays"),
                f = "drawArraysInstancedANGLE",
                null === d)
                    return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                d[f](l, r, c, h),
                n.update(c, l, h)
            }
        }
        function V(t, e, n) {
            let r;
            function o(e) {
                if ("highp" === e) {
                    if (t.getShaderPrecisionFormat(t.VERTEX_SHADER, t.HIGH_FLOAT).precision > 0 && t.getShaderPrecisionFormat(t.FRAGMENT_SHADER, t.HIGH_FLOAT).precision > 0)
                        return "highp";
                    e = "mediump"
                }
                return "mediump" === e && t.getShaderPrecisionFormat(t.VERTEX_SHADER, t.MEDIUM_FLOAT).precision > 0 && t.getShaderPrecisionFormat(t.FRAGMENT_SHADER, t.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp"
            }
            const l = "undefined" != typeof WebGL2RenderingContext && t instanceof WebGL2RenderingContext || "undefined" != typeof WebGL2ComputeRenderingContext && t instanceof WebGL2ComputeRenderingContext;
            let c = void 0 !== n.precision ? n.precision : "highp";
            const h = o(c);
            h !== c && (console.warn("THREE.WebGLRenderer:", c, "not supported, using", h, "instead."),
            c = h);
            const d = l || e.has("WEBGL_draw_buffers")
              , f = !0 === n.logarithmicDepthBuffer
              , m = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)
              , v = t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS)
              , _ = t.getParameter(t.MAX_TEXTURE_SIZE)
              , x = t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE)
              , y = t.getParameter(t.MAX_VERTEX_ATTRIBS)
              , M = t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS)
              , w = t.getParameter(t.MAX_VARYING_VECTORS)
              , S = t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS)
              , T = v > 0
              , E = l || e.has("OES_texture_float");
            return {
                isWebGL2: l,
                drawBuffers: d,
                getMaxAnisotropy: function() {
                    if (void 0 !== r)
                        return r;
                    if (!0 === e.has("EXT_texture_filter_anisotropic")) {
                        const n = e.get("EXT_texture_filter_anisotropic");
                        r = t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)
                    } else
                        r = 0;
                    return r
                },
                getMaxPrecision: o,
                precision: c,
                logarithmicDepthBuffer: f,
                maxTextures: m,
                maxVertexTextures: v,
                maxTextureSize: _,
                maxCubemapSize: x,
                maxAttributes: y,
                maxVertexUniforms: M,
                maxVaryings: w,
                maxFragmentUniforms: S,
                vertexTextures: T,
                floatFragmentTextures: E,
                floatVertexTextures: T && E,
                maxSamples: l ? t.getParameter(t.MAX_SAMPLES) : 0
            }
        }
        function W(t) {
            const e = this;
            let n = null
              , r = 0
              , o = !1
              , l = !1;
            const h = new m
              , d = new c.a
              , f = {
                value: null,
                needsUpdate: !1
            };
            function v() {
                f.value !== n && (f.value = n,
                f.needsUpdate = r > 0),
                e.numPlanes = r,
                e.numIntersection = 0
            }
            function _(t, n, r, o) {
                const l = null !== t ? t.length : 0;
                let c = null;
                if (0 !== l) {
                    if (c = f.value,
                    !0 !== o || null === c) {
                        const e = r + 4 * l
                          , o = n.matrixWorldInverse;
                        d.getNormalMatrix(o),
                        (null === c || c.length < e) && (c = new Float32Array(e));
                        for (let i = 0, e = r; i !== l; ++i,
                        e += 4)
                            h.copy(t[i]).applyMatrix4(o, d),
                            h.normal.toArray(c, e),
                            c[e + 3] = h.constant
                    }
                    f.value = c,
                    f.needsUpdate = !0
                }
                return e.numPlanes = l,
                e.numIntersection = 0,
                c
            }
            this.uniform = f,
            this.numPlanes = 0,
            this.numIntersection = 0,
            this.init = function(t, e, l) {
                const c = 0 !== t.length || e || 0 !== r || o;
                return o = e,
                n = _(t, l, 0),
                r = t.length,
                c
            }
            ,
            this.beginShadows = function() {
                l = !0,
                _(null)
            }
            ,
            this.endShadows = function() {
                l = !1,
                v()
            }
            ,
            this.setState = function(e, c, h) {
                const d = e.clippingPlanes
                  , m = e.clipIntersection
                  , x = e.clipShadows
                  , y = t.get(e);
                if (!o || null === d || 0 === d.length || l && !x)
                    l ? _(null) : v();
                else {
                    const t = l ? 0 : r
                      , e = 4 * t;
                    let o = y.clippingState || null;
                    f.value = o,
                    o = _(d, c, e, h);
                    for (let i = 0; i !== e; ++i)
                        o[i] = n[i];
                    y.clippingState = o,
                    this.numIntersection = m ? this.numPlanes : 0,
                    this.numPlanes += t
                }
            }
        }
        B.physical = {
            uniforms: P([B.standard.uniforms, {
                clearcoat: {
                    value: 0
                },
                clearcoatMap: {
                    value: null
                },
                clearcoatRoughness: {
                    value: 0
                },
                clearcoatRoughnessMap: {
                    value: null
                },
                clearcoatNormalScale: {
                    value: new U.a(1,1)
                },
                clearcoatNormalMap: {
                    value: null
                },
                sheen: {
                    value: 0
                },
                sheenColor: {
                    value: new I.a(0)
                },
                sheenColorMap: {
                    value: null
                },
                sheenRoughness: {
                    value: 0
                },
                sheenRoughnessMap: {
                    value: null
                },
                transmission: {
                    value: 0
                },
                transmissionMap: {
                    value: null
                },
                transmissionSamplerSize: {
                    value: new U.a
                },
                transmissionSamplerMap: {
                    value: null
                },
                thickness: {
                    value: 0
                },
                thicknessMap: {
                    value: null
                },
                attenuationDistance: {
                    value: 0
                },
                attenuationColor: {
                    value: new I.a(0)
                },
                specularIntensity: {
                    value: 0
                },
                specularIntensityMap: {
                    value: null
                },
                specularColor: {
                    value: new I.a(1,1,1)
                },
                specularColorMap: {
                    value: null
                }
            }]),
            vertexShader: F.meshphysical_vert,
            fragmentShader: F.meshphysical_frag
        };
        var j = n(262)
          , X = n(266);
        class Y extends j.a {
            constructor(t, e, n={}) {
                super(),
                this.width = t,
                this.height = e,
                this.depth = 1,
                this.scissor = new M.a(0,0,t,e),
                this.scissorTest = !1,
                this.viewport = new M.a(0,0,t,e),
                this.texture = new X.a(void 0,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),
                this.texture.isRenderTargetTexture = !0,
                this.texture.image = {
                    width: t,
                    height: e,
                    depth: 1
                },
                this.texture.generateMipmaps = void 0 !== n.generateMipmaps && n.generateMipmaps,
                this.texture.internalFormat = void 0 !== n.internalFormat ? n.internalFormat : null,
                this.texture.minFilter = void 0 !== n.minFilter ? n.minFilter : r.Q,
                this.depthBuffer = void 0 === n.depthBuffer || n.depthBuffer,
                this.stencilBuffer = void 0 !== n.stencilBuffer && n.stencilBuffer,
                this.depthTexture = void 0 !== n.depthTexture ? n.depthTexture : null
            }
            setTexture(t) {
                t.image = {
                    width: this.width,
                    height: this.height,
                    depth: this.depth
                },
                this.texture = t
            }
            setSize(t, e, n=1) {
                this.width === t && this.height === e && this.depth === n || (this.width = t,
                this.height = e,
                this.depth = n,
                this.texture.image.width = t,
                this.texture.image.height = e,
                this.texture.image.depth = n,
                this.dispose()),
                this.viewport.set(0, 0, t, e),
                this.scissor.set(0, 0, t, e)
            }
            clone() {
                return (new this.constructor).copy(this)
            }
            copy(source) {
                return this.width = source.width,
                this.height = source.height,
                this.depth = source.depth,
                this.viewport.copy(source.viewport),
                this.texture = source.texture.clone(),
                this.texture.image = {
                    ...this.texture.image
                },
                this.depthBuffer = source.depthBuffer,
                this.stencilBuffer = source.stencilBuffer,
                this.depthTexture = source.depthTexture,
                this
            }
            dispose() {
                this.dispatchEvent({
                    type: "dispose"
                })
            }
        }
        Y.prototype.isWebGLRenderTarget = !0;
        var Z = n(265)
          , J = n(270);
        const K = 90;
        class Q extends Z.a {
            constructor(t, e, n) {
                if (super(),
                this.type = "CubeCamera",
                !0 !== n.isWebGLCubeRenderTarget)
                    return void console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");
                this.renderTarget = n;
                const r = new J.a(K,1,t,e);
                r.layers = this.layers,
                r.up.set(0, -1, 0),
                r.lookAt(new o.a(1,0,0)),
                this.add(r);
                const l = new J.a(K,1,t,e);
                l.layers = this.layers,
                l.up.set(0, -1, 0),
                l.lookAt(new o.a(-1,0,0)),
                this.add(l);
                const c = new J.a(K,1,t,e);
                c.layers = this.layers,
                c.up.set(0, 0, 1),
                c.lookAt(new o.a(0,1,0)),
                this.add(c);
                const h = new J.a(K,1,t,e);
                h.layers = this.layers,
                h.up.set(0, 0, -1),
                h.lookAt(new o.a(0,-1,0)),
                this.add(h);
                const d = new J.a(K,1,t,e);
                d.layers = this.layers,
                d.up.set(0, -1, 0),
                d.lookAt(new o.a(0,0,1)),
                this.add(d);
                const f = new J.a(K,1,t,e);
                f.layers = this.layers,
                f.up.set(0, -1, 0),
                f.lookAt(new o.a(0,0,-1)),
                this.add(f)
            }
            update(t, e) {
                null === this.parent && this.updateMatrixWorld();
                const n = this.renderTarget
                  , [r,o,l,c,h,d] = this.children
                  , f = t.xr.enabled
                  , m = t.getRenderTarget();
                t.xr.enabled = !1;
                const v = n.texture.generateMipmaps;
                n.texture.generateMipmaps = !1,
                t.setRenderTarget(n, 0),
                t.render(e, r),
                t.setRenderTarget(n, 1),
                t.render(e, o),
                t.setRenderTarget(n, 2),
                t.render(e, l),
                t.setRenderTarget(n, 3),
                t.render(e, c),
                t.setRenderTarget(n, 4),
                t.render(e, h),
                n.texture.generateMipmaps = v,
                t.setRenderTarget(n, 5),
                t.render(e, d),
                t.setRenderTarget(m),
                t.xr.enabled = f
            }
        }
        class $ extends X.a {
            constructor(t, e, n, o, l, c, h, d, f, m) {
                super(t = void 0 !== t ? t : [], e = void 0 !== e ? e : r.m, n, o, l, c, h, d, f, m),
                this.flipY = !1
            }
            get images() {
                return this.image
            }
            set images(t) {
                this.image = t
            }
        }
        $.prototype.isCubeTexture = !0;
        class tt extends Y {
            constructor(t, e, n) {
                Number.isInteger(e) && (console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),
                e = n),
                super(t, t, e),
                e = e || {},
                this.texture = new $(void 0,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),
                this.texture.isRenderTargetTexture = !0,
                this.texture.generateMipmaps = void 0 !== e.generateMipmaps && e.generateMipmaps,
                this.texture.minFilter = void 0 !== e.minFilter ? e.minFilter : r.Q,
                this.texture._needsFlipEnvMap = !1
            }
            fromEquirectangularTexture(t, e) {
                this.texture.type = e.type,
                this.texture.format = r.ub,
                this.texture.encoding = e.encoding,
                this.texture.generateMipmaps = e.generateMipmaps,
                this.texture.minFilter = e.minFilter,
                this.texture.magFilter = e.magFilter;
                const n = {
                    uniforms: {
                        tEquirect: {
                            value: null
                        }
                    },
                    vertexShader: "\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",
                    fragmentShader: "\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"
                }
                  , o = new A(5,5,5)
                  , l = new N({
                    name: "CubemapFromEquirect",
                    uniforms: C(n.uniforms),
                    vertexShader: n.vertexShader,
                    fragmentShader: n.fragmentShader,
                    side: r.h,
                    blending: r.hb
                });
                l.uniforms.tEquirect.value = e;
                const c = new O.a(o,l)
                  , h = e.minFilter;
                e.minFilter === r.R && (e.minFilter = r.Q);
                return new Q(1,10,this).update(t, c),
                e.minFilter = h,
                c.geometry.dispose(),
                c.material.dispose(),
                this
            }
            clear(t, e, n, r) {
                const o = t.getRenderTarget();
                for (let i = 0; i < 6; i++)
                    t.setRenderTarget(this, i),
                    t.clear(e, n, r);
                t.setRenderTarget(o)
            }
        }
        function et(t) {
            let e = new WeakMap;
            function n(t, e) {
                return e === r.B ? t.mapping = r.m : e === r.C && (t.mapping = r.n),
                t
            }
            function o(t) {
                const n = t.target;
                n.removeEventListener("dispose", o);
                const r = e.get(n);
                void 0 !== r && (e.delete(n),
                r.dispose())
            }
            return {
                get: function(l) {
                    if (l && l.isTexture && !1 === l.isRenderTargetTexture) {
                        const c = l.mapping;
                        if (c === r.B || c === r.C) {
                            if (e.has(l)) {
                                return n(e.get(l).texture, l.mapping)
                            }
                            {
                                const image = l.image;
                                if (image && image.height > 0) {
                                    const r = t.getRenderTarget()
                                      , c = new tt(image.height / 2);
                                    return c.fromEquirectangularTexture(t, l),
                                    e.set(l, c),
                                    t.setRenderTarget(r),
                                    l.addEventListener("dispose", o),
                                    n(c.texture, l.mapping)
                                }
                                return null
                            }
                        }
                    }
                    return l
                },
                dispose: function() {
                    e = new WeakMap
                }
            }
        }
        tt.prototype.isWebGLCubeRenderTarget = !0;
        var nt = n(296);
        class it extends nt.a {
            constructor(t=-1, e=1, n=1, r=-1, o=.1, l=2e3) {
                super(),
                this.type = "OrthographicCamera",
                this.zoom = 1,
                this.view = null,
                this.left = t,
                this.right = e,
                this.top = n,
                this.bottom = r,
                this.near = o,
                this.far = l,
                this.updateProjectionMatrix()
            }
            copy(source, t) {
                return super.copy(source, t),
                this.left = source.left,
                this.right = source.right,
                this.top = source.top,
                this.bottom = source.bottom,
                this.near = source.near,
                this.far = source.far,
                this.zoom = source.zoom,
                this.view = null === source.view ? null : Object.assign({}, source.view),
                this
            }
            setViewOffset(t, e, n, r, o, l) {
                null === this.view && (this.view = {
                    enabled: !0,
                    fullWidth: 1,
                    fullHeight: 1,
                    offsetX: 0,
                    offsetY: 0,
                    width: 1,
                    height: 1
                }),
                this.view.enabled = !0,
                this.view.fullWidth = t,
                this.view.fullHeight = e,
                this.view.offsetX = n,
                this.view.offsetY = r,
                this.view.width = o,
                this.view.height = l,
                this.updateProjectionMatrix()
            }
            clearViewOffset() {
                null !== this.view && (this.view.enabled = !1),
                this.updateProjectionMatrix()
            }
            updateProjectionMatrix() {
                const t = (this.right - this.left) / (2 * this.zoom)
                  , e = (this.top - this.bottom) / (2 * this.zoom)
                  , n = (this.right + this.left) / 2
                  , r = (this.top + this.bottom) / 2;
                let o = n - t
                  , l = n + t
                  , c = r + e
                  , h = r - e;
                if (null !== this.view && this.view.enabled) {
                    const t = (this.right - this.left) / this.view.fullWidth / this.zoom
                      , e = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
                    o += t * this.view.offsetX,
                    l = o + t * this.view.width,
                    c -= e * this.view.offsetY,
                    h = c - e * this.view.height
                }
                this.projectionMatrix.makeOrthographic(o, l, c, h, this.near, this.far),
                this.projectionMatrixInverse.copy(this.projectionMatrix).invert()
            }
            toJSON(meta) {
                const data = super.toJSON(meta);
                return data.object.zoom = this.zoom,
                data.object.left = this.left,
                data.object.right = this.right,
                data.object.top = this.top,
                data.object.bottom = this.bottom,
                data.object.near = this.near,
                data.object.far = this.far,
                null !== this.view && (data.object.view = Object.assign({}, this.view)),
                data
            }
        }
        it.prototype.isOrthographicCamera = !0;
        class at extends N {
            constructor(t) {
                super(t),
                this.type = "RawShaderMaterial"
            }
        }
        at.prototype.isRawShaderMaterial = !0;
        var st = n(291);
        const ot = Math.pow(2, 8)
          , lt = [.125, .215, .35, .446, .526, .582]
          , ct = 5 + lt.length
          , ht = 20
          , ut = {
            [r.P]: 0,
            [r.Qc]: 1,
            [r.Sb]: 2,
            [r.Xb]: 3,
            [r.Wb]: 4,
            [r.Rb]: 5,
            [r.H]: 6
        }
          , pt = new it
          , {_lodPlanes: ft, _sizeLods: mt, _sigmas: gt} = St()
          , vt = new I.a;
        let _t = null;
        const xt = (1 + Math.sqrt(5)) / 2
          , yt = 1 / xt
          , Mt = [new o.a(1,1,1), new o.a(-1,1,1), new o.a(1,1,-1), new o.a(-1,1,-1), new o.a(0,xt,yt), new o.a(0,xt,-yt), new o.a(yt,0,xt), new o.a(-yt,0,xt), new o.a(xt,yt,0), new o.a(-xt,yt,0)];
        class bt {
            constructor(t) {
                this._renderer = t,
                this._pingPongRenderTarget = null,
                this._blurMaterial = function(t) {
                    const e = new Float32Array(t)
                      , n = new o.a(0,1,0);
                    return new at({
                        name: "SphericalGaussianBlur",
                        defines: {
                            n: t
                        },
                        uniforms: {
                            envMap: {
                                value: null
                            },
                            samples: {
                                value: 1
                            },
                            weights: {
                                value: e
                            },
                            latitudinal: {
                                value: !1
                            },
                            dTheta: {
                                value: 0
                            },
                            mipInt: {
                                value: 0
                            },
                            poleAxis: {
                                value: n
                            },
                            inputEncoding: {
                                value: ut[r.P]
                            },
                            outputEncoding: {
                                value: ut[r.P]
                            }
                        },
                        vertexShader: Rt(),
                        fragmentShader: `\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t${Ct()}\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,
                        blending: r.hb,
                        depthTest: !1,
                        depthWrite: !1
                    })
                }(ht),
                this._equirectShader = null,
                this._cubemapShader = null,
                this._compileMaterial(this._blurMaterial)
            }
            fromScene(t, e=0, n=.1, r=100) {
                _t = this._renderer.getRenderTarget();
                const o = this._allocateTargets();
                return this._sceneToCubeUV(t, n, r, o),
                e > 0 && this._blur(o, 0, 0, e),
                this._applyPMREM(o),
                this._cleanup(o),
                o
            }
            fromEquirectangular(t) {
                return this._fromTexture(t)
            }
            fromCubemap(t) {
                return this._fromTexture(t)
            }
            compileCubemapShader() {
                null === this._cubemapShader && (this._cubemapShader = Lt(),
                this._compileMaterial(this._cubemapShader))
            }
            compileEquirectangularShader() {
                null === this._equirectShader && (this._equirectShader = At(),
                this._compileMaterial(this._equirectShader))
            }
            dispose() {
                this._blurMaterial.dispose(),
                null !== this._cubemapShader && this._cubemapShader.dispose(),
                null !== this._equirectShader && this._equirectShader.dispose();
                for (let i = 0; i < ft.length; i++)
                    ft[i].dispose()
            }
            _cleanup(t) {
                this._pingPongRenderTarget.dispose(),
                this._renderer.setRenderTarget(_t),
                t.scissorTest = !1,
                Et(t, 0, 0, t.width, t.height)
            }
            _fromTexture(t) {
                _t = this._renderer.getRenderTarget();
                const e = this._allocateTargets(t);
                return this._textureToCubeUV(t, e),
                this._applyPMREM(e),
                this._cleanup(e),
                e
            }
            _allocateTargets(t) {
                const e = {
                    magFilter: r.db,
                    minFilter: r.db,
                    generateMipmaps: !1,
                    type: r.Hc,
                    format: r.Tb,
                    encoding: wt(t) ? t.encoding : r.Sb,
                    depthBuffer: !1
                }
                  , n = Tt(e);
                return n.depthBuffer = !t,
                this._pingPongRenderTarget = Tt(e),
                n
            }
            _compileMaterial(t) {
                const e = new O.a(ft[0],t);
                this._renderer.compile(e, pt)
            }
            _sceneToCubeUV(t, e, n, o) {
                const l = new J.a(90,1,e,n)
                  , c = [1, -1, 1, 1, 1, 1]
                  , h = [1, 1, 1, -1, -1, -1]
                  , d = this._renderer
                  , f = d.autoClear
                  , m = d.outputEncoding
                  , v = d.toneMapping;
                d.getClearColor(vt),
                d.toneMapping = r.ib,
                d.outputEncoding = r.P,
                d.autoClear = !1;
                const _ = new st.a({
                    name: "PMREM.Background",
                    side: r.h,
                    depthWrite: !1,
                    depthTest: !1
                })
                  , x = new O.a(new A,_);
                let y = !1;
                const M = t.background;
                M ? M.isColor && (_.color.copy(M),
                t.background = null,
                y = !0) : (_.color.copy(vt),
                y = !0);
                for (let i = 0; i < 6; i++) {
                    const col = i % 3;
                    0 == col ? (l.up.set(0, c[i], 0),
                    l.lookAt(h[i], 0, 0)) : 1 == col ? (l.up.set(0, 0, c[i]),
                    l.lookAt(0, h[i], 0)) : (l.up.set(0, c[i], 0),
                    l.lookAt(0, 0, h[i])),
                    Et(o, col * ot, i > 2 ? ot : 0, ot, ot),
                    d.setRenderTarget(o),
                    y && d.render(x, l),
                    d.render(t, l)
                }
                x.geometry.dispose(),
                x.material.dispose(),
                d.toneMapping = v,
                d.outputEncoding = m,
                d.autoClear = f,
                t.background = M
            }
            _setEncoding(t, e) {
                !0 === this._renderer.capabilities.isWebGL2 && e.format === r.ub && e.type === r.Hc && e.encoding === r.Qc ? t.value = ut[r.P] : t.value = ut[e.encoding]
            }
            _textureToCubeUV(t, e) {
                const n = this._renderer
                  , o = t.mapping === r.m || t.mapping === r.n;
                o ? null == this._cubemapShader && (this._cubemapShader = Lt()) : null == this._equirectShader && (this._equirectShader = At());
                const l = o ? this._cubemapShader : this._equirectShader
                  , c = new O.a(ft[0],l)
                  , h = l.uniforms;
                h.envMap.value = t,
                o || h.texelSize.value.set(1 / t.image.width, 1 / t.image.height),
                this._setEncoding(h.inputEncoding, t),
                this._setEncoding(h.outputEncoding, e.texture),
                Et(e, 0, 0, 3 * ot, 2 * ot),
                n.setRenderTarget(e),
                n.render(c, pt)
            }
            _applyPMREM(t) {
                const e = this._renderer
                  , n = e.autoClear;
                e.autoClear = !1;
                for (let i = 1; i < ct; i++) {
                    const e = Math.sqrt(gt[i] * gt[i] - gt[i - 1] * gt[i - 1])
                      , n = Mt[(i - 1) % Mt.length];
                    this._blur(t, i - 1, i, e, n)
                }
                e.autoClear = n
            }
            _blur(t, e, n, r, o) {
                const l = this._pingPongRenderTarget;
                this._halfBlur(t, l, e, n, r, "latitudinal", o),
                this._halfBlur(l, t, n, n, r, "longitudinal", o)
            }
            _halfBlur(t, e, n, r, o, l, c) {
                const h = this._renderer
                  , d = this._blurMaterial;
                "latitudinal" !== l && "longitudinal" !== l && console.error("blur direction must be either latitudinal or longitudinal!");
                const f = new O.a(ft[r],d)
                  , m = d.uniforms
                  , v = mt[n] - 1
                  , _ = isFinite(o) ? Math.PI / (2 * v) : 2 * Math.PI / 39
                  , x = o / _
                  , y = isFinite(o) ? 1 + Math.floor(3 * x) : ht;
                y > ht && console.warn(`sigmaRadians, ${o}, is too large and will clip, as it requested ${y} samples when the maximum is set to 20`);
                const M = [];
                let w = 0;
                for (let i = 0; i < ht; ++i) {
                    const t = i / x
                      , e = Math.exp(-t * t / 2);
                    M.push(e),
                    0 == i ? w += e : i < y && (w += 2 * e)
                }
                for (let i = 0; i < M.length; i++)
                    M[i] = M[i] / w;
                m.envMap.value = t.texture,
                m.samples.value = y,
                m.weights.value = M,
                m.latitudinal.value = "latitudinal" === l,
                c && (m.poleAxis.value = c),
                m.dTheta.value = _,
                m.mipInt.value = 8 - n,
                this._setEncoding(m.inputEncoding, t.texture),
                this._setEncoding(m.outputEncoding, t.texture);
                const S = mt[r];
                Et(e, 3 * Math.max(0, ot - 2 * S), (0 === r ? 0 : 2 * ot) + 2 * S * (r > 4 ? r - 8 + 4 : 0), 3 * S, 2 * S),
                h.setRenderTarget(e),
                h.render(f, pt)
            }
        }
        function wt(t) {
            return void 0 !== t && t.type === r.Hc && (t.encoding === r.P || t.encoding === r.Qc || t.encoding === r.H)
        }
        function St() {
            const t = []
              , e = []
              , n = [];
            let r = 8;
            for (let i = 0; i < ct; i++) {
                const o = Math.pow(2, r);
                e.push(o);
                let l = 1 / o;
                i > 4 ? l = lt[i - 8 + 4 - 1] : 0 == i && (l = 0),
                n.push(l);
                const c = 1 / (o - 1)
                  , h = -c / 2
                  , d = 1 + c / 2
                  , f = [h, h, d, h, d, d, h, h, d, d, h, d]
                  , m = 6
                  , v = 6
                  , _ = 3
                  , x = 2
                  , y = 1
                  , M = new Float32Array(_ * v * m)
                  , w = new Float32Array(x * v * m)
                  , S = new Float32Array(y * v * m);
                for (let t = 0; t < m; t++) {
                    const e = t % 3 * 2 / 3 - 1
                      , n = t > 2 ? 0 : -1
                      , r = [e, n, 0, e + 2 / 3, n, 0, e + 2 / 3, n + 1, 0, e, n, 0, e + 2 / 3, n + 1, 0, e, n + 1, 0];
                    M.set(r, _ * v * t),
                    w.set(f, x * v * t);
                    const o = [t, t, t, t, t, t];
                    S.set(o, y * v * t)
                }
                const A = new T.a;
                A.setAttribute("position", new E.a(M,_)),
                A.setAttribute("uv", new E.a(w,x)),
                A.setAttribute("faceIndex", new E.a(S,y)),
                t.push(A),
                r > 4 && r--
            }
            return {
                _lodPlanes: t,
                _sizeLods: e,
                _sigmas: n
            }
        }
        function Tt(t) {
            const e = new Y(3 * ot,3 * ot,t);
            return e.texture.mapping = r.o,
            e.texture.name = "PMREM.cubeUv",
            e.scissorTest = !0,
            e
        }
        function Et(t, e, n, r, o) {
            t.viewport.set(e, n, r, o),
            t.scissor.set(e, n, r, o)
        }
        function At() {
            const t = new U.a(1,1);
            return new at({
                name: "EquirectangularToCubeUV",
                uniforms: {
                    envMap: {
                        value: null
                    },
                    texelSize: {
                        value: t
                    },
                    inputEncoding: {
                        value: ut[r.P]
                    },
                    outputEncoding: {
                        value: ut[r.P]
                    }
                },
                vertexShader: Rt(),
                fragmentShader: `\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t${Ct()}\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,
                blending: r.hb,
                depthTest: !1,
                depthWrite: !1
            })
        }
        function Lt() {
            return new at({
                name: "CubemapToCubeUV",
                uniforms: {
                    envMap: {
                        value: null
                    },
                    inputEncoding: {
                        value: ut[r.P]
                    },
                    outputEncoding: {
                        value: ut[r.P]
                    }
                },
                vertexShader: Rt(),
                fragmentShader: `\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t${Ct()}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,
                blending: r.hb,
                depthTest: !1,
                depthWrite: !1
            })
        }
        function Rt() {
            return "\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t"
        }
        function Ct() {
            return "\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t"
        }
        function Pt(t) {
            let e = new WeakMap
              , n = null;
            function o(t) {
                const n = t.target;
                n.removeEventListener("dispose", o);
                const r = e.get(n);
                void 0 !== r && (e.delete(n),
                r.dispose())
            }
            return {
                get: function(l) {
                    if (l && l.isTexture && !1 === l.isRenderTargetTexture) {
                        const c = l.mapping
                          , h = c === r.B || c === r.C
                          , d = c === r.m || c === r.n;
                        if (h || d) {
                            if (e.has(l))
                                return e.get(l).texture;
                            {
                                const image = l.image;
                                if (h && image && image.height > 0 || d && image && function(image) {
                                    let t = 0;
                                    const e = 6;
                                    for (let i = 0; i < e; i++)
                                        void 0 !== image[i] && t++;
                                    return t === e
                                }(image)) {
                                    const r = t.getRenderTarget();
                                    null === n && (n = new bt(t));
                                    const c = h ? n.fromEquirectangular(l) : n.fromCubemap(l);
                                    return e.set(l, c),
                                    t.setRenderTarget(r),
                                    l.addEventListener("dispose", o),
                                    c.texture
                                }
                                return null
                            }
                        }
                    }
                    return l
                },
                dispose: function() {
                    e = new WeakMap,
                    null !== n && (n.dispose(),
                    n = null)
                }
            }
        }
        function Dt(t) {
            const e = {};
            function n(n) {
                if (void 0 !== e[n])
                    return e[n];
                let r;
                switch (n) {
                case "WEBGL_depth_texture":
                    r = t.getExtension("WEBGL_depth_texture") || t.getExtension("MOZ_WEBGL_depth_texture") || t.getExtension("WEBKIT_WEBGL_depth_texture");
                    break;
                case "EXT_texture_filter_anisotropic":
                    r = t.getExtension("EXT_texture_filter_anisotropic") || t.getExtension("MOZ_EXT_texture_filter_anisotropic") || t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                    break;
                case "WEBGL_compressed_texture_s3tc":
                    r = t.getExtension("WEBGL_compressed_texture_s3tc") || t.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                    break;
                case "WEBGL_compressed_texture_pvrtc":
                    r = t.getExtension("WEBGL_compressed_texture_pvrtc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                    break;
                default:
                    r = t.getExtension(n)
                }
                return e[n] = r,
                r
            }
            return {
                has: function(t) {
                    return null !== n(t)
                },
                init: function(t) {
                    t.isWebGL2 ? n("EXT_color_buffer_float") : (n("WEBGL_depth_texture"),
                    n("OES_texture_float"),
                    n("OES_texture_half_float"),
                    n("OES_texture_half_float_linear"),
                    n("OES_standard_derivatives"),
                    n("OES_element_index_uint"),
                    n("OES_vertex_array_object"),
                    n("ANGLE_instanced_arrays")),
                    n("OES_texture_float_linear"),
                    n("EXT_color_buffer_half_float")
                },
                get: function(t) {
                    const e = n(t);
                    return null === e && console.warn("THREE.WebGLRenderer: " + t + " extension not supported."),
                    e
                }
            }
        }
        var Nt = n(260);
        function It(t, e, n, r) {
            const o = {}
              , l = new WeakMap;
            function c(t) {
                const h = t.target;
                null !== h.index && e.remove(h.index);
                for (const t in h.attributes)
                    e.remove(h.attributes[t]);
                h.removeEventListener("dispose", c),
                delete o[h.id];
                const d = l.get(h);
                d && (e.remove(d),
                l.delete(h)),
                r.releaseStatesOfGeometry(h),
                !0 === h.isInstancedBufferGeometry && delete h._maxInstanceCount,
                n.memory.geometries--
            }
            function h(t) {
                const n = []
                  , r = t.index
                  , o = t.attributes.position;
                let c = 0;
                if (null !== r) {
                    const t = r.array;
                    c = r.version;
                    for (let i = 0, e = t.length; i < e; i += 3) {
                        const a = t[i + 0]
                          , b = t[i + 1]
                          , e = t[i + 2];
                        n.push(a, b, b, e, e, a)
                    }
                } else {
                    const t = o.array;
                    c = o.version;
                    for (let i = 0, e = t.length / 3 - 1; i < e; i += 3) {
                        const a = i + 0
                          , b = i + 1
                          , t = i + 2;
                        n.push(a, b, b, t, t, a)
                    }
                }
                const h = new (Object(Nt.a)(n) > 65535 ? E.d : E.c)(n,1);
                h.version = c;
                const d = l.get(t);
                d && e.remove(d),
                l.set(t, h)
            }
            return {
                get: function(object, t) {
                    return !0 === o[t.id] || (t.addEventListener("dispose", c),
                    o[t.id] = !0,
                    n.memory.geometries++),
                    t
                },
                update: function(n) {
                    const r = n.attributes;
                    for (const n in r)
                        e.update(r[n], t.ARRAY_BUFFER);
                    const o = n.morphAttributes;
                    for (const n in o) {
                        const r = o[n];
                        for (let i = 0, n = r.length; i < n; i++)
                            e.update(r[i], t.ARRAY_BUFFER)
                    }
                },
                getWireframeAttribute: function(t) {
                    const e = l.get(t);
                    if (e) {
                        const n = t.index;
                        null !== n && e.version < n.version && h(t)
                    } else
                        h(t);
                    return l.get(t)
                }
            }
        }
        function Ot(t, e, n, r) {
            const o = r.isWebGL2;
            let l, c, h;
            this.setMode = function(t) {
                l = t
            }
            ,
            this.setIndex = function(t) {
                c = t.type,
                h = t.bytesPerElement
            }
            ,
            this.render = function(e, r) {
                t.drawElements(l, r, c, e * h),
                n.update(r, l, 1)
            }
            ,
            this.renderInstances = function(r, d, f) {
                if (0 === f)
                    return;
                let m, v;
                if (o)
                    m = t,
                    v = "drawElementsInstanced";
                else if (m = e.get("ANGLE_instanced_arrays"),
                v = "drawElementsInstancedANGLE",
                null === m)
                    return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                m[v](l, d, c, r * h, f),
                n.update(d, l, f)
            }
        }
        function Ft(t) {
            const e = {
                frame: 0,
                calls: 0,
                triangles: 0,
                points: 0,
                lines: 0
            };
            return {
                memory: {
                    geometries: 0,
                    textures: 0
                },
                render: e,
                programs: null,
                autoReset: !0,
                reset: function() {
                    e.frame++,
                    e.calls = 0,
                    e.triangles = 0,
                    e.points = 0,
                    e.lines = 0
                },
                update: function(n, r, o) {
                    switch (e.calls++,
                    r) {
                    case t.TRIANGLES:
                        e.triangles += o * (n / 3);
                        break;
                    case t.LINES:
                        e.lines += o * (n / 2);
                        break;
                    case t.LINE_STRIP:
                        e.lines += o * (n - 1);
                        break;
                    case t.LINE_LOOP:
                        e.lines += o * n;
                        break;
                    case t.POINTS:
                        e.points += o * n;
                        break;
                    default:
                        console.error("THREE.WebGLInfo: Unknown draw mode:", r)
                    }
                }
            }
        }
        class Ut extends X.a {
            constructor(data=null, t=1, e=1, n=1) {
                super(null),
                this.image = {
                    data: data,
                    width: t,
                    height: e,
                    depth: n
                },
                this.magFilter = r.db,
                this.minFilter = r.db,
                this.wrapR = r.l,
                this.generateMipmaps = !1,
                this.flipY = !1,
                this.unpackAlignment = 1,
                this.needsUpdate = !0
            }
        }
        function zt(a, b) {
            return a[0] - b[0]
        }
        function Bt(a, b) {
            return Math.abs(b[1]) - Math.abs(a[1])
        }
        function Gt(t, e) {
            let n = 1;
            const r = e.isInterleavedBufferAttribute ? e.data.array : e.array;
            r instanceof Int8Array ? n = 127 : r instanceof Int16Array ? n = 32767 : r instanceof Int32Array ? n = 2147483647 : console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ", r),
            t.divideScalar(n)
        }
        function Ht(t, e, n) {
            const l = {}
              , c = new Float32Array(8)
              , h = new WeakMap
              , d = new o.a
              , f = [];
            for (let i = 0; i < 8; i++)
                f[i] = [i, 0];
            return {
                update: function(object, o, m, v) {
                    const _ = object.morphTargetInfluences;
                    if (!0 === e.isWebGL2) {
                        const l = o.morphAttributes.position.length;
                        let c = h.get(o);
                        if (void 0 === c || c.count !== l) {
                            void 0 !== c && c.texture.dispose();
                            const t = void 0 !== o.morphAttributes.normal
                              , n = o.morphAttributes.position
                              , f = o.morphAttributes.normal || []
                              , m = !0 === t ? 2 : 1;
                            let v = o.attributes.position.count * m
                              , _ = 1;
                            v > e.maxTextureSize && (_ = Math.ceil(v / e.maxTextureSize),
                            v = e.maxTextureSize);
                            const x = new Float32Array(v * _ * 4 * l)
                              , y = new Ut(x,v,_,l);
                            y.format = r.ub,
                            y.type = r.E;
                            const M = 4 * m;
                            for (let i = 0; i < l; i++) {
                                const e = n[i]
                                  , r = f[i]
                                  , o = v * _ * 4 * i;
                                for (let n = 0; n < e.count; n++) {
                                    d.fromBufferAttribute(e, n),
                                    !0 === e.normalized && Gt(d, e);
                                    const l = n * M;
                                    x[o + l + 0] = d.x,
                                    x[o + l + 1] = d.y,
                                    x[o + l + 2] = d.z,
                                    x[o + l + 3] = 0,
                                    !0 === t && (d.fromBufferAttribute(r, n),
                                    !0 === r.normalized && Gt(d, r),
                                    x[o + l + 4] = d.x,
                                    x[o + l + 5] = d.y,
                                    x[o + l + 6] = d.z,
                                    x[o + l + 7] = 0)
                                }
                            }
                            c = {
                                count: l,
                                texture: y,
                                size: new U.a(v,_)
                            },
                            h.set(o, c)
                        }
                        let f = 0;
                        for (let i = 0; i < _.length; i++)
                            f += _[i];
                        const m = o.morphTargetsRelative ? 1 : 1 - f;
                        v.getUniforms().setValue(t, "morphTargetBaseInfluence", m),
                        v.getUniforms().setValue(t, "morphTargetInfluences", _),
                        v.getUniforms().setValue(t, "morphTargetsTexture", c.texture, n),
                        v.getUniforms().setValue(t, "morphTargetsTextureSize", c.size)
                    } else {
                        const e = void 0 === _ ? 0 : _.length;
                        let n = l[o.id];
                        if (void 0 === n || n.length !== e) {
                            n = [];
                            for (let i = 0; i < e; i++)
                                n[i] = [i, 0];
                            l[o.id] = n
                        }
                        for (let i = 0; i < e; i++) {
                            const t = n[i];
                            t[0] = i,
                            t[1] = _[i]
                        }
                        n.sort(Bt);
                        for (let i = 0; i < 8; i++)
                            i < e && n[i][1] ? (f[i][0] = n[i][0],
                            f[i][1] = n[i][1]) : (f[i][0] = Number.MAX_SAFE_INTEGER,
                            f[i][1] = 0);
                        f.sort(zt);
                        const r = o.morphAttributes.position
                          , h = o.morphAttributes.normal;
                        let d = 0;
                        for (let i = 0; i < 8; i++) {
                            const t = f[i]
                              , e = t[0]
                              , n = t[1];
                            e !== Number.MAX_SAFE_INTEGER && n ? (r && o.getAttribute("morphTarget" + i) !== r[e] && o.setAttribute("morphTarget" + i, r[e]),
                            h && o.getAttribute("morphNormal" + i) !== h[e] && o.setAttribute("morphNormal" + i, h[e]),
                            c[i] = n,
                            d += n) : (r && !0 === o.hasAttribute("morphTarget" + i) && o.deleteAttribute("morphTarget" + i),
                            h && !0 === o.hasAttribute("morphNormal" + i) && o.deleteAttribute("morphNormal" + i),
                            c[i] = 0)
                        }
                        const m = o.morphTargetsRelative ? 1 : 1 - d;
                        v.getUniforms().setValue(t, "morphTargetBaseInfluence", m),
                        v.getUniforms().setValue(t, "morphTargetInfluences", c)
                    }
                }
            }
        }
        Ut.prototype.isDataTexture2DArray = !0;
        class kt extends Y {
            constructor(t, e, n) {
                super(t, e, n),
                this.samples = 4
            }
            copy(source) {
                return super.copy.call(this, source),
                this.samples = source.samples,
                this
            }
        }
        function Vt(t, e, n, r) {
            let o = new WeakMap;
            function l(t) {
                const e = t.target;
                e.removeEventListener("dispose", l),
                n.remove(e.instanceMatrix),
                null !== e.instanceColor && n.remove(e.instanceColor)
            }
            return {
                update: function(object) {
                    const c = r.render.frame
                      , h = object.geometry
                      , d = e.get(object, h);
                    return o.get(d) !== c && (e.update(d),
                    o.set(d, c)),
                    object.isInstancedMesh && (!1 === object.hasEventListener("dispose", l) && object.addEventListener("dispose", l),
                    n.update(object.instanceMatrix, t.ARRAY_BUFFER),
                    null !== object.instanceColor && n.update(object.instanceColor, t.ARRAY_BUFFER)),
                    d
                },
                dispose: function() {
                    o = new WeakMap
                }
            }
        }
        kt.prototype.isWebGLMultisampleRenderTarget = !0;
        class Wt extends X.a {
            constructor(data=null, t=1, e=1, n=1) {
                super(null),
                this.image = {
                    data: data,
                    width: t,
                    height: e,
                    depth: n
                },
                this.magFilter = r.db,
                this.minFilter = r.db,
                this.wrapR = r.l,
                this.generateMipmaps = !1,
                this.flipY = !1,
                this.unpackAlignment = 1,
                this.needsUpdate = !0
            }
        }
        Wt.prototype.isDataTexture3D = !0;
        const jt = new X.a
          , Xt = new Ut
          , qt = new Wt
          , Yt = new $
          , Zt = []
          , Jt = []
          , Kt = new Float32Array(16)
          , Qt = new Float32Array(9)
          , $t = new Float32Array(4);
        function te(t, e, n) {
            const r = t[0];
            if (r <= 0 || r > 0)
                return t;
            const o = e * n;
            let l = Zt[o];
            if (void 0 === l && (l = new Float32Array(o),
            Zt[o] = l),
            0 !== e) {
                r.toArray(l, 0);
                for (let i = 1, r = 0; i !== e; ++i)
                    r += n,
                    t[i].toArray(l, r)
            }
            return l
        }
        function ee(a, b) {
            if (a.length !== b.length)
                return !1;
            for (let i = 0, t = a.length; i < t; i++)
                if (a[i] !== b[i])
                    return !1;
            return !0
        }
        function ne(a, b) {
            for (let i = 0, t = b.length; i < t; i++)
                a[i] = b[i]
        }
        function ie(t, e) {
            let n = Jt[e];
            void 0 === n && (n = new Int32Array(e),
            Jt[e] = n);
            for (let i = 0; i !== e; ++i)
                n[i] = t.allocateTextureUnit();
            return n
        }
        function re(t, e) {
            const n = this.cache;
            n[0] !== e && (t.uniform1f(this.addr, e),
            n[0] = e)
        }
        function ae(t, e) {
            const n = this.cache;
            if (void 0 !== e.x)
                n[0] === e.x && n[1] === e.y || (t.uniform2f(this.addr, e.x, e.y),
                n[0] = e.x,
                n[1] = e.y);
            else {
                if (ee(n, e))
                    return;
                t.uniform2fv(this.addr, e),
                ne(n, e)
            }
        }
        function se(t, e) {
            const n = this.cache;
            if (void 0 !== e.x)
                n[0] === e.x && n[1] === e.y && n[2] === e.z || (t.uniform3f(this.addr, e.x, e.y, e.z),
                n[0] = e.x,
                n[1] = e.y,
                n[2] = e.z);
            else if (void 0 !== e.r)
                n[0] === e.r && n[1] === e.g && n[2] === e.b || (t.uniform3f(this.addr, e.r, e.g, e.b),
                n[0] = e.r,
                n[1] = e.g,
                n[2] = e.b);
            else {
                if (ee(n, e))
                    return;
                t.uniform3fv(this.addr, e),
                ne(n, e)
            }
        }
        function oe(t, e) {
            const n = this.cache;
            if (void 0 !== e.x)
                n[0] === e.x && n[1] === e.y && n[2] === e.z && n[3] === e.w || (t.uniform4f(this.addr, e.x, e.y, e.z, e.w),
                n[0] = e.x,
                n[1] = e.y,
                n[2] = e.z,
                n[3] = e.w);
            else {
                if (ee(n, e))
                    return;
                t.uniform4fv(this.addr, e),
                ne(n, e)
            }
        }
        function le(t, e) {
            const n = this.cache
              , r = e.elements;
            if (void 0 === r) {
                if (ee(n, e))
                    return;
                t.uniformMatrix2fv(this.addr, !1, e),
                ne(n, e)
            } else {
                if (ee(n, r))
                    return;
                $t.set(r),
                t.uniformMatrix2fv(this.addr, !1, $t),
                ne(n, r)
            }
        }
        function ce(t, e) {
            const n = this.cache
              , r = e.elements;
            if (void 0 === r) {
                if (ee(n, e))
                    return;
                t.uniformMatrix3fv(this.addr, !1, e),
                ne(n, e)
            } else {
                if (ee(n, r))
                    return;
                Qt.set(r),
                t.uniformMatrix3fv(this.addr, !1, Qt),
                ne(n, r)
            }
        }
        function he(t, e) {
            const n = this.cache
              , r = e.elements;
            if (void 0 === r) {
                if (ee(n, e))
                    return;
                t.uniformMatrix4fv(this.addr, !1, e),
                ne(n, e)
            } else {
                if (ee(n, r))
                    return;
                Kt.set(r),
                t.uniformMatrix4fv(this.addr, !1, Kt),
                ne(n, r)
            }
        }
        function ue(t, e) {
            const n = this.cache;
            n[0] !== e && (t.uniform1i(this.addr, e),
            n[0] = e)
        }
        function de(t, e) {
            const n = this.cache;
            ee(n, e) || (t.uniform2iv(this.addr, e),
            ne(n, e))
        }
        function pe(t, e) {
            const n = this.cache;
            ee(n, e) || (t.uniform3iv(this.addr, e),
            ne(n, e))
        }
        function fe(t, e) {
            const n = this.cache;
            ee(n, e) || (t.uniform4iv(this.addr, e),
            ne(n, e))
        }
        function me(t, e) {
            const n = this.cache;
            n[0] !== e && (t.uniform1ui(this.addr, e),
            n[0] = e)
        }
        function ge(t, e) {
            const n = this.cache;
            ee(n, e) || (t.uniform2uiv(this.addr, e),
            ne(n, e))
        }
        function ve(t, e) {
            const n = this.cache;
            ee(n, e) || (t.uniform3uiv(this.addr, e),
            ne(n, e))
        }
        function _e(t, e) {
            const n = this.cache;
            ee(n, e) || (t.uniform4uiv(this.addr, e),
            ne(n, e))
        }
        function xe(t, e, n) {
            const r = this.cache
              , o = n.allocateTextureUnit();
            r[0] !== o && (t.uniform1i(this.addr, o),
            r[0] = o),
            n.safeSetTexture2D(e || jt, o)
        }
        function ye(t, e, n) {
            const r = this.cache
              , o = n.allocateTextureUnit();
            r[0] !== o && (t.uniform1i(this.addr, o),
            r[0] = o),
            n.setTexture3D(e || qt, o)
        }
        function Me(t, e, n) {
            const r = this.cache
              , o = n.allocateTextureUnit();
            r[0] !== o && (t.uniform1i(this.addr, o),
            r[0] = o),
            n.safeSetTextureCube(e || Yt, o)
        }
        function be(t, e, n) {
            const r = this.cache
              , o = n.allocateTextureUnit();
            r[0] !== o && (t.uniform1i(this.addr, o),
            r[0] = o),
            n.setTexture2DArray(e || Xt, o)
        }
        function we(t, e) {
            t.uniform1fv(this.addr, e)
        }
        function Se(t, e) {
            const data = te(e, this.size, 2);
            t.uniform2fv(this.addr, data)
        }
        function Te(t, e) {
            const data = te(e, this.size, 3);
            t.uniform3fv(this.addr, data)
        }
        function Ee(t, e) {
            const data = te(e, this.size, 4);
            t.uniform4fv(this.addr, data)
        }
        function Ae(t, e) {
            const data = te(e, this.size, 4);
            t.uniformMatrix2fv(this.addr, !1, data)
        }
        function Le(t, e) {
            const data = te(e, this.size, 9);
            t.uniformMatrix3fv(this.addr, !1, data)
        }
        function Re(t, e) {
            const data = te(e, this.size, 16);
            t.uniformMatrix4fv(this.addr, !1, data)
        }
        function Ce(t, e) {
            t.uniform1iv(this.addr, e)
        }
        function Pe(t, e) {
            t.uniform2iv(this.addr, e)
        }
        function De(t, e) {
            t.uniform3iv(this.addr, e)
        }
        function Ne(t, e) {
            t.uniform4iv(this.addr, e)
        }
        function Ie(t, e) {
            t.uniform1uiv(this.addr, e)
        }
        function Oe(t, e) {
            t.uniform2uiv(this.addr, e)
        }
        function Fe(t, e) {
            t.uniform3uiv(this.addr, e)
        }
        function Ue(t, e) {
            t.uniform4uiv(this.addr, e)
        }
        function ze(t, e, n) {
            const r = e.length
              , o = ie(n, r);
            t.uniform1iv(this.addr, o);
            for (let i = 0; i !== r; ++i)
                n.safeSetTexture2D(e[i] || jt, o[i])
        }
        function Be(t, e, n) {
            const r = e.length
              , o = ie(n, r);
            t.uniform1iv(this.addr, o);
            for (let i = 0; i !== r; ++i)
                n.safeSetTextureCube(e[i] || Yt, o[i])
        }
        function Ge(t, e, n) {
            this.id = t,
            this.addr = n,
            this.cache = [],
            this.setValue = function(t) {
                switch (t) {
                case 5126:
                    return re;
                case 35664:
                    return ae;
                case 35665:
                    return se;
                case 35666:
                    return oe;
                case 35674:
                    return le;
                case 35675:
                    return ce;
                case 35676:
                    return he;
                case 5124:
                case 35670:
                    return ue;
                case 35667:
                case 35671:
                    return de;
                case 35668:
                case 35672:
                    return pe;
                case 35669:
                case 35673:
                    return fe;
                case 5125:
                    return me;
                case 36294:
                    return ge;
                case 36295:
                    return ve;
                case 36296:
                    return _e;
                case 35678:
                case 36198:
                case 36298:
                case 36306:
                case 35682:
                    return xe;
                case 35679:
                case 36299:
                case 36307:
                    return ye;
                case 35680:
                case 36300:
                case 36308:
                case 36293:
                    return Me;
                case 36289:
                case 36303:
                case 36311:
                case 36292:
                    return be
                }
            }(e.type)
        }
        function He(t, e, n) {
            this.id = t,
            this.addr = n,
            this.cache = [],
            this.size = e.size,
            this.setValue = function(t) {
                switch (t) {
                case 5126:
                    return we;
                case 35664:
                    return Se;
                case 35665:
                    return Te;
                case 35666:
                    return Ee;
                case 35674:
                    return Ae;
                case 35675:
                    return Le;
                case 35676:
                    return Re;
                case 5124:
                case 35670:
                    return Ce;
                case 35667:
                case 35671:
                    return Pe;
                case 35668:
                case 35672:
                    return De;
                case 35669:
                case 35673:
                    return Ne;
                case 5125:
                    return Ie;
                case 36294:
                    return Oe;
                case 36295:
                    return Fe;
                case 36296:
                    return Ue;
                case 35678:
                case 36198:
                case 36298:
                case 36306:
                case 35682:
                    return ze;
                case 35680:
                case 36300:
                case 36308:
                case 36293:
                    return Be
                }
            }(e.type)
        }
        function ke(t) {
            this.id = t,
            this.seq = [],
            this.map = {}
        }
        He.prototype.updateCache = function(data) {
            const t = this.cache;
            data instanceof Float32Array && t.length !== data.length && (this.cache = new Float32Array(data.length)),
            ne(t, data)
        }
        ,
        ke.prototype.setValue = function(t, e, n) {
            const r = this.seq;
            for (let i = 0, o = r.length; i !== o; ++i) {
                const u = r[i];
                u.setValue(t, e[u.id], n)
            }
        }
        ;
        const Ve = /(\w+)(\])?(\[|\.)?/g;
        function We(t, e) {
            t.seq.push(e),
            t.map[e.id] = e
        }
        function je(t, e, n) {
            const path = t.name
              , r = path.length;
            for (Ve.lastIndex = 0; ; ) {
                const o = Ve.exec(path)
                  , l = Ve.lastIndex;
                let c = o[1];
                const h = "]" === o[2]
                  , d = o[3];
                if (h && (c |= 0),
                void 0 === d || "[" === d && l + 2 === r) {
                    We(n, void 0 === d ? new Ge(c,t,e) : new He(c,t,e));
                    break
                }
                {
                    let t = n.map[c];
                    void 0 === t && (t = new ke(c),
                    We(n, t)),
                    n = t
                }
            }
        }
        function Xe(t, e) {
            this.seq = [],
            this.map = {};
            const n = t.getProgramParameter(e, t.ACTIVE_UNIFORMS);
            for (let i = 0; i < n; ++i) {
                const n = t.getActiveUniform(e, i);
                je(n, t.getUniformLocation(e, n.name), this)
            }
        }
        function qe(t, e, n) {
            const r = t.createShader(e);
            return t.shaderSource(r, n),
            t.compileShader(r),
            r
        }
        Xe.prototype.setValue = function(t, e, n, r) {
            const u = this.map[e];
            void 0 !== u && u.setValue(t, n, r)
        }
        ,
        Xe.prototype.setOptional = function(t, object, e) {
            const n = object[e];
            void 0 !== n && this.setValue(t, e, n)
        }
        ,
        Xe.upload = function(t, e, n, r) {
            for (let i = 0, o = e.length; i !== o; ++i) {
                const u = e[i]
                  , o = n[u.id];
                !1 !== o.needsUpdate && u.setValue(t, o.value, r)
            }
        }
        ,
        Xe.seqWithValue = function(t, e) {
            const n = [];
            for (let i = 0, r = t.length; i !== r; ++i) {
                const u = t[i];
                u.id in e && n.push(u)
            }
            return n
        }
        ;
        let Ye = 0;
        function Ze(t) {
            switch (t) {
            case r.P:
                return ["Linear", "( value )"];
            case r.Qc:
                return ["sRGB", "( value )"];
            case r.Sb:
                return ["RGBE", "( value )"];
            case r.Xb:
                return ["RGBM", "( value, 7.0 )"];
            case r.Wb:
                return ["RGBM", "( value, 16.0 )"];
            case r.Rb:
                return ["RGBD", "( value, 256.0 )"];
            case r.H:
                return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
            case r.U:
                return ["LogLuv", "( value )"];
            default:
                return console.warn("THREE.WebGLProgram: Unsupported encoding:", t),
                ["Linear", "( value )"]
            }
        }
        function Je(t, e, n) {
            const r = t.getShaderParameter(e, t.COMPILE_STATUS)
              , o = t.getShaderInfoLog(e).trim();
            return r && "" === o ? "" : n.toUpperCase() + "\n\n" + o + "\n\n" + function(t) {
                const e = t.split("\n");
                for (let i = 0; i < e.length; i++)
                    e[i] = i + 1 + ": " + e[i];
                return e.join("\n")
            }(t.getShaderSource(e))
        }
        function Ke(t, e) {
            const n = Ze(e);
            return "vec4 " + t + "( vec4 value ) { return " + n[0] + "ToLinear" + n[1] + "; }"
        }
        function Qe(t, e) {
            const n = Ze(e);
            return "vec4 " + t + "( vec4 value ) { return LinearTo" + n[0] + n[1] + "; }"
        }
        function $e(t, e) {
            let n;
            switch (e) {
            case r.T:
                n = "Linear";
                break;
            case r.hc:
                n = "Reinhard";
                break;
            case r.k:
                n = "OptimizedCineon";
                break;
            case r.a:
                n = "ACESFilmic";
                break;
            case r.u:
                n = "Custom";
                break;
            default:
                console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e),
                n = "Linear"
            }
            return "vec3 " + t + "( vec3 color ) { return " + n + "ToneMapping( color ); }"
        }
        function tn(t) {
            return "" !== t
        }
        function en(t, e) {
            return t.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows)
        }
        function nn(t, e) {
            return t.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection)
        }
        const rn = /^[ \t]*#include +<([\w\d./]+)>/gm;
        function an(t) {
            return t.replace(rn, sn)
        }
        function sn(t, e) {
            const n = F[e];
            if (void 0 === n)
                throw new Error("Can not resolve #include <" + e + ">");
            return an(n)
        }
        const on = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g
          , ln = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
        function cn(t) {
            return t.replace(ln, un).replace(on, hn)
        }
        function hn(t, e, n, r) {
            return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),
            un(t, e, n, r)
        }
        function un(t, e, n, r) {
            let o = "";
            for (let i = parseInt(e); i < parseInt(n); i++)
                o += r.replace(/\[\s*i\s*\]/g, "[ " + i + " ]").replace(/UNROLLED_LOOP_INDEX/g, i);
            return o
        }
        function dn(t) {
            let e = "precision " + t.precision + " float;\nprecision " + t.precision + " int;";
            return "highp" === t.precision ? e += "\n#define HIGH_PRECISION" : "mediump" === t.precision ? e += "\n#define MEDIUM_PRECISION" : "lowp" === t.precision && (e += "\n#define LOW_PRECISION"),
            e
        }
        function pn(t, e, n, o) {
            const l = t.getContext()
              , c = n.defines;
            let h = n.vertexShader
              , d = n.fragmentShader;
            const f = function(t) {
                let e = "SHADOWMAP_TYPE_BASIC";
                return t.shadowMapType === r.rb ? e = "SHADOWMAP_TYPE_PCF" : t.shadowMapType === r.sb ? e = "SHADOWMAP_TYPE_PCF_SOFT" : t.shadowMapType === r.Oc && (e = "SHADOWMAP_TYPE_VSM"),
                e
            }(n)
              , m = function(t) {
                let e = "ENVMAP_TYPE_CUBE";
                if (t.envMap)
                    switch (t.envMapMode) {
                    case r.m:
                    case r.n:
                        e = "ENVMAP_TYPE_CUBE";
                        break;
                    case r.o:
                    case r.p:
                        e = "ENVMAP_TYPE_CUBE_UV"
                    }
                return e
            }(n)
              , v = function(t) {
                let e = "ENVMAP_MODE_REFLECTION";
                if (t.envMap)
                    switch (t.envMapMode) {
                    case r.n:
                    case r.p:
                        e = "ENVMAP_MODE_REFRACTION"
                    }
                return e
            }(n)
              , _ = function(t) {
                let e = "ENVMAP_BLENDING_NONE";
                if (t.envMap)
                    switch (t.combine) {
                    case r.cb:
                        e = "ENVMAP_BLENDING_MULTIPLY";
                        break;
                    case r.ab:
                        e = "ENVMAP_BLENDING_MIX";
                        break;
                    case r.c:
                        e = "ENVMAP_BLENDING_ADD"
                    }
                return e
            }(n)
              , x = t.gammaFactor > 0 ? t.gammaFactor : 1
              , y = n.isWebGL2 ? "" : function(t) {
                return [t.extensionDerivatives || t.envMapCubeUV || t.bumpMap || t.tangentSpaceNormalMap || t.clearcoatNormalMap || t.flatShading || "physical" === t.shaderID ? "#extension GL_OES_standard_derivatives : enable" : "", (t.extensionFragDepth || t.logarithmicDepthBuffer) && t.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "", t.extensionDrawBuffers && t.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "", (t.extensionShaderTextureLOD || t.envMap || t.transmission) && t.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(tn).join("\n")
            }(n)
              , M = function(t) {
                const e = [];
                for (const n in t) {
                    const r = t[n];
                    !1 !== r && e.push("#define " + n + " " + r)
                }
                return e.join("\n")
            }(c)
              , w = l.createProgram();
            let S, T, E = n.glslVersion ? "#version " + n.glslVersion + "\n" : "";
            n.isRawShaderMaterial ? (S = [M].filter(tn).join("\n"),
            S.length > 0 && (S += "\n"),
            T = [y, M].filter(tn).join("\n"),
            T.length > 0 && (T += "\n")) : (S = [dn(n), "#define SHADER_NAME " + n.shaderName, M, n.instancing ? "#define USE_INSTANCING" : "", n.instancingColor ? "#define USE_INSTANCING_COLOR" : "", n.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + x, "#define MAX_BONES " + n.maxBones, n.useFog && n.fog ? "#define USE_FOG" : "", n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "", n.map ? "#define USE_MAP" : "", n.envMap ? "#define USE_ENVMAP" : "", n.envMap ? "#define " + v : "", n.lightMap ? "#define USE_LIGHTMAP" : "", n.aoMap ? "#define USE_AOMAP" : "", n.emissiveMap ? "#define USE_EMISSIVEMAP" : "", n.bumpMap ? "#define USE_BUMPMAP" : "", n.normalMap ? "#define USE_NORMALMAP" : "", n.normalMap && n.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", n.normalMap && n.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", n.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", n.displacementMap && n.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", n.specularMap ? "#define USE_SPECULARMAP" : "", n.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "", n.specularColorMap ? "#define USE_SPECULARCOLORMAP" : "", n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", n.metalnessMap ? "#define USE_METALNESSMAP" : "", n.alphaMap ? "#define USE_ALPHAMAP" : "", n.transmission ? "#define USE_TRANSMISSION" : "", n.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", n.thicknessMap ? "#define USE_THICKNESSMAP" : "", n.sheenColorMap ? "#define USE_SHEENCOLORMAP" : "", n.sheenRoughnessMap ? "#define USE_SHEENROUGHNESSMAP" : "", n.vertexTangents ? "#define USE_TANGENT" : "", n.vertexColors ? "#define USE_COLOR" : "", n.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", n.vertexUvs ? "#define USE_UV" : "", n.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", n.flatShading ? "#define FLAT_SHADED" : "", n.skinning ? "#define USE_SKINNING" : "", n.useVertexTexture ? "#define BONE_TEXTURE" : "", n.morphTargets ? "#define USE_MORPHTARGETS" : "", n.morphNormals && !1 === n.flatShading ? "#define USE_MORPHNORMALS" : "", n.morphTargets && n.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "", n.morphTargets && n.isWebGL2 ? "#define MORPHTARGETS_COUNT " + n.morphTargetsCount : "", n.doubleSided ? "#define DOUBLE_SIDED" : "", n.flipSided ? "#define FLIP_SIDED" : "", n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", n.shadowMapEnabled ? "#define " + f : "", n.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", n.logarithmicDepthBuffer && n.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", "#ifdef USE_INSTANCING", "\tattribute mat4 instanceMatrix;", "#endif", "#ifdef USE_INSTANCING_COLOR", "\tattribute vec3 instanceColor;", "#endif", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_TANGENT", "\tattribute vec4 tangent;", "#endif", "#if defined( USE_COLOR_ALPHA )", "\tattribute vec4 color;", "#elif defined( USE_COLOR )", "\tattribute vec3 color;", "#endif", "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(tn).join("\n"),
            T = [y, dn(n), "#define SHADER_NAME " + n.shaderName, M, "#define GAMMA_FACTOR " + x, n.useFog && n.fog ? "#define USE_FOG" : "", n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "", n.map ? "#define USE_MAP" : "", n.matcap ? "#define USE_MATCAP" : "", n.envMap ? "#define USE_ENVMAP" : "", n.envMap ? "#define " + m : "", n.envMap ? "#define " + v : "", n.envMap ? "#define " + _ : "", n.lightMap ? "#define USE_LIGHTMAP" : "", n.aoMap ? "#define USE_AOMAP" : "", n.emissiveMap ? "#define USE_EMISSIVEMAP" : "", n.bumpMap ? "#define USE_BUMPMAP" : "", n.normalMap ? "#define USE_NORMALMAP" : "", n.normalMap && n.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", n.normalMap && n.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", n.clearcoat ? "#define USE_CLEARCOAT" : "", n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", n.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", n.specularMap ? "#define USE_SPECULARMAP" : "", n.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "", n.specularColorMap ? "#define USE_SPECULARCOLORMAP" : "", n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", n.metalnessMap ? "#define USE_METALNESSMAP" : "", n.alphaMap ? "#define USE_ALPHAMAP" : "", n.alphaTest ? "#define USE_ALPHATEST" : "", n.sheen ? "#define USE_SHEEN" : "", n.sheenColorMap ? "#define USE_SHEENCOLORMAP" : "", n.sheenRoughnessMap ? "#define USE_SHEENROUGHNESSMAP" : "", n.transmission ? "#define USE_TRANSMISSION" : "", n.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", n.thicknessMap ? "#define USE_THICKNESSMAP" : "", n.vertexTangents ? "#define USE_TANGENT" : "", n.vertexColors || n.instancingColor ? "#define USE_COLOR" : "", n.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", n.vertexUvs ? "#define USE_UV" : "", n.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", n.gradientMap ? "#define USE_GRADIENTMAP" : "", n.flatShading ? "#define FLAT_SHADED" : "", n.doubleSided ? "#define DOUBLE_SIDED" : "", n.flipSided ? "#define FLIP_SIDED" : "", n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", n.shadowMapEnabled ? "#define " + f : "", n.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", n.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", n.logarithmicDepthBuffer && n.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", (n.extensionShaderTextureLOD || n.envMap) && n.rendererExtensionShaderTextureLod ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", n.toneMapping !== r.ib ? "#define TONE_MAPPING" : "", n.toneMapping !== r.ib ? F.tonemapping_pars_fragment : "", n.toneMapping !== r.ib ? $e("toneMapping", n.toneMapping) : "", n.dithering ? "#define DITHERING" : "", n.format === r.Ub ? "#define OPAQUE" : "", F.encodings_pars_fragment, n.map ? Ke("mapTexelToLinear", n.mapEncoding) : "", n.matcap ? Ke("matcapTexelToLinear", n.matcapEncoding) : "", n.envMap ? Ke("envMapTexelToLinear", n.envMapEncoding) : "", n.emissiveMap ? Ke("emissiveMapTexelToLinear", n.emissiveMapEncoding) : "", n.specularColorMap ? Ke("specularColorMapTexelToLinear", n.specularColorMapEncoding) : "", n.sheenColorMap ? Ke("sheenColorMapTexelToLinear", n.sheenColorMapEncoding) : "", n.lightMap ? Ke("lightMapTexelToLinear", n.lightMapEncoding) : "", Qe("linearToOutputTexel", n.outputEncoding), n.depthPacking ? "#define DEPTH_PACKING " + n.depthPacking : "", "\n"].filter(tn).join("\n")),
            h = an(h),
            h = en(h, n),
            h = nn(h, n),
            d = an(d),
            d = en(d, n),
            d = nn(d, n),
            h = cn(h),
            d = cn(d),
            n.isWebGL2 && !0 !== n.isRawShaderMaterial && (E = "#version 300 es\n",
            S = ["precision mediump sampler2DArray;", "#define attribute in", "#define varying out", "#define texture2D texture"].join("\n") + "\n" + S,
            T = ["#define varying in", n.glslVersion === r.G ? "" : "out highp vec4 pc_fragColor;", n.glslVersion === r.G ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth", "#define texture2D texture", "#define textureCube texture", "#define texture2DProj textureProj", "#define texture2DLodEXT textureLod", "#define texture2DProjLodEXT textureProjLod", "#define textureCubeLodEXT textureLod", "#define texture2DGradEXT textureGrad", "#define texture2DProjGradEXT textureProjGrad", "#define textureCubeGradEXT textureGrad"].join("\n") + "\n" + T);
            const A = E + S + h
              , L = E + T + d
              , R = qe(l, l.VERTEX_SHADER, A)
              , C = qe(l, l.FRAGMENT_SHADER, L);
            if (l.attachShader(w, R),
            l.attachShader(w, C),
            void 0 !== n.index0AttributeName ? l.bindAttribLocation(w, 0, n.index0AttributeName) : !0 === n.morphTargets && l.bindAttribLocation(w, 0, "position"),
            l.linkProgram(w),
            t.debug.checkShaderErrors) {
                const t = l.getProgramInfoLog(w).trim()
                  , e = l.getShaderInfoLog(R).trim()
                  , n = l.getShaderInfoLog(C).trim();
                let r = !0
                  , o = !0;
                if (!1 === l.getProgramParameter(w, l.LINK_STATUS)) {
                    r = !1;
                    const e = Je(l, R, "vertex")
                      , n = Je(l, C, "fragment");
                    console.error("THREE.WebGLProgram: Shader Error " + l.getError() + " - VALIDATE_STATUS " + l.getProgramParameter(w, l.VALIDATE_STATUS) + "\n\nProgram Info Log: " + t + "\n" + e + "\n" + n)
                } else
                    "" !== t ? console.warn("THREE.WebGLProgram: Program Info Log:", t) : "" !== e && "" !== n || (o = !1);
                o && (this.diagnostics = {
                    runnable: r,
                    programLog: t,
                    vertexShader: {
                        log: e,
                        prefix: S
                    },
                    fragmentShader: {
                        log: n,
                        prefix: T
                    }
                })
            }
            let P, D;
            return l.deleteShader(R),
            l.deleteShader(C),
            this.getUniforms = function() {
                return void 0 === P && (P = new Xe(l,w)),
                P
            }
            ,
            this.getAttributes = function() {
                return void 0 === D && (D = function(t, e) {
                    const n = {}
                      , r = t.getProgramParameter(e, t.ACTIVE_ATTRIBUTES);
                    for (let i = 0; i < r; i++) {
                        const r = t.getActiveAttrib(e, i)
                          , o = r.name;
                        let l = 1;
                        r.type === t.FLOAT_MAT2 && (l = 2),
                        r.type === t.FLOAT_MAT3 && (l = 3),
                        r.type === t.FLOAT_MAT4 && (l = 4),
                        n[o] = {
                            type: r.type,
                            location: t.getAttribLocation(e, o),
                            locationSize: l
                        }
                    }
                    return n
                }(l, w)),
                D
            }
            ,
            this.destroy = function() {
                o.releaseStatesOfProgram(this),
                l.deleteProgram(w),
                this.program = void 0
            }
            ,
            this.name = n.shaderName,
            this.id = Ye++,
            this.cacheKey = e,
            this.usedTimes = 1,
            this.program = w,
            this.vertexShader = R,
            this.fragmentShader = C,
            this
        }
        function fn(t, e, n, o, l, c, h) {
            const d = []
              , f = l.isWebGL2
              , m = l.logarithmicDepthBuffer
              , v = l.floatVertexTextures
              , _ = l.maxVertexUniforms
              , x = l.vertexTextures;
            let y = l.precision;
            const M = {
                MeshDepthMaterial: "depth",
                MeshDistanceMaterial: "distanceRGBA",
                MeshNormalMaterial: "normal",
                MeshBasicMaterial: "basic",
                MeshLambertMaterial: "lambert",
                MeshPhongMaterial: "phong",
                MeshToonMaterial: "toon",
                MeshStandardMaterial: "physical",
                MeshPhysicalMaterial: "physical",
                MeshMatcapMaterial: "matcap",
                LineBasicMaterial: "basic",
                LineDashedMaterial: "dashed",
                PointsMaterial: "points",
                ShadowMaterial: "shadow",
                SpriteMaterial: "sprite"
            }
              , w = ["precision", "isWebGL2", "supportsVertexTextures", "outputEncoding", "instancing", "instancingColor", "map", "mapEncoding", "matcap", "matcapEncoding", "envMap", "envMapMode", "envMapEncoding", "envMapCubeUV", "lightMap", "lightMapEncoding", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "tangentSpaceNormalMap", "clearcoat", "clearcoatMap", "clearcoatRoughnessMap", "clearcoatNormalMap", "displacementMap", "specularMap", , "roughnessMap", "metalnessMap", "gradientMap", "alphaMap", "alphaTest", "combine", "vertexColors", "vertexAlphas", "vertexTangents", "vertexUvs", "uvsVertexOnly", "fog", "useFog", "fogExp2", "flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning", "maxBones", "useVertexTexture", "morphTargets", "morphNormals", "morphTargetsCount", "premultipliedAlpha", "numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights", "numDirLightShadows", "numPointLightShadows", "numSpotLightShadows", "shadowMapEnabled", "shadowMapType", "toneMapping", "physicallyCorrectLights", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering", "format", "specularIntensityMap", "specularColorMap", "specularColorMapEncoding", "transmission", "transmissionMap", "thicknessMap", "sheen", "sheenColorMap", "sheenColorMapEncoding", "sheenRoughnessMap"];
            function S(map) {
                let t;
                return map && map.isTexture ? t = map.encoding : map && map.isWebGLRenderTarget ? (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),
                t = map.texture.encoding) : t = r.P,
                f && map && map.isTexture && map.format === r.ub && map.type === r.Hc && map.encoding === r.Qc && (t = r.P),
                t
            }
            return {
                getParameters: function(c, d, w, T, object) {
                    const E = T.fog
                      , A = c.isMeshStandardMaterial ? T.environment : null
                      , L = (c.isMeshStandardMaterial ? n : e).get(c.envMap || A)
                      , R = M[c.type]
                      , C = object.isSkinnedMesh ? function(object) {
                        const t = object.skeleton.bones;
                        if (v)
                            return 1024;
                        {
                            const e = _
                              , n = Math.floor((e - 20) / 4)
                              , r = Math.min(n, t.length);
                            return r < t.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + t.length + " bones. This GPU supports " + r + "."),
                            0) : r
                        }
                    }(object) : 0;
                    let P, D;
                    if (null !== c.precision && (y = l.getMaxPrecision(c.precision),
                    y !== c.precision && console.warn("THREE.WebGLProgram.getParameters:", c.precision, "not supported, using", y, "instead.")),
                    R) {
                        const t = B[R];
                        P = t.vertexShader,
                        D = t.fragmentShader
                    } else
                        P = c.vertexShader,
                        D = c.fragmentShader;
                    const N = t.getRenderTarget()
                      , I = c.alphaTest > 0
                      , O = c.clearcoat > 0;
                    return {
                        isWebGL2: f,
                        shaderID: R,
                        shaderName: c.type,
                        vertexShader: P,
                        fragmentShader: D,
                        defines: c.defines,
                        isRawShaderMaterial: !0 === c.isRawShaderMaterial,
                        glslVersion: c.glslVersion,
                        precision: y,
                        instancing: !0 === object.isInstancedMesh,
                        instancingColor: !0 === object.isInstancedMesh && null !== object.instanceColor,
                        supportsVertexTextures: x,
                        outputEncoding: null !== N ? S(N.texture) : t.outputEncoding,
                        map: !!c.map,
                        mapEncoding: S(c.map),
                        matcap: !!c.matcap,
                        matcapEncoding: S(c.matcap),
                        envMap: !!L,
                        envMapMode: L && L.mapping,
                        envMapEncoding: S(L),
                        envMapCubeUV: !!L && (L.mapping === r.o || L.mapping === r.p),
                        lightMap: !!c.lightMap,
                        lightMapEncoding: S(c.lightMap),
                        aoMap: !!c.aoMap,
                        emissiveMap: !!c.emissiveMap,
                        emissiveMapEncoding: S(c.emissiveMap),
                        bumpMap: !!c.bumpMap,
                        normalMap: !!c.normalMap,
                        objectSpaceNormalMap: c.normalMapType === r.lb,
                        tangentSpaceNormalMap: c.normalMapType === r.Fc,
                        clearcoat: O,
                        clearcoatMap: O && !!c.clearcoatMap,
                        clearcoatRoughnessMap: O && !!c.clearcoatRoughnessMap,
                        clearcoatNormalMap: O && !!c.clearcoatNormalMap,
                        displacementMap: !!c.displacementMap,
                        roughnessMap: !!c.roughnessMap,
                        metalnessMap: !!c.metalnessMap,
                        specularMap: !!c.specularMap,
                        specularIntensityMap: !!c.specularIntensityMap,
                        specularColorMap: !!c.specularColorMap,
                        specularColorMapEncoding: S(c.specularColorMap),
                        alphaMap: !!c.alphaMap,
                        alphaTest: I,
                        gradientMap: !!c.gradientMap,
                        sheen: c.sheen > 0,
                        sheenColorMap: !!c.sheenColorMap,
                        sheenColorMapEncoding: S(c.sheenColorMap),
                        sheenRoughnessMap: !!c.sheenRoughnessMap,
                        transmission: c.transmission > 0,
                        transmissionMap: !!c.transmissionMap,
                        thicknessMap: !!c.thicknessMap,
                        combine: c.combine,
                        vertexTangents: !!c.normalMap && !!object.geometry && !!object.geometry.attributes.tangent,
                        vertexColors: c.vertexColors,
                        vertexAlphas: !0 === c.vertexColors && !!object.geometry && !!object.geometry.attributes.color && 4 === object.geometry.attributes.color.itemSize,
                        vertexUvs: !!c.map || !!c.bumpMap || !!c.normalMap || !!c.specularMap || !!c.alphaMap || !!c.emissiveMap || !!c.roughnessMap || !!c.metalnessMap || !!c.clearcoatMap || !!c.clearcoatRoughnessMap || !!c.clearcoatNormalMap || !!c.displacementMap || !!c.transmissionMap || !!c.thicknessMap || !!c.specularIntensityMap || !!c.specularColorMap || !!c.sheenColorMap || c.sheenRoughnessMap,
                        uvsVertexOnly: !(c.map || c.bumpMap || c.normalMap || c.specularMap || c.alphaMap || c.emissiveMap || c.roughnessMap || c.metalnessMap || c.clearcoatNormalMap || c.transmission > 0 || c.transmissionMap || c.thicknessMap || c.specularIntensityMap || c.specularColorMap || !!c.sheen > 0 || c.sheenColorMap || c.sheenRoughnessMap || !c.displacementMap),
                        fog: !!E,
                        useFog: c.fog,
                        fogExp2: E && E.isFogExp2,
                        flatShading: !!c.flatShading,
                        sizeAttenuation: c.sizeAttenuation,
                        logarithmicDepthBuffer: m,
                        skinning: !0 === object.isSkinnedMesh && C > 0,
                        maxBones: C,
                        useVertexTexture: v,
                        morphTargets: !!object.geometry && !!object.geometry.morphAttributes.position,
                        morphNormals: !!object.geometry && !!object.geometry.morphAttributes.normal,
                        morphTargetsCount: object.geometry && object.geometry.morphAttributes.position ? object.geometry.morphAttributes.position.length : 0,
                        numDirLights: d.directional.length,
                        numPointLights: d.point.length,
                        numSpotLights: d.spot.length,
                        numRectAreaLights: d.rectArea.length,
                        numHemiLights: d.hemi.length,
                        numDirLightShadows: d.directionalShadowMap.length,
                        numPointLightShadows: d.pointShadowMap.length,
                        numSpotLightShadows: d.spotShadowMap.length,
                        numClippingPlanes: h.numPlanes,
                        numClipIntersection: h.numIntersection,
                        format: c.format,
                        dithering: c.dithering,
                        shadowMapEnabled: t.shadowMap.enabled && w.length > 0,
                        shadowMapType: t.shadowMap.type,
                        toneMapping: c.toneMapped ? t.toneMapping : r.ib,
                        physicallyCorrectLights: t.physicallyCorrectLights,
                        premultipliedAlpha: c.premultipliedAlpha,
                        doubleSided: c.side === r.x,
                        flipSided: c.side === r.h,
                        depthPacking: void 0 !== c.depthPacking && c.depthPacking,
                        index0AttributeName: c.index0AttributeName,
                        extensionDerivatives: c.extensions && c.extensions.derivatives,
                        extensionFragDepth: c.extensions && c.extensions.fragDepth,
                        extensionDrawBuffers: c.extensions && c.extensions.drawBuffers,
                        extensionShaderTextureLOD: c.extensions && c.extensions.shaderTextureLOD,
                        rendererExtensionFragDepth: f || o.has("EXT_frag_depth"),
                        rendererExtensionDrawBuffers: f || o.has("WEBGL_draw_buffers"),
                        rendererExtensionShaderTextureLod: f || o.has("EXT_shader_texture_lod"),
                        customProgramCacheKey: c.customProgramCacheKey()
                    }
                },
                getProgramCacheKey: function(e) {
                    const n = [];
                    if (e.shaderID ? n.push(e.shaderID) : (n.push(Object(Nt.c)(e.fragmentShader)),
                    n.push(Object(Nt.c)(e.vertexShader))),
                    void 0 !== e.defines)
                        for (const t in e.defines)
                            n.push(t),
                            n.push(e.defines[t]);
                    if (!1 === e.isRawShaderMaterial) {
                        for (let i = 0; i < w.length; i++)
                            n.push(e[w[i]]);
                        n.push(t.outputEncoding),
                        n.push(t.gammaFactor)
                    }
                    return n.push(e.customProgramCacheKey),
                    n.join()
                },
                getUniforms: function(t) {
                    const e = M[t.type];
                    let n;
                    if (e) {
                        const t = B[e];
                        n = D.clone(t.uniforms)
                    } else
                        n = t.uniforms;
                    return n
                },
                acquireProgram: function(e, n) {
                    let r;
                    for (let p = 0, t = d.length; p < t; p++) {
                        const t = d[p];
                        if (t.cacheKey === n) {
                            r = t,
                            ++r.usedTimes;
                            break
                        }
                    }
                    return void 0 === r && (r = new pn(t,n,e,c),
                    d.push(r)),
                    r
                },
                releaseProgram: function(t) {
                    if (0 == --t.usedTimes) {
                        const i = d.indexOf(t);
                        d[i] = d[d.length - 1],
                        d.pop(),
                        t.destroy()
                    }
                },
                programs: d
            }
        }
        function mn() {
            let t = new WeakMap;
            return {
                get: function(object) {
                    let map = t.get(object);
                    return void 0 === map && (map = {},
                    t.set(object, map)),
                    map
                },
                remove: function(object) {
                    t.delete(object)
                },
                update: function(object, e, n) {
                    t.get(object)[e] = n
                },
                dispose: function() {
                    t = new WeakMap
                }
            }
        }
        function gn(a, b) {
            return a.groupOrder !== b.groupOrder ? a.groupOrder - b.groupOrder : a.renderOrder !== b.renderOrder ? a.renderOrder - b.renderOrder : a.program !== b.program ? a.program.id - b.program.id : a.material.id !== b.material.id ? a.material.id - b.material.id : a.z !== b.z ? a.z - b.z : a.id - b.id
        }
        function vn(a, b) {
            return a.groupOrder !== b.groupOrder ? a.groupOrder - b.groupOrder : a.renderOrder !== b.renderOrder ? a.renderOrder - b.renderOrder : a.z !== b.z ? b.z - a.z : a.id - b.id
        }
        function _n(t) {
            const e = [];
            let n = 0;
            const r = []
              , o = []
              , l = []
              , c = {
                id: -1
            };
            function h(object, r, o, l, h, d) {
                let f = e[n];
                const m = t.get(o);
                return void 0 === f ? (f = {
                    id: object.id,
                    object: object,
                    geometry: r,
                    material: o,
                    program: m.program || c,
                    groupOrder: l,
                    renderOrder: object.renderOrder,
                    z: h,
                    group: d
                },
                e[n] = f) : (f.id = object.id,
                f.object = object,
                f.geometry = r,
                f.material = o,
                f.program = m.program || c,
                f.groupOrder = l,
                f.renderOrder = object.renderOrder,
                f.z = h,
                f.group = d),
                n++,
                f
            }
            return {
                opaque: r,
                transmissive: o,
                transparent: l,
                init: function() {
                    n = 0,
                    r.length = 0,
                    o.length = 0,
                    l.length = 0
                },
                push: function(object, t, e, n, c, d) {
                    const f = h(object, t, e, n, c, d);
                    e.transmission > 0 ? o.push(f) : !0 === e.transparent ? l.push(f) : r.push(f)
                },
                unshift: function(object, t, e, n, c, d) {
                    const f = h(object, t, e, n, c, d);
                    e.transmission > 0 ? o.unshift(f) : !0 === e.transparent ? l.unshift(f) : r.unshift(f)
                },
                finish: function() {
                    for (let i = n, t = e.length; i < t; i++) {
                        const t = e[i];
                        if (null === t.id)
                            break;
                        t.id = null,
                        t.object = null,
                        t.geometry = null,
                        t.material = null,
                        t.program = null,
                        t.group = null
                    }
                },
                sort: function(t, e) {
                    r.length > 1 && r.sort(t || gn),
                    o.length > 1 && o.sort(e || vn),
                    l.length > 1 && l.sort(e || vn)
                }
            }
        }
        function xn(t) {
            let e = new WeakMap;
            return {
                get: function(n, r) {
                    let o;
                    return !1 === e.has(n) ? (o = new _n(t),
                    e.set(n, [o])) : r >= e.get(n).length ? (o = new _n(t),
                    e.get(n).push(o)) : o = e.get(n)[r],
                    o
                },
                dispose: function() {
                    e = new WeakMap
                }
            }
        }
        function yn() {
            const t = {};
            return {
                get: function(e) {
                    if (void 0 !== t[e.id])
                        return t[e.id];
                    let n;
                    switch (e.type) {
                    case "DirectionalLight":
                        n = {
                            direction: new o.a,
                            color: new I.a
                        };
                        break;
                    case "SpotLight":
                        n = {
                            position: new o.a,
                            direction: new o.a,
                            color: new I.a,
                            distance: 0,
                            coneCos: 0,
                            penumbraCos: 0,
                            decay: 0
                        };
                        break;
                    case "PointLight":
                        n = {
                            position: new o.a,
                            color: new I.a,
                            distance: 0,
                            decay: 0
                        };
                        break;
                    case "HemisphereLight":
                        n = {
                            direction: new o.a,
                            skyColor: new I.a,
                            groundColor: new I.a
                        };
                        break;
                    case "RectAreaLight":
                        n = {
                            color: new I.a,
                            position: new o.a,
                            halfWidth: new o.a,
                            halfHeight: new o.a
                        }
                    }
                    return t[e.id] = n,
                    n
                }
            }
        }
        let Mn = 0;
        function bn(t, e) {
            return (e.castShadow ? 1 : 0) - (t.castShadow ? 1 : 0)
        }
        function wn(t, e) {
            const n = new yn
              , r = function() {
                const t = {};
                return {
                    get: function(e) {
                        if (void 0 !== t[e.id])
                            return t[e.id];
                        let n;
                        switch (e.type) {
                        case "DirectionalLight":
                        case "SpotLight":
                            n = {
                                shadowBias: 0,
                                shadowNormalBias: 0,
                                shadowRadius: 1,
                                shadowMapSize: new U.a
                            };
                            break;
                        case "PointLight":
                            n = {
                                shadowBias: 0,
                                shadowNormalBias: 0,
                                shadowRadius: 1,
                                shadowMapSize: new U.a,
                                shadowCameraNear: 1,
                                shadowCameraFar: 1e3
                            }
                        }
                        return t[e.id] = n,
                        n
                    }
                }
            }()
              , l = {
                version: 0,
                hash: {
                    directionalLength: -1,
                    pointLength: -1,
                    spotLength: -1,
                    rectAreaLength: -1,
                    hemiLength: -1,
                    numDirectionalShadows: -1,
                    numPointShadows: -1,
                    numSpotShadows: -1
                },
                ambient: [0, 0, 0],
                probe: [],
                directional: [],
                directionalShadow: [],
                directionalShadowMap: [],
                directionalShadowMatrix: [],
                spot: [],
                spotShadow: [],
                spotShadowMap: [],
                spotShadowMatrix: [],
                rectArea: [],
                rectAreaLTC1: null,
                rectAreaLTC2: null,
                point: [],
                pointShadow: [],
                pointShadowMap: [],
                pointShadowMatrix: [],
                hemi: []
            };
            for (let i = 0; i < 9; i++)
                l.probe.push(new o.a);
            const c = new o.a
              , h = new y.a
              , d = new y.a;
            return {
                setup: function(o, c) {
                    let h = 0
                      , g = 0
                      , b = 0;
                    for (let i = 0; i < 9; i++)
                        l.probe[i].set(0, 0, 0);
                    let d = 0
                      , f = 0
                      , m = 0
                      , v = 0
                      , _ = 0
                      , x = 0
                      , y = 0
                      , M = 0;
                    o.sort(bn);
                    const w = !0 !== c ? Math.PI : 1;
                    for (let i = 0, t = o.length; i < t; i++) {
                        const t = o[i]
                          , e = t.color
                          , c = t.intensity
                          , S = t.distance
                          , T = t.shadow && t.shadow.map ? t.shadow.map.texture : null;
                        if (t.isAmbientLight)
                            h += e.r * c * w,
                            g += e.g * c * w,
                            b += e.b * c * w;
                        else if (t.isLightProbe)
                            for (let e = 0; e < 9; e++)
                                l.probe[e].addScaledVector(t.sh.coefficients[e], c);
                        else if (t.isDirectionalLight) {
                            const e = n.get(t);
                            if (e.color.copy(t.color).multiplyScalar(t.intensity * w),
                            t.castShadow) {
                                const shadow = t.shadow
                                  , e = r.get(t);
                                e.shadowBias = shadow.bias,
                                e.shadowNormalBias = shadow.normalBias,
                                e.shadowRadius = shadow.radius,
                                e.shadowMapSize = shadow.mapSize,
                                l.directionalShadow[d] = e,
                                l.directionalShadowMap[d] = T,
                                l.directionalShadowMatrix[d] = t.shadow.matrix,
                                x++
                            }
                            l.directional[d] = e,
                            d++
                        } else if (t.isSpotLight) {
                            const o = n.get(t);
                            if (o.position.setFromMatrixPosition(t.matrixWorld),
                            o.color.copy(e).multiplyScalar(c * w),
                            o.distance = S,
                            o.coneCos = Math.cos(t.angle),
                            o.penumbraCos = Math.cos(t.angle * (1 - t.penumbra)),
                            o.decay = t.decay,
                            t.castShadow) {
                                const shadow = t.shadow
                                  , e = r.get(t);
                                e.shadowBias = shadow.bias,
                                e.shadowNormalBias = shadow.normalBias,
                                e.shadowRadius = shadow.radius,
                                e.shadowMapSize = shadow.mapSize,
                                l.spotShadow[m] = e,
                                l.spotShadowMap[m] = T,
                                l.spotShadowMatrix[m] = t.shadow.matrix,
                                M++
                            }
                            l.spot[m] = o,
                            m++
                        } else if (t.isRectAreaLight) {
                            const r = n.get(t);
                            r.color.copy(e).multiplyScalar(c),
                            r.halfWidth.set(.5 * t.width, 0, 0),
                            r.halfHeight.set(0, .5 * t.height, 0),
                            l.rectArea[v] = r,
                            v++
                        } else if (t.isPointLight) {
                            const e = n.get(t);
                            if (e.color.copy(t.color).multiplyScalar(t.intensity * w),
                            e.distance = t.distance,
                            e.decay = t.decay,
                            t.castShadow) {
                                const shadow = t.shadow
                                  , e = r.get(t);
                                e.shadowBias = shadow.bias,
                                e.shadowNormalBias = shadow.normalBias,
                                e.shadowRadius = shadow.radius,
                                e.shadowMapSize = shadow.mapSize,
                                e.shadowCameraNear = shadow.camera.near,
                                e.shadowCameraFar = shadow.camera.far,
                                l.pointShadow[f] = e,
                                l.pointShadowMap[f] = T,
                                l.pointShadowMatrix[f] = t.shadow.matrix,
                                y++
                            }
                            l.point[f] = e,
                            f++
                        } else if (t.isHemisphereLight) {
                            const e = n.get(t);
                            e.skyColor.copy(t.color).multiplyScalar(c * w),
                            e.groundColor.copy(t.groundColor).multiplyScalar(c * w),
                            l.hemi[_] = e,
                            _++
                        }
                    }
                    v > 0 && (e.isWebGL2 || !0 === t.has("OES_texture_float_linear") ? (l.rectAreaLTC1 = z.LTC_FLOAT_1,
                    l.rectAreaLTC2 = z.LTC_FLOAT_2) : !0 === t.has("OES_texture_half_float_linear") ? (l.rectAreaLTC1 = z.LTC_HALF_1,
                    l.rectAreaLTC2 = z.LTC_HALF_2) : console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),
                    l.ambient[0] = h,
                    l.ambient[1] = g,
                    l.ambient[2] = b;
                    const S = l.hash;
                    S.directionalLength === d && S.pointLength === f && S.spotLength === m && S.rectAreaLength === v && S.hemiLength === _ && S.numDirectionalShadows === x && S.numPointShadows === y && S.numSpotShadows === M || (l.directional.length = d,
                    l.spot.length = m,
                    l.rectArea.length = v,
                    l.point.length = f,
                    l.hemi.length = _,
                    l.directionalShadow.length = x,
                    l.directionalShadowMap.length = x,
                    l.pointShadow.length = y,
                    l.pointShadowMap.length = y,
                    l.spotShadow.length = M,
                    l.spotShadowMap.length = M,
                    l.directionalShadowMatrix.length = x,
                    l.pointShadowMatrix.length = y,
                    l.spotShadowMatrix.length = M,
                    S.directionalLength = d,
                    S.pointLength = f,
                    S.spotLength = m,
                    S.rectAreaLength = v,
                    S.hemiLength = _,
                    S.numDirectionalShadows = x,
                    S.numPointShadows = y,
                    S.numSpotShadows = M,
                    l.version = Mn++)
                },
                setupView: function(t, e) {
                    let n = 0
                      , r = 0
                      , o = 0
                      , f = 0
                      , m = 0;
                    const v = e.matrixWorldInverse;
                    for (let i = 0, e = t.length; i < e; i++) {
                        const e = t[i];
                        if (e.isDirectionalLight) {
                            const t = l.directional[n];
                            t.direction.setFromMatrixPosition(e.matrixWorld),
                            c.setFromMatrixPosition(e.target.matrixWorld),
                            t.direction.sub(c),
                            t.direction.transformDirection(v),
                            n++
                        } else if (e.isSpotLight) {
                            const t = l.spot[o];
                            t.position.setFromMatrixPosition(e.matrixWorld),
                            t.position.applyMatrix4(v),
                            t.direction.setFromMatrixPosition(e.matrixWorld),
                            c.setFromMatrixPosition(e.target.matrixWorld),
                            t.direction.sub(c),
                            t.direction.transformDirection(v),
                            o++
                        } else if (e.isRectAreaLight) {
                            const t = l.rectArea[f];
                            t.position.setFromMatrixPosition(e.matrixWorld),
                            t.position.applyMatrix4(v),
                            d.identity(),
                            h.copy(e.matrixWorld),
                            h.premultiply(v),
                            d.extractRotation(h),
                            t.halfWidth.set(.5 * e.width, 0, 0),
                            t.halfHeight.set(0, .5 * e.height, 0),
                            t.halfWidth.applyMatrix4(d),
                            t.halfHeight.applyMatrix4(d),
                            f++
                        } else if (e.isPointLight) {
                            const t = l.point[r];
                            t.position.setFromMatrixPosition(e.matrixWorld),
                            t.position.applyMatrix4(v),
                            r++
                        } else if (e.isHemisphereLight) {
                            const t = l.hemi[m];
                            t.direction.setFromMatrixPosition(e.matrixWorld),
                            t.direction.transformDirection(v),
                            t.direction.normalize(),
                            m++
                        }
                    }
                },
                state: l
            }
        }
        function Sn(t, e) {
            const n = new wn(t,e)
              , r = []
              , o = [];
            return {
                init: function() {
                    r.length = 0,
                    o.length = 0
                },
                state: {
                    lightsArray: r,
                    shadowsArray: o,
                    lights: n
                },
                setupLights: function(t) {
                    n.setup(r, t)
                },
                setupLightsView: function(t) {
                    n.setupView(r, t)
                },
                pushLight: function(t) {
                    r.push(t)
                },
                pushShadow: function(t) {
                    o.push(t)
                }
            }
        }
        function Tn(t, e) {
            let n = new WeakMap;
            return {
                get: function(r, o=0) {
                    let l;
                    return !1 === n.has(r) ? (l = new Sn(t,e),
                    n.set(r, [l])) : o >= n.get(r).length ? (l = new Sn(t,e),
                    n.get(r).push(l)) : l = n.get(r)[o],
                    l
                },
                dispose: function() {
                    n = new WeakMap
                }
            }
        }
        class En extends R.a {
            constructor(t) {
                super(),
                this.type = "MeshDepthMaterial",
                this.depthPacking = r.i,
                this.map = null,
                this.alphaMap = null,
                this.displacementMap = null,
                this.displacementScale = 1,
                this.displacementBias = 0,
                this.wireframe = !1,
                this.wireframeLinewidth = 1,
                this.fog = !1,
                this.setValues(t)
            }
            copy(source) {
                return super.copy(source),
                this.depthPacking = source.depthPacking,
                this.map = source.map,
                this.alphaMap = source.alphaMap,
                this.displacementMap = source.displacementMap,
                this.displacementScale = source.displacementScale,
                this.displacementBias = source.displacementBias,
                this.wireframe = source.wireframe,
                this.wireframeLinewidth = source.wireframeLinewidth,
                this
            }
        }
        En.prototype.isMeshDepthMaterial = !0;
        class An extends R.a {
            constructor(t) {
                super(),
                this.type = "MeshDistanceMaterial",
                this.referencePosition = new o.a,
                this.nearDistance = 1,
                this.farDistance = 1e3,
                this.map = null,
                this.alphaMap = null,
                this.displacementMap = null,
                this.displacementScale = 1,
                this.displacementBias = 0,
                this.fog = !1,
                this.setValues(t)
            }
            copy(source) {
                return super.copy(source),
                this.referencePosition.copy(source.referencePosition),
                this.nearDistance = source.nearDistance,
                this.farDistance = source.farDistance,
                this.map = source.map,
                this.alphaMap = source.alphaMap,
                this.displacementMap = source.displacementMap,
                this.displacementScale = source.displacementScale,
                this.displacementBias = source.displacementBias,
                this
            }
        }
        An.prototype.isMeshDistanceMaterial = !0;
        function Ln(t, e, n) {
            let o = new x;
            const l = new U.a
              , c = new U.a
              , h = new M.a
              , d = new En({
                depthPacking: r.tb
            })
              , f = new An
              , m = {}
              , v = n.maxTextureSize
              , _ = {
                0: r.h,
                1: r.F,
                2: r.x
            }
              , y = new N({
                defines: {
                    VSM_SAMPLES: 8
                },
                uniforms: {
                    shadow_pass: {
                        value: null
                    },
                    resolution: {
                        value: new U.a
                    },
                    radius: {
                        value: 4
                    }
                },
                vertexShader: "\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}\n",
                fragmentShader: "\nuniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n\n#include <packing>\n\nvoid main() {\n\n\tconst float samples = float( VSM_SAMPLES );\n\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\n\t// This seems totally useless but it's a crazy work around for a Adreno compiler bug\n\t// float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\n\t\t#ifdef HORIZONTAL_PASS\n\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\n\t\t#else\n\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\n\t\t#endif\n\n\t}\n\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n\n}\n"
            })
              , w = y.clone();
            w.defines.HORIZONTAL_PASS = 1;
            const S = new T.a;
            S.setAttribute("position", new E.a(new Float32Array([-1, -1, .5, 3, -1, .5, -1, 3, .5]),3));
            const A = new O.a(S,y)
              , L = this;
            function R(shadow, n) {
                const r = e.update(A);
                y.defines.VSM_SAMPLES !== shadow.blurSamples && (y.defines.VSM_SAMPLES = shadow.blurSamples,
                w.defines.VSM_SAMPLES = shadow.blurSamples,
                y.needsUpdate = !0,
                w.needsUpdate = !0),
                y.uniforms.shadow_pass.value = shadow.map.texture,
                y.uniforms.resolution.value = shadow.mapSize,
                y.uniforms.radius.value = shadow.radius,
                t.setRenderTarget(shadow.mapPass),
                t.clear(),
                t.renderBufferDirect(n, null, r, y, A, null),
                w.uniforms.shadow_pass.value = shadow.mapPass.texture,
                w.uniforms.resolution.value = shadow.mapSize,
                w.uniforms.radius.value = shadow.radius,
                t.setRenderTarget(shadow.map),
                t.clear(),
                t.renderBufferDirect(n, null, r, w, A, null)
            }
            function C(object, e, n, o, l, c, h) {
                let v = null;
                const x = !0 === o.isPointLight ? object.customDistanceMaterial : object.customDepthMaterial;
                if (v = void 0 !== x ? x : !0 === o.isPointLight ? f : d,
                t.localClippingEnabled && !0 === n.clipShadows && 0 !== n.clippingPlanes.length || n.displacementMap && 0 !== n.displacementScale || n.alphaMap && n.alphaTest > 0) {
                    const t = v.uuid
                      , e = n.uuid;
                    let r = m[t];
                    void 0 === r && (r = {},
                    m[t] = r);
                    let o = r[e];
                    void 0 === o && (o = v.clone(),
                    r[e] = o),
                    v = o
                }
                return v.visible = n.visible,
                v.wireframe = n.wireframe,
                h === r.Oc ? v.side = null !== n.shadowSide ? n.shadowSide : n.side : v.side = null !== n.shadowSide ? n.shadowSide : _[n.side],
                v.alphaMap = n.alphaMap,
                v.alphaTest = n.alphaTest,
                v.clipShadows = n.clipShadows,
                v.clippingPlanes = n.clippingPlanes,
                v.clipIntersection = n.clipIntersection,
                v.displacementMap = n.displacementMap,
                v.displacementScale = n.displacementScale,
                v.displacementBias = n.displacementBias,
                v.wireframeLinewidth = n.wireframeLinewidth,
                v.linewidth = n.linewidth,
                !0 === o.isPointLight && !0 === v.isMeshDistanceMaterial && (v.referencePosition.setFromMatrixPosition(o.matrixWorld),
                v.nearDistance = l,
                v.farDistance = c),
                v
            }
            function P(object, n, l, c, h) {
                if (!1 === object.visible)
                    return;
                if (object.layers.test(n.layers) && (object.isMesh || object.isLine || object.isPoints) && (object.castShadow || object.receiveShadow && h === r.Oc) && (!object.frustumCulled || o.intersectsObject(object))) {
                    object.modelViewMatrix.multiplyMatrices(l.matrixWorldInverse, object.matrixWorld);
                    const n = e.update(object)
                      , r = object.material;
                    if (Array.isArray(r)) {
                        const e = n.groups;
                        for (let o = 0, d = e.length; o < d; o++) {
                            const d = e[o]
                              , f = r[d.materialIndex];
                            if (f && f.visible) {
                                const e = C(object, 0, f, c, l.near, l.far, h);
                                t.renderBufferDirect(l, null, n, e, object, d)
                            }
                        }
                    } else if (r.visible) {
                        const e = C(object, 0, r, c, l.near, l.far, h);
                        t.renderBufferDirect(l, null, n, e, object, null)
                    }
                }
                const d = object.children;
                for (let i = 0, t = d.length; i < t; i++)
                    P(d[i], n, l, c, h)
            }
            this.enabled = !1,
            this.autoUpdate = !0,
            this.needsUpdate = !1,
            this.type = r.rb,
            this.render = function(e, n, d) {
                if (!1 === L.enabled)
                    return;
                if (!1 === L.autoUpdate && !1 === L.needsUpdate)
                    return;
                if (0 === e.length)
                    return;
                const f = t.getRenderTarget()
                  , m = t.getActiveCubeFace()
                  , _ = t.getActiveMipmapLevel()
                  , x = t.state;
                x.setBlending(r.hb),
                x.buffers.color.setClear(1, 1, 1, 1),
                x.buffers.depth.setTest(!0),
                x.setScissorTest(!1);
                for (let i = 0, f = e.length; i < f; i++) {
                    const f = e[i]
                      , shadow = f.shadow;
                    if (void 0 === shadow) {
                        console.warn("THREE.WebGLShadowMap:", f, "has no shadow.");
                        continue
                    }
                    if (!1 === shadow.autoUpdate && !1 === shadow.needsUpdate)
                        continue;
                    l.copy(shadow.mapSize);
                    const m = shadow.getFrameExtents();
                    if (l.multiply(m),
                    c.copy(shadow.mapSize),
                    (l.x > v || l.y > v) && (l.x > v && (c.x = Math.floor(v / m.x),
                    l.x = c.x * m.x,
                    shadow.mapSize.x = c.x),
                    l.y > v && (c.y = Math.floor(v / m.y),
                    l.y = c.y * m.y,
                    shadow.mapSize.y = c.y)),
                    null === shadow.map && !shadow.isPointLightShadow && this.type === r.Oc) {
                        const t = {
                            minFilter: r.Q,
                            magFilter: r.Q,
                            format: r.ub
                        };
                        shadow.map = new Y(l.x,l.y,t),
                        shadow.map.texture.name = f.name + ".shadowMap",
                        shadow.mapPass = new Y(l.x,l.y,t),
                        shadow.camera.updateProjectionMatrix()
                    }
                    if (null === shadow.map) {
                        const t = {
                            minFilter: r.db,
                            magFilter: r.db,
                            format: r.ub
                        };
                        shadow.map = new Y(l.x,l.y,t),
                        shadow.map.texture.name = f.name + ".shadowMap",
                        shadow.camera.updateProjectionMatrix()
                    }
                    t.setRenderTarget(shadow.map),
                    t.clear();
                    const _ = shadow.getViewportCount();
                    for (let t = 0; t < _; t++) {
                        const e = shadow.getViewport(t);
                        h.set(c.x * e.x, c.y * e.y, c.x * e.z, c.y * e.w),
                        x.viewport(h),
                        shadow.updateMatrices(f, t),
                        o = shadow.getFrustum(),
                        P(n, d, shadow.camera, f, this.type)
                    }
                    shadow.isPointLightShadow || this.type !== r.Oc || R(shadow, d),
                    shadow.needsUpdate = !1
                }
                L.needsUpdate = !1,
                t.setRenderTarget(f, m, _)
            }
        }
        function Rn(t, e, n) {
            const o = n.isWebGL2;
            const l = new function() {
                let e = !1;
                const n = new M.a;
                let r = null;
                const o = new M.a(0,0,0,0);
                return {
                    setMask: function(n) {
                        r === n || e || (t.colorMask(n, n, n, n),
                        r = n)
                    },
                    setLocked: function(t) {
                        e = t
                    },
                    setClear: function(e, g, b, a, r) {
                        !0 === r && (e *= a,
                        g *= a,
                        b *= a),
                        n.set(e, g, b, a),
                        !1 === o.equals(n) && (t.clearColor(e, g, b, a),
                        o.copy(n))
                    },
                    reset: function() {
                        e = !1,
                        r = null,
                        o.set(-1, 0, 0, 0)
                    }
                }
            }
              , c = new function() {
                let e = !1
                  , n = null
                  , o = null
                  , l = null;
                return {
                    setTest: function(e) {
                        e ? X(t.DEPTH_TEST) : Y(t.DEPTH_TEST)
                    },
                    setMask: function(r) {
                        n === r || e || (t.depthMask(r),
                        n = r)
                    },
                    setFunc: function(e) {
                        if (o !== e) {
                            if (e)
                                switch (e) {
                                case r.gb:
                                    t.depthFunc(t.NEVER);
                                    break;
                                case r.f:
                                    t.depthFunc(t.ALWAYS);
                                    break;
                                case r.N:
                                    t.depthFunc(t.LESS);
                                    break;
                                case r.O:
                                    t.depthFunc(t.LEQUAL);
                                    break;
                                case r.A:
                                    t.depthFunc(t.EQUAL);
                                    break;
                                case r.J:
                                    t.depthFunc(t.GEQUAL);
                                    break;
                                case r.I:
                                    t.depthFunc(t.GREATER);
                                    break;
                                case r.kb:
                                    t.depthFunc(t.NOTEQUAL);
                                    break;
                                default:
                                    t.depthFunc(t.LEQUAL)
                                }
                            else
                                t.depthFunc(t.LEQUAL);
                            o = e
                        }
                    },
                    setLocked: function(t) {
                        e = t
                    },
                    setClear: function(e) {
                        l !== e && (t.clearDepth(e),
                        l = e)
                    },
                    reset: function() {
                        e = !1,
                        n = null,
                        o = null,
                        l = null
                    }
                }
            }
              , h = new function() {
                let e = !1
                  , n = null
                  , r = null
                  , o = null
                  , l = null
                  , c = null
                  , h = null
                  , d = null
                  , f = null;
                return {
                    setTest: function(n) {
                        e || (n ? X(t.STENCIL_TEST) : Y(t.STENCIL_TEST))
                    },
                    setMask: function(r) {
                        n === r || e || (t.stencilMask(r),
                        n = r)
                    },
                    setFunc: function(e, n, c) {
                        r === e && o === n && l === c || (t.stencilFunc(e, n, c),
                        r = e,
                        o = n,
                        l = c)
                    },
                    setOp: function(e, n, r) {
                        c === e && h === n && d === r || (t.stencilOp(e, n, r),
                        c = e,
                        h = n,
                        d = r)
                    },
                    setLocked: function(t) {
                        e = t
                    },
                    setClear: function(e) {
                        f !== e && (t.clearStencil(e),
                        f = e)
                    },
                    reset: function() {
                        e = !1,
                        n = null,
                        r = null,
                        o = null,
                        l = null,
                        c = null,
                        h = null,
                        d = null,
                        f = null
                    }
                }
            }
            ;
            let d = {}
              , f = null
              , m = {}
              , v = null
              , _ = !1
              , x = null
              , y = null
              , w = null
              , S = null
              , T = null
              , E = null
              , A = null
              , L = !1
              , R = null
              , C = null
              , P = null
              , D = null
              , N = null;
            const I = t.getParameter(t.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
            let O = !1
              , F = 0;
            const U = t.getParameter(t.VERSION);
            -1 !== U.indexOf("WebGL") ? (F = parseFloat(/^WebGL (\d)/.exec(U)[1]),
            O = F >= 1) : -1 !== U.indexOf("OpenGL ES") && (F = parseFloat(/^OpenGL ES (\d)/.exec(U)[1]),
            O = F >= 2);
            let z = null
              , B = {};
            const G = t.getParameter(t.SCISSOR_BOX)
              , H = t.getParameter(t.VIEWPORT)
              , k = (new M.a).fromArray(G)
              , V = (new M.a).fromArray(H);
            function W(e, n, r) {
                const data = new Uint8Array(4)
                  , o = t.createTexture();
                t.bindTexture(e, o),
                t.texParameteri(e, t.TEXTURE_MIN_FILTER, t.NEAREST),
                t.texParameteri(e, t.TEXTURE_MAG_FILTER, t.NEAREST);
                for (let i = 0; i < r; i++)
                    t.texImage2D(n + i, 0, t.RGBA, 1, 1, 0, t.RGBA, t.UNSIGNED_BYTE, data);
                return o
            }
            const j = {};
            function X(e) {
                !0 !== d[e] && (t.enable(e),
                d[e] = !0)
            }
            function Y(e) {
                !1 !== d[e] && (t.disable(e),
                d[e] = !1)
            }
            j[t.TEXTURE_2D] = W(t.TEXTURE_2D, t.TEXTURE_2D, 1),
            j[t.TEXTURE_CUBE_MAP] = W(t.TEXTURE_CUBE_MAP, t.TEXTURE_CUBE_MAP_POSITIVE_X, 6),
            l.setClear(0, 0, 0, 1),
            c.setClear(1),
            h.setClear(0),
            X(t.DEPTH_TEST),
            c.setFunc(r.O),
            Q(!1),
            $(r.q),
            X(t.CULL_FACE),
            K(r.hb);
            const Z = {
                [r.b]: t.FUNC_ADD,
                [r.Dc]: t.FUNC_SUBTRACT,
                [r.jc]: t.FUNC_REVERSE_SUBTRACT
            };
            if (o)
                Z[r.Y] = t.MIN,
                Z[r.X] = t.MAX;
            else {
                const t = e.get("EXT_blend_minmax");
                null !== t && (Z[r.Y] = t.MIN_EXT,
                Z[r.X] = t.MAX_EXT)
            }
            const J = {
                [r.Pc]: t.ZERO,
                [r.mb]: t.ONE,
                [r.Bc]: t.SRC_COLOR,
                [r.zc]: t.SRC_ALPHA,
                [r.Ac]: t.SRC_ALPHA_SATURATE,
                [r.z]: t.DST_COLOR,
                [r.y]: t.DST_ALPHA,
                [r.qb]: t.ONE_MINUS_SRC_COLOR,
                [r.pb]: t.ONE_MINUS_SRC_ALPHA,
                [r.ob]: t.ONE_MINUS_DST_COLOR,
                [r.nb]: t.ONE_MINUS_DST_ALPHA
            };
            function K(e, n, o, l, c, h, d, f) {
                if (e !== r.hb) {
                    if (!1 === _ && (X(t.BLEND),
                    _ = !0),
                    e === r.t)
                        c = c || n,
                        h = h || o,
                        d = d || l,
                        n === y && c === T || (t.blendEquationSeparate(Z[n], Z[c]),
                        y = n,
                        T = c),
                        o === w && l === S && h === E && d === A || (t.blendFuncSeparate(J[o], J[l], J[h], J[d]),
                        w = o,
                        S = l,
                        E = h,
                        A = d),
                        x = e,
                        L = null;
                    else if (e !== x || f !== L) {
                        if (y === r.b && T === r.b || (t.blendEquation(t.FUNC_ADD),
                        y = r.b,
                        T = r.b),
                        f)
                            switch (e) {
                            case r.jb:
                                t.blendFuncSeparate(t.ONE, t.ONE_MINUS_SRC_ALPHA, t.ONE, t.ONE_MINUS_SRC_ALPHA);
                                break;
                            case r.d:
                                t.blendFunc(t.ONE, t.ONE);
                                break;
                            case r.Ec:
                                t.blendFuncSeparate(t.ZERO, t.ZERO, t.ONE_MINUS_SRC_COLOR, t.ONE_MINUS_SRC_ALPHA);
                                break;
                            case r.bb:
                                t.blendFuncSeparate(t.ZERO, t.SRC_COLOR, t.ZERO, t.SRC_ALPHA);
                                break;
                            default:
                                console.error("THREE.WebGLState: Invalid blending: ", e)
                            }
                        else
                            switch (e) {
                            case r.jb:
                                t.blendFuncSeparate(t.SRC_ALPHA, t.ONE_MINUS_SRC_ALPHA, t.ONE, t.ONE_MINUS_SRC_ALPHA);
                                break;
                            case r.d:
                                t.blendFunc(t.SRC_ALPHA, t.ONE);
                                break;
                            case r.Ec:
                                t.blendFunc(t.ZERO, t.ONE_MINUS_SRC_COLOR);
                                break;
                            case r.bb:
                                t.blendFunc(t.ZERO, t.SRC_COLOR);
                                break;
                            default:
                                console.error("THREE.WebGLState: Invalid blending: ", e)
                            }
                        w = null,
                        S = null,
                        E = null,
                        A = null,
                        x = e,
                        L = f
                    }
                } else
                    !0 === _ && (Y(t.BLEND),
                    _ = !1)
            }
            function Q(e) {
                R !== e && (e ? t.frontFace(t.CW) : t.frontFace(t.CCW),
                R = e)
            }
            function $(e) {
                e !== r.s ? (X(t.CULL_FACE),
                e !== C && (e === r.q ? t.cullFace(t.BACK) : e === r.r ? t.cullFace(t.FRONT) : t.cullFace(t.FRONT_AND_BACK))) : Y(t.CULL_FACE),
                C = e
            }
            function tt(e, n, r) {
                e ? (X(t.POLYGON_OFFSET_FILL),
                D === n && N === r || (t.polygonOffset(n, r),
                D = n,
                N = r)) : Y(t.POLYGON_OFFSET_FILL)
            }
            function et(e) {
                void 0 === e && (e = t.TEXTURE0 + I - 1),
                z !== e && (t.activeTexture(e),
                z = e)
            }
            return {
                buffers: {
                    color: l,
                    depth: c,
                    stencil: h
                },
                enable: X,
                disable: Y,
                bindFramebuffer: function(e, n) {
                    return null === n && null !== f && (n = f),
                    m[e] !== n && (t.bindFramebuffer(e, n),
                    m[e] = n,
                    o && (e === t.DRAW_FRAMEBUFFER && (m[t.FRAMEBUFFER] = n),
                    e === t.FRAMEBUFFER && (m[t.DRAW_FRAMEBUFFER] = n)),
                    !0)
                },
                bindXRFramebuffer: function(e) {
                    e !== f && (t.bindFramebuffer(t.FRAMEBUFFER, e),
                    f = e)
                },
                useProgram: function(e) {
                    return v !== e && (t.useProgram(e),
                    v = e,
                    !0)
                },
                setBlending: K,
                setMaterial: function(e, n) {
                    e.side === r.x ? Y(t.CULL_FACE) : X(t.CULL_FACE);
                    let o = e.side === r.h;
                    n && (o = !o),
                    Q(o),
                    e.blending === r.jb && !1 === e.transparent ? K(r.hb) : K(e.blending, e.blendEquation, e.blendSrc, e.blendDst, e.blendEquationAlpha, e.blendSrcAlpha, e.blendDstAlpha, e.premultipliedAlpha),
                    c.setFunc(e.depthFunc),
                    c.setTest(e.depthTest),
                    c.setMask(e.depthWrite),
                    l.setMask(e.colorWrite);
                    const d = e.stencilWrite;
                    h.setTest(d),
                    d && (h.setMask(e.stencilWriteMask),
                    h.setFunc(e.stencilFunc, e.stencilRef, e.stencilFuncMask),
                    h.setOp(e.stencilFail, e.stencilZFail, e.stencilZPass)),
                    tt(e.polygonOffset, e.polygonOffsetFactor, e.polygonOffsetUnits),
                    !0 === e.alphaToCoverage ? X(t.SAMPLE_ALPHA_TO_COVERAGE) : Y(t.SAMPLE_ALPHA_TO_COVERAGE)
                },
                setFlipSided: Q,
                setCullFace: $,
                setLineWidth: function(e) {
                    e !== P && (O && t.lineWidth(e),
                    P = e)
                },
                setPolygonOffset: tt,
                setScissorTest: function(e) {
                    e ? X(t.SCISSOR_TEST) : Y(t.SCISSOR_TEST)
                },
                activeTexture: et,
                bindTexture: function(e, n) {
                    null === z && et();
                    let r = B[z];
                    void 0 === r && (r = {
                        type: void 0,
                        texture: void 0
                    },
                    B[z] = r),
                    r.type === e && r.texture === n || (t.bindTexture(e, n || j[e]),
                    r.type = e,
                    r.texture = n)
                },
                unbindTexture: function() {
                    const e = B[z];
                    void 0 !== e && void 0 !== e.type && (t.bindTexture(e.type, null),
                    e.type = void 0,
                    e.texture = void 0)
                },
                compressedTexImage2D: function() {
                    try {
                        t.compressedTexImage2D.apply(t, arguments)
                    } catch (t) {
                        console.error("THREE.WebGLState:", t)
                    }
                },
                texImage2D: function() {
                    try {
                        t.texImage2D.apply(t, arguments)
                    } catch (t) {
                        console.error("THREE.WebGLState:", t)
                    }
                },
                texImage3D: function() {
                    try {
                        t.texImage3D.apply(t, arguments)
                    } catch (t) {
                        console.error("THREE.WebGLState:", t)
                    }
                },
                scissor: function(e) {
                    !1 === k.equals(e) && (t.scissor(e.x, e.y, e.z, e.w),
                    k.copy(e))
                },
                viewport: function(e) {
                    !1 === V.equals(e) && (t.viewport(e.x, e.y, e.z, e.w),
                    V.copy(e))
                },
                reset: function() {
                    t.disable(t.BLEND),
                    t.disable(t.CULL_FACE),
                    t.disable(t.DEPTH_TEST),
                    t.disable(t.POLYGON_OFFSET_FILL),
                    t.disable(t.SCISSOR_TEST),
                    t.disable(t.STENCIL_TEST),
                    t.disable(t.SAMPLE_ALPHA_TO_COVERAGE),
                    t.blendEquation(t.FUNC_ADD),
                    t.blendFunc(t.ONE, t.ZERO),
                    t.blendFuncSeparate(t.ONE, t.ZERO, t.ONE, t.ZERO),
                    t.colorMask(!0, !0, !0, !0),
                    t.clearColor(0, 0, 0, 0),
                    t.depthMask(!0),
                    t.depthFunc(t.LESS),
                    t.clearDepth(1),
                    t.stencilMask(4294967295),
                    t.stencilFunc(t.ALWAYS, 0, 4294967295),
                    t.stencilOp(t.KEEP, t.KEEP, t.KEEP),
                    t.clearStencil(0),
                    t.cullFace(t.BACK),
                    t.frontFace(t.CCW),
                    t.polygonOffset(0, 0),
                    t.activeTexture(t.TEXTURE0),
                    t.bindFramebuffer(t.FRAMEBUFFER, null),
                    !0 === o && (t.bindFramebuffer(t.DRAW_FRAMEBUFFER, null),
                    t.bindFramebuffer(t.READ_FRAMEBUFFER, null)),
                    t.useProgram(null),
                    t.lineWidth(1),
                    t.scissor(0, 0, t.canvas.width, t.canvas.height),
                    t.viewport(0, 0, t.canvas.width, t.canvas.height),
                    d = {},
                    z = null,
                    B = {},
                    f = null,
                    m = {},
                    v = null,
                    _ = !1,
                    x = null,
                    y = null,
                    w = null,
                    S = null,
                    T = null,
                    E = null,
                    A = null,
                    L = !1,
                    R = null,
                    C = null,
                    P = null,
                    D = null,
                    N = null,
                    k.set(0, 0, t.canvas.width, t.canvas.height),
                    V.set(0, 0, t.canvas.width, t.canvas.height),
                    l.reset(),
                    c.reset(),
                    h.reset()
                }
            }
        }
        var Cn = n(248);
        function Pn(t, e, n, o, l, c, h) {
            const d = l.isWebGL2
              , f = l.maxTextures
              , m = l.maxCubemapSize
              , v = l.maxTextureSize
              , _ = l.maxSamples
              , x = new WeakMap;
            let y, M = !1;
            try {
                M = "undefined" != typeof OffscreenCanvas && null !== new OffscreenCanvas(1,1).getContext("2d")
            } catch (t) {}
            function w(t, e) {
                return M ? new OffscreenCanvas(t,e) : Object(Nt.b)("canvas")
            }
            function S(image, t, e, n) {
                let r = 1;
                if ((image.width > n || image.height > n) && (r = n / Math.max(image.width, image.height)),
                r < 1 || !0 === t) {
                    if ("undefined" != typeof HTMLImageElement && image instanceof HTMLImageElement || "undefined" != typeof HTMLCanvasElement && image instanceof HTMLCanvasElement || "undefined" != typeof ImageBitmap && image instanceof ImageBitmap) {
                        const n = t ? Cn.e : Math.floor
                          , o = n(r * image.width)
                          , l = n(r * image.height);
                        void 0 === y && (y = w(o, l));
                        const canvas = e ? w(o, l) : y;
                        canvas.width = o,
                        canvas.height = l;
                        return canvas.getContext("2d").drawImage(image, 0, 0, o, l),
                        console.warn("THREE.WebGLRenderer: Texture has been resized from (" + image.width + "x" + image.height + ") to (" + o + "x" + l + ")."),
                        canvas
                    }
                    return "data"in image && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + image.width + "x" + image.height + ")."),
                    image
                }
                return image
            }
            function T(image) {
                return Cn.g(image.width) && Cn.g(image.height)
            }
            function E(t, e) {
                return t.generateMipmaps && e && t.minFilter !== r.db && t.minFilter !== r.Q
            }
            function A(e, n, r, l, c=1) {
                t.generateMipmap(e);
                o.get(n).__maxMipLevel = Math.log2(Math.max(r, l, c))
            }
            function L(n, o, l, c) {
                if (!1 === d)
                    return o;
                if (null !== n) {
                    if (void 0 !== t[n])
                        return t[n];
                    console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + n + "'")
                }
                let h = o;
                return o === t.RED && (l === t.FLOAT && (h = t.R32F),
                l === t.HALF_FLOAT && (h = t.R16F),
                l === t.UNSIGNED_BYTE && (h = t.R8)),
                o === t.RGB && (l === t.FLOAT && (h = t.RGB32F),
                l === t.HALF_FLOAT && (h = t.RGB16F),
                l === t.UNSIGNED_BYTE && (h = t.RGB8)),
                o === t.RGBA && (l === t.FLOAT && (h = t.RGBA32F),
                l === t.HALF_FLOAT && (h = t.RGBA16F),
                l === t.UNSIGNED_BYTE && (h = c === r.Qc ? t.SRGB8_ALPHA8 : t.RGBA8)),
                h !== t.R16F && h !== t.R32F && h !== t.RGBA16F && h !== t.RGBA32F || e.get("EXT_color_buffer_float"),
                h
            }
            function R(e) {
                return e === r.db || e === r.fb || e === r.eb ? t.NEAREST : t.LINEAR
            }
            function C(e) {
                const n = e.target;
                n.removeEventListener("dispose", C),
                function(e) {
                    const n = o.get(e);
                    if (void 0 === n.__webglInit)
                        return;
                    t.deleteTexture(n.__webglTexture),
                    o.remove(e)
                }(n),
                n.isVideoTexture && x.delete(n),
                h.memory.textures--
            }
            function P(e) {
                const n = e.target;
                n.removeEventListener("dispose", P),
                function(e) {
                    const n = e.texture
                      , r = o.get(e)
                      , l = o.get(n);
                    if (!e)
                        return;
                    void 0 !== l.__webglTexture && (t.deleteTexture(l.__webglTexture),
                    h.memory.textures--);
                    e.depthTexture && e.depthTexture.dispose();
                    if (e.isWebGLCubeRenderTarget)
                        for (let i = 0; i < 6; i++)
                            t.deleteFramebuffer(r.__webglFramebuffer[i]),
                            r.__webglDepthbuffer && t.deleteRenderbuffer(r.__webglDepthbuffer[i]);
                    else
                        t.deleteFramebuffer(r.__webglFramebuffer),
                        r.__webglDepthbuffer && t.deleteRenderbuffer(r.__webglDepthbuffer),
                        r.__webglMultisampledFramebuffer && t.deleteFramebuffer(r.__webglMultisampledFramebuffer),
                        r.__webglColorRenderbuffer && t.deleteRenderbuffer(r.__webglColorRenderbuffer),
                        r.__webglDepthRenderbuffer && t.deleteRenderbuffer(r.__webglDepthRenderbuffer);
                    if (e.isWebGLMultipleRenderTargets)
                        for (let i = 0, e = n.length; i < e; i++) {
                            const e = o.get(n[i]);
                            e.__webglTexture && (t.deleteTexture(e.__webglTexture),
                            h.memory.textures--),
                            o.remove(n[i])
                        }
                    o.remove(n),
                    o.remove(e)
                }(n)
            }
            let D = 0;
            function N(e, slot) {
                const r = o.get(e);
                if (e.isVideoTexture && function(t) {
                    const e = h.render.frame;
                    x.get(t) !== e && (x.set(t, e),
                    t.update())
                }(e),
                e.version > 0 && r.__version !== e.version) {
                    const image = e.image;
                    if (void 0 === image)
                        console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
                    else {
                        if (!1 !== image.complete)
                            return void B(r, e, slot);
                        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")
                    }
                }
                n.activeTexture(t.TEXTURE0 + slot),
                n.bindTexture(t.TEXTURE_2D, r.__webglTexture)
            }
            function I(e, slot) {
                const l = o.get(e);
                e.version > 0 && l.__version !== e.version ? function(e, o, slot) {
                    if (6 !== o.image.length)
                        return;
                    z(e, o),
                    n.activeTexture(t.TEXTURE0 + slot),
                    n.bindTexture(t.TEXTURE_CUBE_MAP, e.__webglTexture),
                    t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, o.flipY),
                    t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL, o.premultiplyAlpha),
                    t.pixelStorei(t.UNPACK_ALIGNMENT, o.unpackAlignment),
                    t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL, t.NONE);
                    const l = o && (o.isCompressedTexture || o.image[0].isCompressedTexture)
                      , h = o.image[0] && o.image[0].isDataTexture
                      , f = [];
                    for (let i = 0; i < 6; i++)
                        f[i] = l || h ? h ? o.image[i].image : o.image[i] : S(o.image[i], !1, !0, m);
                    const image = f[0]
                      , v = T(image) || d
                      , _ = c.convert(o.format)
                      , x = c.convert(o.type)
                      , y = L(o.internalFormat, _, x, o.encoding);
                    let M;
                    if (U(t.TEXTURE_CUBE_MAP, o, v),
                    l) {
                        for (let i = 0; i < 6; i++) {
                            M = f[i].mipmaps;
                            for (let e = 0; e < M.length; e++) {
                                const l = M[e];
                                o.format !== r.ub && o.format !== r.Ub ? null !== _ ? n.compressedTexImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + i, e, y, l.width, l.height, 0, l.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + i, e, y, l.width, l.height, 0, _, x, l.data)
                            }
                        }
                        e.__maxMipLevel = M.length - 1
                    } else {
                        M = o.mipmaps;
                        for (let i = 0; i < 6; i++)
                            if (h) {
                                n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, y, f[i].width, f[i].height, 0, _, x, f[i].data);
                                for (let e = 0; e < M.length; e++) {
                                    const r = M[e].image[i].image;
                                    n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + i, e + 1, y, r.width, r.height, 0, _, x, r.data)
                                }
                            } else {
                                n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, y, _, x, f[i]);
                                for (let e = 0; e < M.length; e++) {
                                    const r = M[e];
                                    n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X + i, e + 1, y, _, x, r.image[i])
                                }
                            }
                        e.__maxMipLevel = M.length
                    }
                    E(o, v) && A(t.TEXTURE_CUBE_MAP, o, image.width, image.height);
                    e.__version = o.version,
                    o.onUpdate && o.onUpdate(o)
                }(l, e, slot) : (n.activeTexture(t.TEXTURE0 + slot),
                n.bindTexture(t.TEXTURE_CUBE_MAP, l.__webglTexture))
            }
            const O = {
                [r.ic]: t.REPEAT,
                [r.l]: t.CLAMP_TO_EDGE,
                [r.Z]: t.MIRRORED_REPEAT
            }
              , F = {
                [r.db]: t.NEAREST,
                [r.fb]: t.NEAREST_MIPMAP_NEAREST,
                [r.eb]: t.NEAREST_MIPMAP_LINEAR,
                [r.Q]: t.LINEAR,
                [r.S]: t.LINEAR_MIPMAP_NEAREST,
                [r.R]: t.LINEAR_MIPMAP_LINEAR
            };
            function U(n, c, h) {
                if (h ? (t.texParameteri(n, t.TEXTURE_WRAP_S, O[c.wrapS]),
                t.texParameteri(n, t.TEXTURE_WRAP_T, O[c.wrapT]),
                n !== t.TEXTURE_3D && n !== t.TEXTURE_2D_ARRAY || t.texParameteri(n, t.TEXTURE_WRAP_R, O[c.wrapR]),
                t.texParameteri(n, t.TEXTURE_MAG_FILTER, F[c.magFilter]),
                t.texParameteri(n, t.TEXTURE_MIN_FILTER, F[c.minFilter])) : (t.texParameteri(n, t.TEXTURE_WRAP_S, t.CLAMP_TO_EDGE),
                t.texParameteri(n, t.TEXTURE_WRAP_T, t.CLAMP_TO_EDGE),
                n !== t.TEXTURE_3D && n !== t.TEXTURE_2D_ARRAY || t.texParameteri(n, t.TEXTURE_WRAP_R, t.CLAMP_TO_EDGE),
                c.wrapS === r.l && c.wrapT === r.l || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),
                t.texParameteri(n, t.TEXTURE_MAG_FILTER, R(c.magFilter)),
                t.texParameteri(n, t.TEXTURE_MIN_FILTER, R(c.minFilter)),
                c.minFilter !== r.db && c.minFilter !== r.Q && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),
                !0 === e.has("EXT_texture_filter_anisotropic")) {
                    const h = e.get("EXT_texture_filter_anisotropic");
                    if (c.type === r.E && !1 === e.has("OES_texture_float_linear"))
                        return;
                    if (!1 === d && c.type === r.K && !1 === e.has("OES_texture_half_float_linear"))
                        return;
                    (c.anisotropy > 1 || o.get(c).__currentAnisotropy) && (t.texParameterf(n, h.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(c.anisotropy, l.getMaxAnisotropy())),
                    o.get(c).__currentAnisotropy = c.anisotropy)
                }
            }
            function z(e, n) {
                void 0 === e.__webglInit && (e.__webglInit = !0,
                n.addEventListener("dispose", C),
                e.__webglTexture = t.createTexture(),
                h.memory.textures++)
            }
            function B(e, o, slot) {
                let l = t.TEXTURE_2D;
                o.isDataTexture2DArray && (l = t.TEXTURE_2D_ARRAY),
                o.isDataTexture3D && (l = t.TEXTURE_3D),
                z(e, o),
                n.activeTexture(t.TEXTURE0 + slot),
                n.bindTexture(l, e.__webglTexture),
                t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, o.flipY),
                t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL, o.premultiplyAlpha),
                t.pixelStorei(t.UNPACK_ALIGNMENT, o.unpackAlignment),
                t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL, t.NONE);
                const h = function(t) {
                    return !d && (t.wrapS !== r.l || t.wrapT !== r.l || t.minFilter !== r.db && t.minFilter !== r.Q)
                }(o) && !1 === T(o.image)
                  , image = S(o.image, h, !1, v)
                  , f = T(image) || d
                  , m = c.convert(o.format);
                let _, x = c.convert(o.type), y = L(o.internalFormat, m, x, o.encoding);
                U(l, o, f);
                const M = o.mipmaps;
                if (o.isDepthTexture)
                    y = t.DEPTH_COMPONENT,
                    d ? y = o.type === r.E ? t.DEPTH_COMPONENT32F : o.type === r.Jc ? t.DEPTH_COMPONENT24 : o.type === r.Ic ? t.DEPTH24_STENCIL8 : t.DEPTH_COMPONENT16 : o.type === r.E && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),
                    o.format === r.v && y === t.DEPTH_COMPONENT && o.type !== r.Nc && o.type !== r.Jc && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),
                    o.type = r.Nc,
                    x = c.convert(o.type)),
                    o.format === r.w && y === t.DEPTH_COMPONENT && (y = t.DEPTH_STENCIL,
                    o.type !== r.Ic && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),
                    o.type = r.Ic,
                    x = c.convert(o.type))),
                    n.texImage2D(t.TEXTURE_2D, 0, y, image.width, image.height, 0, m, x, null);
                else if (o.isDataTexture)
                    if (M.length > 0 && f) {
                        for (let i = 0, e = M.length; i < e; i++)
                            _ = M[i],
                            n.texImage2D(t.TEXTURE_2D, i, y, _.width, _.height, 0, m, x, _.data);
                        o.generateMipmaps = !1,
                        e.__maxMipLevel = M.length - 1
                    } else
                        n.texImage2D(t.TEXTURE_2D, 0, y, image.width, image.height, 0, m, x, image.data),
                        e.__maxMipLevel = 0;
                else if (o.isCompressedTexture) {
                    for (let i = 0, e = M.length; i < e; i++)
                        _ = M[i],
                        o.format !== r.ub && o.format !== r.Ub ? null !== m ? n.compressedTexImage2D(t.TEXTURE_2D, i, y, _.width, _.height, 0, _.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : n.texImage2D(t.TEXTURE_2D, i, y, _.width, _.height, 0, m, x, _.data);
                    e.__maxMipLevel = M.length - 1
                } else if (o.isDataTexture2DArray)
                    n.texImage3D(t.TEXTURE_2D_ARRAY, 0, y, image.width, image.height, image.depth, 0, m, x, image.data),
                    e.__maxMipLevel = 0;
                else if (o.isDataTexture3D)
                    n.texImage3D(t.TEXTURE_3D, 0, y, image.width, image.height, image.depth, 0, m, x, image.data),
                    e.__maxMipLevel = 0;
                else if (M.length > 0 && f) {
                    for (let i = 0, e = M.length; i < e; i++)
                        _ = M[i],
                        n.texImage2D(t.TEXTURE_2D, i, y, m, x, _);
                    o.generateMipmaps = !1,
                    e.__maxMipLevel = M.length - 1
                } else
                    n.texImage2D(t.TEXTURE_2D, 0, y, m, x, image),
                    e.__maxMipLevel = 0;
                E(o, f) && A(l, o, image.width, image.height),
                e.__version = o.version,
                o.onUpdate && o.onUpdate(o)
            }
            function G(e, r, l, h, d) {
                const f = c.convert(l.format)
                  , m = c.convert(l.type)
                  , v = L(l.internalFormat, f, m, l.encoding);
                d === t.TEXTURE_3D || d === t.TEXTURE_2D_ARRAY ? n.texImage3D(d, 0, v, r.width, r.height, r.depth, 0, f, m, null) : n.texImage2D(d, 0, v, r.width, r.height, 0, f, m, null),
                n.bindFramebuffer(t.FRAMEBUFFER, e),
                t.framebufferTexture2D(t.FRAMEBUFFER, h, d, o.get(l).__webglTexture, 0),
                n.bindFramebuffer(t.FRAMEBUFFER, null)
            }
            function H(e, n, o) {
                if (t.bindRenderbuffer(t.RENDERBUFFER, e),
                n.depthBuffer && !n.stencilBuffer) {
                    let l = t.DEPTH_COMPONENT16;
                    if (o) {
                        const e = n.depthTexture;
                        e && e.isDepthTexture && (e.type === r.E ? l = t.DEPTH_COMPONENT32F : e.type === r.Jc && (l = t.DEPTH_COMPONENT24));
                        const o = V(n);
                        t.renderbufferStorageMultisample(t.RENDERBUFFER, o, l, n.width, n.height)
                    } else
                        t.renderbufferStorage(t.RENDERBUFFER, l, n.width, n.height);
                    t.framebufferRenderbuffer(t.FRAMEBUFFER, t.DEPTH_ATTACHMENT, t.RENDERBUFFER, e)
                } else if (n.depthBuffer && n.stencilBuffer) {
                    if (o) {
                        const e = V(n);
                        t.renderbufferStorageMultisample(t.RENDERBUFFER, e, t.DEPTH24_STENCIL8, n.width, n.height)
                    } else
                        t.renderbufferStorage(t.RENDERBUFFER, t.DEPTH_STENCIL, n.width, n.height);
                    t.framebufferRenderbuffer(t.FRAMEBUFFER, t.DEPTH_STENCIL_ATTACHMENT, t.RENDERBUFFER, e)
                } else {
                    const e = !0 === n.isWebGLMultipleRenderTargets ? n.texture[0] : n.texture
                      , r = c.convert(e.format)
                      , l = c.convert(e.type)
                      , h = L(e.internalFormat, r, l, e.encoding);
                    if (o) {
                        const e = V(n);
                        t.renderbufferStorageMultisample(t.RENDERBUFFER, e, h, n.width, n.height)
                    } else
                        t.renderbufferStorage(t.RENDERBUFFER, h, n.width, n.height)
                }
                t.bindRenderbuffer(t.RENDERBUFFER, null)
            }
            function k(e) {
                const l = o.get(e)
                  , c = !0 === e.isWebGLCubeRenderTarget;
                if (e.depthTexture) {
                    if (c)
                        throw new Error("target.depthTexture not supported in Cube render targets");
                    !function(e, l) {
                        if (l && l.isWebGLCubeRenderTarget)
                            throw new Error("Depth Texture with cube render targets is not supported");
                        if (n.bindFramebuffer(t.FRAMEBUFFER, e),
                        !l.depthTexture || !l.depthTexture.isDepthTexture)
                            throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
                        o.get(l.depthTexture).__webglTexture && l.depthTexture.image.width === l.width && l.depthTexture.image.height === l.height || (l.depthTexture.image.width = l.width,
                        l.depthTexture.image.height = l.height,
                        l.depthTexture.needsUpdate = !0),
                        N(l.depthTexture, 0);
                        const c = o.get(l.depthTexture).__webglTexture;
                        if (l.depthTexture.format === r.v)
                            t.framebufferTexture2D(t.FRAMEBUFFER, t.DEPTH_ATTACHMENT, t.TEXTURE_2D, c, 0);
                        else {
                            if (l.depthTexture.format !== r.w)
                                throw new Error("Unknown depthTexture format");
                            t.framebufferTexture2D(t.FRAMEBUFFER, t.DEPTH_STENCIL_ATTACHMENT, t.TEXTURE_2D, c, 0)
                        }
                    }(l.__webglFramebuffer, e)
                } else if (c) {
                    l.__webglDepthbuffer = [];
                    for (let i = 0; i < 6; i++)
                        n.bindFramebuffer(t.FRAMEBUFFER, l.__webglFramebuffer[i]),
                        l.__webglDepthbuffer[i] = t.createRenderbuffer(),
                        H(l.__webglDepthbuffer[i], e, !1)
                } else
                    n.bindFramebuffer(t.FRAMEBUFFER, l.__webglFramebuffer),
                    l.__webglDepthbuffer = t.createRenderbuffer(),
                    H(l.__webglDepthbuffer, e, !1);
                n.bindFramebuffer(t.FRAMEBUFFER, null)
            }
            function V(t) {
                return d && t.isWebGLMultisampleRenderTarget ? Math.min(_, t.samples) : 0
            }
            let W = !1
              , j = !1;
            this.allocateTextureUnit = function() {
                const t = D;
                return t >= f && console.warn("THREE.WebGLTextures: Trying to use " + t + " texture units while this GPU supports only " + f),
                D += 1,
                t
            }
            ,
            this.resetTextureUnits = function() {
                D = 0
            }
            ,
            this.setTexture2D = N,
            this.setTexture2DArray = function(e, slot) {
                const r = o.get(e);
                e.version > 0 && r.__version !== e.version ? B(r, e, slot) : (n.activeTexture(t.TEXTURE0 + slot),
                n.bindTexture(t.TEXTURE_2D_ARRAY, r.__webglTexture))
            }
            ,
            this.setTexture3D = function(e, slot) {
                const r = o.get(e);
                e.version > 0 && r.__version !== e.version ? B(r, e, slot) : (n.activeTexture(t.TEXTURE0 + slot),
                n.bindTexture(t.TEXTURE_3D, r.__webglTexture))
            }
            ,
            this.setTextureCube = I,
            this.setupRenderTarget = function(e) {
                const f = e.texture
                  , m = o.get(e)
                  , v = o.get(f);
                e.addEventListener("dispose", P),
                !0 !== e.isWebGLMultipleRenderTargets && (v.__webglTexture = t.createTexture(),
                v.__version = f.version,
                h.memory.textures++);
                const _ = !0 === e.isWebGLCubeRenderTarget
                  , x = !0 === e.isWebGLMultipleRenderTargets
                  , y = !0 === e.isWebGLMultisampleRenderTarget
                  , M = f.isDataTexture3D || f.isDataTexture2DArray
                  , w = T(e) || d;
                if (!d || f.format !== r.Ub || f.type !== r.E && f.type !== r.K || (f.format = r.ub,
                console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),
                _) {
                    m.__webglFramebuffer = [];
                    for (let i = 0; i < 6; i++)
                        m.__webglFramebuffer[i] = t.createFramebuffer()
                } else if (m.__webglFramebuffer = t.createFramebuffer(),
                x)
                    if (l.drawBuffers) {
                        const n = e.texture;
                        for (let i = 0, e = n.length; i < e; i++) {
                            const e = o.get(n[i]);
                            void 0 === e.__webglTexture && (e.__webglTexture = t.createTexture(),
                            h.memory.textures++)
                        }
                    } else
                        console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
                else if (y)
                    if (d) {
                        m.__webglMultisampledFramebuffer = t.createFramebuffer(),
                        m.__webglColorRenderbuffer = t.createRenderbuffer(),
                        t.bindRenderbuffer(t.RENDERBUFFER, m.__webglColorRenderbuffer);
                        const r = c.convert(f.format)
                          , o = c.convert(f.type)
                          , l = L(f.internalFormat, r, o, f.encoding)
                          , h = V(e);
                        t.renderbufferStorageMultisample(t.RENDERBUFFER, h, l, e.width, e.height),
                        n.bindFramebuffer(t.FRAMEBUFFER, m.__webglMultisampledFramebuffer),
                        t.framebufferRenderbuffer(t.FRAMEBUFFER, t.COLOR_ATTACHMENT0, t.RENDERBUFFER, m.__webglColorRenderbuffer),
                        t.bindRenderbuffer(t.RENDERBUFFER, null),
                        e.depthBuffer && (m.__webglDepthRenderbuffer = t.createRenderbuffer(),
                        H(m.__webglDepthRenderbuffer, e, !0)),
                        n.bindFramebuffer(t.FRAMEBUFFER, null)
                    } else
                        console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
                if (_) {
                    n.bindTexture(t.TEXTURE_CUBE_MAP, v.__webglTexture),
                    U(t.TEXTURE_CUBE_MAP, f, w);
                    for (let i = 0; i < 6; i++)
                        G(m.__webglFramebuffer[i], e, f, t.COLOR_ATTACHMENT0, t.TEXTURE_CUBE_MAP_POSITIVE_X + i);
                    E(f, w) && A(t.TEXTURE_CUBE_MAP, f, e.width, e.height),
                    n.unbindTexture()
                } else if (x) {
                    const r = e.texture;
                    for (let i = 0, l = r.length; i < l; i++) {
                        const l = r[i]
                          , c = o.get(l);
                        n.bindTexture(t.TEXTURE_2D, c.__webglTexture),
                        U(t.TEXTURE_2D, l, w),
                        G(m.__webglFramebuffer, e, l, t.COLOR_ATTACHMENT0 + i, t.TEXTURE_2D),
                        E(l, w) && A(t.TEXTURE_2D, l, e.width, e.height)
                    }
                    n.unbindTexture()
                } else {
                    let r = t.TEXTURE_2D;
                    if (M)
                        if (d) {
                            r = f.isDataTexture3D ? t.TEXTURE_3D : t.TEXTURE_2D_ARRAY
                        } else
                            console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.");
                    n.bindTexture(r, v.__webglTexture),
                    U(r, f, w),
                    G(m.__webglFramebuffer, e, f, t.COLOR_ATTACHMENT0, r),
                    E(f, w) && A(r, f, e.width, e.height, e.depth),
                    n.unbindTexture()
                }
                e.depthBuffer && k(e)
            }
            ,
            this.updateRenderTargetMipmap = function(e) {
                const r = T(e) || d
                  , l = !0 === e.isWebGLMultipleRenderTargets ? e.texture : [e.texture];
                for (let i = 0, c = l.length; i < c; i++) {
                    const c = l[i];
                    if (E(c, r)) {
                        const r = e.isWebGLCubeRenderTarget ? t.TEXTURE_CUBE_MAP : t.TEXTURE_2D
                          , l = o.get(c).__webglTexture;
                        n.bindTexture(r, l),
                        A(r, c, e.width, e.height),
                        n.unbindTexture()
                    }
                }
            }
            ,
            this.updateMultisampleRenderTarget = function(e) {
                if (e.isWebGLMultisampleRenderTarget)
                    if (d) {
                        const r = e.width
                          , l = e.height;
                        let mask = t.COLOR_BUFFER_BIT;
                        e.depthBuffer && (mask |= t.DEPTH_BUFFER_BIT),
                        e.stencilBuffer && (mask |= t.STENCIL_BUFFER_BIT);
                        const c = o.get(e);
                        n.bindFramebuffer(t.READ_FRAMEBUFFER, c.__webglMultisampledFramebuffer),
                        n.bindFramebuffer(t.DRAW_FRAMEBUFFER, c.__webglFramebuffer),
                        t.blitFramebuffer(0, 0, r, l, 0, 0, r, l, mask, t.NEAREST),
                        n.bindFramebuffer(t.READ_FRAMEBUFFER, null),
                        n.bindFramebuffer(t.DRAW_FRAMEBUFFER, c.__webglMultisampledFramebuffer)
                    } else
                        console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")
            }
            ,
            this.safeSetTexture2D = function(t, slot) {
                t && t.isWebGLRenderTarget && (!1 === W && (console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),
                W = !0),
                t = t.texture),
                N(t, slot)
            }
            ,
            this.safeSetTextureCube = function(t, slot) {
                t && t.isWebGLCubeRenderTarget && (!1 === j && (console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),
                j = !0),
                t = t.texture),
                I(t, slot)
            }
        }
        function Dn(t, e, n) {
            const o = n.isWebGL2;
            return {
                convert: function(p) {
                    let n;
                    if (p === r.Hc)
                        return t.UNSIGNED_BYTE;
                    if (p === r.Kc)
                        return t.UNSIGNED_SHORT_4_4_4_4;
                    if (p === r.Lc)
                        return t.UNSIGNED_SHORT_5_5_5_1;
                    if (p === r.Mc)
                        return t.UNSIGNED_SHORT_5_6_5;
                    if (p === r.j)
                        return t.BYTE;
                    if (p === r.yc)
                        return t.SHORT;
                    if (p === r.Nc)
                        return t.UNSIGNED_SHORT;
                    if (p === r.L)
                        return t.INT;
                    if (p === r.Jc)
                        return t.UNSIGNED_INT;
                    if (p === r.E)
                        return t.FLOAT;
                    if (p === r.K)
                        return o ? t.HALF_FLOAT : (n = e.get("OES_texture_half_float"),
                        null !== n ? n.HALF_FLOAT_OES : null);
                    if (p === r.e)
                        return t.ALPHA;
                    if (p === r.Ub)
                        return t.RGB;
                    if (p === r.ub)
                        return t.RGBA;
                    if (p === r.W)
                        return t.LUMINANCE;
                    if (p === r.V)
                        return t.LUMINANCE_ALPHA;
                    if (p === r.v)
                        return t.DEPTH_COMPONENT;
                    if (p === r.w)
                        return t.DEPTH_STENCIL;
                    if (p === r.fc)
                        return t.RED;
                    if (p === r.gc)
                        return t.RED_INTEGER;
                    if (p === r.dc)
                        return t.RG;
                    if (p === r.ec)
                        return t.RG_INTEGER;
                    if (p === r.Vb)
                        return t.RGB_INTEGER;
                    if (p === r.vb)
                        return t.RGBA_INTEGER;
                    if (p === r.cc || p === r.Ob || p === r.Pb || p === r.Qb) {
                        if (n = e.get("WEBGL_compressed_texture_s3tc"),
                        null === n)
                            return null;
                        if (p === r.cc)
                            return n.COMPRESSED_RGB_S3TC_DXT1_EXT;
                        if (p === r.Ob)
                            return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                        if (p === r.Pb)
                            return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                        if (p === r.Qb)
                            return n.COMPRESSED_RGBA_S3TC_DXT5_EXT
                    }
                    if (p === r.bc || p === r.ac || p === r.Nb || p === r.Mb) {
                        if (n = e.get("WEBGL_compressed_texture_pvrtc"),
                        null === n)
                            return null;
                        if (p === r.bc)
                            return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                        if (p === r.ac)
                            return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                        if (p === r.Nb)
                            return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                        if (p === r.Mb)
                            return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
                    }
                    if (p === r.Yb)
                        return n = e.get("WEBGL_compressed_texture_etc1"),
                        null !== n ? n.COMPRESSED_RGB_ETC1_WEBGL : null;
                    if ((p === r.Zb || p === r.Lb) && (n = e.get("WEBGL_compressed_texture_etc"),
                    null !== n)) {
                        if (p === r.Zb)
                            return n.COMPRESSED_RGB8_ETC2;
                        if (p === r.Lb)
                            return n.COMPRESSED_RGBA8_ETC2_EAC
                    }
                    return p === r.Cb || p === r.Db || p === r.Eb || p === r.Fb || p === r.Gb || p === r.Hb || p === r.Ib || p === r.Jb || p === r.xb || p === r.yb || p === r.zb || p === r.wb || p === r.Ab || p === r.Bb || p === r.qc || p === r.rc || p === r.sc || p === r.tc || p === r.uc || p === r.vc || p === r.wc || p === r.xc || p === r.lc || p === r.mc || p === r.nc || p === r.kc || p === r.oc || p === r.pc ? (n = e.get("WEBGL_compressed_texture_astc"),
                    null !== n ? p : null) : p === r.Kb ? (n = e.get("EXT_texture_compression_bptc"),
                    null !== n ? p : null) : p === r.Ic ? o ? t.UNSIGNED_INT_24_8 : (n = e.get("WEBGL_depth_texture"),
                    null !== n ? n.UNSIGNED_INT_24_8_WEBGL : null) : void 0
                }
            }
        }
        class Nn extends J.a {
            constructor(t=[]) {
                super(),
                this.cameras = t
            }
        }
        Nn.prototype.isArrayCamera = !0;
        class In extends Z.a {
            constructor() {
                super(),
                this.type = "Group"
            }
        }
        In.prototype.isGroup = !0;
        const On = {
            type: "move"
        };
        class Fn {
            constructor() {
                this._targetRay = null,
                this._grip = null,
                this._hand = null
            }
            getHandSpace() {
                return null === this._hand && (this._hand = new In,
                this._hand.matrixAutoUpdate = !1,
                this._hand.visible = !1,
                this._hand.joints = {},
                this._hand.inputState = {
                    pinching: !1
                }),
                this._hand
            }
            getTargetRaySpace() {
                return null === this._targetRay && (this._targetRay = new In,
                this._targetRay.matrixAutoUpdate = !1,
                this._targetRay.visible = !1,
                this._targetRay.hasLinearVelocity = !1,
                this._targetRay.linearVelocity = new o.a,
                this._targetRay.hasAngularVelocity = !1,
                this._targetRay.angularVelocity = new o.a),
                this._targetRay
            }
            getGripSpace() {
                return null === this._grip && (this._grip = new In,
                this._grip.matrixAutoUpdate = !1,
                this._grip.visible = !1,
                this._grip.hasLinearVelocity = !1,
                this._grip.linearVelocity = new o.a,
                this._grip.hasAngularVelocity = !1,
                this._grip.angularVelocity = new o.a),
                this._grip
            }
            dispatchEvent(t) {
                return null !== this._targetRay && this._targetRay.dispatchEvent(t),
                null !== this._grip && this._grip.dispatchEvent(t),
                null !== this._hand && this._hand.dispatchEvent(t),
                this
            }
            disconnect(t) {
                return this.dispatchEvent({
                    type: "disconnected",
                    data: t
                }),
                null !== this._targetRay && (this._targetRay.visible = !1),
                null !== this._grip && (this._grip.visible = !1),
                null !== this._hand && (this._hand.visible = !1),
                this
            }
            update(t, e, n) {
                let r = null
                  , o = null
                  , l = null;
                const c = this._targetRay
                  , h = this._grip
                  , d = this._hand;
                if (t && "visible-blurred" !== e.session.visibilityState)
                    if (null !== c && (r = e.getPose(t.targetRaySpace, n),
                    null !== r && (c.matrix.fromArray(r.transform.matrix),
                    c.matrix.decompose(c.position, c.rotation, c.scale),
                    r.linearVelocity ? (c.hasLinearVelocity = !0,
                    c.linearVelocity.copy(r.linearVelocity)) : c.hasLinearVelocity = !1,
                    r.angularVelocity ? (c.hasAngularVelocity = !0,
                    c.angularVelocity.copy(r.angularVelocity)) : c.hasAngularVelocity = !1,
                    this.dispatchEvent(On))),
                    d && t.hand) {
                        l = !0;
                        for (const r of t.hand.values()) {
                            const t = e.getJointPose(r, n);
                            if (void 0 === d.joints[r.jointName]) {
                                const t = new In;
                                t.matrixAutoUpdate = !1,
                                t.visible = !1,
                                d.joints[r.jointName] = t,
                                d.add(t)
                            }
                            const o = d.joints[r.jointName];
                            null !== t && (o.matrix.fromArray(t.transform.matrix),
                            o.matrix.decompose(o.position, o.rotation, o.scale),
                            o.jointRadius = t.radius),
                            o.visible = null !== t
                        }
                        const r = d.joints["index-finger-tip"]
                          , o = d.joints["thumb-tip"]
                          , c = r.position.distanceTo(o.position)
                          , h = .02
                          , f = .005;
                        d.inputState.pinching && c > h + f ? (d.inputState.pinching = !1,
                        this.dispatchEvent({
                            type: "pinchend",
                            handedness: t.handedness,
                            target: this
                        })) : !d.inputState.pinching && c <= h - f && (d.inputState.pinching = !0,
                        this.dispatchEvent({
                            type: "pinchstart",
                            handedness: t.handedness,
                            target: this
                        }))
                    } else
                        null !== h && t.gripSpace && (o = e.getPose(t.gripSpace, n),
                        null !== o && (h.matrix.fromArray(o.transform.matrix),
                        h.matrix.decompose(h.position, h.rotation, h.scale),
                        o.linearVelocity ? (h.hasLinearVelocity = !0,
                        h.linearVelocity.copy(o.linearVelocity)) : h.hasLinearVelocity = !1,
                        o.angularVelocity ? (h.hasAngularVelocity = !0,
                        h.angularVelocity.copy(o.angularVelocity)) : h.hasAngularVelocity = !1));
                return null !== c && (c.visible = null !== r),
                null !== h && (h.visible = null !== o),
                null !== d && (d.visible = null !== l),
                this
            }
        }
        class Un extends j.a {
            constructor(t, e) {
                super();
                const n = this
                  , r = t.state;
                let l = null
                  , c = 1
                  , h = null
                  , d = "local-floor"
                  , f = null
                  , m = null
                  , v = null
                  , _ = null
                  , x = null
                  , y = !1
                  , S = null
                  , T = null
                  , E = null
                  , A = null
                  , L = null
                  , R = null;
                const C = []
                  , P = new Map
                  , D = new J.a;
                D.layers.enable(1),
                D.viewport = new M.a;
                const N = new J.a;
                N.layers.enable(2),
                N.viewport = new M.a;
                const I = [D, N]
                  , O = new Nn;
                O.layers.enable(1),
                O.layers.enable(2);
                let F = null
                  , U = null;
                function z(t) {
                    const e = P.get(t.inputSource);
                    e && e.dispatchEvent({
                        type: t.type,
                        data: t.inputSource
                    })
                }
                function B() {
                    P.forEach((function(t, e) {
                        t.disconnect(e)
                    }
                    )),
                    P.clear(),
                    F = null,
                    U = null,
                    r.bindXRFramebuffer(null),
                    t.setRenderTarget(t.getRenderTarget()),
                    v && e.deleteFramebuffer(v),
                    S && e.deleteFramebuffer(S),
                    T && e.deleteRenderbuffer(T),
                    E && e.deleteRenderbuffer(E),
                    v = null,
                    S = null,
                    T = null,
                    E = null,
                    x = null,
                    _ = null,
                    m = null,
                    l = null,
                    j.stop(),
                    n.isPresenting = !1,
                    n.dispatchEvent({
                        type: "sessionend"
                    })
                }
                function G(t) {
                    const e = l.inputSources;
                    for (let i = 0; i < C.length; i++)
                        P.set(e[i], C[i]);
                    for (let i = 0; i < t.removed.length; i++) {
                        const e = t.removed[i]
                          , n = P.get(e);
                        n && (n.dispatchEvent({
                            type: "disconnected",
                            data: e
                        }),
                        P.delete(e))
                    }
                    for (let i = 0; i < t.added.length; i++) {
                        const e = t.added[i]
                          , n = P.get(e);
                        n && n.dispatchEvent({
                            type: "connected",
                            data: e
                        })
                    }
                }
                this.cameraAutoUpdate = !0,
                this.enabled = !1,
                this.isPresenting = !1,
                this.getController = function(t) {
                    let e = C[t];
                    return void 0 === e && (e = new Fn,
                    C[t] = e),
                    e.getTargetRaySpace()
                }
                ,
                this.getControllerGrip = function(t) {
                    let e = C[t];
                    return void 0 === e && (e = new Fn,
                    C[t] = e),
                    e.getGripSpace()
                }
                ,
                this.getHand = function(t) {
                    let e = C[t];
                    return void 0 === e && (e = new Fn,
                    C[t] = e),
                    e.getHandSpace()
                }
                ,
                this.setFramebufferScaleFactor = function(t) {
                    c = t,
                    !0 === n.isPresenting && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")
                }
                ,
                this.setReferenceSpaceType = function(t) {
                    d = t,
                    !0 === n.isPresenting && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")
                }
                ,
                this.getReferenceSpace = function() {
                    return h
                }
                ,
                this.getBaseLayer = function() {
                    return null !== _ ? _ : x
                }
                ,
                this.getBinding = function() {
                    return m
                }
                ,
                this.getFrame = function() {
                    return A
                }
                ,
                this.getSession = function() {
                    return l
                }
                ,
                this.setSession = async function(t) {
                    if (l = t,
                    null !== l) {
                        l.addEventListener("select", z),
                        l.addEventListener("selectstart", z),
                        l.addEventListener("selectend", z),
                        l.addEventListener("squeeze", z),
                        l.addEventListener("squeezestart", z),
                        l.addEventListener("squeezeend", z),
                        l.addEventListener("end", B),
                        l.addEventListener("inputsourceschange", G);
                        const t = e.getContextAttributes();
                        if (!0 !== t.xrCompatible && await e.makeXRCompatible(),
                        void 0 === l.renderState.layers) {
                            const n = {
                                antialias: t.antialias,
                                alpha: t.alpha,
                                depth: t.depth,
                                stencil: t.stencil,
                                framebufferScaleFactor: c
                            };
                            x = new XRWebGLLayer(l,e,n),
                            l.updateRenderState({
                                baseLayer: x
                            })
                        } else if (e instanceof WebGLRenderingContext) {
                            const n = {
                                antialias: !0,
                                alpha: t.alpha,
                                depth: t.depth,
                                stencil: t.stencil,
                                framebufferScaleFactor: c
                            };
                            x = new XRWebGLLayer(l,e,n),
                            l.updateRenderState({
                                layers: [x]
                            })
                        } else {
                            y = t.antialias;
                            let n = null;
                            t.depth && (R = e.DEPTH_BUFFER_BIT,
                            t.stencil && (R |= e.STENCIL_BUFFER_BIT),
                            L = t.stencil ? e.DEPTH_STENCIL_ATTACHMENT : e.DEPTH_ATTACHMENT,
                            n = t.stencil ? e.DEPTH24_STENCIL8 : e.DEPTH_COMPONENT24);
                            const o = {
                                colorFormat: t.alpha ? e.RGBA8 : e.RGB8,
                                depthFormat: n,
                                scaleFactor: c
                            };
                            m = new XRWebGLBinding(l,e),
                            _ = m.createProjectionLayer(o),
                            v = e.createFramebuffer(),
                            l.updateRenderState({
                                layers: [_]
                            }),
                            y && (S = e.createFramebuffer(),
                            T = e.createRenderbuffer(),
                            e.bindRenderbuffer(e.RENDERBUFFER, T),
                            e.renderbufferStorageMultisample(e.RENDERBUFFER, 4, e.RGBA8, _.textureWidth, _.textureHeight),
                            r.bindFramebuffer(e.FRAMEBUFFER, S),
                            e.framebufferRenderbuffer(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.RENDERBUFFER, T),
                            e.bindRenderbuffer(e.RENDERBUFFER, null),
                            null !== n && (E = e.createRenderbuffer(),
                            e.bindRenderbuffer(e.RENDERBUFFER, E),
                            e.renderbufferStorageMultisample(e.RENDERBUFFER, 4, n, _.textureWidth, _.textureHeight),
                            e.framebufferRenderbuffer(e.FRAMEBUFFER, L, e.RENDERBUFFER, E),
                            e.bindRenderbuffer(e.RENDERBUFFER, null)),
                            r.bindFramebuffer(e.FRAMEBUFFER, null))
                        }
                        h = await l.requestReferenceSpace(d),
                        j.setContext(l),
                        j.start(),
                        n.isPresenting = !0,
                        n.dispatchEvent({
                            type: "sessionstart"
                        })
                    }
                }
                ;
                const H = new o.a
                  , k = new o.a;
                function V(t, e) {
                    null === e ? t.matrixWorld.copy(t.matrix) : t.matrixWorld.multiplyMatrices(e.matrixWorld, t.matrix),
                    t.matrixWorldInverse.copy(t.matrixWorld).invert()
                }
                this.updateCamera = function(t) {
                    if (null === l)
                        return;
                    O.near = N.near = D.near = t.near,
                    O.far = N.far = D.far = t.far,
                    F === O.near && U === O.far || (l.updateRenderState({
                        depthNear: O.near,
                        depthFar: O.far
                    }),
                    F = O.near,
                    U = O.far);
                    const e = t.parent
                      , n = O.cameras;
                    V(O, e);
                    for (let i = 0; i < n.length; i++)
                        V(n[i], e);
                    O.matrixWorld.decompose(O.position, O.quaternion, O.scale),
                    t.position.copy(O.position),
                    t.quaternion.copy(O.quaternion),
                    t.scale.copy(O.scale),
                    t.matrix.copy(O.matrix),
                    t.matrixWorld.copy(O.matrixWorld);
                    const r = t.children;
                    for (let i = 0, t = r.length; i < t; i++)
                        r[i].updateMatrixWorld(!0);
                    2 === n.length ? function(t, e, n) {
                        H.setFromMatrixPosition(e.matrixWorld),
                        k.setFromMatrixPosition(n.matrixWorld);
                        const r = H.distanceTo(k)
                          , o = e.projectionMatrix.elements
                          , l = n.projectionMatrix.elements
                          , c = o[14] / (o[10] - 1)
                          , h = o[14] / (o[10] + 1)
                          , d = (o[9] + 1) / o[5]
                          , f = (o[9] - 1) / o[5]
                          , m = (o[8] - 1) / o[0]
                          , v = (l[8] + 1) / l[0]
                          , _ = c * m
                          , x = c * v
                          , y = r / (-m + v)
                          , M = y * -m;
                        e.matrixWorld.decompose(t.position, t.quaternion, t.scale),
                        t.translateX(M),
                        t.translateZ(y),
                        t.matrixWorld.compose(t.position, t.quaternion, t.scale),
                        t.matrixWorldInverse.copy(t.matrixWorld).invert();
                        const w = c + y
                          , S = h + y
                          , T = _ - M
                          , E = x + (r - M)
                          , A = d * h / S * w
                          , L = f * h / S * w;
                        t.projectionMatrix.makePerspective(T, E, A, L, w, S)
                    }(O, D, N) : O.projectionMatrix.copy(D.projectionMatrix)
                }
                ,
                this.getCamera = function() {
                    return O
                }
                ,
                this.getFoveation = function() {
                    return null !== _ ? _.fixedFoveation : null !== x ? x.fixedFoveation : void 0
                }
                ,
                this.setFoveation = function(t) {
                    null !== _ && (_.fixedFoveation = t),
                    null !== x && void 0 !== x.fixedFoveation && (x.fixedFoveation = t)
                }
                ;
                let W = null;
                const j = new w;
                j.setAnimationLoop((function(time, t) {
                    if (f = t.getViewerPose(h),
                    A = t,
                    null !== f) {
                        const t = f.views;
                        null !== x && r.bindXRFramebuffer(x.framebuffer);
                        let n = !1;
                        t.length !== O.cameras.length && (O.cameras.length = 0,
                        n = !0);
                        for (let i = 0; i < t.length; i++) {
                            const view = t[i];
                            let o = null;
                            if (null !== x)
                                o = x.getViewport(view);
                            else {
                                const t = m.getViewSubImage(_, view);
                                r.bindXRFramebuffer(v),
                                void 0 !== t.depthStencilTexture && e.framebufferTexture2D(e.FRAMEBUFFER, L, e.TEXTURE_2D, t.depthStencilTexture, 0),
                                e.framebufferTexture2D(e.FRAMEBUFFER, e.COLOR_ATTACHMENT0, e.TEXTURE_2D, t.colorTexture, 0),
                                o = t.viewport
                            }
                            const l = I[i];
                            l.matrix.fromArray(view.transform.matrix),
                            l.projectionMatrix.fromArray(view.projectionMatrix),
                            l.viewport.set(o.x, o.y, o.width, o.height),
                            0 === i && O.matrix.copy(l.matrix),
                            !0 === n && O.cameras.push(l)
                        }
                        y && (r.bindXRFramebuffer(S),
                        null !== R && e.clear(R))
                    }
                    const n = l.inputSources;
                    for (let i = 0; i < C.length; i++) {
                        const e = C[i]
                          , r = n[i];
                        e.update(r, t, h)
                    }
                    if (W && W(time, t),
                    y) {
                        const t = _.textureWidth
                          , n = _.textureHeight;
                        r.bindFramebuffer(e.READ_FRAMEBUFFER, S),
                        r.bindFramebuffer(e.DRAW_FRAMEBUFFER, v),
                        e.invalidateFramebuffer(e.READ_FRAMEBUFFER, [L]),
                        e.invalidateFramebuffer(e.DRAW_FRAMEBUFFER, [L]),
                        e.blitFramebuffer(0, 0, t, n, 0, 0, t, n, e.COLOR_BUFFER_BIT, e.NEAREST),
                        e.invalidateFramebuffer(e.READ_FRAMEBUFFER, [e.COLOR_ATTACHMENT0]),
                        r.bindFramebuffer(e.READ_FRAMEBUFFER, null),
                        r.bindFramebuffer(e.DRAW_FRAMEBUFFER, null),
                        r.bindFramebuffer(e.FRAMEBUFFER, S)
                    }
                    A = null
                }
                )),
                this.setAnimationLoop = function(t) {
                    W = t
                }
                ,
                this.dispose = function() {}
            }
        }
        function zn(t) {
            function e(e, n) {
                e.opacity.value = n.opacity,
                n.color && e.diffuse.value.copy(n.color),
                n.emissive && e.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity),
                n.map && (e.map.value = n.map),
                n.alphaMap && (e.alphaMap.value = n.alphaMap),
                n.specularMap && (e.specularMap.value = n.specularMap),
                n.alphaTest > 0 && (e.alphaTest.value = n.alphaTest);
                const r = t.get(n).envMap;
                if (r) {
                    e.envMap.value = r,
                    e.flipEnvMap.value = r.isCubeTexture && !1 === r.isRenderTargetTexture ? -1 : 1,
                    e.reflectivity.value = n.reflectivity,
                    e.ior.value = n.ior,
                    e.refractionRatio.value = n.refractionRatio;
                    const o = t.get(r).__maxMipLevel;
                    void 0 !== o && (e.maxMipLevel.value = o)
                }
                let o, l;
                n.lightMap && (e.lightMap.value = n.lightMap,
                e.lightMapIntensity.value = n.lightMapIntensity),
                n.aoMap && (e.aoMap.value = n.aoMap,
                e.aoMapIntensity.value = n.aoMapIntensity),
                n.map ? o = n.map : n.specularMap ? o = n.specularMap : n.displacementMap ? o = n.displacementMap : n.normalMap ? o = n.normalMap : n.bumpMap ? o = n.bumpMap : n.roughnessMap ? o = n.roughnessMap : n.metalnessMap ? o = n.metalnessMap : n.alphaMap ? o = n.alphaMap : n.emissiveMap ? o = n.emissiveMap : n.clearcoatMap ? o = n.clearcoatMap : n.clearcoatNormalMap ? o = n.clearcoatNormalMap : n.clearcoatRoughnessMap ? o = n.clearcoatRoughnessMap : n.specularIntensityMap ? o = n.specularIntensityMap : n.specularColorMap ? o = n.specularColorMap : n.transmissionMap ? o = n.transmissionMap : n.thicknessMap ? o = n.thicknessMap : n.sheenColorMap ? o = n.sheenColorMap : n.sheenRoughnessMap && (o = n.sheenRoughnessMap),
                void 0 !== o && (o.isWebGLRenderTarget && (o = o.texture),
                !0 === o.matrixAutoUpdate && o.updateMatrix(),
                e.uvTransform.value.copy(o.matrix)),
                n.aoMap ? l = n.aoMap : n.lightMap && (l = n.lightMap),
                void 0 !== l && (l.isWebGLRenderTarget && (l = l.texture),
                !0 === l.matrixAutoUpdate && l.updateMatrix(),
                e.uv2Transform.value.copy(l.matrix))
            }
            function n(e, n) {
                e.roughness.value = n.roughness,
                e.metalness.value = n.metalness,
                n.roughnessMap && (e.roughnessMap.value = n.roughnessMap),
                n.metalnessMap && (e.metalnessMap.value = n.metalnessMap),
                n.emissiveMap && (e.emissiveMap.value = n.emissiveMap),
                n.bumpMap && (e.bumpMap.value = n.bumpMap,
                e.bumpScale.value = n.bumpScale,
                n.side === r.h && (e.bumpScale.value *= -1)),
                n.normalMap && (e.normalMap.value = n.normalMap,
                e.normalScale.value.copy(n.normalScale),
                n.side === r.h && e.normalScale.value.negate()),
                n.displacementMap && (e.displacementMap.value = n.displacementMap,
                e.displacementScale.value = n.displacementScale,
                e.displacementBias.value = n.displacementBias);
                t.get(n).envMap && (e.envMapIntensity.value = n.envMapIntensity)
            }
            return {
                refreshFogUniforms: function(t, e) {
                    t.fogColor.value.copy(e.color),
                    e.isFog ? (t.fogNear.value = e.near,
                    t.fogFar.value = e.far) : e.isFogExp2 && (t.fogDensity.value = e.density)
                },
                refreshMaterialUniforms: function(t, o, l, c, h) {
                    o.isMeshBasicMaterial ? e(t, o) : o.isMeshLambertMaterial ? (e(t, o),
                    function(t, e) {
                        e.emissiveMap && (t.emissiveMap.value = e.emissiveMap)
                    }(t, o)) : o.isMeshToonMaterial ? (e(t, o),
                    function(t, e) {
                        e.gradientMap && (t.gradientMap.value = e.gradientMap);
                        e.emissiveMap && (t.emissiveMap.value = e.emissiveMap);
                        e.bumpMap && (t.bumpMap.value = e.bumpMap,
                        t.bumpScale.value = e.bumpScale,
                        e.side === r.h && (t.bumpScale.value *= -1));
                        e.normalMap && (t.normalMap.value = e.normalMap,
                        t.normalScale.value.copy(e.normalScale),
                        e.side === r.h && t.normalScale.value.negate());
                        e.displacementMap && (t.displacementMap.value = e.displacementMap,
                        t.displacementScale.value = e.displacementScale,
                        t.displacementBias.value = e.displacementBias)
                    }(t, o)) : o.isMeshPhongMaterial ? (e(t, o),
                    function(t, e) {
                        t.specular.value.copy(e.specular),
                        t.shininess.value = Math.max(e.shininess, 1e-4),
                        e.emissiveMap && (t.emissiveMap.value = e.emissiveMap);
                        e.bumpMap && (t.bumpMap.value = e.bumpMap,
                        t.bumpScale.value = e.bumpScale,
                        e.side === r.h && (t.bumpScale.value *= -1));
                        e.normalMap && (t.normalMap.value = e.normalMap,
                        t.normalScale.value.copy(e.normalScale),
                        e.side === r.h && t.normalScale.value.negate());
                        e.displacementMap && (t.displacementMap.value = e.displacementMap,
                        t.displacementScale.value = e.displacementScale,
                        t.displacementBias.value = e.displacementBias)
                    }(t, o)) : o.isMeshStandardMaterial ? (e(t, o),
                    o.isMeshPhysicalMaterial ? function(t, e, o) {
                        n(t, e),
                        t.ior.value = e.ior,
                        e.sheen > 0 && (t.sheenColor.value.copy(e.sheenColor).multiplyScalar(e.sheen),
                        t.sheenRoughness.value = e.sheenRoughness,
                        e.sheenColorMap && (t.sheenColorMap.value = e.sheenColorMap),
                        e.sheenRoughnessMap && (t.sheenRoughnessMap.value = e.sheenRoughnessMap));
                        e.clearcoat > 0 && (t.clearcoat.value = e.clearcoat,
                        t.clearcoatRoughness.value = e.clearcoatRoughness,
                        e.clearcoatMap && (t.clearcoatMap.value = e.clearcoatMap),
                        e.clearcoatRoughnessMap && (t.clearcoatRoughnessMap.value = e.clearcoatRoughnessMap),
                        e.clearcoatNormalMap && (t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),
                        t.clearcoatNormalMap.value = e.clearcoatNormalMap,
                        e.side === r.h && t.clearcoatNormalScale.value.negate()));
                        e.transmission > 0 && (t.transmission.value = e.transmission,
                        t.transmissionSamplerMap.value = o.texture,
                        t.transmissionSamplerSize.value.set(o.width, o.height),
                        e.transmissionMap && (t.transmissionMap.value = e.transmissionMap),
                        t.thickness.value = e.thickness,
                        e.thicknessMap && (t.thicknessMap.value = e.thicknessMap),
                        t.attenuationDistance.value = e.attenuationDistance,
                        t.attenuationColor.value.copy(e.attenuationColor));
                        t.specularIntensity.value = e.specularIntensity,
                        t.specularColor.value.copy(e.specularColor),
                        e.specularIntensityMap && (t.specularIntensityMap.value = e.specularIntensityMap);
                        e.specularColorMap && (t.specularColorMap.value = e.specularColorMap)
                    }(t, o, h) : n(t, o)) : o.isMeshMatcapMaterial ? (e(t, o),
                    function(t, e) {
                        e.matcap && (t.matcap.value = e.matcap);
                        e.bumpMap && (t.bumpMap.value = e.bumpMap,
                        t.bumpScale.value = e.bumpScale,
                        e.side === r.h && (t.bumpScale.value *= -1));
                        e.normalMap && (t.normalMap.value = e.normalMap,
                        t.normalScale.value.copy(e.normalScale),
                        e.side === r.h && t.normalScale.value.negate());
                        e.displacementMap && (t.displacementMap.value = e.displacementMap,
                        t.displacementScale.value = e.displacementScale,
                        t.displacementBias.value = e.displacementBias)
                    }(t, o)) : o.isMeshDepthMaterial ? (e(t, o),
                    function(t, e) {
                        e.displacementMap && (t.displacementMap.value = e.displacementMap,
                        t.displacementScale.value = e.displacementScale,
                        t.displacementBias.value = e.displacementBias)
                    }(t, o)) : o.isMeshDistanceMaterial ? (e(t, o),
                    function(t, e) {
                        e.displacementMap && (t.displacementMap.value = e.displacementMap,
                        t.displacementScale.value = e.displacementScale,
                        t.displacementBias.value = e.displacementBias);
                        t.referencePosition.value.copy(e.referencePosition),
                        t.nearDistance.value = e.nearDistance,
                        t.farDistance.value = e.farDistance
                    }(t, o)) : o.isMeshNormalMaterial ? (e(t, o),
                    function(t, e) {
                        e.bumpMap && (t.bumpMap.value = e.bumpMap,
                        t.bumpScale.value = e.bumpScale,
                        e.side === r.h && (t.bumpScale.value *= -1));
                        e.normalMap && (t.normalMap.value = e.normalMap,
                        t.normalScale.value.copy(e.normalScale),
                        e.side === r.h && t.normalScale.value.negate());
                        e.displacementMap && (t.displacementMap.value = e.displacementMap,
                        t.displacementScale.value = e.displacementScale,
                        t.displacementBias.value = e.displacementBias)
                    }(t, o)) : o.isLineBasicMaterial ? (function(t, e) {
                        t.diffuse.value.copy(e.color),
                        t.opacity.value = e.opacity
                    }(t, o),
                    o.isLineDashedMaterial && function(t, e) {
                        t.dashSize.value = e.dashSize,
                        t.totalSize.value = e.dashSize + e.gapSize,
                        t.scale.value = e.scale
                    }(t, o)) : o.isPointsMaterial ? function(t, e, n, r) {
                        t.diffuse.value.copy(e.color),
                        t.opacity.value = e.opacity,
                        t.size.value = e.size * n,
                        t.scale.value = .5 * r,
                        e.map && (t.map.value = e.map);
                        e.alphaMap && (t.alphaMap.value = e.alphaMap);
                        e.alphaTest > 0 && (t.alphaTest.value = e.alphaTest);
                        let o;
                        e.map ? o = e.map : e.alphaMap && (o = e.alphaMap);
                        void 0 !== o && (!0 === o.matrixAutoUpdate && o.updateMatrix(),
                        t.uvTransform.value.copy(o.matrix))
                    }(t, o, l, c) : o.isSpriteMaterial ? function(t, e) {
                        t.diffuse.value.copy(e.color),
                        t.opacity.value = e.opacity,
                        t.rotation.value = e.rotation,
                        e.map && (t.map.value = e.map);
                        e.alphaMap && (t.alphaMap.value = e.alphaMap);
                        e.alphaTest > 0 && (t.alphaTest.value = e.alphaTest);
                        let n;
                        e.map ? n = e.map : e.alphaMap && (n = e.alphaMap);
                        void 0 !== n && (!0 === n.matrixAutoUpdate && n.updateMatrix(),
                        t.uvTransform.value.copy(n.matrix))
                    }(t, o) : o.isShadowMaterial ? (t.color.value.copy(o.color),
                    t.opacity.value = o.opacity) : o.isShaderMaterial && (o.uniformsNeedUpdate = !1)
                }
            }
        }
        function Bn(t={}) {
            const e = void 0 !== t.canvas ? t.canvas : function() {
                const canvas = Object(Nt.b)("canvas");
                return canvas.style.display = "block",
                canvas
            }()
              , n = void 0 !== t.context ? t.context : null
              , l = void 0 !== t.alpha && t.alpha
              , c = void 0 === t.depth || t.depth
              , h = void 0 === t.stencil || t.stencil
              , d = void 0 !== t.antialias && t.antialias
              , f = void 0 === t.premultipliedAlpha || t.premultipliedAlpha
              , m = void 0 !== t.preserveDrawingBuffer && t.preserveDrawingBuffer
              , v = void 0 !== t.powerPreference ? t.powerPreference : "default"
              , _ = void 0 !== t.failIfMajorPerformanceCaveat && t.failIfMajorPerformanceCaveat;
            let T = null
              , E = null;
            const A = []
              , L = [];
            this.domElement = e,
            this.debug = {
                checkShaderErrors: !0
            },
            this.autoClear = !0,
            this.autoClearColor = !0,
            this.autoClearDepth = !0,
            this.autoClearStencil = !0,
            this.sortObjects = !0,
            this.clippingPlanes = [],
            this.localClippingEnabled = !1,
            this.gammaFactor = 2,
            this.outputEncoding = r.P,
            this.physicallyCorrectLights = !1,
            this.toneMapping = r.ib,
            this.toneMappingExposure = 1;
            const R = this;
            let C = !1
              , P = 0
              , D = 0
              , N = null
              , I = -1
              , O = null;
            const F = new M.a
              , U = new M.a;
            let z = null
              , B = e.width
              , j = e.height
              , X = 1
              , Z = null
              , J = null;
            const K = new M.a(0,0,B,j)
              , Q = new M.a(0,0,B,j);
            let $ = !1;
            const tt = []
              , nt = new x;
            let it = !1
              , at = !1
              , st = null;
            const ot = new y.a
              , lt = new o.a
              , ct = {
                background: null,
                fog: null,
                environment: null,
                overrideMaterial: null,
                isScene: !0
            };
            function ht() {
                return null === N ? X : 1
            }
            let ut, pt, ft, mt, gt, vt, _t, xt, yt, Mt, bt, wt, St, Tt, Et, At, Lt, Rt, Ct, Ut, zt, Bt, Gt, Wt = n;
            function jt(t, n) {
                for (let i = 0; i < t.length; i++) {
                    const r = t[i]
                      , o = e.getContext(r, n);
                    if (null !== o)
                        return o
                }
                return null
            }
            try {
                const t = {
                    alpha: l,
                    depth: c,
                    stencil: h,
                    antialias: d,
                    premultipliedAlpha: f,
                    preserveDrawingBuffer: m,
                    powerPreference: v,
                    failIfMajorPerformanceCaveat: _
                };
                if (e.addEventListener("webglcontextlost", Yt, !1),
                e.addEventListener("webglcontextrestored", Zt, !1),
                null === Wt) {
                    const e = ["webgl2", "webgl", "experimental-webgl"];
                    if (!0 === R.isWebGL1Renderer && e.shift(),
                    Wt = jt(e, t),
                    null === Wt)
                        throw jt(e) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.")
                }
                void 0 === Wt.getShaderPrecisionFormat && (Wt.getShaderPrecisionFormat = function() {
                    return {
                        rangeMin: 1,
                        rangeMax: 1,
                        precision: 1
                    }
                }
                )
            } catch (t) {
                throw console.error("THREE.WebGLRenderer: " + t.message),
                t
            }
            function Xt() {
                ut = new Dt(Wt),
                pt = new V(Wt,ut,t),
                ut.init(pt),
                Bt = new Dn(Wt,ut,pt),
                ft = new Rn(Wt,ut,pt),
                tt[0] = Wt.BACK,
                mt = new Ft(Wt),
                gt = new mn,
                vt = new Pn(Wt,ut,ft,gt,pt,Bt,mt),
                _t = new et(R),
                xt = new Pt(R),
                yt = new S(Wt,pt),
                Gt = new H(Wt,ut,yt,pt),
                Mt = new It(Wt,yt,mt,Gt),
                bt = new Vt(Wt,Mt,yt,mt),
                Ct = new Ht(Wt,pt,vt),
                At = new W(gt),
                wt = new fn(R,_t,xt,ut,pt,Gt,At),
                St = new zn(gt),
                Tt = new xn(gt),
                Et = new Tn(ut,pt),
                Rt = new G(R,_t,ft,bt,f),
                Lt = new Ln(R,bt,pt),
                Ut = new k(Wt,ut,mt,pt),
                zt = new Ot(Wt,ut,mt,pt),
                mt.programs = wt.programs,
                R.capabilities = pt,
                R.extensions = ut,
                R.properties = gt,
                R.renderLists = Tt,
                R.shadowMap = Lt,
                R.state = ft,
                R.info = mt
            }
            Xt();
            const qt = new Un(R,Wt);
            function Yt(t) {
                t.preventDefault(),
                console.log("THREE.WebGLRenderer: Context Lost."),
                C = !0
            }
            function Zt() {
                console.log("THREE.WebGLRenderer: Context Restored."),
                C = !1;
                const t = mt.autoReset
                  , e = Lt.enabled
                  , n = Lt.autoUpdate
                  , r = Lt.needsUpdate
                  , o = Lt.type;
                Xt(),
                mt.autoReset = t,
                Lt.enabled = e,
                Lt.autoUpdate = n,
                Lt.needsUpdate = r,
                Lt.type = o
            }
            function Jt(t) {
                const e = t.target;
                e.removeEventListener("dispose", Jt),
                function(t) {
                    (function(t) {
                        const e = gt.get(t).programs;
                        void 0 !== e && e.forEach((function(t) {
                            wt.releaseProgram(t)
                        }
                        ))
                    }
                    )(t),
                    gt.remove(t)
                }(e)
            }
            this.xr = qt,
            this.getContext = function() {
                return Wt
            }
            ,
            this.getContextAttributes = function() {
                return Wt.getContextAttributes()
            }
            ,
            this.forceContextLoss = function() {
                const t = ut.get("WEBGL_lose_context");
                t && t.loseContext()
            }
            ,
            this.forceContextRestore = function() {
                const t = ut.get("WEBGL_lose_context");
                t && t.restoreContext()
            }
            ,
            this.getPixelRatio = function() {
                return X
            }
            ,
            this.setPixelRatio = function(t) {
                void 0 !== t && (X = t,
                this.setSize(B, j, !1))
            }
            ,
            this.getSize = function(t) {
                return t.set(B, j)
            }
            ,
            this.setSize = function(t, n, r) {
                qt.isPresenting ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.") : (B = t,
                j = n,
                e.width = Math.floor(t * X),
                e.height = Math.floor(n * X),
                !1 !== r && (e.style.width = t + "px",
                e.style.height = n + "px"),
                this.setViewport(0, 0, t, n))
            }
            ,
            this.getDrawingBufferSize = function(t) {
                return t.set(B * X, j * X).floor()
            }
            ,
            this.setDrawingBufferSize = function(t, n, r) {
                B = t,
                j = n,
                X = r,
                e.width = Math.floor(t * r),
                e.height = Math.floor(n * r),
                this.setViewport(0, 0, t, n)
            }
            ,
            this.getCurrentViewport = function(t) {
                return t.copy(F)
            }
            ,
            this.getViewport = function(t) {
                return t.copy(K)
            }
            ,
            this.setViewport = function(t, e, n, r) {
                t.isVector4 ? K.set(t.x, t.y, t.z, t.w) : K.set(t, e, n, r),
                ft.viewport(F.copy(K).multiplyScalar(X).floor())
            }
            ,
            this.getScissor = function(t) {
                return t.copy(Q)
            }
            ,
            this.setScissor = function(t, e, n, r) {
                t.isVector4 ? Q.set(t.x, t.y, t.z, t.w) : Q.set(t, e, n, r),
                ft.scissor(U.copy(Q).multiplyScalar(X).floor())
            }
            ,
            this.getScissorTest = function() {
                return $
            }
            ,
            this.setScissorTest = function(t) {
                ft.setScissorTest($ = t)
            }
            ,
            this.setOpaqueSort = function(t) {
                Z = t
            }
            ,
            this.setTransparentSort = function(t) {
                J = t
            }
            ,
            this.getClearColor = function(t) {
                return t.copy(Rt.getClearColor())
            }
            ,
            this.setClearColor = function() {
                Rt.setClearColor.apply(Rt, arguments)
            }
            ,
            this.getClearAlpha = function() {
                return Rt.getClearAlpha()
            }
            ,
            this.setClearAlpha = function() {
                Rt.setClearAlpha.apply(Rt, arguments)
            }
            ,
            this.clear = function(t, e, n) {
                let r = 0;
                (void 0 === t || t) && (r |= Wt.COLOR_BUFFER_BIT),
                (void 0 === e || e) && (r |= Wt.DEPTH_BUFFER_BIT),
                (void 0 === n || n) && (r |= Wt.STENCIL_BUFFER_BIT),
                Wt.clear(r)
            }
            ,
            this.clearColor = function() {
                this.clear(!0, !1, !1)
            }
            ,
            this.clearDepth = function() {
                this.clear(!1, !0, !1)
            }
            ,
            this.clearStencil = function() {
                this.clear(!1, !1, !0)
            }
            ,
            this.dispose = function() {
                e.removeEventListener("webglcontextlost", Yt, !1),
                e.removeEventListener("webglcontextrestored", Zt, !1),
                Tt.dispose(),
                Et.dispose(),
                gt.dispose(),
                _t.dispose(),
                xt.dispose(),
                bt.dispose(),
                Gt.dispose(),
                qt.dispose(),
                qt.removeEventListener("sessionstart", Qt),
                qt.removeEventListener("sessionend", $t),
                st && (st.dispose(),
                st = null),
                te.stop()
            }
            ,
            this.renderBufferDirect = function(t, e, n, r, object, o) {
                null === e && (e = ct);
                const l = object.isMesh && object.matrixWorld.determinant() < 0
                  , c = function(t, e, n, r, object) {
                    !0 !== e.isScene && (e = ct);
                    vt.resetTextureUnits();
                    const o = e.fog
                      , l = r.isMeshStandardMaterial ? e.environment : null
                      , c = null === N ? R.outputEncoding : N.texture.encoding
                      , h = (r.isMeshStandardMaterial ? xt : _t).get(r.envMap || l)
                      , d = !0 === r.vertexColors && !!n.attributes.color && 4 === n.attributes.color.itemSize
                      , f = !!r.normalMap && !!n.attributes.tangent
                      , m = !!n.morphAttributes.position
                      , v = !!n.morphAttributes.normal
                      , _ = n.morphAttributes.position ? n.morphAttributes.position.length : 0
                      , x = gt.get(r)
                      , y = E.state.lights;
                    if (!0 === it && (!0 === at || t !== O)) {
                        const e = t === O && r.id === I;
                        At.setState(r, t, e)
                    }
                    let M = !1;
                    r.version === x.__version ? x.needsLights && x.lightsStateVersion !== y.state.version || x.outputEncoding !== c || object.isInstancedMesh && !1 === x.instancing ? M = !0 : object.isInstancedMesh || !0 !== x.instancing ? object.isSkinnedMesh && !1 === x.skinning ? M = !0 : object.isSkinnedMesh || !0 !== x.skinning ? x.envMap !== h || r.fog && x.fog !== o ? M = !0 : void 0 === x.numClippingPlanes || x.numClippingPlanes === At.numPlanes && x.numIntersection === At.numIntersection ? (x.vertexAlphas !== d || x.vertexTangents !== f || x.morphTargets !== m || x.morphNormals !== v || !0 === pt.isWebGL2 && x.morphTargetsCount !== _) && (M = !0) : M = !0 : M = !0 : M = !0 : (M = !0,
                    x.__version = r.version);
                    let w = x.currentProgram;
                    !0 === M && (w = ae(r, e, object));
                    let S = !1
                      , T = !1
                      , A = !1;
                    const L = w.getUniforms()
                      , C = x.uniforms;
                    ft.useProgram(w.program) && (S = !0,
                    T = !0,
                    A = !0);
                    r.id !== I && (I = r.id,
                    T = !0);
                    if (S || O !== t) {
                        if (L.setValue(Wt, "projectionMatrix", t.projectionMatrix),
                        pt.logarithmicDepthBuffer && L.setValue(Wt, "logDepthBufFC", 2 / (Math.log(t.far + 1) / Math.LN2)),
                        O !== t && (O = t,
                        T = !0,
                        A = !0),
                        r.isShaderMaterial || r.isMeshPhongMaterial || r.isMeshToonMaterial || r.isMeshStandardMaterial || r.envMap) {
                            const e = L.map.cameraPosition;
                            void 0 !== e && e.setValue(Wt, lt.setFromMatrixPosition(t.matrixWorld))
                        }
                        (r.isMeshPhongMaterial || r.isMeshToonMaterial || r.isMeshLambertMaterial || r.isMeshBasicMaterial || r.isMeshStandardMaterial || r.isShaderMaterial) && L.setValue(Wt, "isOrthographic", !0 === t.isOrthographicCamera),
                        (r.isMeshPhongMaterial || r.isMeshToonMaterial || r.isMeshLambertMaterial || r.isMeshBasicMaterial || r.isMeshStandardMaterial || r.isShaderMaterial || r.isShadowMaterial || object.isSkinnedMesh) && L.setValue(Wt, "viewMatrix", t.matrixWorldInverse)
                    }
                    if (object.isSkinnedMesh) {
                        L.setOptional(Wt, object, "bindMatrix"),
                        L.setOptional(Wt, object, "bindMatrixInverse");
                        const t = object.skeleton;
                        t && (pt.floatVertexTextures ? (null === t.boneTexture && t.computeBoneTexture(),
                        L.setValue(Wt, "boneTexture", t.boneTexture, vt),
                        L.setValue(Wt, "boneTextureSize", t.boneTextureSize)) : L.setOptional(Wt, t, "boneMatrices"))
                    }
                    !n || void 0 === n.morphAttributes.position && void 0 === n.morphAttributes.normal || Ct.update(object, n, r, w);
                    (T || x.receiveShadow !== object.receiveShadow) && (x.receiveShadow = object.receiveShadow,
                    L.setValue(Wt, "receiveShadow", object.receiveShadow));
                    T && (L.setValue(Wt, "toneMappingExposure", R.toneMappingExposure),
                    x.needsLights && (D = A,
                    (P = C).ambientLightColor.needsUpdate = D,
                    P.lightProbe.needsUpdate = D,
                    P.directionalLights.needsUpdate = D,
                    P.directionalLightShadows.needsUpdate = D,
                    P.pointLights.needsUpdate = D,
                    P.pointLightShadows.needsUpdate = D,
                    P.spotLights.needsUpdate = D,
                    P.spotLightShadows.needsUpdate = D,
                    P.rectAreaLights.needsUpdate = D,
                    P.hemisphereLights.needsUpdate = D),
                    o && r.fog && St.refreshFogUniforms(C, o),
                    St.refreshMaterialUniforms(C, r, X, j, st),
                    Xe.upload(Wt, x.uniformsList, C, vt));
                    var P, D;
                    r.isShaderMaterial && !0 === r.uniformsNeedUpdate && (Xe.upload(Wt, x.uniformsList, C, vt),
                    r.uniformsNeedUpdate = !1);
                    r.isSpriteMaterial && L.setValue(Wt, "center", object.center);
                    return L.setValue(Wt, "modelViewMatrix", object.modelViewMatrix),
                    L.setValue(Wt, "normalMatrix", object.normalMatrix),
                    L.setValue(Wt, "modelMatrix", object.matrixWorld),
                    w
                }(t, e, n, r, object);
                ft.setMaterial(r, l);
                let h = n.index;
                const d = n.attributes.position;
                if (null === h) {
                    if (void 0 === d || 0 === d.count)
                        return
                } else if (0 === h.count)
                    return;
                let f, m = 1;
                !0 === r.wireframe && (h = Mt.getWireframeAttribute(n),
                m = 2),
                Gt.setup(object, r, c, n, h);
                let v = Ut;
                null !== h && (f = yt.get(h),
                v = zt,
                v.setIndex(f));
                const _ = null !== h ? h.count : d.count
                  , x = n.drawRange.start * m
                  , y = n.drawRange.count * m
                  , M = null !== o ? o.start * m : 0
                  , w = null !== o ? o.count * m : 1 / 0
                  , S = Math.max(x, M)
                  , T = Math.min(_, x + y, M + w) - 1
                  , A = Math.max(0, T - S + 1);
                if (0 !== A) {
                    if (object.isMesh)
                        !0 === r.wireframe ? (ft.setLineWidth(r.wireframeLinewidth * ht()),
                        v.setMode(Wt.LINES)) : v.setMode(Wt.TRIANGLES);
                    else if (object.isLine) {
                        let t = r.linewidth;
                        void 0 === t && (t = 1),
                        ft.setLineWidth(t * ht()),
                        object.isLineSegments ? v.setMode(Wt.LINES) : object.isLineLoop ? v.setMode(Wt.LINE_LOOP) : v.setMode(Wt.LINE_STRIP)
                    } else
                        object.isPoints ? v.setMode(Wt.POINTS) : object.isSprite && v.setMode(Wt.TRIANGLES);
                    if (object.isInstancedMesh)
                        v.renderInstances(S, A, object.count);
                    else if (n.isInstancedBufferGeometry) {
                        const t = Math.min(n.instanceCount, n._maxInstanceCount);
                        v.renderInstances(S, A, t)
                    } else
                        v.render(S, A)
                }
            }
            ,
            this.compile = function(t, e) {
                E = Et.get(t),
                E.init(),
                L.push(E),
                t.traverseVisible((function(object) {
                    object.isLight && object.layers.test(e.layers) && (E.pushLight(object),
                    object.castShadow && E.pushShadow(object))
                }
                )),
                E.setupLights(R.physicallyCorrectLights),
                t.traverse((function(object) {
                    const e = object.material;
                    if (e)
                        if (Array.isArray(e))
                            for (let i = 0; i < e.length; i++) {
                                ae(e[i], t, object)
                            }
                        else
                            ae(e, t, object)
                }
                )),
                L.pop(),
                E = null
            }
            ;
            let Kt = null;
            function Qt() {
                te.stop()
            }
            function $t() {
                te.start()
            }
            const te = new w;
            function ee(object, t, e, n) {
                if (!1 === object.visible)
                    return;
                if (object.layers.test(t.layers))
                    if (object.isGroup)
                        e = object.renderOrder;
                    else if (object.isLOD)
                        !0 === object.autoUpdate && object.update(t);
                    else if (object.isLight)
                        E.pushLight(object),
                        object.castShadow && E.pushShadow(object);
                    else if (object.isSprite) {
                        if (!object.frustumCulled || nt.intersectsSprite(object)) {
                            n && lt.setFromMatrixPosition(object.matrixWorld).applyMatrix4(ot);
                            const t = bt.update(object)
                              , r = object.material;
                            r.visible && T.push(object, t, r, e, lt.z, null)
                        }
                    } else if ((object.isMesh || object.isLine || object.isPoints) && (object.isSkinnedMesh && object.skeleton.frame !== mt.render.frame && (object.skeleton.update(),
                    object.skeleton.frame = mt.render.frame),
                    !object.frustumCulled || nt.intersectsObject(object))) {
                        n && lt.setFromMatrixPosition(object.matrixWorld).applyMatrix4(ot);
                        const t = bt.update(object)
                          , r = object.material;
                        if (Array.isArray(r)) {
                            const n = t.groups;
                            for (let i = 0, o = n.length; i < o; i++) {
                                const o = n[i]
                                  , l = r[o.materialIndex];
                                l && l.visible && T.push(object, t, l, e, lt.z, o)
                            }
                        } else
                            r.visible && T.push(object, t, r, e, lt.z, null)
                    }
                const r = object.children;
                for (let i = 0, o = r.length; i < o; i++)
                    ee(r[i], t, e, n)
            }
            function ne(t, e, n, o) {
                const l = t.opaque
                  , c = t.transmissive
                  , h = t.transparent;
                E.setupLightsView(n),
                c.length > 0 && function(t, e, n) {
                    if (null === st) {
                        const t = !0 === d && !0 === pt.isWebGL2;
                        st = new (t ? kt : Y)(1024,1024,{
                            generateMipmaps: !0,
                            type: null !== Bt.convert(r.K) ? r.K : r.Hc,
                            minFilter: r.R,
                            magFilter: r.db,
                            wrapS: r.l,
                            wrapT: r.l
                        })
                    }
                    const o = R.getRenderTarget();
                    R.setRenderTarget(st),
                    R.clear();
                    const l = R.toneMapping;
                    R.toneMapping = r.ib,
                    ie(t, e, n),
                    R.toneMapping = l,
                    vt.updateMultisampleRenderTarget(st),
                    vt.updateRenderTargetMipmap(st),
                    R.setRenderTarget(o)
                }(l, e, n),
                o && ft.viewport(F.copy(o)),
                l.length > 0 && ie(l, e, n),
                c.length > 0 && ie(c, e, n),
                h.length > 0 && ie(h, e, n)
            }
            function ie(t, e, n) {
                const r = !0 === e.isScene ? e.overrideMaterial : null;
                for (let i = 0, o = t.length; i < o; i++) {
                    const o = t[i]
                      , object = o.object
                      , l = o.geometry
                      , c = null === r ? o.material : r
                      , h = o.group;
                    object.layers.test(n.layers) && re(object, e, n, l, c, h)
                }
            }
            function re(object, t, e, n, o, l) {
                object.onBeforeRender(R, t, e, n, o, l),
                object.modelViewMatrix.multiplyMatrices(e.matrixWorldInverse, object.matrixWorld),
                object.normalMatrix.getNormalMatrix(object.modelViewMatrix),
                o.onBeforeRender(R, t, e, n, object, l),
                !0 === o.transparent && o.side === r.x ? (o.side = r.h,
                o.needsUpdate = !0,
                R.renderBufferDirect(e, t, n, o, object, l),
                o.side = r.F,
                o.needsUpdate = !0,
                R.renderBufferDirect(e, t, n, o, object, l),
                o.side = r.x) : R.renderBufferDirect(e, t, n, o, object, l),
                object.onAfterRender(R, t, e, n, o, l)
            }
            function ae(t, e, object) {
                !0 !== e.isScene && (e = ct);
                const n = gt.get(t)
                  , r = E.state.lights
                  , o = E.state.shadowsArray
                  , l = r.state.version
                  , c = wt.getParameters(t, r.state, o, e, object)
                  , h = wt.getProgramCacheKey(c);
                let d = n.programs;
                n.environment = t.isMeshStandardMaterial ? e.environment : null,
                n.fog = e.fog,
                n.envMap = (t.isMeshStandardMaterial ? xt : _t).get(t.envMap || n.environment),
                void 0 === d && (t.addEventListener("dispose", Jt),
                d = new Map,
                n.programs = d);
                let f = d.get(h);
                if (void 0 !== f) {
                    if (n.currentProgram === f && n.lightsStateVersion === l)
                        return se(t, c),
                        f
                } else
                    c.uniforms = wt.getUniforms(t),
                    t.onBuild(object, c, R),
                    t.onBeforeCompile(c, R),
                    f = wt.acquireProgram(c, h),
                    d.set(h, f),
                    n.uniforms = c.uniforms;
                const m = n.uniforms;
                (t.isShaderMaterial || t.isRawShaderMaterial) && !0 !== t.clipping || (m.clippingPlanes = At.uniform),
                se(t, c),
                n.needsLights = function(t) {
                    return t.isMeshLambertMaterial || t.isMeshToonMaterial || t.isMeshPhongMaterial || t.isMeshStandardMaterial || t.isShadowMaterial || t.isShaderMaterial && !0 === t.lights
                }(t),
                n.lightsStateVersion = l,
                n.needsLights && (m.ambientLightColor.value = r.state.ambient,
                m.lightProbe.value = r.state.probe,
                m.directionalLights.value = r.state.directional,
                m.directionalLightShadows.value = r.state.directionalShadow,
                m.spotLights.value = r.state.spot,
                m.spotLightShadows.value = r.state.spotShadow,
                m.rectAreaLights.value = r.state.rectArea,
                m.ltc_1.value = r.state.rectAreaLTC1,
                m.ltc_2.value = r.state.rectAreaLTC2,
                m.pointLights.value = r.state.point,
                m.pointLightShadows.value = r.state.pointShadow,
                m.hemisphereLights.value = r.state.hemi,
                m.directionalShadowMap.value = r.state.directionalShadowMap,
                m.directionalShadowMatrix.value = r.state.directionalShadowMatrix,
                m.spotShadowMap.value = r.state.spotShadowMap,
                m.spotShadowMatrix.value = r.state.spotShadowMatrix,
                m.pointShadowMap.value = r.state.pointShadowMap,
                m.pointShadowMatrix.value = r.state.pointShadowMatrix);
                const v = f.getUniforms()
                  , _ = Xe.seqWithValue(v.seq, m);
                return n.currentProgram = f,
                n.uniformsList = _,
                f
            }
            function se(t, e) {
                const n = gt.get(t);
                n.outputEncoding = e.outputEncoding,
                n.instancing = e.instancing,
                n.skinning = e.skinning,
                n.morphTargets = e.morphTargets,
                n.morphNormals = e.morphNormals,
                n.morphTargetsCount = e.morphTargetsCount,
                n.numClippingPlanes = e.numClippingPlanes,
                n.numIntersection = e.numClipIntersection,
                n.vertexAlphas = e.vertexAlphas,
                n.vertexTangents = e.vertexTangents
            }
            te.setAnimationLoop((function(time) {
                Kt && Kt(time)
            }
            )),
            "undefined" != typeof window && te.setContext(window),
            this.setAnimationLoop = function(t) {
                Kt = t,
                qt.setAnimationLoop(t),
                null === t ? te.stop() : te.start()
            }
            ,
            qt.addEventListener("sessionstart", Qt),
            qt.addEventListener("sessionend", $t),
            this.render = function(t, e) {
                if (void 0 !== e && !0 !== e.isCamera)
                    return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
                if (!0 === C)
                    return;
                !0 === t.autoUpdate && t.updateMatrixWorld(),
                null === e.parent && e.updateMatrixWorld(),
                !0 === qt.enabled && !0 === qt.isPresenting && (!0 === qt.cameraAutoUpdate && qt.updateCamera(e),
                e = qt.getCamera()),
                !0 === t.isScene && t.onBeforeRender(R, t, e, N),
                E = Et.get(t, L.length),
                E.init(),
                L.push(E),
                ot.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse),
                nt.setFromProjectionMatrix(ot),
                at = this.localClippingEnabled,
                it = At.init(this.clippingPlanes, at, e),
                T = Tt.get(t, A.length),
                T.init(),
                A.push(T),
                ee(t, e, 0, R.sortObjects),
                T.finish(),
                !0 === R.sortObjects && T.sort(Z, J),
                !0 === it && At.beginShadows();
                const n = E.state.shadowsArray;
                if (Lt.render(n, t, e),
                !0 === it && At.endShadows(),
                !0 === this.info.autoReset && this.info.reset(),
                Rt.render(T, t),
                E.setupLights(R.physicallyCorrectLights),
                e.isArrayCamera) {
                    const n = e.cameras;
                    for (let i = 0, e = n.length; i < e; i++) {
                        const e = n[i];
                        ne(T, t, e, e.viewport)
                    }
                } else
                    ne(T, t, e);
                null !== N && (vt.updateMultisampleRenderTarget(N),
                vt.updateRenderTargetMipmap(N)),
                !0 === t.isScene && t.onAfterRender(R, t, e),
                ft.buffers.depth.setTest(!0),
                ft.buffers.depth.setMask(!0),
                ft.buffers.color.setMask(!0),
                ft.setPolygonOffset(!1),
                Gt.resetDefaultState(),
                I = -1,
                O = null,
                L.pop(),
                E = L.length > 0 ? L[L.length - 1] : null,
                A.pop(),
                T = A.length > 0 ? A[A.length - 1] : null
            }
            ,
            this.getActiveCubeFace = function() {
                return P
            }
            ,
            this.getActiveMipmapLevel = function() {
                return D
            }
            ,
            this.getRenderTarget = function() {
                return N
            }
            ,
            this.setRenderTarget = function(t, e=0, n=0) {
                N = t,
                P = e,
                D = n,
                t && void 0 === gt.get(t).__webglFramebuffer && vt.setupRenderTarget(t);
                let r = null
                  , o = !1
                  , l = !1;
                if (t) {
                    const n = t.texture;
                    (n.isDataTexture3D || n.isDataTexture2DArray) && (l = !0);
                    const c = gt.get(t).__webglFramebuffer;
                    t.isWebGLCubeRenderTarget ? (r = c[e],
                    o = !0) : r = t.isWebGLMultisampleRenderTarget ? gt.get(t).__webglMultisampledFramebuffer : c,
                    F.copy(t.viewport),
                    U.copy(t.scissor),
                    z = t.scissorTest
                } else
                    F.copy(K).multiplyScalar(X).floor(),
                    U.copy(Q).multiplyScalar(X).floor(),
                    z = $;
                if (ft.bindFramebuffer(Wt.FRAMEBUFFER, r) && pt.drawBuffers) {
                    let e = !1;
                    if (t)
                        if (t.isWebGLMultipleRenderTargets) {
                            const n = t.texture;
                            if (tt.length !== n.length || tt[0] !== Wt.COLOR_ATTACHMENT0) {
                                for (let i = 0, t = n.length; i < t; i++)
                                    tt[i] = Wt.COLOR_ATTACHMENT0 + i;
                                tt.length = n.length,
                                e = !0
                            }
                        } else
                            1 === tt.length && tt[0] === Wt.COLOR_ATTACHMENT0 || (tt[0] = Wt.COLOR_ATTACHMENT0,
                            tt.length = 1,
                            e = !0);
                    else
                        1 === tt.length && tt[0] === Wt.BACK || (tt[0] = Wt.BACK,
                        tt.length = 1,
                        e = !0);
                    e && (pt.isWebGL2 ? Wt.drawBuffers(tt) : ut.get("WEBGL_draw_buffers").drawBuffersWEBGL(tt))
                }
                if (ft.viewport(F),
                ft.scissor(U),
                ft.setScissorTest(z),
                o) {
                    const r = gt.get(t.texture);
                    Wt.framebufferTexture2D(Wt.FRAMEBUFFER, Wt.COLOR_ATTACHMENT0, Wt.TEXTURE_CUBE_MAP_POSITIVE_X + e, r.__webglTexture, n)
                } else if (l) {
                    const r = gt.get(t.texture)
                      , o = e || 0;
                    Wt.framebufferTextureLayer(Wt.FRAMEBUFFER, Wt.COLOR_ATTACHMENT0, r.__webglTexture, n || 0, o)
                }
                I = -1
            }
            ,
            this.readRenderTargetPixels = function(t, e, n, o, l, c, h) {
                if (!t || !t.isWebGLRenderTarget)
                    return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
                let d = gt.get(t).__webglFramebuffer;
                if (t.isWebGLCubeRenderTarget && void 0 !== h && (d = d[h]),
                d) {
                    ft.bindFramebuffer(Wt.FRAMEBUFFER, d);
                    try {
                        const h = t.texture
                          , d = h.format
                          , f = h.type;
                        if (d !== r.ub && Bt.convert(d) !== Wt.getParameter(Wt.IMPLEMENTATION_COLOR_READ_FORMAT))
                            return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                        const m = f === r.K && (ut.has("EXT_color_buffer_half_float") || pt.isWebGL2 && ut.has("EXT_color_buffer_float"));
                        if (!(f === r.Hc || Bt.convert(f) === Wt.getParameter(Wt.IMPLEMENTATION_COLOR_READ_TYPE) || f === r.E && (pt.isWebGL2 || ut.has("OES_texture_float") || ut.has("WEBGL_color_buffer_float")) || m))
                            return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                        Wt.checkFramebufferStatus(Wt.FRAMEBUFFER) === Wt.FRAMEBUFFER_COMPLETE ? e >= 0 && e <= t.width - o && n >= 0 && n <= t.height - l && Wt.readPixels(e, n, o, l, Bt.convert(d), Bt.convert(f), c) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")
                    } finally {
                        const t = null !== N ? gt.get(N).__webglFramebuffer : null;
                        ft.bindFramebuffer(Wt.FRAMEBUFFER, t)
                    }
                }
            }
            ,
            this.copyFramebufferToTexture = function(t, e, n=0) {
                const r = Math.pow(2, -n)
                  , o = Math.floor(e.image.width * r)
                  , l = Math.floor(e.image.height * r);
                let c = Bt.convert(e.format);
                pt.isWebGL2 && (c === Wt.RGB && (c = Wt.RGB8),
                c === Wt.RGBA && (c = Wt.RGBA8)),
                vt.setTexture2D(e, 0),
                Wt.copyTexImage2D(Wt.TEXTURE_2D, n, c, t.x, t.y, o, l, 0),
                ft.unbindTexture()
            }
            ,
            this.copyTextureToTexture = function(t, e, n, r=0) {
                const o = e.image.width
                  , l = e.image.height
                  , c = Bt.convert(n.format)
                  , h = Bt.convert(n.type);
                vt.setTexture2D(n, 0),
                Wt.pixelStorei(Wt.UNPACK_FLIP_Y_WEBGL, n.flipY),
                Wt.pixelStorei(Wt.UNPACK_PREMULTIPLY_ALPHA_WEBGL, n.premultiplyAlpha),
                Wt.pixelStorei(Wt.UNPACK_ALIGNMENT, n.unpackAlignment),
                e.isDataTexture ? Wt.texSubImage2D(Wt.TEXTURE_2D, r, t.x, t.y, o, l, c, h, e.image.data) : e.isCompressedTexture ? Wt.compressedTexSubImage2D(Wt.TEXTURE_2D, r, t.x, t.y, e.mipmaps[0].width, e.mipmaps[0].height, c, e.mipmaps[0].data) : Wt.texSubImage2D(Wt.TEXTURE_2D, r, t.x, t.y, c, h, e.image),
                0 === r && n.generateMipmaps && Wt.generateMipmap(Wt.TEXTURE_2D),
                ft.unbindTexture()
            }
            ,
            this.copyTextureToTexture3D = function(t, e, n, r, o=0) {
                if (R.isWebGL1Renderer)
                    return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
                const l = t.max.x - t.min.x + 1
                  , c = t.max.y - t.min.y + 1
                  , h = t.max.z - t.min.z + 1
                  , d = Bt.convert(r.format)
                  , f = Bt.convert(r.type);
                let m;
                if (r.isDataTexture3D)
                    vt.setTexture3D(r, 0),
                    m = Wt.TEXTURE_3D;
                else {
                    if (!r.isDataTexture2DArray)
                        return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
                    vt.setTexture2DArray(r, 0),
                    m = Wt.TEXTURE_2D_ARRAY
                }
                Wt.pixelStorei(Wt.UNPACK_FLIP_Y_WEBGL, r.flipY),
                Wt.pixelStorei(Wt.UNPACK_PREMULTIPLY_ALPHA_WEBGL, r.premultiplyAlpha),
                Wt.pixelStorei(Wt.UNPACK_ALIGNMENT, r.unpackAlignment);
                const v = Wt.getParameter(Wt.UNPACK_ROW_LENGTH)
                  , _ = Wt.getParameter(Wt.UNPACK_IMAGE_HEIGHT)
                  , x = Wt.getParameter(Wt.UNPACK_SKIP_PIXELS)
                  , y = Wt.getParameter(Wt.UNPACK_SKIP_ROWS)
                  , M = Wt.getParameter(Wt.UNPACK_SKIP_IMAGES)
                  , image = n.isCompressedTexture ? n.mipmaps[0] : n.image;
                Wt.pixelStorei(Wt.UNPACK_ROW_LENGTH, image.width),
                Wt.pixelStorei(Wt.UNPACK_IMAGE_HEIGHT, image.height),
                Wt.pixelStorei(Wt.UNPACK_SKIP_PIXELS, t.min.x),
                Wt.pixelStorei(Wt.UNPACK_SKIP_ROWS, t.min.y),
                Wt.pixelStorei(Wt.UNPACK_SKIP_IMAGES, t.min.z),
                n.isDataTexture || n.isDataTexture3D ? Wt.texSubImage3D(m, o, e.x, e.y, e.z, l, c, h, d, f, image.data) : n.isCompressedTexture ? (console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),
                Wt.compressedTexSubImage3D(m, o, e.x, e.y, e.z, l, c, h, d, image.data)) : Wt.texSubImage3D(m, o, e.x, e.y, e.z, l, c, h, d, f, image),
                Wt.pixelStorei(Wt.UNPACK_ROW_LENGTH, v),
                Wt.pixelStorei(Wt.UNPACK_IMAGE_HEIGHT, _),
                Wt.pixelStorei(Wt.UNPACK_SKIP_PIXELS, x),
                Wt.pixelStorei(Wt.UNPACK_SKIP_ROWS, y),
                Wt.pixelStorei(Wt.UNPACK_SKIP_IMAGES, M),
                0 === o && r.generateMipmaps && Wt.generateMipmap(m),
                ft.unbindTexture()
            }
            ,
            this.initTexture = function(t) {
                vt.setTexture2D(t, 0),
                ft.unbindTexture()
            }
            ,
            this.resetState = function() {
                P = 0,
                D = 0,
                N = null,
                ft.reset(),
                Gt.reset()
            }
            ,
            "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{
                detail: this
            }))
        }
        Bn.prototype.isWebGLRenderer = !0
    },
    377: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return f
        }
        ));
        const r = {
            enabled: !1,
            files: {},
            add: function(t, e) {
                !1 !== this.enabled && (this.files[t] = e)
            },
            get: function(t) {
                if (!1 !== this.enabled)
                    return this.files[t]
            },
            remove: function(t) {
                delete this.files[t]
            },
            clear: function() {
                this.files = {}
            }
        };
        const o = new class {
            constructor(t, e, n) {
                const r = this;
                let o, l = !1, c = 0, h = 0;
                const d = [];
                this.onStart = void 0,
                this.onLoad = t,
                this.onProgress = e,
                this.onError = n,
                this.itemStart = function(t) {
                    h++,
                    !1 === l && void 0 !== r.onStart && r.onStart(t, c, h),
                    l = !0
                }
                ,
                this.itemEnd = function(t) {
                    c++,
                    void 0 !== r.onProgress && r.onProgress(t, c, h),
                    c === h && (l = !1,
                    void 0 !== r.onLoad && r.onLoad())
                }
                ,
                this.itemError = function(t) {
                    void 0 !== r.onError && r.onError(t)
                }
                ,
                this.resolveURL = function(t) {
                    return o ? o(t) : t
                }
                ,
                this.setURLModifier = function(t) {
                    return o = t,
                    this
                }
                ,
                this.addHandler = function(t, e) {
                    return d.push(t, e),
                    this
                }
                ,
                this.removeHandler = function(t) {
                    const e = d.indexOf(t);
                    return -1 !== e && d.splice(e, 2),
                    this
                }
                ,
                this.getHandler = function(t) {
                    for (let i = 0, e = d.length; i < e; i += 2) {
                        const e = d[i]
                          , n = d[i + 1];
                        if (e.global && (e.lastIndex = 0),
                        e.test(t))
                            return n
                    }
                    return null
                }
            }
        }
        ;
        class l {
            constructor(t) {
                this.manager = void 0 !== t ? t : o,
                this.crossOrigin = "anonymous",
                this.withCredentials = !1,
                this.path = "",
                this.resourcePath = "",
                this.requestHeader = {}
            }
            load() {}
            loadAsync(t, e) {
                const n = this;
                return new Promise((function(r, o) {
                    n.load(t, r, e, o)
                }
                ))
            }
            parse() {}
            setCrossOrigin(t) {
                return this.crossOrigin = t,
                this
            }
            setWithCredentials(t) {
                return this.withCredentials = t,
                this
            }
            setPath(path) {
                return this.path = path,
                this
            }
            setResourcePath(t) {
                return this.resourcePath = t,
                this
            }
            setRequestHeader(t) {
                return this.requestHeader = t,
                this
            }
        }
        var c = n(260);
        class h extends l {
            constructor(t) {
                super(t)
            }
            load(t, e, n, o) {
                void 0 !== this.path && (t = this.path + t),
                t = this.manager.resolveURL(t);
                const l = this
                  , h = r.get(t);
                if (void 0 !== h)
                    return l.manager.itemStart(t),
                    setTimeout((function() {
                        e && e(h),
                        l.manager.itemEnd(t)
                    }
                    ), 0),
                    h;
                const image = Object(c.b)("img");
                function d() {
                    m(),
                    r.add(t, this),
                    e && e(this),
                    l.manager.itemEnd(t)
                }
                function f(e) {
                    m(),
                    o && o(e),
                    l.manager.itemError(t),
                    l.manager.itemEnd(t)
                }
                function m() {
                    image.removeEventListener("load", d, !1),
                    image.removeEventListener("error", f, !1)
                }
                return image.addEventListener("load", d, !1),
                image.addEventListener("error", f, !1),
                "data:" !== t.substr(0, 5) && void 0 !== this.crossOrigin && (image.crossOrigin = this.crossOrigin),
                l.manager.itemStart(t),
                image.src = t,
                image
            }
        }
        var d = n(266);
        class f extends l {
            constructor(t) {
                super(t)
            }
            load(t, e, n, r) {
                const o = new d.a
                  , l = new h(this.manager);
                return l.setCrossOrigin(this.crossOrigin),
                l.setPath(this.path),
                l.load(t, (function(image) {
                    o.image = image,
                    o.needsUpdate = !0,
                    void 0 !== e && e(o)
                }
                ), n, r),
                o
            }
        }
    },
    378: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return Sc
        }
        ));
        const r = 0
          , o = 1
          , l = 2
          , c = 0
          , h = 1
          , d = 2
          , f = 3
          , m = 100
          , v = 301
          , _ = 302
          , x = 303
          , y = 304
          , M = 306
          , w = 307
          , S = 1e3
          , T = 1001
          , E = 1002
          , A = 1003
          , L = 1004
          , R = 1005
          , C = 1006
          , P = 1008
          , D = 1009
          , N = 1012
          , I = 1014
          , O = 1015
          , F = 1016
          , U = 1020
          , z = 1022
          , B = 1023
          , G = 1026
          , H = 1027
          , k = 2300
          , V = 2301
          , W = 2302
          , j = 2400
          , X = 2401
          , Y = 2402
          , Z = 2500
          , J = 3e3
          , K = 3001
          , Q = 3007
          , $ = 3002
          , tt = 7680
          , et = 35044
          , nt = 35048
          , it = "300 es";
        class at {
            addEventListener(t, e) {
                void 0 === this._listeners && (this._listeners = {});
                const n = this._listeners;
                void 0 === n[t] && (n[t] = []),
                -1 === n[t].indexOf(e) && n[t].push(e)
            }
            hasEventListener(t, e) {
                if (void 0 === this._listeners)
                    return !1;
                const n = this._listeners;
                return void 0 !== n[t] && -1 !== n[t].indexOf(e)
            }
            removeEventListener(t, e) {
                if (void 0 === this._listeners)
                    return;
                const n = this._listeners[t];
                if (void 0 !== n) {
                    const t = n.indexOf(e);
                    -1 !== t && n.splice(t, 1)
                }
            }
            dispatchEvent(t) {
                if (void 0 === this._listeners)
                    return;
                const e = this._listeners[t.type];
                if (void 0 !== e) {
                    t.target = this;
                    const n = e.slice(0);
                    for (let i = 0, e = n.length; i < e; i++)
                        n[i].call(this, t);
                    t.target = null
                }
            }
        }
        const st = Math.PI / 180
          , ot = 180 / Math.PI
          , lt = [];
        for (let i = 0; i < 256; i++)
            lt[i] = (i < 16 ? "0" : "") + i.toString(16);
        const ct = "undefined" != typeof crypto && "randomUUID"in crypto;
        function ht() {
            if (ct)
                return crypto.randomUUID().toUpperCase();
            const t = 4294967295 * Math.random() | 0
              , e = 4294967295 * Math.random() | 0
              , n = 4294967295 * Math.random() | 0
              , r = 4294967295 * Math.random() | 0;
            return (lt[255 & t] + lt[t >> 8 & 255] + lt[t >> 16 & 255] + lt[t >> 24 & 255] + "-" + lt[255 & e] + lt[e >> 8 & 255] + "-" + lt[e >> 16 & 15 | 64] + lt[e >> 24 & 255] + "-" + lt[63 & n | 128] + lt[n >> 8 & 255] + "-" + lt[n >> 16 & 255] + lt[n >> 24 & 255] + lt[255 & r] + lt[r >> 8 & 255] + lt[r >> 16 & 255] + lt[r >> 24 & 255]).toUpperCase()
        }
        function ut(t, e, n) {
            return Math.max(e, Math.min(n, t))
        }
        function pt(t, e) {
            return (t % e + e) % e
        }
        function ft(t, e, n) {
            return (1 - n) * t + n * e
        }
        function mt(t) {
            return 0 == (t & t - 1) && 0 !== t
        }
        function gt(t) {
            return Math.pow(2, Math.floor(Math.log(t) / Math.LN2))
        }
        class vt {
            constructor(t=0, e=0) {
                this.x = t,
                this.y = e
            }
            get width() {
                return this.x
            }
            set width(t) {
                this.x = t
            }
            get height() {
                return this.y
            }
            set height(t) {
                this.y = t
            }
            set(t, e) {
                return this.x = t,
                this.y = e,
                this
            }
            setScalar(t) {
                return this.x = t,
                this.y = t,
                this
            }
            setX(t) {
                return this.x = t,
                this
            }
            setY(t) {
                return this.y = t,
                this
            }
            setComponent(t, e) {
                switch (t) {
                case 0:
                    this.x = e;
                    break;
                case 1:
                    this.y = e;
                    break;
                default:
                    throw new Error("index is out of range: " + t)
                }
                return this
            }
            getComponent(t) {
                switch (t) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                default:
                    throw new Error("index is out of range: " + t)
                }
            }
            clone() {
                return new this.constructor(this.x,this.y)
            }
            copy(t) {
                return this.x = t.x,
                this.y = t.y,
                this
            }
            add(t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
                this.addVectors(t, e)) : (this.x += t.x,
                this.y += t.y,
                this)
            }
            addScalar(s) {
                return this.x += s,
                this.y += s,
                this
            }
            addVectors(a, b) {
                return this.x = a.x + b.x,
                this.y = a.y + b.y,
                this
            }
            addScaledVector(t, s) {
                return this.x += t.x * s,
                this.y += t.y * s,
                this
            }
            sub(t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
                this.subVectors(t, e)) : (this.x -= t.x,
                this.y -= t.y,
                this)
            }
            subScalar(s) {
                return this.x -= s,
                this.y -= s,
                this
            }
            subVectors(a, b) {
                return this.x = a.x - b.x,
                this.y = a.y - b.y,
                this
            }
            multiply(t) {
                return this.x *= t.x,
                this.y *= t.y,
                this
            }
            multiplyScalar(t) {
                return this.x *= t,
                this.y *= t,
                this
            }
            divide(t) {
                return this.x /= t.x,
                this.y /= t.y,
                this
            }
            divideScalar(t) {
                return this.multiplyScalar(1 / t)
            }
            applyMatrix3(t) {
                const e = this.x
                  , n = this.y
                  , r = t.elements;
                return this.x = r[0] * e + r[3] * n + r[6],
                this.y = r[1] * e + r[4] * n + r[7],
                this
            }
            min(t) {
                return this.x = Math.min(this.x, t.x),
                this.y = Math.min(this.y, t.y),
                this
            }
            max(t) {
                return this.x = Math.max(this.x, t.x),
                this.y = Math.max(this.y, t.y),
                this
            }
            clamp(t, e) {
                return this.x = Math.max(t.x, Math.min(e.x, this.x)),
                this.y = Math.max(t.y, Math.min(e.y, this.y)),
                this
            }
            clampScalar(t, e) {
                return this.x = Math.max(t, Math.min(e, this.x)),
                this.y = Math.max(t, Math.min(e, this.y)),
                this
            }
            clampLength(t, e) {
                const n = this.length();
                return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)))
            }
            floor() {
                return this.x = Math.floor(this.x),
                this.y = Math.floor(this.y),
                this
            }
            ceil() {
                return this.x = Math.ceil(this.x),
                this.y = Math.ceil(this.y),
                this
            }
            round() {
                return this.x = Math.round(this.x),
                this.y = Math.round(this.y),
                this
            }
            roundToZero() {
                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
                this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
                this
            }
            negate() {
                return this.x = -this.x,
                this.y = -this.y,
                this
            }
            dot(t) {
                return this.x * t.x + this.y * t.y
            }
            cross(t) {
                return this.x * t.y - this.y * t.x
            }
            lengthSq() {
                return this.x * this.x + this.y * this.y
            }
            length() {
                return Math.sqrt(this.x * this.x + this.y * this.y)
            }
            manhattanLength() {
                return Math.abs(this.x) + Math.abs(this.y)
            }
            normalize() {
                return this.divideScalar(this.length() || 1)
            }
            angle() {
                return Math.atan2(-this.y, -this.x) + Math.PI
            }
            distanceTo(t) {
                return Math.sqrt(this.distanceToSquared(t))
            }
            distanceToSquared(t) {
                const e = this.x - t.x
                  , n = this.y - t.y;
                return e * e + n * n
            }
            manhattanDistanceTo(t) {
                return Math.abs(this.x - t.x) + Math.abs(this.y - t.y)
            }
            setLength(t) {
                return this.normalize().multiplyScalar(t)
            }
            lerp(t, e) {
                return this.x += (t.x - this.x) * e,
                this.y += (t.y - this.y) * e,
                this
            }
            lerpVectors(t, e, n) {
                return this.x = t.x + (e.x - t.x) * n,
                this.y = t.y + (e.y - t.y) * n,
                this
            }
            equals(t) {
                return t.x === this.x && t.y === this.y
            }
            fromArray(t, e=0) {
                return this.x = t[e],
                this.y = t[e + 1],
                this
            }
            toArray(t=[], e=0) {
                return t[e] = this.x,
                t[e + 1] = this.y,
                t
            }
            fromBufferAttribute(t, e, n) {
                return void 0 !== n && console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),
                this.x = t.getX(e),
                this.y = t.getY(e),
                this
            }
            rotateAround(t, e) {
                const n = Math.cos(e)
                  , s = Math.sin(e)
                  , r = this.x - t.x
                  , o = this.y - t.y;
                return this.x = r * n - o * s + t.x,
                this.y = r * s + o * n + t.y,
                this
            }
            random() {
                return this.x = Math.random(),
                this.y = Math.random(),
                this
            }
            *[Symbol.iterator]() {
                yield this.x,
                yield this.y
            }
        }
        vt.prototype.isVector2 = !0;
        class _t {
            constructor() {
                this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1],
                arguments.length > 0 && console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")
            }
            set(t, e, n, r, o, l, c, h, d) {
                const f = this.elements;
                return f[0] = t,
                f[1] = r,
                f[2] = c,
                f[3] = e,
                f[4] = o,
                f[5] = h,
                f[6] = n,
                f[7] = l,
                f[8] = d,
                this
            }
            identity() {
                return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1),
                this
            }
            copy(t) {
                const e = this.elements
                  , n = t.elements;
                return e[0] = n[0],
                e[1] = n[1],
                e[2] = n[2],
                e[3] = n[3],
                e[4] = n[4],
                e[5] = n[5],
                e[6] = n[6],
                e[7] = n[7],
                e[8] = n[8],
                this
            }
            extractBasis(t, e, n) {
                return t.setFromMatrix3Column(this, 0),
                e.setFromMatrix3Column(this, 1),
                n.setFromMatrix3Column(this, 2),
                this
            }
            setFromMatrix4(t) {
                const e = t.elements;
                return this.set(e[0], e[4], e[8], e[1], e[5], e[9], e[2], e[6], e[10]),
                this
            }
            multiply(t) {
                return this.multiplyMatrices(this, t)
            }
            premultiply(t) {
                return this.multiplyMatrices(t, this)
            }
            multiplyMatrices(a, b) {
                const t = a.elements
                  , e = b.elements
                  , n = this.elements
                  , r = t[0]
                  , o = t[3]
                  , l = t[6]
                  , c = t[1]
                  , h = t[4]
                  , d = t[7]
                  , f = t[2]
                  , m = t[5]
                  , v = t[8]
                  , _ = e[0]
                  , x = e[3]
                  , y = e[6]
                  , M = e[1]
                  , w = e[4]
                  , S = e[7]
                  , T = e[2]
                  , E = e[5]
                  , A = e[8];
                return n[0] = r * _ + o * M + l * T,
                n[3] = r * x + o * w + l * E,
                n[6] = r * y + o * S + l * A,
                n[1] = c * _ + h * M + d * T,
                n[4] = c * x + h * w + d * E,
                n[7] = c * y + h * S + d * A,
                n[2] = f * _ + m * M + v * T,
                n[5] = f * x + m * w + v * E,
                n[8] = f * y + m * S + v * A,
                this
            }
            multiplyScalar(s) {
                const t = this.elements;
                return t[0] *= s,
                t[3] *= s,
                t[6] *= s,
                t[1] *= s,
                t[4] *= s,
                t[7] *= s,
                t[2] *= s,
                t[5] *= s,
                t[8] *= s,
                this
            }
            determinant() {
                const t = this.elements
                  , a = t[0]
                  , b = t[1]
                  , e = t[2]
                  , n = t[3]
                  , r = t[4]
                  , o = t[5]
                  , g = t[6]
                  , l = t[7]
                  , i = t[8];
                return a * r * i - a * o * l - b * n * i + b * o * g + e * n * l - e * r * g
            }
            invert() {
                const t = this.elements
                  , e = t[0]
                  , n = t[1]
                  , r = t[2]
                  , o = t[3]
                  , l = t[4]
                  , c = t[5]
                  , h = t[6]
                  , d = t[7]
                  , f = t[8]
                  , m = f * l - c * d
                  , v = c * h - f * o
                  , _ = d * o - l * h
                  , x = e * m + n * v + r * _;
                if (0 === x)
                    return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
                const y = 1 / x;
                return t[0] = m * y,
                t[1] = (r * d - f * n) * y,
                t[2] = (c * n - r * l) * y,
                t[3] = v * y,
                t[4] = (f * e - r * h) * y,
                t[5] = (r * o - c * e) * y,
                t[6] = _ * y,
                t[7] = (n * h - d * e) * y,
                t[8] = (l * e - n * o) * y,
                this
            }
            transpose() {
                let t;
                const e = this.elements;
                return t = e[1],
                e[1] = e[3],
                e[3] = t,
                t = e[2],
                e[2] = e[6],
                e[6] = t,
                t = e[5],
                e[5] = e[7],
                e[7] = t,
                this
            }
            getNormalMatrix(t) {
                return this.setFromMatrix4(t).invert().transpose()
            }
            transposeIntoArray(t) {
                const e = this.elements;
                return t[0] = e[0],
                t[1] = e[3],
                t[2] = e[6],
                t[3] = e[1],
                t[4] = e[4],
                t[5] = e[7],
                t[6] = e[2],
                t[7] = e[5],
                t[8] = e[8],
                this
            }
            setUvTransform(t, e, n, r, o, l, c) {
                const h = Math.cos(o)
                  , s = Math.sin(o);
                return this.set(n * h, n * s, -n * (h * l + s * c) + l + t, -r * s, r * h, -r * (-s * l + h * c) + c + e, 0, 0, 1),
                this
            }
            scale(t, e) {
                const n = this.elements;
                return n[0] *= t,
                n[3] *= t,
                n[6] *= t,
                n[1] *= e,
                n[4] *= e,
                n[7] *= e,
                this
            }
            rotate(t) {
                const e = Math.cos(t)
                  , s = Math.sin(t)
                  , n = this.elements
                  , r = n[0]
                  , o = n[3]
                  , l = n[6]
                  , c = n[1]
                  , h = n[4]
                  , d = n[7];
                return n[0] = e * r + s * c,
                n[3] = e * o + s * h,
                n[6] = e * l + s * d,
                n[1] = -s * r + e * c,
                n[4] = -s * o + e * h,
                n[7] = -s * l + e * d,
                this
            }
            translate(t, e) {
                const n = this.elements;
                return n[0] += t * n[2],
                n[3] += t * n[5],
                n[6] += t * n[8],
                n[1] += e * n[2],
                n[4] += e * n[5],
                n[7] += e * n[8],
                this
            }
            equals(t) {
                const e = this.elements
                  , n = t.elements;
                for (let i = 0; i < 9; i++)
                    if (e[i] !== n[i])
                        return !1;
                return !0
            }
            fromArray(t, e=0) {
                for (let i = 0; i < 9; i++)
                    this.elements[i] = t[i + e];
                return this
            }
            toArray(t=[], e=0) {
                const n = this.elements;
                return t[e] = n[0],
                t[e + 1] = n[1],
                t[e + 2] = n[2],
                t[e + 3] = n[3],
                t[e + 4] = n[4],
                t[e + 5] = n[5],
                t[e + 6] = n[6],
                t[e + 7] = n[7],
                t[e + 8] = n[8],
                t
            }
            clone() {
                return (new this.constructor).fromArray(this.elements)
            }
        }
        function xt(t) {
            if (0 === t.length)
                return -1 / 0;
            let e = t[0];
            for (let i = 1, n = t.length; i < n; ++i)
                t[i] > e && (e = t[i]);
            return e
        }
        _t.prototype.isMatrix3 = !0;
        Int8Array,
        Uint8Array,
        Uint8ClampedArray,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array;
        function yt(t) {
            return document.createElementNS("http://www.w3.org/1999/xhtml", t)
        }
        function Mt(t, e=0) {
            let h1 = 3735928559 ^ e
              , h2 = 1103547991 ^ e;
            for (let e, i = 0; i < t.length; i++)
                e = t.charCodeAt(i),
                h1 = Math.imul(h1 ^ e, 2654435761),
                h2 = Math.imul(h2 ^ e, 1597334677);
            return h1 = Math.imul(h1 ^ h1 >>> 16, 2246822507) ^ Math.imul(h2 ^ h2 >>> 13, 3266489909),
            h2 = Math.imul(h2 ^ h2 >>> 16, 2246822507) ^ Math.imul(h1 ^ h1 >>> 13, 3266489909),
            4294967296 * (2097151 & h2) + (h1 >>> 0)
        }
        let bt;
        class wt {
            static getDataURL(image) {
                if (/^data:/i.test(image.src))
                    return image.src;
                if ("undefined" == typeof HTMLCanvasElement)
                    return image.src;
                let canvas;
                if (image instanceof HTMLCanvasElement)
                    canvas = image;
                else {
                    void 0 === bt && (bt = yt("canvas")),
                    bt.width = image.width,
                    bt.height = image.height;
                    const t = bt.getContext("2d");
                    image instanceof ImageData ? t.putImageData(image, 0, 0) : t.drawImage(image, 0, 0, image.width, image.height),
                    canvas = bt
                }
                return canvas.width > 2048 || canvas.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", image),
                canvas.toDataURL("image/jpeg", .6)) : canvas.toDataURL("image/png")
            }
        }
        let St = 0;
        class Tt extends at {
            constructor(image=Tt.DEFAULT_IMAGE, t=Tt.DEFAULT_MAPPING, e=1001, n=1001, r=1006, o=1008, l=1023, c=1009, h=1, d=3e3) {
                super(),
                Object.defineProperty(this, "id", {
                    value: St++
                }),
                this.uuid = ht(),
                this.name = "",
                this.image = image,
                this.mipmaps = [],
                this.mapping = t,
                this.wrapS = e,
                this.wrapT = n,
                this.magFilter = r,
                this.minFilter = o,
                this.anisotropy = h,
                this.format = l,
                this.internalFormat = null,
                this.type = c,
                this.offset = new vt(0,0),
                this.repeat = new vt(1,1),
                this.center = new vt(0,0),
                this.rotation = 0,
                this.matrixAutoUpdate = !0,
                this.matrix = new _t,
                this.generateMipmaps = !0,
                this.premultiplyAlpha = !1,
                this.flipY = !0,
                this.unpackAlignment = 4,
                this.encoding = d,
                this.userData = {},
                this.version = 0,
                this.onUpdate = null,
                this.isRenderTargetTexture = !1
            }
            updateMatrix() {
                this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y)
            }
            clone() {
                return (new this.constructor).copy(this)
            }
            copy(source) {
                return this.name = source.name,
                this.image = source.image,
                this.mipmaps = source.mipmaps.slice(0),
                this.mapping = source.mapping,
                this.wrapS = source.wrapS,
                this.wrapT = source.wrapT,
                this.magFilter = source.magFilter,
                this.minFilter = source.minFilter,
                this.anisotropy = source.anisotropy,
                this.format = source.format,
                this.internalFormat = source.internalFormat,
                this.type = source.type,
                this.offset.copy(source.offset),
                this.repeat.copy(source.repeat),
                this.center.copy(source.center),
                this.rotation = source.rotation,
                this.matrixAutoUpdate = source.matrixAutoUpdate,
                this.matrix.copy(source.matrix),
                this.generateMipmaps = source.generateMipmaps,
                this.premultiplyAlpha = source.premultiplyAlpha,
                this.flipY = source.flipY,
                this.unpackAlignment = source.unpackAlignment,
                this.encoding = source.encoding,
                this.userData = JSON.parse(JSON.stringify(source.userData)),
                this
            }
            toJSON(meta) {
                const t = void 0 === meta || "string" == typeof meta;
                if (!t && void 0 !== meta.textures[this.uuid])
                    return meta.textures[this.uuid];
                const output = {
                    metadata: {
                        version: 4.5,
                        type: "Texture",
                        generator: "Texture.toJSON"
                    },
                    uuid: this.uuid,
                    name: this.name,
                    mapping: this.mapping,
                    repeat: [this.repeat.x, this.repeat.y],
                    offset: [this.offset.x, this.offset.y],
                    center: [this.center.x, this.center.y],
                    rotation: this.rotation,
                    wrap: [this.wrapS, this.wrapT],
                    format: this.format,
                    type: this.type,
                    encoding: this.encoding,
                    minFilter: this.minFilter,
                    magFilter: this.magFilter,
                    anisotropy: this.anisotropy,
                    flipY: this.flipY,
                    premultiplyAlpha: this.premultiplyAlpha,
                    unpackAlignment: this.unpackAlignment
                };
                if (void 0 !== this.image) {
                    const image = this.image;
                    if (void 0 === image.uuid && (image.uuid = ht()),
                    !t && void 0 === meta.images[image.uuid]) {
                        let t;
                        if (Array.isArray(image)) {
                            t = [];
                            for (let i = 0, e = image.length; i < e; i++)
                                image[i].isDataTexture ? t.push(Et(image[i].image)) : t.push(Et(image[i]))
                        } else
                            t = Et(image);
                        meta.images[image.uuid] = {
                            uuid: image.uuid,
                            url: t
                        }
                    }
                    output.image = image.uuid
                }
                return "{}" !== JSON.stringify(this.userData) && (output.userData = this.userData),
                t || (meta.textures[this.uuid] = output),
                output
            }
            dispose() {
                this.dispatchEvent({
                    type: "dispose"
                })
            }
            transformUv(t) {
                if (300 !== this.mapping)
                    return t;
                if (t.applyMatrix3(this.matrix),
                t.x < 0 || t.x > 1)
                    switch (this.wrapS) {
                    case S:
                        t.x = t.x - Math.floor(t.x);
                        break;
                    case T:
                        t.x = t.x < 0 ? 0 : 1;
                        break;
                    case E:
                        1 === Math.abs(Math.floor(t.x) % 2) ? t.x = Math.ceil(t.x) - t.x : t.x = t.x - Math.floor(t.x)
                    }
                if (t.y < 0 || t.y > 1)
                    switch (this.wrapT) {
                    case S:
                        t.y = t.y - Math.floor(t.y);
                        break;
                    case T:
                        t.y = t.y < 0 ? 0 : 1;
                        break;
                    case E:
                        1 === Math.abs(Math.floor(t.y) % 2) ? t.y = Math.ceil(t.y) - t.y : t.y = t.y - Math.floor(t.y)
                    }
                return this.flipY && (t.y = 1 - t.y),
                t
            }
            set needsUpdate(t) {
                !0 === t && this.version++
            }
        }
        function Et(image) {
            return "undefined" != typeof HTMLImageElement && image instanceof HTMLImageElement || "undefined" != typeof HTMLCanvasElement && image instanceof HTMLCanvasElement || "undefined" != typeof ImageBitmap && image instanceof ImageBitmap ? wt.getDataURL(image) : image.data ? {
                data: Array.prototype.slice.call(image.data),
                width: image.width,
                height: image.height,
                type: image.data.constructor.name
            } : (console.warn("THREE.Texture: Unable to serialize Texture."),
            {})
        }
        Tt.DEFAULT_IMAGE = void 0,
        Tt.DEFAULT_MAPPING = 300,
        Tt.prototype.isTexture = !0;
        class At {
            constructor(t=0, e=0, n=0, r=1) {
                this.x = t,
                this.y = e,
                this.z = n,
                this.w = r
            }
            get width() {
                return this.z
            }
            set width(t) {
                this.z = t
            }
            get height() {
                return this.w
            }
            set height(t) {
                this.w = t
            }
            set(t, e, n, r) {
                return this.x = t,
                this.y = e,
                this.z = n,
                this.w = r,
                this
            }
            setScalar(t) {
                return this.x = t,
                this.y = t,
                this.z = t,
                this.w = t,
                this
            }
            setX(t) {
                return this.x = t,
                this
            }
            setY(t) {
                return this.y = t,
                this
            }
            setZ(t) {
                return this.z = t,
                this
            }
            setW(t) {
                return this.w = t,
                this
            }
            setComponent(t, e) {
                switch (t) {
                case 0:
                    this.x = e;
                    break;
                case 1:
                    this.y = e;
                    break;
                case 2:
                    this.z = e;
                    break;
                case 3:
                    this.w = e;
                    break;
                default:
                    throw new Error("index is out of range: " + t)
                }
                return this
            }
            getComponent(t) {
                switch (t) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                case 2:
                    return this.z;
                case 3:
                    return this.w;
                default:
                    throw new Error("index is out of range: " + t)
                }
            }
            clone() {
                return new this.constructor(this.x,this.y,this.z,this.w)
            }
            copy(t) {
                return this.x = t.x,
                this.y = t.y,
                this.z = t.z,
                this.w = void 0 !== t.w ? t.w : 1,
                this
            }
            add(t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
                this.addVectors(t, e)) : (this.x += t.x,
                this.y += t.y,
                this.z += t.z,
                this.w += t.w,
                this)
            }
            addScalar(s) {
                return this.x += s,
                this.y += s,
                this.z += s,
                this.w += s,
                this
            }
            addVectors(a, b) {
                return this.x = a.x + b.x,
                this.y = a.y + b.y,
                this.z = a.z + b.z,
                this.w = a.w + b.w,
                this
            }
            addScaledVector(t, s) {
                return this.x += t.x * s,
                this.y += t.y * s,
                this.z += t.z * s,
                this.w += t.w * s,
                this
            }
            sub(t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
                this.subVectors(t, e)) : (this.x -= t.x,
                this.y -= t.y,
                this.z -= t.z,
                this.w -= t.w,
                this)
            }
            subScalar(s) {
                return this.x -= s,
                this.y -= s,
                this.z -= s,
                this.w -= s,
                this
            }
            subVectors(a, b) {
                return this.x = a.x - b.x,
                this.y = a.y - b.y,
                this.z = a.z - b.z,
                this.w = a.w - b.w,
                this
            }
            multiply(t) {
                return this.x *= t.x,
                this.y *= t.y,
                this.z *= t.z,
                this.w *= t.w,
                this
            }
            multiplyScalar(t) {
                return this.x *= t,
                this.y *= t,
                this.z *= t,
                this.w *= t,
                this
            }
            applyMatrix4(t) {
                const e = this.x
                  , n = this.y
                  , r = this.z
                  , o = this.w
                  , l = t.elements;
                return this.x = l[0] * e + l[4] * n + l[8] * r + l[12] * o,
                this.y = l[1] * e + l[5] * n + l[9] * r + l[13] * o,
                this.z = l[2] * e + l[6] * n + l[10] * r + l[14] * o,
                this.w = l[3] * e + l[7] * n + l[11] * r + l[15] * o,
                this
            }
            divideScalar(t) {
                return this.multiplyScalar(1 / t)
            }
            setAxisAngleFromQuaternion(q) {
                this.w = 2 * Math.acos(q.w);
                const s = Math.sqrt(1 - q.w * q.w);
                return s < 1e-4 ? (this.x = 1,
                this.y = 0,
                this.z = 0) : (this.x = q.x / s,
                this.y = q.y / s,
                this.z = q.z / s),
                this
            }
            setAxisAngleFromRotationMatrix(t) {
                let e, n, r, o;
                const l = .01
                  , c = .1
                  , h = t.elements
                  , d = h[0]
                  , f = h[4]
                  , m = h[8]
                  , v = h[1]
                  , _ = h[5]
                  , x = h[9]
                  , y = h[2]
                  , M = h[6]
                  , w = h[10];
                if (Math.abs(f - v) < l && Math.abs(m - y) < l && Math.abs(x - M) < l) {
                    if (Math.abs(f + v) < c && Math.abs(m + y) < c && Math.abs(x + M) < c && Math.abs(d + _ + w - 3) < c)
                        return this.set(1, 0, 0, 0),
                        this;
                    e = Math.PI;
                    const t = (d + 1) / 2
                      , h = (_ + 1) / 2
                      , S = (w + 1) / 2
                      , T = (f + v) / 4
                      , E = (m + y) / 4
                      , A = (x + M) / 4;
                    return t > h && t > S ? t < l ? (n = 0,
                    r = .707106781,
                    o = .707106781) : (n = Math.sqrt(t),
                    r = T / n,
                    o = E / n) : h > S ? h < l ? (n = .707106781,
                    r = 0,
                    o = .707106781) : (r = Math.sqrt(h),
                    n = T / r,
                    o = A / r) : S < l ? (n = .707106781,
                    r = .707106781,
                    o = 0) : (o = Math.sqrt(S),
                    n = E / o,
                    r = A / o),
                    this.set(n, r, o, e),
                    this
                }
                let s = Math.sqrt((M - x) * (M - x) + (m - y) * (m - y) + (v - f) * (v - f));
                return Math.abs(s) < .001 && (s = 1),
                this.x = (M - x) / s,
                this.y = (m - y) / s,
                this.z = (v - f) / s,
                this.w = Math.acos((d + _ + w - 1) / 2),
                this
            }
            min(t) {
                return this.x = Math.min(this.x, t.x),
                this.y = Math.min(this.y, t.y),
                this.z = Math.min(this.z, t.z),
                this.w = Math.min(this.w, t.w),
                this
            }
            max(t) {
                return this.x = Math.max(this.x, t.x),
                this.y = Math.max(this.y, t.y),
                this.z = Math.max(this.z, t.z),
                this.w = Math.max(this.w, t.w),
                this
            }
            clamp(t, e) {
                return this.x = Math.max(t.x, Math.min(e.x, this.x)),
                this.y = Math.max(t.y, Math.min(e.y, this.y)),
                this.z = Math.max(t.z, Math.min(e.z, this.z)),
                this.w = Math.max(t.w, Math.min(e.w, this.w)),
                this
            }
            clampScalar(t, e) {
                return this.x = Math.max(t, Math.min(e, this.x)),
                this.y = Math.max(t, Math.min(e, this.y)),
                this.z = Math.max(t, Math.min(e, this.z)),
                this.w = Math.max(t, Math.min(e, this.w)),
                this
            }
            clampLength(t, e) {
                const n = this.length();
                return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)))
            }
            floor() {
                return this.x = Math.floor(this.x),
                this.y = Math.floor(this.y),
                this.z = Math.floor(this.z),
                this.w = Math.floor(this.w),
                this
            }
            ceil() {
                return this.x = Math.ceil(this.x),
                this.y = Math.ceil(this.y),
                this.z = Math.ceil(this.z),
                this.w = Math.ceil(this.w),
                this
            }
            round() {
                return this.x = Math.round(this.x),
                this.y = Math.round(this.y),
                this.z = Math.round(this.z),
                this.w = Math.round(this.w),
                this
            }
            roundToZero() {
                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
                this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
                this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z),
                this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w),
                this
            }
            negate() {
                return this.x = -this.x,
                this.y = -this.y,
                this.z = -this.z,
                this.w = -this.w,
                this
            }
            dot(t) {
                return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w
            }
            lengthSq() {
                return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
            }
            length() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)
            }
            manhattanLength() {
                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w)
            }
            normalize() {
                return this.divideScalar(this.length() || 1)
            }
            setLength(t) {
                return this.normalize().multiplyScalar(t)
            }
            lerp(t, e) {
                return this.x += (t.x - this.x) * e,
                this.y += (t.y - this.y) * e,
                this.z += (t.z - this.z) * e,
                this.w += (t.w - this.w) * e,
                this
            }
            lerpVectors(t, e, n) {
                return this.x = t.x + (e.x - t.x) * n,
                this.y = t.y + (e.y - t.y) * n,
                this.z = t.z + (e.z - t.z) * n,
                this.w = t.w + (e.w - t.w) * n,
                this
            }
            equals(t) {
                return t.x === this.x && t.y === this.y && t.z === this.z && t.w === this.w
            }
            fromArray(t, e=0) {
                return this.x = t[e],
                this.y = t[e + 1],
                this.z = t[e + 2],
                this.w = t[e + 3],
                this
            }
            toArray(t=[], e=0) {
                return t[e] = this.x,
                t[e + 1] = this.y,
                t[e + 2] = this.z,
                t[e + 3] = this.w,
                t
            }
            fromBufferAttribute(t, e, n) {
                return void 0 !== n && console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),
                this.x = t.getX(e),
                this.y = t.getY(e),
                this.z = t.getZ(e),
                this.w = t.getW(e),
                this
            }
            random() {
                return this.x = Math.random(),
                this.y = Math.random(),
                this.z = Math.random(),
                this.w = Math.random(),
                this
            }
            *[Symbol.iterator]() {
                yield this.x,
                yield this.y,
                yield this.z,
                yield this.w
            }
        }
        At.prototype.isVector4 = !0;
        class Lt extends at {
            constructor(t, e, n={}) {
                super(),
                this.width = t,
                this.height = e,
                this.depth = 1,
                this.scissor = new At(0,0,t,e),
                this.scissorTest = !1,
                this.viewport = new At(0,0,t,e),
                this.texture = new Tt(void 0,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),
                this.texture.isRenderTargetTexture = !0,
                this.texture.image = {
                    width: t,
                    height: e,
                    depth: 1
                },
                this.texture.generateMipmaps = void 0 !== n.generateMipmaps && n.generateMipmaps,
                this.texture.internalFormat = void 0 !== n.internalFormat ? n.internalFormat : null,
                this.texture.minFilter = void 0 !== n.minFilter ? n.minFilter : C,
                this.depthBuffer = void 0 === n.depthBuffer || n.depthBuffer,
                this.stencilBuffer = void 0 !== n.stencilBuffer && n.stencilBuffer,
                this.depthTexture = void 0 !== n.depthTexture ? n.depthTexture : null
            }
            setTexture(t) {
                t.image = {
                    width: this.width,
                    height: this.height,
                    depth: this.depth
                },
                this.texture = t
            }
            setSize(t, e, n=1) {
                this.width === t && this.height === e && this.depth === n || (this.width = t,
                this.height = e,
                this.depth = n,
                this.texture.image.width = t,
                this.texture.image.height = e,
                this.texture.image.depth = n,
                this.dispose()),
                this.viewport.set(0, 0, t, e),
                this.scissor.set(0, 0, t, e)
            }
            clone() {
                return (new this.constructor).copy(this)
            }
            copy(source) {
                return this.width = source.width,
                this.height = source.height,
                this.depth = source.depth,
                this.viewport.copy(source.viewport),
                this.texture = source.texture.clone(),
                this.texture.image = {
                    ...this.texture.image
                },
                this.depthBuffer = source.depthBuffer,
                this.stencilBuffer = source.stencilBuffer,
                this.depthTexture = source.depthTexture,
                this
            }
            dispose() {
                this.dispatchEvent({
                    type: "dispose"
                })
            }
        }
        Lt.prototype.isWebGLRenderTarget = !0;
        (class extends Lt {
            constructor(t, e, n) {
                super(t, e);
                const r = this.texture;
                this.texture = [];
                for (let i = 0; i < n; i++)
                    this.texture[i] = r.clone()
            }
            setSize(t, e, n=1) {
                if (this.width !== t || this.height !== e || this.depth !== n) {
                    this.width = t,
                    this.height = e,
                    this.depth = n;
                    for (let i = 0, r = this.texture.length; i < r; i++)
                        this.texture[i].image.width = t,
                        this.texture[i].image.height = e,
                        this.texture[i].image.depth = n;
                    this.dispose()
                }
                return this.viewport.set(0, 0, t, e),
                this.scissor.set(0, 0, t, e),
                this
            }
            copy(source) {
                this.dispose(),
                this.width = source.width,
                this.height = source.height,
                this.depth = source.depth,
                this.viewport.set(0, 0, this.width, this.height),
                this.scissor.set(0, 0, this.width, this.height),
                this.depthBuffer = source.depthBuffer,
                this.stencilBuffer = source.stencilBuffer,
                this.depthTexture = source.depthTexture,
                this.texture.length = 0;
                for (let i = 0, t = source.texture.length; i < t; i++)
                    this.texture[i] = source.texture[i].clone();
                return this
            }
        }
        ).prototype.isWebGLMultipleRenderTargets = !0;
        class Rt extends Lt {
            constructor(t, e, n) {
                super(t, e, n),
                this.samples = 4
            }
            copy(source) {
                return super.copy.call(this, source),
                this.samples = source.samples,
                this
            }
        }
        Rt.prototype.isWebGLMultisampleRenderTarget = !0;
        class Ct {
            constructor(t=0, e=0, n=0, r=1) {
                this._x = t,
                this._y = e,
                this._z = n,
                this._w = r
            }
            static slerp(t, e, n, r) {
                return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),
                n.slerpQuaternions(t, e, r)
            }
            static slerpFlat(t, e, n, r, o, l, c) {
                let h = n[r + 0]
                  , d = n[r + 1]
                  , f = n[r + 2]
                  , m = n[r + 3];
                const v = o[l + 0]
                  , _ = o[l + 1]
                  , x = o[l + 2]
                  , y = o[l + 3];
                if (0 === c)
                    return t[e + 0] = h,
                    t[e + 1] = d,
                    t[e + 2] = f,
                    void (t[e + 3] = m);
                if (1 === c)
                    return t[e + 0] = v,
                    t[e + 1] = _,
                    t[e + 2] = x,
                    void (t[e + 3] = y);
                if (m !== y || h !== v || d !== _ || f !== x) {
                    let s = 1 - c;
                    const t = h * v + d * _ + f * x + m * y
                      , e = t >= 0 ? 1 : -1
                      , n = 1 - t * t;
                    if (n > Number.EPSILON) {
                        const r = Math.sqrt(n)
                          , o = Math.atan2(r, t * e);
                        s = Math.sin(s * o) / r,
                        c = Math.sin(c * o) / r
                    }
                    const r = c * e;
                    if (h = h * s + v * r,
                    d = d * s + _ * r,
                    f = f * s + x * r,
                    m = m * s + y * r,
                    s === 1 - c) {
                        const t = 1 / Math.sqrt(h * h + d * d + f * f + m * m);
                        h *= t,
                        d *= t,
                        f *= t,
                        m *= t
                    }
                }
                t[e] = h,
                t[e + 1] = d,
                t[e + 2] = f,
                t[e + 3] = m
            }
            static multiplyQuaternionsFlat(t, e, n, r, o, l) {
                const c = n[r]
                  , h = n[r + 1]
                  , d = n[r + 2]
                  , f = n[r + 3]
                  , m = o[l]
                  , v = o[l + 1]
                  , _ = o[l + 2]
                  , x = o[l + 3];
                return t[e] = c * x + f * m + h * _ - d * v,
                t[e + 1] = h * x + f * v + d * m - c * _,
                t[e + 2] = d * x + f * _ + c * v - h * m,
                t[e + 3] = f * x - c * m - h * v - d * _,
                t
            }
            get x() {
                return this._x
            }
            set x(t) {
                this._x = t,
                this._onChangeCallback()
            }
            get y() {
                return this._y
            }
            set y(t) {
                this._y = t,
                this._onChangeCallback()
            }
            get z() {
                return this._z
            }
            set z(t) {
                this._z = t,
                this._onChangeCallback()
            }
            get w() {
                return this._w
            }
            set w(t) {
                this._w = t,
                this._onChangeCallback()
            }
            set(t, e, n, r) {
                return this._x = t,
                this._y = e,
                this._z = n,
                this._w = r,
                this._onChangeCallback(),
                this
            }
            clone() {
                return new this.constructor(this._x,this._y,this._z,this._w)
            }
            copy(t) {
                return this._x = t.x,
                this._y = t.y,
                this._z = t.z,
                this._w = t.w,
                this._onChangeCallback(),
                this
            }
            setFromEuler(t, e) {
                if (!t || !t.isEuler)
                    throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");
                const n = t._x
                  , r = t._y
                  , o = t._z
                  , l = t._order
                  , c = Math.cos
                  , h = Math.sin
                  , d = c(n / 2)
                  , f = c(r / 2)
                  , m = c(o / 2)
                  , v = h(n / 2)
                  , _ = h(r / 2)
                  , x = h(o / 2);
                switch (l) {
                case "XYZ":
                    this._x = v * f * m + d * _ * x,
                    this._y = d * _ * m - v * f * x,
                    this._z = d * f * x + v * _ * m,
                    this._w = d * f * m - v * _ * x;
                    break;
                case "YXZ":
                    this._x = v * f * m + d * _ * x,
                    this._y = d * _ * m - v * f * x,
                    this._z = d * f * x - v * _ * m,
                    this._w = d * f * m + v * _ * x;
                    break;
                case "ZXY":
                    this._x = v * f * m - d * _ * x,
                    this._y = d * _ * m + v * f * x,
                    this._z = d * f * x + v * _ * m,
                    this._w = d * f * m - v * _ * x;
                    break;
                case "ZYX":
                    this._x = v * f * m - d * _ * x,
                    this._y = d * _ * m + v * f * x,
                    this._z = d * f * x - v * _ * m,
                    this._w = d * f * m + v * _ * x;
                    break;
                case "YZX":
                    this._x = v * f * m + d * _ * x,
                    this._y = d * _ * m + v * f * x,
                    this._z = d * f * x - v * _ * m,
                    this._w = d * f * m - v * _ * x;
                    break;
                case "XZY":
                    this._x = v * f * m - d * _ * x,
                    this._y = d * _ * m - v * f * x,
                    this._z = d * f * x + v * _ * m,
                    this._w = d * f * m + v * _ * x;
                    break;
                default:
                    console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + l)
                }
                return !1 !== e && this._onChangeCallback(),
                this
            }
            setFromAxisAngle(t, e) {
                const n = e / 2
                  , s = Math.sin(n);
                return this._x = t.x * s,
                this._y = t.y * s,
                this._z = t.z * s,
                this._w = Math.cos(n),
                this._onChangeCallback(),
                this
            }
            setFromRotationMatrix(t) {
                const e = t.elements
                  , n = e[0]
                  , r = e[4]
                  , o = e[8]
                  , l = e[1]
                  , c = e[5]
                  , h = e[9]
                  , d = e[2]
                  , f = e[6]
                  , m = e[10]
                  , v = n + c + m;
                if (v > 0) {
                    const s = .5 / Math.sqrt(v + 1);
                    this._w = .25 / s,
                    this._x = (f - h) * s,
                    this._y = (o - d) * s,
                    this._z = (l - r) * s
                } else if (n > c && n > m) {
                    const s = 2 * Math.sqrt(1 + n - c - m);
                    this._w = (f - h) / s,
                    this._x = .25 * s,
                    this._y = (r + l) / s,
                    this._z = (o + d) / s
                } else if (c > m) {
                    const s = 2 * Math.sqrt(1 + c - n - m);
                    this._w = (o - d) / s,
                    this._x = (r + l) / s,
                    this._y = .25 * s,
                    this._z = (h + f) / s
                } else {
                    const s = 2 * Math.sqrt(1 + m - n - c);
                    this._w = (l - r) / s,
                    this._x = (o + d) / s,
                    this._y = (h + f) / s,
                    this._z = .25 * s
                }
                return this._onChangeCallback(),
                this
            }
            setFromUnitVectors(t, e) {
                let n = t.dot(e) + 1;
                return n < Number.EPSILON ? (n = 0,
                Math.abs(t.x) > Math.abs(t.z) ? (this._x = -t.y,
                this._y = t.x,
                this._z = 0,
                this._w = n) : (this._x = 0,
                this._y = -t.z,
                this._z = t.y,
                this._w = n)) : (this._x = t.y * e.z - t.z * e.y,
                this._y = t.z * e.x - t.x * e.z,
                this._z = t.x * e.y - t.y * e.x,
                this._w = n),
                this.normalize()
            }
            angleTo(q) {
                return 2 * Math.acos(Math.abs(ut(this.dot(q), -1, 1)))
            }
            rotateTowards(q, t) {
                const e = this.angleTo(q);
                if (0 === e)
                    return this;
                const n = Math.min(1, t / e);
                return this.slerp(q, n),
                this
            }
            identity() {
                return this.set(0, 0, 0, 1)
            }
            invert() {
                return this.conjugate()
            }
            conjugate() {
                return this._x *= -1,
                this._y *= -1,
                this._z *= -1,
                this._onChangeCallback(),
                this
            }
            dot(t) {
                return this._x * t._x + this._y * t._y + this._z * t._z + this._w * t._w
            }
            lengthSq() {
                return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w
            }
            length() {
                return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w)
            }
            normalize() {
                let t = this.length();
                return 0 === t ? (this._x = 0,
                this._y = 0,
                this._z = 0,
                this._w = 1) : (t = 1 / t,
                this._x = this._x * t,
                this._y = this._y * t,
                this._z = this._z * t,
                this._w = this._w * t),
                this._onChangeCallback(),
                this
            }
            multiply(q, p) {
                return void 0 !== p ? (console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),
                this.multiplyQuaternions(q, p)) : this.multiplyQuaternions(this, q)
            }
            premultiply(q) {
                return this.multiplyQuaternions(q, this)
            }
            multiplyQuaternions(a, b) {
                const t = a._x
                  , e = a._y
                  , n = a._z
                  , r = a._w
                  , o = b._x
                  , l = b._y
                  , c = b._z
                  , h = b._w;
                return this._x = t * h + r * o + e * c - n * l,
                this._y = e * h + r * l + n * o - t * c,
                this._z = n * h + r * c + t * l - e * o,
                this._w = r * h - t * o - e * l - n * c,
                this._onChangeCallback(),
                this
            }
            slerp(t, e) {
                if (0 === e)
                    return this;
                if (1 === e)
                    return this.copy(t);
                const n = this._x
                  , r = this._y
                  , o = this._z
                  , l = this._w;
                let c = l * t._w + n * t._x + r * t._y + o * t._z;
                if (c < 0 ? (this._w = -t._w,
                this._x = -t._x,
                this._y = -t._y,
                this._z = -t._z,
                c = -c) : this.copy(t),
                c >= 1)
                    return this._w = l,
                    this._x = n,
                    this._y = r,
                    this._z = o,
                    this;
                const h = 1 - c * c;
                if (h <= Number.EPSILON) {
                    const s = 1 - e;
                    return this._w = s * l + e * this._w,
                    this._x = s * n + e * this._x,
                    this._y = s * r + e * this._y,
                    this._z = s * o + e * this._z,
                    this.normalize(),
                    this._onChangeCallback(),
                    this
                }
                const d = Math.sqrt(h)
                  , f = Math.atan2(d, c)
                  , m = Math.sin((1 - e) * f) / d
                  , v = Math.sin(e * f) / d;
                return this._w = l * m + this._w * v,
                this._x = n * m + this._x * v,
                this._y = r * m + this._y * v,
                this._z = o * m + this._z * v,
                this._onChangeCallback(),
                this
            }
            slerpQuaternions(t, e, n) {
                this.copy(t).slerp(e, n)
            }
            random() {
                const t = Math.random()
                  , e = Math.sqrt(1 - t)
                  , n = Math.sqrt(t)
                  , r = 2 * Math.PI * Math.random()
                  , o = 2 * Math.PI * Math.random();
                return this.set(e * Math.cos(r), n * Math.sin(o), n * Math.cos(o), e * Math.sin(r))
            }
            equals(t) {
                return t._x === this._x && t._y === this._y && t._z === this._z && t._w === this._w
            }
            fromArray(t, e=0) {
                return this._x = t[e],
                this._y = t[e + 1],
                this._z = t[e + 2],
                this._w = t[e + 3],
                this._onChangeCallback(),
                this
            }
            toArray(t=[], e=0) {
                return t[e] = this._x,
                t[e + 1] = this._y,
                t[e + 2] = this._z,
                t[e + 3] = this._w,
                t
            }
            fromBufferAttribute(t, e) {
                return this._x = t.getX(e),
                this._y = t.getY(e),
                this._z = t.getZ(e),
                this._w = t.getW(e),
                this
            }
            _onChange(t) {
                return this._onChangeCallback = t,
                this
            }
            _onChangeCallback() {}
        }
        Ct.prototype.isQuaternion = !0;
        class Pt {
            constructor(t=0, e=0, n=0) {
                this.x = t,
                this.y = e,
                this.z = n
            }
            set(t, e, n) {
                return void 0 === n && (n = this.z),
                this.x = t,
                this.y = e,
                this.z = n,
                this
            }
            setScalar(t) {
                return this.x = t,
                this.y = t,
                this.z = t,
                this
            }
            setX(t) {
                return this.x = t,
                this
            }
            setY(t) {
                return this.y = t,
                this
            }
            setZ(t) {
                return this.z = t,
                this
            }
            setComponent(t, e) {
                switch (t) {
                case 0:
                    this.x = e;
                    break;
                case 1:
                    this.y = e;
                    break;
                case 2:
                    this.z = e;
                    break;
                default:
                    throw new Error("index is out of range: " + t)
                }
                return this
            }
            getComponent(t) {
                switch (t) {
                case 0:
                    return this.x;
                case 1:
                    return this.y;
                case 2:
                    return this.z;
                default:
                    throw new Error("index is out of range: " + t)
                }
            }
            clone() {
                return new this.constructor(this.x,this.y,this.z)
            }
            copy(t) {
                return this.x = t.x,
                this.y = t.y,
                this.z = t.z,
                this
            }
            add(t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),
                this.addVectors(t, e)) : (this.x += t.x,
                this.y += t.y,
                this.z += t.z,
                this)
            }
            addScalar(s) {
                return this.x += s,
                this.y += s,
                this.z += s,
                this
            }
            addVectors(a, b) {
                return this.x = a.x + b.x,
                this.y = a.y + b.y,
                this.z = a.z + b.z,
                this
            }
            addScaledVector(t, s) {
                return this.x += t.x * s,
                this.y += t.y * s,
                this.z += t.z * s,
                this
            }
            sub(t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
                this.subVectors(t, e)) : (this.x -= t.x,
                this.y -= t.y,
                this.z -= t.z,
                this)
            }
            subScalar(s) {
                return this.x -= s,
                this.y -= s,
                this.z -= s,
                this
            }
            subVectors(a, b) {
                return this.x = a.x - b.x,
                this.y = a.y - b.y,
                this.z = a.z - b.z,
                this
            }
            multiply(t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),
                this.multiplyVectors(t, e)) : (this.x *= t.x,
                this.y *= t.y,
                this.z *= t.z,
                this)
            }
            multiplyScalar(t) {
                return this.x *= t,
                this.y *= t,
                this.z *= t,
                this
            }
            multiplyVectors(a, b) {
                return this.x = a.x * b.x,
                this.y = a.y * b.y,
                this.z = a.z * b.z,
                this
            }
            applyEuler(t) {
                return t && t.isEuler || console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),
                this.applyQuaternion(Nt.setFromEuler(t))
            }
            applyAxisAngle(t, e) {
                return this.applyQuaternion(Nt.setFromAxisAngle(t, e))
            }
            applyMatrix3(t) {
                const e = this.x
                  , n = this.y
                  , r = this.z
                  , o = t.elements;
                return this.x = o[0] * e + o[3] * n + o[6] * r,
                this.y = o[1] * e + o[4] * n + o[7] * r,
                this.z = o[2] * e + o[5] * n + o[8] * r,
                this
            }
            applyNormalMatrix(t) {
                return this.applyMatrix3(t).normalize()
            }
            applyMatrix4(t) {
                const e = this.x
                  , n = this.y
                  , r = this.z
                  , o = t.elements
                  , l = 1 / (o[3] * e + o[7] * n + o[11] * r + o[15]);
                return this.x = (o[0] * e + o[4] * n + o[8] * r + o[12]) * l,
                this.y = (o[1] * e + o[5] * n + o[9] * r + o[13]) * l,
                this.z = (o[2] * e + o[6] * n + o[10] * r + o[14]) * l,
                this
            }
            applyQuaternion(q) {
                const t = this.x
                  , e = this.y
                  , n = this.z
                  , r = q.x
                  , o = q.y
                  , l = q.z
                  , c = q.w
                  , h = c * t + o * n - l * e
                  , d = c * e + l * t - r * n
                  , f = c * n + r * e - o * t
                  , m = -r * t - o * e - l * n;
                return this.x = h * c + m * -r + d * -l - f * -o,
                this.y = d * c + m * -o + f * -r - h * -l,
                this.z = f * c + m * -l + h * -o - d * -r,
                this
            }
            project(t) {
                return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)
            }
            unproject(t) {
                return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)
            }
            transformDirection(t) {
                const e = this.x
                  , n = this.y
                  , r = this.z
                  , o = t.elements;
                return this.x = o[0] * e + o[4] * n + o[8] * r,
                this.y = o[1] * e + o[5] * n + o[9] * r,
                this.z = o[2] * e + o[6] * n + o[10] * r,
                this.normalize()
            }
            divide(t) {
                return this.x /= t.x,
                this.y /= t.y,
                this.z /= t.z,
                this
            }
            divideScalar(t) {
                return this.multiplyScalar(1 / t)
            }
            min(t) {
                return this.x = Math.min(this.x, t.x),
                this.y = Math.min(this.y, t.y),
                this.z = Math.min(this.z, t.z),
                this
            }
            max(t) {
                return this.x = Math.max(this.x, t.x),
                this.y = Math.max(this.y, t.y),
                this.z = Math.max(this.z, t.z),
                this
            }
            clamp(t, e) {
                return this.x = Math.max(t.x, Math.min(e.x, this.x)),
                this.y = Math.max(t.y, Math.min(e.y, this.y)),
                this.z = Math.max(t.z, Math.min(e.z, this.z)),
                this
            }
            clampScalar(t, e) {
                return this.x = Math.max(t, Math.min(e, this.x)),
                this.y = Math.max(t, Math.min(e, this.y)),
                this.z = Math.max(t, Math.min(e, this.z)),
                this
            }
            clampLength(t, e) {
                const n = this.length();
                return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n)))
            }
            floor() {
                return this.x = Math.floor(this.x),
                this.y = Math.floor(this.y),
                this.z = Math.floor(this.z),
                this
            }
            ceil() {
                return this.x = Math.ceil(this.x),
                this.y = Math.ceil(this.y),
                this.z = Math.ceil(this.z),
                this
            }
            round() {
                return this.x = Math.round(this.x),
                this.y = Math.round(this.y),
                this.z = Math.round(this.z),
                this
            }
            roundToZero() {
                return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x),
                this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y),
                this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z),
                this
            }
            negate() {
                return this.x = -this.x,
                this.y = -this.y,
                this.z = -this.z,
                this
            }
            dot(t) {
                return this.x * t.x + this.y * t.y + this.z * t.z
            }
            lengthSq() {
                return this.x * this.x + this.y * this.y + this.z * this.z
            }
            length() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
            }
            manhattanLength() {
                return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)
            }
            normalize() {
                return this.divideScalar(this.length() || 1)
            }
            setLength(t) {
                return this.normalize().multiplyScalar(t)
            }
            lerp(t, e) {
                return this.x += (t.x - this.x) * e,
                this.y += (t.y - this.y) * e,
                this.z += (t.z - this.z) * e,
                this
            }
            lerpVectors(t, e, n) {
                return this.x = t.x + (e.x - t.x) * n,
                this.y = t.y + (e.y - t.y) * n,
                this.z = t.z + (e.z - t.z) * n,
                this
            }
            cross(t, e) {
                return void 0 !== e ? (console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),
                this.crossVectors(t, e)) : this.crossVectors(this, t)
            }
            crossVectors(a, b) {
                const t = a.x
                  , e = a.y
                  , n = a.z
                  , r = b.x
                  , o = b.y
                  , l = b.z;
                return this.x = e * l - n * o,
                this.y = n * r - t * l,
                this.z = t * o - e * r,
                this
            }
            projectOnVector(t) {
                const e = t.lengthSq();
                if (0 === e)
                    return this.set(0, 0, 0);
                const n = t.dot(this) / e;
                return this.copy(t).multiplyScalar(n)
            }
            projectOnPlane(t) {
                return Dt.copy(this).projectOnVector(t),
                this.sub(Dt)
            }
            reflect(t) {
                return this.sub(Dt.copy(t).multiplyScalar(2 * this.dot(t)))
            }
            angleTo(t) {
                const e = Math.sqrt(this.lengthSq() * t.lengthSq());
                if (0 === e)
                    return Math.PI / 2;
                const n = this.dot(t) / e;
                return Math.acos(ut(n, -1, 1))
            }
            distanceTo(t) {
                return Math.sqrt(this.distanceToSquared(t))
            }
            distanceToSquared(t) {
                const e = this.x - t.x
                  , n = this.y - t.y
                  , r = this.z - t.z;
                return e * e + n * n + r * r
            }
            manhattanDistanceTo(t) {
                return Math.abs(this.x - t.x) + Math.abs(this.y - t.y) + Math.abs(this.z - t.z)
            }
            setFromSpherical(s) {
                return this.setFromSphericalCoords(s.radius, s.phi, s.theta)
            }
            setFromSphericalCoords(t, e, n) {
                const r = Math.sin(e) * t;
                return this.x = r * Math.sin(n),
                this.y = Math.cos(e) * t,
                this.z = r * Math.cos(n),
                this
            }
            setFromCylindrical(t) {
                return this.setFromCylindricalCoords(t.radius, t.theta, t.y)
            }
            setFromCylindricalCoords(t, e, n) {
                return this.x = t * Math.sin(e),
                this.y = n,
                this.z = t * Math.cos(e),
                this
            }
            setFromMatrixPosition(t) {
                const e = t.elements;
                return this.x = e[12],
                this.y = e[13],
                this.z = e[14],
                this
            }
            setFromMatrixScale(t) {
                const e = this.setFromMatrixColumn(t, 0).length()
                  , n = this.setFromMatrixColumn(t, 1).length()
                  , r = this.setFromMatrixColumn(t, 2).length();
                return this.x = e,
                this.y = n,
                this.z = r,
                this
            }
            setFromMatrixColumn(t, e) {
                return this.fromArray(t.elements, 4 * e)
            }
            setFromMatrix3Column(t, e) {
                return this.fromArray(t.elements, 3 * e)
            }
            equals(t) {
                return t.x === this.x && t.y === this.y && t.z === this.z
            }
            fromArray(t, e=0) {
                return this.x = t[e],
                this.y = t[e + 1],
                this.z = t[e + 2],
                this
            }
            toArray(t=[], e=0) {
                return t[e] = this.x,
                t[e + 1] = this.y,
                t[e + 2] = this.z,
                t
            }
            fromBufferAttribute(t, e, n) {
                return void 0 !== n && console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),
                this.x = t.getX(e),
                this.y = t.getY(e),
                this.z = t.getZ(e),
                this
            }
            random() {
                return this.x = Math.random(),
                this.y = Math.random(),
                this.z = Math.random(),
                this
            }
            randomDirection() {
                const u = 2 * (Math.random() - .5)
                  , t = Math.random() * Math.PI * 2
                  , e = Math.sqrt(1 - u ** 2);
                return this.x = e * Math.cos(t),
                this.y = e * Math.sin(t),
                this.z = u,
                this
            }
            *[Symbol.iterator]() {
                yield this.x,
                yield this.y,
                yield this.z
            }
        }
        Pt.prototype.isVector3 = !0;
        const Dt = new Pt
          , Nt = new Ct;
        class It {
            constructor(t=new Pt(1 / 0,1 / 0,1 / 0), e=new Pt(-1 / 0,-1 / 0,-1 / 0)) {
                this.min = t,
                this.max = e
            }
            set(t, e) {
                return this.min.copy(t),
                this.max.copy(e),
                this
            }
            setFromArray(t) {
                let e = 1 / 0
                  , n = 1 / 0
                  , r = 1 / 0
                  , o = -1 / 0
                  , l = -1 / 0
                  , c = -1 / 0;
                for (let i = 0, h = t.length; i < h; i += 3) {
                    const h = t[i]
                      , d = t[i + 1]
                      , f = t[i + 2];
                    h < e && (e = h),
                    d < n && (n = d),
                    f < r && (r = f),
                    h > o && (o = h),
                    d > l && (l = d),
                    f > c && (c = f)
                }
                return this.min.set(e, n, r),
                this.max.set(o, l, c),
                this
            }
            setFromBufferAttribute(t) {
                let e = 1 / 0
                  , n = 1 / 0
                  , r = 1 / 0
                  , o = -1 / 0
                  , l = -1 / 0
                  , c = -1 / 0;
                for (let i = 0, h = t.count; i < h; i++) {
                    const h = t.getX(i)
                      , d = t.getY(i)
                      , f = t.getZ(i);
                    h < e && (e = h),
                    d < n && (n = d),
                    f < r && (r = f),
                    h > o && (o = h),
                    d > l && (l = d),
                    f > c && (c = f)
                }
                return this.min.set(e, n, r),
                this.max.set(o, l, c),
                this
            }
            setFromPoints(t) {
                this.makeEmpty();
                for (let i = 0, e = t.length; i < e; i++)
                    this.expandByPoint(t[i]);
                return this
            }
            setFromCenterAndSize(t, e) {
                const n = Ft.copy(e).multiplyScalar(.5);
                return this.min.copy(t).sub(n),
                this.max.copy(t).add(n),
                this
            }
            setFromObject(object) {
                return this.makeEmpty(),
                this.expandByObject(object)
            }
            clone() {
                return (new this.constructor).copy(this)
            }
            copy(t) {
                return this.min.copy(t.min),
                this.max.copy(t.max),
                this
            }
            makeEmpty() {
                return this.min.x = this.min.y = this.min.z = 1 / 0,
                this.max.x = this.max.y = this.max.z = -1 / 0,
                this
            }
            isEmpty() {
                return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z
            }
            getCenter(t) {
                return this.isEmpty() ? t.set(0, 0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5)
            }
            getSize(t) {
                return this.isEmpty() ? t.set(0, 0, 0) : t.subVectors(this.max, this.min)
            }
            expandByPoint(t) {
                return this.min.min(t),
                this.max.max(t),
                this
            }
            expandByVector(t) {
                return this.min.sub(t),
                this.max.add(t),
                this
            }
            expandByScalar(t) {
                return this.min.addScalar(-t),
                this.max.addScalar(t),
                this
            }
            expandByObject(object) {
                object.updateWorldMatrix(!1, !1);
                const t = object.geometry;
                void 0 !== t && (null === t.boundingBox && t.computeBoundingBox(),
                Ut.copy(t.boundingBox),
                Ut.applyMatrix4(object.matrixWorld),
                this.union(Ut));
                const e = object.children;
                for (let i = 0, t = e.length; i < t; i++)
                    this.expandByObject(e[i]);
                return this
            }
            containsPoint(t) {
                return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y || t.z < this.min.z || t.z > this.max.z)
            }
            containsBox(t) {
                return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y && this.min.z <= t.min.z && t.max.z <= this.max.z
            }
            getParameter(t, e) {
                return e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y), (t.z - this.min.z) / (this.max.z - this.min.z))
            }
            intersectsBox(t) {
                return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y || t.max.z < this.min.z || t.min.z > this.max.z)
            }
            intersectsSphere(t) {
                return this.clampPoint(t.center, Ft),
                Ft.distanceToSquared(t.center) <= t.radius * t.radius
            }
            intersectsPlane(t) {
                let e, n;
                return t.normal.x > 0 ? (e = t.normal.x * this.min.x,
                n = t.normal.x * this.max.x) : (e = t.normal.x * this.max.x,
                n = t.normal.x * this.min.x),
                t.normal.y > 0 ? (e += t.normal.y * this.min.y,
                n += t.normal.y * this.max.y) : (e += t.normal.y * this.max.y,
                n += t.normal.y * this.min.y),
                t.normal.z > 0 ? (e += t.normal.z * this.min.z,
                n += t.normal.z * this.max.z) : (e += t.normal.z * this.max.z,
                n += t.normal.z * this.min.z),
                e <= -t.constant && n >= -t.constant
            }
            intersectsTriangle(t) {
                if (this.isEmpty())
                    return !1;
                this.getCenter(Wt),
                jt.subVectors(this.max, Wt),
                zt.subVectors(t.a, Wt),
                Bt.subVectors(t.b, Wt),
                Gt.subVectors(t.c, Wt),
                Ht.subVectors(Bt, zt),
                kt.subVectors(Gt, Bt),
                Vt.subVectors(zt, Gt);
                let e = [0, -Ht.z, Ht.y, 0, -kt.z, kt.y, 0, -Vt.z, Vt.y, Ht.z, 0, -Ht.x, kt.z, 0, -kt.x, Vt.z, 0, -Vt.x, -Ht.y, Ht.x, 0, -kt.y, kt.x, 0, -Vt.y, Vt.x, 0];
                return !!Yt(e, zt, Bt, Gt, jt) && (e = [1, 0, 0, 0, 1, 0, 0, 0, 1],
                !!Yt(e, zt, Bt, Gt, jt) && (Xt.crossVectors(Ht, kt),
                e = [Xt.x, Xt.y, Xt.z],
                Yt(e, zt, Bt, Gt, jt)))
            }
            clampPoint(t, e) {
                return e.copy(t).clamp(this.min, this.max)
            }
            distanceToPoint(t) {
                return Ft.copy(t).clamp(this.min, this.max).sub(t).length()
            }
            getBoundingSphere(t) {
                return this.getCenter(t.center),
                t.radius = .5 * this.getSize(Ft).length(),
                t
            }
            intersect(t) {
                return this.min.max(t.min),
                this.max.min(t.max),
                this.isEmpty() && this.makeEmpty(),
                this
            }
            union(t) {
                return this.min.min(t.min),
                this.max.max(t.max),
                this
            }
            applyMatrix4(t) {
                return this.isEmpty() || (Ot[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(t),
                Ot[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(t),
                Ot[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(t),
                Ot[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(t),
                Ot[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(t),
                Ot[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(t),
                Ot[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(t),
                Ot[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(t),
                this.setFromPoints(Ot)),
                this
            }
            translate(t) {
                return this.min.add(t),
                this.max.add(t),
                this
            }
            equals(t) {
                return t.min.equals(this.min) && t.max.equals(this.max)
            }
        }
        It.prototype.isBox3 = !0;
        const Ot = [new Pt, new Pt, new Pt, new Pt, new Pt, new Pt, new Pt, new Pt]
          , Ft = new Pt
          , Ut = new It
          , zt = new Pt
          , Bt = new Pt
          , Gt = new Pt
          , Ht = new Pt
          , kt = new Pt
          , Vt = new Pt
          , Wt = new Pt
          , jt = new Pt
          , Xt = new Pt
          , qt = new Pt;
        function Yt(t, e, n, r, o) {
            for (let i = 0, l = t.length - 3; i <= l; i += 3) {
                qt.fromArray(t, i);
                const l = o.x * Math.abs(qt.x) + o.y * Math.abs(qt.y) + o.z * Math.abs(qt.z)
                  , c = e.dot(qt)
                  , h = n.dot(qt)
                  , d = r.dot(qt);
                if (Math.max(-Math.max(c, h, d), Math.min(c, h, d)) > l)
                    return !1
            }
            return !0
        }
        const Zt = new It
          , Jt = new Pt
          , Kt = new Pt
          , Qt = new Pt;
        class $t {
            constructor(t=new Pt, e=-1) {
                this.center = t,
                this.radius = e
            }
            set(t, e) {
                return this.center.copy(t),
                this.radius = e,
                this
            }
            setFromPoints(t, e) {
                const n = this.center;
                void 0 !== e ? n.copy(e) : Zt.setFromPoints(t).getCenter(n);
                let r = 0;
                for (let i = 0, e = t.length; i < e; i++)
                    r = Math.max(r, n.distanceToSquared(t[i]));
                return this.radius = Math.sqrt(r),
                this
            }
            copy(t) {
                return this.center.copy(t.center),
                this.radius = t.radius,
                this
            }
            isEmpty() {
                return this.radius < 0
            }
            makeEmpty() {
                return this.center.set(0, 0, 0),
                this.radius = -1,
                this
            }
            containsPoint(t) {
                return t.distanceToSquared(this.center) <= this.radius * this.radius
            }
            distanceToPoint(t) {
                return t.distanceTo(this.center) - this.radius
            }
            intersectsSphere(t) {
                const e = this.radius + t.radius;
                return t.center.distanceToSquared(this.center) <= e * e
            }
            intersectsBox(t) {
                return t.intersectsSphere(this)
            }
            intersectsPlane(t) {
                return Math.abs(t.distanceToPoint(this.center)) <= this.radius
            }
            clampPoint(t, e) {
                const n = this.center.distanceToSquared(t);
                return e.copy(t),
                n > this.radius * this.radius && (e.sub(this.center).normalize(),
                e.multiplyScalar(this.radius).add(this.center)),
                e
            }
            getBoundingBox(t) {
                return this.isEmpty() ? (t.makeEmpty(),
                t) : (t.set(this.center, this.center),
                t.expandByScalar(this.radius),
                t)
            }
            applyMatrix4(t) {
                return this.center.applyMatrix4(t),
                this.radius = this.radius * t.getMaxScaleOnAxis(),
                this
            }
            translate(t) {
                return this.center.add(t),
                this
            }
            expandByPoint(t) {
                Qt.subVectors(t, this.center);
                const e = Qt.lengthSq();
                if (e > this.radius * this.radius) {
                    const t = Math.sqrt(e)
                      , n = .5 * (t - this.radius);
                    this.center.add(Qt.multiplyScalar(n / t)),
                    this.radius += n
                }
                return this
            }
            union(t) {
                return Kt.subVectors(t.center, this.center).normalize().multiplyScalar(t.radius),
                this.expandByPoint(Jt.copy(t.center).add(Kt)),
                this.expandByPoint(Jt.copy(t.center).sub(Kt)),
                this
            }
            equals(t) {
                return t.center.equals(this.center) && t.radius === this.radius
            }
            clone() {
                return (new this.constructor).copy(this)
            }
        }
        const te = new Pt
          , ee = new Pt
          , ne = new Pt
          , ie = new Pt
          , re = new Pt
          , ae = new Pt
          , se = new Pt;
        class oe {
            constructor(t=new Pt, e=new Pt(0,0,-1)) {
                this.origin = t,
                this.direction = e
            }
            set(t, e) {
                return this.origin.copy(t),
                this.direction.copy(e),
                this
            }
            copy(t) {
                return this.origin.copy(t.origin),
                this.direction.copy(t.direction),
                this
            }
            at(t, e) {
                return e.copy(this.direction).multiplyScalar(t).add(this.origin)
            }
            lookAt(t) {
                return this.direction.copy(t).sub(this.origin).normalize(),
                this
            }
            recast(t) {
                return this.origin.copy(this.at(t, te)),
                this
            }
            closestPointToPoint(t, e) {
                e.subVectors(t, this.origin);
                const n = e.dot(this.direction);
                return n < 0 ? e.copy(this.origin) : e.copy(this.direction).multiplyScalar(n).add(this.origin)
            }
            distanceToPoint(t) {
                return Math.sqrt(this.distanceSqToPoint(t))
            }
            distanceSqToPoint(t) {
                const e = te.subVectors(t, this.origin).dot(this.direction);
                return e < 0 ? this.origin.distanceToSquared(t) : (te.copy(this.direction).multiplyScalar(e).add(this.origin),
                te.distanceToSquared(t))
            }
            distanceSqToSegment(t, e, n, r) {
                ee.copy(t).add(e).multiplyScalar(.5),
                ne.copy(e).sub(t).normalize(),
                ie.copy(this.origin).sub(ee);
                const o = .5 * t.distanceTo(e)
                  , l = -this.direction.dot(ne)
                  , c = ie.dot(this.direction)
                  , h = -ie.dot(ne)
                  , d = ie.lengthSq()
                  , f = Math.abs(1 - l * l);
                let m, v, _, x;
                if (f > 0)
                    if (m = l * h - c,
                    v = l * c - h,
                    x = o * f,
                    m >= 0)
                        if (v >= -x)
                            if (v <= x) {
                                const t = 1 / f;
                                m *= t,
                                v *= t,
                                _ = m * (m + l * v + 2 * c) + v * (l * m + v + 2 * h) + d
                            } else
                                v = o,
                                m = Math.max(0, -(l * v + c)),
                                _ = -m * m + v * (v + 2 * h) + d;
                        else
                            v = -o,
                            m = Math.max(0, -(l * v + c)),
                            _ = -m * m + v * (v + 2 * h) + d;
                    else
                        v <= -x ? (m = Math.max(0, -(-l * o + c)),
                        v = m > 0 ? -o : Math.min(Math.max(-o, -h), o),
                        _ = -m * m + v * (v + 2 * h) + d) : v <= x ? (m = 0,
                        v = Math.min(Math.max(-o, -h), o),
                        _ = v * (v + 2 * h) + d) : (m = Math.max(0, -(l * o + c)),
                        v = m > 0 ? o : Math.min(Math.max(-o, -h), o),
                        _ = -m * m + v * (v + 2 * h) + d);
                else
                    v = l > 0 ? -o : o,
                    m = Math.max(0, -(l * v + c)),
                    _ = -m * m + v * (v + 2 * h) + d;
                return n && n.copy(this.direction).multiplyScalar(m).add(this.origin),
                r && r.copy(ne).multiplyScalar(v).add(ee),
                _
            }
            intersectSphere(t, e) {
                te.subVectors(t.center, this.origin);
                const n = te.dot(this.direction)
                  , r = te.dot(te) - n * n
                  , o = t.radius * t.radius;
                if (r > o)
                    return null;
                const l = Math.sqrt(o - r)
                  , c = n - l
                  , h = n + l;
                return c < 0 && h < 0 ? null : c < 0 ? this.at(h, e) : this.at(c, e)
            }
            intersectsSphere(t) {
                return this.distanceSqToPoint(t.center) <= t.radius * t.radius
            }
            distanceToPlane(t) {
                const e = t.normal.dot(this.direction);
                if (0 === e)
                    return 0 === t.distanceToPoint(this.origin) ? 0 : null;
                const n = -(this.origin.dot(t.normal) + t.constant) / e;
                return n >= 0 ? n : null
            }
            intersectPlane(t, e) {
                const n = this.distanceToPlane(t);
                return null === n ? null : this.at(n, e)
            }
            intersectsPlane(t) {
                const e = t.distanceToPoint(this.origin);
                if (0 === e)
                    return !0;
                return t.normal.dot(this.direction) * e < 0
            }
            intersectBox(t, e) {
                let n, r, o, l, c, h;
                const d = 1 / this.direction.x
                  , f = 1 / this.direction.y
                  , m = 1 / this.direction.z
                  , v = this.origin;
                return d >= 0 ? (n = (t.min.x - v.x) * d,
                r = (t.max.x - v.x) * d) : (n = (t.max.x - v.x) * d,
                r = (t.min.x - v.x) * d),
                f >= 0 ? (o = (t.min.y - v.y) * f,
                l = (t.max.y - v.y) * f) : (o = (t.max.y - v.y) * f,
                l = (t.min.y - v.y) * f),
                n > l || o > r ? null : ((o > n || n != n) && (n = o),
                (l < r || r != r) && (r = l),
                m >= 0 ? (c = (t.min.z - v.z) * m,
                h = (t.max.z - v.z) * m) : (c = (t.max.z - v.z) * m,
                h = (t.min.z - v.z) * m),
                n > h || c > r ? null : ((c > n || n != n) && (n = c),
                (h < r || r != r) && (r = h),
                r < 0 ? null : this.at(n >= 0 ? n : r, e)))
            }
            intersectsBox(t) {
                return null !== this.intersectBox(t, te)
            }
            intersectTriangle(a, b, t, e, n) {
                re.subVectors(b, a),
                ae.subVectors(t, a),
                se.crossVectors(re, ae);
                let r, o = this.direction.dot(se);
                if (o > 0) {
                    if (e)
                        return null;
                    r = 1
                } else {
                    if (!(o < 0))
                        return null;
                    r = -1,
                    o = -o
                }
                ie.subVectors(this.origin, a);
                const l = r * this.direction.dot(ae.crossVectors(ie, ae));
                if (l < 0)
                    return null;
                const c = r * this.direction.dot(re.cross(ie));
                if (c < 0)
                    return null;
                if (l + c > o)
                    return null;
                const h = -r * ie.dot(se);
                return h < 0 ? null : this.at(h / o, n)
            }
            applyMatrix4(t) {
                return this.origin.applyMatrix4(t),
                this.direction.transformDirection(t),
                this
            }
            equals(t) {
                return t.origin.equals(this.origin) && t.direction.equals(this.direction)
            }
            clone() {
                return (new this.constructor).copy(this)
            }
        }
        class le {
            constructor() {
                this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],
                arguments.length > 0 && console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")
            }
            set(t, e, n, r, o, l, c, h, d, f, m, v, _, x, y, M) {
                const w = this.elements;
                return w[0] = t,
                w[4] = e,
                w[8] = n,
                w[12] = r,
                w[1] = o,
                w[5] = l,
                w[9] = c,
                w[13] = h,
                w[2] = d,
                w[6] = f,
                w[10] = m,
                w[14] = v,
                w[3] = _,
                w[7] = x,
                w[11] = y,
                w[15] = M,
                this
            }
            identity() {
                return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                this
            }
            clone() {
                return (new le).fromArray(this.elements)
            }
            copy(t) {
                const e = this.elements
                  , n = t.elements;
                return e[0] = n[0],
                e[1] = n[1],
                e[2] = n[2],
                e[3] = n[3],
                e[4] = n[4],
                e[5] = n[5],
                e[6] = n[6],
                e[7] = n[7],
                e[8] = n[8],
                e[9] = n[9],
                e[10] = n[10],
                e[11] = n[11],
                e[12] = n[12],
                e[13] = n[13],
                e[14] = n[14],
                e[15] = n[15],
                this
            }
            copyPosition(t) {
                const e = this.elements
                  , n = t.elements;
                return e[12] = n[12],
                e[13] = n[13],
                e[14] = n[14],
                this
            }
            setFromMatrix3(t) {
                const e = t.elements;
                return this.set(e[0], e[3], e[6], 0, e[1], e[4], e[7], 0, e[2], e[5], e[8], 0, 0, 0, 0, 1),
                this
            }
            extractBasis(t, e, n) {
                return t.setFromMatrixColumn(this, 0),
                e.setFromMatrixColumn(this, 1),
                n.setFromMatrixColumn(this, 2),
                this
            }
            makeBasis(t, e, n) {
                return this.set(t.x, e.x, n.x, 0, t.y, e.y, n.y, 0, t.z, e.z, n.z, 0, 0, 0, 0, 1),
                this
            }
            extractRotation(t) {
                const e = this.elements
                  , n = t.elements
                  , r = 1 / ce.setFromMatrixColumn(t, 0).length()
                  , o = 1 / ce.setFromMatrixColumn(t, 1).length()
                  , l = 1 / ce.setFromMatrixColumn(t, 2).length();
                return e[0] = n[0] * r,
                e[1] = n[1] * r,
                e[2] = n[2] * r,
                e[3] = 0,
                e[4] = n[4] * o,
                e[5] = n[5] * o,
                e[6] = n[6] * o,
                e[7] = 0,
                e[8] = n[8] * l,
                e[9] = n[9] * l,
                e[10] = n[10] * l,
                e[11] = 0,
                e[12] = 0,
                e[13] = 0,
                e[14] = 0,
                e[15] = 1,
                this
            }
            makeRotationFromEuler(t) {
                t && t.isEuler || console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");
                const e = this.elements
                  , n = t.x
                  , r = t.y
                  , o = t.z
                  , a = Math.cos(n)
                  , b = Math.sin(n)
                  , l = Math.cos(r)
                  , c = Math.sin(r)
                  , h = Math.cos(o)
                  , d = Math.sin(o);
                if ("XYZ" === t.order) {
                    const t = a * h
                      , n = a * d
                      , r = b * h
                      , o = b * d;
                    e[0] = l * h,
                    e[4] = -l * d,
                    e[8] = c,
                    e[1] = n + r * c,
                    e[5] = t - o * c,
                    e[9] = -b * l,
                    e[2] = o - t * c,
                    e[6] = r + n * c,
                    e[10] = a * l
                } else if ("YXZ" === t.order) {
                    const t = l * h
                      , n = l * d
                      , r = c * h
                      , o = c * d;
                    e[0] = t + o * b,
                    e[4] = r * b - n,
                    e[8] = a * c,
                    e[1] = a * d,
                    e[5] = a * h,
                    e[9] = -b,
                    e[2] = n * b - r,
                    e[6] = o + t * b,
                    e[10] = a * l
                } else if ("ZXY" === t.order) {
                    const t = l * h
                      , n = l * d
                      , r = c * h
                      , o = c * d;
                    e[0] = t - o * b,
                    e[4] = -a * d,
                    e[8] = r + n * b,
                    e[1] = n + r * b,
                    e[5] = a * h,
                    e[9] = o - t * b,
                    e[2] = -a * c,
                    e[6] = b,
                    e[10] = a * l
                } else if ("ZYX" === t.order) {
                    const t = a * h
                      , n = a * d
                      , r = b * h
                      , o = b * d;
                    e[0] = l * h,
                    e[4] = r * c - n,
                    e[8] = t * c + o,
                    e[1] = l * d,
                    e[5] = o * c + t,
                    e[9] = n * c - r,
                    e[2] = -c,
                    e[6] = b * l,
                    e[10] = a * l
                } else if ("YZX" === t.order) {
                    const t = a * l
                      , n = a * c
                      , r = b * l
                      , o = b * c;
                    e[0] = l * h,
                    e[4] = o - t * d,
                    e[8] = r * d + n,
                    e[1] = d,
                    e[5] = a * h,
                    e[9] = -b * h,
                    e[2] = -c * h,
                    e[6] = n * d + r,
                    e[10] = t - o * d
                } else if ("XZY" === t.order) {
                    const t = a * l
                      , n = a * c
                      , r = b * l
                      , o = b * c;
                    e[0] = l * h,
                    e[4] = -d,
                    e[8] = c * h,
                    e[1] = t * d + o,
                    e[5] = a * h,
                    e[9] = n * d - r,
                    e[2] = r * d - n,
                    e[6] = b * h,
                    e[10] = o * d + t
                }
                return e[3] = 0,
                e[7] = 0,
                e[11] = 0,
                e[12] = 0,
                e[13] = 0,
                e[14] = 0,
                e[15] = 1,
                this
            }
            makeRotationFromQuaternion(q) {
                return this.compose(ue, q, de)
            }
            lookAt(t, e, n) {
                const r = this.elements;
                return me.subVectors(t, e),
                0 === me.lengthSq() && (me.z = 1),
                me.normalize(),
                pe.crossVectors(n, me),
                0 === pe.lengthSq() && (1 === Math.abs(n.z) ? me.x += 1e-4 : me.z += 1e-4,
                me.normalize(),
                pe.crossVectors(n, me)),
                pe.normalize(),
                fe.crossVectors(me, pe),
                r[0] = pe.x,
                r[4] = fe.x,
                r[8] = me.x,
                r[1] = pe.y,
                r[5] = fe.y,
                r[9] = me.y,
                r[2] = pe.z,
                r[6] = fe.z,
                r[10] = me.z,
                this
            }
            multiply(t, e) {
                return void 0 !== e ? (console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),
                this.multiplyMatrices(t, e)) : this.multiplyMatrices(this, t)
            }
            premultiply(t) {
                return this.multiplyMatrices(t, this)
            }
            multiplyMatrices(a, b) {
                const t = a.elements
                  , e = b.elements
                  , n = this.elements
                  , r = t[0]
                  , o = t[4]
                  , l = t[8]
                  , c = t[12]
                  , h = t[1]
                  , d = t[5]
                  , f = t[9]
                  , m = t[13]
                  , v = t[2]
                  , _ = t[6]
                  , x = t[10]
                  , y = t[14]
                  , M = t[3]
                  , w = t[7]
                  , S = t[11]
                  , T = t[15]
                  , E = e[0]
                  , A = e[4]
                  , L = e[8]
                  , R = e[12]
                  , C = e[1]
                  , P = e[5]
                  , D = e[9]
                  , N = e[13]
                  , I = e[2]
                  , O = e[6]
                  , F = e[10]
                  , U = e[14]
                  , z = e[3]
                  , B = e[7]
                  , G = e[11]
                  , H = e[15];
                return n[0] = r * E + o * C + l * I + c * z,
                n[4] = r * A + o * P + l * O + c * B,
                n[8] = r * L + o * D + l * F + c * G,
                n[12] = r * R + o * N + l * U + c * H,
                n[1] = h * E + d * C + f * I + m * z,
                n[5] = h * A + d * P + f * O + m * B,
                n[9] = h * L + d * D + f * F + m * G,
                n[13] = h * R + d * N + f * U + m * H,
                n[2] = v * E + _ * C + x * I + y * z,
                n[6] = v * A + _ * P + x * O + y * B,
                n[10] = v * L + _ * D + x * F + y * G,
                n[14] = v * R + _ * N + x * U + y * H,
                n[3] = M * E + w * C + S * I + T * z,
                n[7] = M * A + w * P + S * O + T * B,
                n[11] = M * L + w * D + S * F + T * G,
                n[15] = M * R + w * N + S * U + T * H,
                this
            }
            multiplyScalar(s) {
                const t = this.elements;
                return t[0] *= s,
                t[4] *= s,
                t[8] *= s,
                t[12] *= s,
                t[1] *= s,
                t[5] *= s,
                t[9] *= s,
                t[13] *= s,
                t[2] *= s,
                t[6] *= s,
                t[10] *= s,
                t[14] *= s,
                t[3] *= s,
                t[7] *= s,
                t[11] *= s,
                t[15] *= s,
                this
            }
            determinant() {
                const t = this.elements
                  , e = t[0]
                  , n = t[4]
                  , r = t[8]
                  , o = t[12]
                  , l = t[1]
                  , c = t[5]
                  , h = t[9]
                  , d = t[13]
                  , f = t[2]
                  , m = t[6]
                  , v = t[10]
                  , _ = t[14];
                return t[3] * (+o * h * m - r * d * m - o * c * v + n * d * v + r * c * _ - n * h * _) + t[7] * (+e * h * _ - e * d * v + o * l * v - r * l * _ + r * d * f - o * h * f) + t[11] * (+e * d * m - e * c * _ - o * l * m + n * l * _ + o * c * f - n * d * f) + t[15] * (-r * c * f - e * h * m + e * c * v + r * l * m - n * l * v + n * h * f)
            }
            transpose() {
                const t = this.elements;
                let e;
                return e = t[1],
                t[1] = t[4],
                t[4] = e,
                e = t[2],
                t[2] = t[8],
                t[8] = e,
                e = t[6],
                t[6] = t[9],
                t[9] = e,
                e = t[3],
                t[3] = t[12],
                t[12] = e,
                e = t[7],
                t[7] = t[13],
                t[13] = e,
                e = t[11],
                t[11] = t[14],
                t[14] = e,
                this
            }
            setPosition(t, e, n) {
                const r = this.elements;
                return t.isVector3 ? (r[12] = t.x,
                r[13] = t.y,
                r[14] = t.z) : (r[12] = t,
                r[13] = e,
                r[14] = n),
                this
            }
            invert() {
                const t = this.elements
                  , e = t[0]
                  , n = t[1]
                  , r = t[2]
                  , o = t[3]
                  , l = t[4]
                  , c = t[5]
                  , h = t[6]
                  , d = t[7]
                  , f = t[8]
                  , m = t[9]
                  , v = t[10]
                  , _ = t[11]
                  , x = t[12]
                  , y = t[13]
                  , M = t[14]
                  , w = t[15]
                  , S = m * M * d - y * v * d + y * h * _ - c * M * _ - m * h * w + c * v * w
                  , T = x * v * d - f * M * d - x * h * _ + l * M * _ + f * h * w - l * v * w
                  , E = f * y * d - x * m * d + x * c * _ - l * y * _ - f * c * w + l * m * w
                  , A = x * m * h - f * y * h - x * c * v + l * y * v + f * c * M - l * m * M
                  , L = e * S + n * T + r * E + o * A;
                if (0 === L)
                    return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                const R = 1 / L;
                return t[0] = S * R,
                t[1] = (y * v * o - m * M * o - y * r * _ + n * M * _ + m * r * w - n * v * w) * R,
                t[2] = (c * M * o - y * h * o + y * r * d - n * M * d - c * r * w + n * h * w) * R,
                t[3] = (m * h * o - c * v * o - m * r * d + n * v * d + c * r * _ - n * h * _) * R,
                t[4] = T * R,
                t[5] = (f * M * o - x * v * o + x * r * _ - e * M * _ - f * r * w + e * v * w) * R,
                t[6] = (x * h * o - l * M * o - x * r * d + e * M * d + l * r * w - e * h * w) * R,
                t[7] = (l * v * o - f * h * o + f * r * d - e * v * d - l * r * _ + e * h * _) * R,
                t[8] = E * R,
                t[9] = (x * m * o - f * y * o - x * n * _ + e * y * _ + f * n * w - e * m * w) * R,
                t[10] = (l * y * o - x * c * o + x * n * d - e * y * d - l * n * w + e * c * w) * R,
                t[11] = (f * c * o - l * m * o - f * n * d + e * m * d + l * n * _ - e * c * _) * R,
                t[12] = A * R,
                t[13] = (f * y * r - x * m * r + x * n * v - e * y * v - f * n * M + e * m * M) * R,
                t[14] = (x * c * r - l * y * r - x * n * h + e * y * h + l * n * M - e * c * M) * R,
                t[15] = (l * m * r - f * c * r + f * n * h - e * m * h - l * n * v + e * c * v) * R,
                this
            }
            scale(t) {
                const e = this.elements
                  , n = t.x
                  , r = t.y
                  , o = t.z;
                return e[0] *= n,
                e[4] *= r,
                e[8] *= o,
                e[1] *= n,
                e[5] *= r,
                e[9] *= o,
                e[2] *= n,
                e[6] *= r,
                e[10] *= o,
                e[3] *= n,
                e[7] *= r,
                e[11] *= o,
                this
            }
            getMaxScaleOnAxis() {
                const t = this.elements
                  , e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2]
                  , n = t[4] * t[4] + t[5] * t[5] + t[6] * t[6]
                  , r = t[8] * t[8] + t[9] * t[9] + t[10] * t[10];
                return Math.sqrt(Math.max(e, n, r))
            }
            makeTranslation(t, e, n) {
                return this.set(1, 0, 0, t, 0, 1, 0, e, 0, 0, 1, n, 0, 0, 0, 1),
                this
            }
            makeRotationX(t) {
                const e = Math.cos(t)
                  , s = Math.sin(t);
                return this.set(1, 0, 0, 0, 0, e, -s, 0, 0, s, e, 0, 0, 0, 0, 1),
                this
            }
            makeRotationY(t) {
                const e = Math.cos(t)
                  , s = Math.sin(t);
                return this.set(e, 0, s, 0, 0, 1, 0, 0, -s, 0, e, 0, 0, 0, 0, 1),
                this
            }
            makeRotationZ(t) {
                const e = Math.cos(t)
                  , s = Math.sin(t);
                return this.set(e, -s, 0, 0, s, e, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                this
            }
            makeRotationAxis(t, e) {
                const n = Math.cos(e)
                  , s = Math.sin(e)
                  , r = 1 - n
                  , o = t.x
                  , l = t.y
                  , c = t.z
                  , h = r * o
                  , d = r * l;
                return this.set(h * o + n, h * l - s * c, h * c + s * l, 0, h * l + s * c, d * l + n, d * c - s * o, 0, h * c - s * l, d * c + s * o, r * c * c + n, 0, 0, 0, 0, 1),
                this
            }
            makeScale(t, e, n) {
                return this.set(t, 0, 0, 0, 0, e, 0, 0, 0, 0, n, 0, 0, 0, 0, 1),
                this
            }
            makeShear(t, e, n, r, o, l) {
                return this.set(1, n, o, 0, t, 1, l, 0, e, r, 1, 0, 0, 0, 0, 1),
                this
            }
            compose(t, e, n) {
                const r = this.elements
                  , o = e._x
                  , l = e._y
                  , c = e._z
                  , h = e._w
                  , d = o + o
                  , f = l + l
                  , m = c + c
                  , v = o * d
                  , _ = o * f
                  , x = o * m
                  , y = l * f
                  , M = l * m
                  , w = c * m
                  , S = h * d
                  , T = h * f
                  , E = h * m
                  , A = n.x
                  , L = n.y
                  , R = n.z;
                return r[0] = (1 - (y + w)) * A,
                r[1] = (_ + E) * A,
                r[2] = (x - T) * A,
                r[3] = 0,
                r[4] = (_ - E) * L,
                r[5] = (1 - (v + w)) * L,
                r[6] = (M + S) * L,
                r[7] = 0,
                r[8] = (x + T) * R,
                r[9] = (M - S) * R,
                r[10] = (1 - (v + y)) * R,
                r[11] = 0,
                r[12] = t.x,
                r[13] = t.y,
                r[14] = t.z,
                r[15] = 1,
                this
            }
            decompose(t, e, n) {
                const r = this.elements;
                let o = ce.set(r[0], r[1], r[2]).length();
                const l = ce.set(r[4], r[5], r[6]).length()
                  , c = ce.set(r[8], r[9], r[10]).length();
                this.determinant() < 0 && (o = -o),
                t.x = r[12],
                t.y = r[13],
                t.z = r[14],
                he.copy(this);
                const h = 1 / o
                  , d = 1 / l
                  , f = 1 / c;
                return he.elements[0] *= h,
                he.elements[1] *= h,
                he.elements[2] *= h,
                he.elements[4] *= d,
                he.elements[5] *= d,
                he.elements[6] *= d,
                he.elements[8] *= f,
                he.elements[9] *= f,
                he.elements[10] *= f,
                e.setFromRotationMatrix(he),
                n.x = o,
                n.y = l,
                n.z = c,
                this
            }
            makePerspective(t, e, n, r, o, l) {
                void 0 === l && console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");
                const c = this.elements
                  , h = 2 * o / (e - t)
                  , d = 2 * o / (n - r)
                  , a = (e + t) / (e - t)
                  , b = (n + r) / (n - r)
                  , f = -(l + o) / (l - o)
                  , m = -2 * l * o / (l - o);
                return c[0] = h,
                c[4] = 0,
                c[8] = a,
                c[12] = 0,
                c[1] = 0,
                c[5] = d,
                c[9] = b,
                c[13] = 0,
                c[2] = 0,
                c[6] = 0,
                c[10] = f,
                c[14] = m,
                c[3] = 0,
                c[7] = 0,
                c[11] = -1,
                c[15] = 0,
                this
            }
            makeOrthographic(t, e, n, r, o, l) {
                const c = this.elements
                  , h = 1 / (e - t)
                  , d = 1 / (n - r)
                  , p = 1 / (l - o)
                  , f = (e + t) * h
                  , m = (n + r) * d
                  , v = (l + o) * p;
                return c[0] = 2 * h,
                c[4] = 0,
                c[8] = 0,
                c[12] = -f,
                c[1] = 0,
                c[5] = 2 * d,
                c[9] = 0,
                c[13] = -m,
                c[2] = 0,
                c[6] = 0,
                c[10] = -2 * p,
                c[14] = -v,
                c[3] = 0,
                c[7] = 0,
                c[11] = 0,
                c[15] = 1,
                this
            }
            equals(t) {
                const e = this.elements
                  , n = t.elements;
                for (let i = 0; i < 16; i++)
                    if (e[i] !== n[i])
                        return !1;
                return !0
            }
            fromArray(t, e=0) {
                for (let i = 0; i < 16; i++)
                    this.elements[i] = t[i + e];
                return this
            }
            toArray(t=[], e=0) {
                const n = this.elements;
                return t[e] = n[0],
                t[e + 1] = n[1],
                t[e + 2] = n[2],
                t[e + 3] = n[3],
                t[e + 4] = n[4],
                t[e + 5] = n[5],
                t[e + 6] = n[6],
                t[e + 7] = n[7],
                t[e + 8] = n[8],
                t[e + 9] = n[9],
                t[e + 10] = n[10],
                t[e + 11] = n[11],
                t[e + 12] = n[12],
                t[e + 13] = n[13],
                t[e + 14] = n[14],
                t[e + 15] = n[15],
                t
            }
        }
        le.prototype.isMatrix4 = !0;
        const ce = new Pt
          , he = new le
          , ue = new Pt(0,0,0)
          , de = new Pt(1,1,1)
          , pe = new Pt
          , fe = new Pt
          , me = new Pt
          , ge = new le
          , ve = new Ct;
        class _e {
            constructor(t=0, e=0, n=0, r=_e.DefaultOrder) {
                this._x = t,
                this._y = e,
                this._z = n,
                this._order = r
            }
            get x() {
                return this._x
            }
            set x(t) {
                this._x = t,
                this._onChangeCallback()
            }
            get y() {
                return this._y
            }
            set y(t) {
                this._y = t,
                this._onChangeCallback()
            }
            get z() {
                return this._z
            }
            set z(t) {
                this._z = t,
                this._onChangeCallback()
            }
            get order() {
                return this._order
            }
            set order(t) {
                this._order = t,
                this._onChangeCallback()
            }
            set(t, e, n, r=this._order) {
                return this._x = t,
                this._y = e,
                this._z = n,
                this._order = r,
                this._onChangeCallback(),
                this
            }
            clone() {
                return new this.constructor(this._x,this._y,this._z,this._order)
            }
            copy(t) {
                return this._x = t._x,
                this._y = t._y,
                this._z = t._z,
                this._order = t._order,
                this._onChangeCallback(),
                this
            }
            setFromRotationMatrix(t, e=this._order, n=!0) {
                const r = t.elements
                  , o = r[0]
                  , l = r[4]
                  , c = r[8]
                  , h = r[1]
                  , d = r[5]
                  , f = r[9]
                  , m = r[2]
                  , v = r[6]
                  , _ = r[10];
                switch (e) {
                case "XYZ":
                    this._y = Math.asin(ut(c, -1, 1)),
                    Math.abs(c) < .9999999 ? (this._x = Math.atan2(-f, _),
                    this._z = Math.atan2(-l, o)) : (this._x = Math.atan2(v, d),
                    this._z = 0);
                    break;
                case "YXZ":
                    this._x = Math.asin(-ut(f, -1, 1)),
                    Math.abs(f) < .9999999 ? (this._y = Math.atan2(c, _),
                    this._z = Math.atan2(h, d)) : (this._y = Math.atan2(-m, o),
                    this._z = 0);
                    break;
                case "ZXY":
                    this._x = Math.asin(ut(v, -1, 1)),
                    Math.abs(v) < .9999999 ? (this._y = Math.atan2(-m, _),
                    this._z = Math.atan2(-l, d)) : (this._y = 0,
                    this._z = Math.atan2(h, o));
                    break;
                case "ZYX":
                    this._y = Math.asin(-ut(m, -1, 1)),
                    Math.abs(m) < .9999999 ? (this._x = Math.atan2(v, _),
                    this._z = Math.atan2(h, o)) : (this._x = 0,
                    this._z = Math.atan2(-l, d));
                    break;
                case "YZX":
                    this._z = Math.asin(ut(h, -1, 1)),
                    Math.abs(h) < .9999999 ? (this._x = Math.atan2(-f, d),
                    this._y = Math.atan2(-m, o)) : (this._x = 0,
                    this._y = Math.atan2(c, _));
                    break;
                case "XZY":
                    this._z = Math.asin(-ut(l, -1, 1)),
                    Math.abs(l) < .9999999 ? (this._x = Math.atan2(v, d),
                    this._y = Math.atan2(c, o)) : (this._x = Math.atan2(-f, _),
                    this._y = 0);
                    break;
                default:
                    console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + e)
                }
                return this._order = e,
                !0 === n && this._onChangeCallback(),
                this
            }
            setFromQuaternion(q, t, e) {
                return ge.makeRotationFromQuaternion(q),
                this.setFromRotationMatrix(ge, t, e)
            }
            setFromVector3(t, e=this._order) {
                return this.set(t.x, t.y, t.z, e)
            }
            reorder(t) {
                return ve.setFromEuler(this),
                this.setFromQuaternion(ve, t)
            }
            equals(t) {
                return t._x === this._x && t._y === this._y && t._z === this._z && t._order === this._order
            }
            fromArray(t) {
                return this._x = t[0],
                this._y = t[1],
                this._z = t[2],
                void 0 !== t[3] && (this._order = t[3]),
                this._onChangeCallback(),
                this
            }
            toArray(t=[], e=0) {
                return t[e] = this._x,
                t[e + 1] = this._y,
                t[e + 2] = this._z,
                t[e + 3] = this._order,
                t
            }
            toVector3(t) {
                return t ? t.set(this._x, this._y, this._z) : new Pt(this._x,this._y,this._z)
            }
            _onChange(t) {
                return this._onChangeCallback = t,
                this
            }
            _onChangeCallback() {}
        }
        _e.prototype.isEuler = !0,
        _e.DefaultOrder = "XYZ",
        _e.RotationOrders = ["XYZ", "YZX", "ZXY", "XZY", "YXZ", "ZYX"];
        class xe {
            constructor() {
                this.mask = 1
            }
            set(t) {
                this.mask = 1 << t | 0
            }
            enable(t) {
                this.mask |= 1 << t | 0
            }
            enableAll() {
                this.mask = -1
            }
            toggle(t) {
                this.mask ^= 1 << t | 0
            }
            disable(t) {
                this.mask &= ~(1 << t | 0)
            }
            disableAll() {
                this.mask = 0
            }
            test(t) {
                return 0 != (this.mask & t.mask)
            }
        }
        let ye = 0;
        const Me = new Pt
          , be = new Ct
          , we = new le
          , Se = new Pt
          , Te = new Pt
          , Ee = new Pt
          , Ae = new Ct
          , Le = new Pt(1,0,0)
          , Re = new Pt(0,1,0)
          , Ce = new Pt(0,0,1)
          , Pe = {
            type: "added"
        }
          , De = {
            type: "removed"
        };
        class Ne extends at {
            constructor() {
                super(),
                Object.defineProperty(this, "id", {
                    value: ye++
                }),
                this.uuid = ht(),
                this.name = "",
                this.type = "Object3D",
                this.parent = null,
                this.children = [],
                this.up = Ne.DefaultUp.clone();
                const t = new Pt
                  , e = new _e
                  , n = new Ct
                  , r = new Pt(1,1,1);
                e._onChange((function() {
                    n.setFromEuler(e, !1)
                }
                )),
                n._onChange((function() {
                    e.setFromQuaternion(n, void 0, !1)
                }
                )),
                Object.defineProperties(this, {
                    position: {
                        configurable: !0,
                        enumerable: !0,
                        value: t
                    },
                    rotation: {
                        configurable: !0,
                        enumerable: !0,
                        value: e
                    },
                    quaternion: {
                        configurable: !0,
                        enumerable: !0,
                        value: n
                    },
                    scale: {
                        configurable: !0,
                        enumerable: !0,
                        value: r
                    },
                    modelViewMatrix: {
                        value: new le
                    },
                    normalMatrix: {
                        value: new _t
                    }
                }),
                this.matrix = new le,
                this.matrixWorld = new le,
                this.matrixAutoUpdate = Ne.DefaultMatrixAutoUpdate,
                this.matrixWorldNeedsUpdate = !1,
                this.layers = new xe,
                this.visible = !0,
                this.castShadow = !1,
                this.receiveShadow = !1,
                this.frustumCulled = !0,
                this.renderOrder = 0,
                this.animations = [],
                this.userData = {}
            }
            onBeforeRender() {}
            onAfterRender() {}
            applyMatrix4(t) {
                this.matrixAutoUpdate && this.updateMatrix(),
                this.matrix.premultiply(t),
                this.matrix.decompose(this.position, this.quaternion, this.scale)
            }
            applyQuaternion(q) {
                return this.quaternion.premultiply(q),
                this
            }
            setRotationFromAxisAngle(t, e) {
                this.quaternion.setFromAxisAngle(t, e)
            }
            setRotationFromEuler(t) {
                this.quaternion.setFromEuler(t, !0)
            }
            setRotationFromMatrix(t) {
                this.quaternion.setFromRotationMatrix(t)
            }
            setRotationFromQuaternion(q) {
                this.quaternion.copy(q)
            }
            rotateOnAxis(t, e) {
                return be.setFromAxisAngle(t, e),
                this.quaternion.multiply(be),
                this
            }
            rotateOnWorldAxis(t, e) {
                return be.setFromAxisAngle(t, e),
                this.quaternion.premultiply(be),
                this
            }
            rotateX(t) {
                return this.rotateOnAxis(Le, t)
            }
            rotateY(t) {
                return this.rotateOnAxis(Re, t)
            }
            rotateZ(t) {
                return this.rotateOnAxis(Ce, t)
            }
            translateOnAxis(t, e) {
                return Me.copy(t).applyQuaternion(this.quaternion),
                this.position.add(Me.multiplyScalar(e)),
                this
            }
            translateX(t) {
                return this.translateOnAxis(Le, t)
            }
            translateY(t) {
                return this.translateOnAxis(Re, t)
            }
            translateZ(t) {
                return this.translateOnAxis(Ce, t)
            }
            localToWorld(t) {
                return t.applyMatrix4(this.matrixWorld)
            }
            worldToLocal(t) {
                return t.applyMatrix4(we.copy(this.matrixWorld).invert())
            }
            lookAt(t, e, n) {
                t.isVector3 ? Se.copy(t) : Se.set(t, e, n);
                const r = this.parent;
                this.updateWorldMatrix(!0, !1),
                Te.setFromMatrixPosition(this.matrixWorld),
                this.isCamera || this.isLight ? we.lookAt(Te, Se, this.up) : we.lookAt(Se, Te, this.up),
                this.quaternion.setFromRotationMatrix(we),
                r && (we.extractRotation(r.matrixWorld),
                be.setFromRotationMatrix(we),
                this.quaternion.premultiply(be.invert()))
            }
            add(object) {
                if (arguments.length > 1) {
                    for (let i = 0; i < arguments.length; i++)
                        this.add(arguments[i]);
                    return this
                }
                return object === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", object),
                this) : (object && object.isObject3D ? (null !== object.parent && object.parent.remove(object),
                object.parent = this,
                this.children.push(object),
                object.dispatchEvent(Pe)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object),
                this)
            }
            remove(object) {
                if (arguments.length > 1) {
                    for (let i = 0; i < arguments.length; i++)
                        this.remove(arguments[i]);
                    return this
                }
                const t = this.children.indexOf(object);
                return -1 !== t && (object.parent = null,
                this.children.splice(t, 1),
                object.dispatchEvent(De)),
                this
            }
            removeFromParent() {
                const t = this.parent;
                return null !== t && t.remove(this),
                this
            }
            clear() {
                for (let i = 0; i < this.children.length; i++) {
                    const object = this.children[i];
                    object.parent = null,
                    object.dispatchEvent(De)
                }
                return this.children.length = 0,
                this
            }
            attach(object) {
                return this.updateWorldMatrix(!0, !1),
                we.copy(this.matrixWorld).invert(),
                null !== object.parent && (object.parent.updateWorldMatrix(!0, !1),
                we.multiply(object.parent.matrixWorld)),
                object.applyMatrix4(we),
                this.add(object),
                object.updateWorldMatrix(!1, !0),
                this
            }
            getObjectById(t) {
                return this.getObjectByProperty("id", t)
            }
            getObjectByName(t) {
                return this.getObjectByProperty("name", t)
            }
            getObjectByProperty(t, e) {
                if (this[t] === e)
                    return this;
                for (let i = 0, n = this.children.length; i < n; i++) {
                    const object = this.children[i].getObjectByProperty(t, e);
                    if (void 0 !== object)
                        return object
                }
            }
            getWorldPosition(t) {
                return this.updateWorldMatrix(!0, !1),
                t.setFromMatrixPosition(this.matrixWorld)
            }
            getWorldQuaternion(t) {
                return this.updateWorldMatrix(!0, !1),
                this.matrixWorld.decompose(Te, t, Ee),
                t
            }
            getWorldScale(t) {
                return this.updateWorldMatrix(!0, !1),
                this.matrixWorld.decompose(Te, Ae, t),
                t
            }
            getWorldDirection(t) {
                this.updateWorldMatrix(!0, !1);
                const e = this.matrixWorld.elements;
                return t.set(e[8], e[9], e[10]).normalize()
            }
            raycast() {}
            traverse(t) {
                t(this);
                const e = this.children;
                for (let i = 0, n = e.length; i < n; i++)
                    e[i].traverse(t)
            }
            traverseVisible(t) {
                if (!1 === this.visible)
                    return;
                t(this);
                const e = this.children;
                for (let i = 0, n = e.length; i < n; i++)
                    e[i].traverseVisible(t)
            }
            traverseAncestors(t) {
                const e = this.parent;
                null !== e && (t(e),
                e.traverseAncestors(t))
            }
            updateMatrix() {
                this.matrix.compose(this.position, this.quaternion, this.scale),
                this.matrixWorldNeedsUpdate = !0
            }
            updateMatrixWorld(t) {
                this.matrixAutoUpdate && this.updateMatrix(),
                (this.matrixWorldNeedsUpdate || t) && (null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix),
                this.matrixWorldNeedsUpdate = !1,
                t = !0);
                const e = this.children;
                for (let i = 0, n = e.length; i < n; i++)
                    e[i].updateMatrixWorld(t)
            }
            updateWorldMatrix(t, e) {
                const n = this.parent;
                if (!0 === t && null !== n && n.updateWorldMatrix(!0, !1),
                this.matrixAutoUpdate && this.updateMatrix(),
                null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix),
                !0 === e) {
                    const t = this.children;
                    for (let i = 0, e = t.length; i < e; i++)
                        t[i].updateWorldMatrix(!1, !0)
                }
            }
            toJSON(meta) {
                const t = void 0 === meta || "string" == typeof meta
                  , output = {};
                t && (meta = {
                    geometries: {},
                    materials: {},
                    textures: {},
                    images: {},
                    shapes: {},
                    skeletons: {},
                    animations: {}
                },
                output.metadata = {
                    version: 4.5,
                    type: "Object",
                    generator: "Object3D.toJSON"
                });
                const object = {};
                function e(t, element) {
                    return void 0 === t[element.uuid] && (t[element.uuid] = element.toJSON(meta)),
                    element.uuid
                }
                if (object.uuid = this.uuid,
                object.type = this.type,
                "" !== this.name && (object.name = this.name),
                !0 === this.castShadow && (object.castShadow = !0),
                !0 === this.receiveShadow && (object.receiveShadow = !0),
                !1 === this.visible && (object.visible = !1),
                !1 === this.frustumCulled && (object.frustumCulled = !1),
                0 !== this.renderOrder && (object.renderOrder = this.renderOrder),
                "{}" !== JSON.stringify(this.userData) && (object.userData = this.userData),
                object.layers = this.layers.mask,
                object.matrix = this.matrix.toArray(),
                !1 === this.matrixAutoUpdate && (object.matrixAutoUpdate = !1),
                this.isInstancedMesh && (object.type = "InstancedMesh",
                object.count = this.count,
                object.instanceMatrix = this.instanceMatrix.toJSON(),
                null !== this.instanceColor && (object.instanceColor = this.instanceColor.toJSON())),
                this.isScene)
                    this.background && (this.background.isColor ? object.background = this.background.toJSON() : this.background.isTexture && (object.background = this.background.toJSON(meta).uuid)),
                    this.environment && this.environment.isTexture && (object.environment = this.environment.toJSON(meta).uuid);
                else if (this.isMesh || this.isLine || this.isPoints) {
                    object.geometry = e(meta.geometries, this.geometry);
                    const t = this.geometry.parameters;
                    if (void 0 !== t && void 0 !== t.shapes) {
                        const n = t.shapes;
                        if (Array.isArray(n))
                            for (let i = 0, t = n.length; i < t; i++) {
                                const t = n[i];
                                e(meta.shapes, t)
                            }
                        else
                            e(meta.shapes, n)
                    }
                }
                if (this.isSkinnedMesh && (object.bindMode = this.bindMode,
                object.bindMatrix = this.bindMatrix.toArray(),
                void 0 !== this.skeleton && (e(meta.skeletons, this.skeleton),
                object.skeleton = this.skeleton.uuid)),
                void 0 !== this.material)
                    if (Array.isArray(this.material)) {
                        const t = [];
                        for (let i = 0, n = this.material.length; i < n; i++)
                            t.push(e(meta.materials, this.material[i]));
                        object.material = t
                    } else
                        object.material = e(meta.materials, this.material);
                if (this.children.length > 0) {
                    object.children = [];
                    for (let i = 0; i < this.children.length; i++)
                        object.children.push(this.children[i].toJSON(meta).object)
                }
                if (this.animations.length > 0) {
                    object.animations = [];
                    for (let i = 0; i < this.animations.length; i++) {
                        const t = this.animations[i];
                        object.animations.push(e(meta.animations, t))
                    }
                }
                if (t) {
                    const t = n(meta.geometries)
                      , e = n(meta.materials)
                      , r = n(meta.textures)
                      , o = n(meta.images)
                      , l = n(meta.shapes)
                      , c = n(meta.skeletons)
                      , h = n(meta.animations);
                    t.length > 0 && (output.geometries = t),
                    e.length > 0 && (output.materials = e),
                    r.length > 0 && (output.textures = r),
                    o.length > 0 && (output.images = o),
                    l.length > 0 && (output.shapes = l),
                    c.length > 0 && (output.skeletons = c),
                    h.length > 0 && (output.animations = h)
                }
                return output.object = object,
                output;
                function n(t) {
                    const e = [];
                    for (const n in t) {
                        const data = t[n];
                        delete data.metadata,
                        e.push(data)
                    }
                    return e
                }
            }
            clone(t) {
                return (new this.constructor).copy(this, t)
            }
            copy(source, t=!0) {
                if (this.name = source.name,
                this.up.copy(source.up),
                this.position.copy(source.position),
                this.rotation.order = source.rotation.order,
                this.quaternion.copy(source.quaternion),
                this.scale.copy(source.scale),
                this.matrix.copy(source.matrix),
                this.matrixWorld.copy(source.matrixWorld),
                this.matrixAutoUpdate = source.matrixAutoUpdate,
                this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate,
                this.layers.mask = source.layers.mask,
                this.visible = source.visible,
                this.castShadow = source.castShadow,
                this.receiveShadow = source.receiveShadow,
                this.frustumCulled = source.frustumCulled,
                this.renderOrder = source.renderOrder,
                this.userData = JSON.parse(JSON.stringify(source.userData)),
                !0 === t)
                    for (let i = 0; i < source.children.length; i++) {
                        const t = source.children[i];
                        this.add(t.clone())
                    }
                return this
            }
        }
        Ne.DefaultUp = new Pt(0,1,0),
        Ne.DefaultMatrixAutoUpdate = !0,
        Ne.prototype.isObject3D = !0;
        const Ie = new Pt
          , Oe = new Pt
          , Fe = new Pt
          , Ue = new Pt
          , ze = new Pt
          , Be = new Pt
          , Ge = new Pt
          , He = new Pt
          , ke = new Pt
          , Ve = new Pt;
        class We {
            constructor(a=new Pt, b=new Pt, t=new Pt) {
                this.a = a,
                this.b = b,
                this.c = t
            }
            static getNormal(a, b, t, e) {
                e.subVectors(t, b),
                Ie.subVectors(a, b),
                e.cross(Ie);
                const n = e.lengthSq();
                return n > 0 ? e.multiplyScalar(1 / Math.sqrt(n)) : e.set(0, 0, 0)
            }
            static getBarycoord(t, a, b, e, n) {
                Ie.subVectors(e, a),
                Oe.subVectors(b, a),
                Fe.subVectors(t, a);
                const r = Ie.dot(Ie)
                  , o = Ie.dot(Oe)
                  , l = Ie.dot(Fe)
                  , c = Oe.dot(Oe)
                  , h = Oe.dot(Fe)
                  , d = r * c - o * o;
                if (0 === d)
                    return n.set(-2, -1, -1);
                const f = 1 / d
                  , u = (c * l - o * h) * f
                  , m = (r * h - o * l) * f;
                return n.set(1 - u - m, m, u)
            }
            static containsPoint(t, a, b, e) {
                return this.getBarycoord(t, a, b, e, Ue),
                Ue.x >= 0 && Ue.y >= 0 && Ue.x + Ue.y <= 1
            }
            static getUV(t, e, n, r, o, l, c, h) {
                return this.getBarycoord(t, e, n, r, Ue),
                h.set(0, 0),
                h.addScaledVector(o, Ue.x),
                h.addScaledVector(l, Ue.y),
                h.addScaledVector(c, Ue.z),
                h
            }
            static isFrontFacing(a, b, t, e) {
                return Ie.subVectors(t, b),
                Oe.subVectors(a, b),
                Ie.cross(Oe).dot(e) < 0
            }
            set(a, b, t) {
                return this.a.copy(a),
                this.b.copy(b),
                this.c.copy(t),
                this
            }
            setFromPointsAndIndices(t, e, n, r) {
                return this.a.copy(t[e]),
                this.b.copy(t[n]),
                this.c.copy(t[r]),
                this
            }
            setFromAttributeAndIndices(t, e, n, r) {
                return this.a.fromBufferAttribute(t, e),
                this.b.fromBufferAttribute(t, n),
                this.c.fromBufferAttribute(t, r),
                this
            }
            clone() {
                return (new this.constructor).copy(this)
            }
            copy(t) {
                return this.a.copy(t.a),
                this.b.copy(t.b),
                this.c.copy(t.c),
                this
            }
            getArea() {
                return Ie.subVectors(this.c, this.b),
                Oe.subVectors(this.a, this.b),
                .5 * Ie.cross(Oe).length()
            }
            getMidpoint(t) {
                return t.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3)
            }
            getNormal(t) {
                return We.getNormal(this.a, this.b, this.c, t)
            }
            getPlane(t) {
                return t.setFromCoplanarPoints(this.a, this.b, this.c)
            }
            getBarycoord(t, e) {
                return We.getBarycoord(t, this.a, this.b, this.c, e)
            }
            getUV(t, e, n, r, o) {
                return We.getUV(t, this.a, this.b, this.c, e, n, r, o)
            }
            containsPoint(t) {
                return We.containsPoint(t, this.a, this.b, this.c)
            }
            isFrontFacing(t) {
                return We.isFrontFacing(this.a, this.b, this.c, t)
            }
            intersectsBox(t) {
                return t.intersectsTriangle(this)
            }
            closestPointToPoint(p, t) {
                const a = this.a
                  , b = this.b
                  , e = this.c;
                let n, r;
                ze.subVectors(b, a),
                Be.subVectors(e, a),
                He.subVectors(p, a);
                const o = ze.dot(He)
                  , l = Be.dot(He);
                if (o <= 0 && l <= 0)
                    return t.copy(a);
                ke.subVectors(p, b);
                const c = ze.dot(ke)
                  , h = Be.dot(ke);
                if (c >= 0 && h <= c)
                    return t.copy(b);
                const d = o * h - c * l;
                if (d <= 0 && o >= 0 && c <= 0)
                    return n = o / (o - c),
                    t.copy(a).addScaledVector(ze, n);
                Ve.subVectors(p, e);
                const f = ze.dot(Ve)
                  , m = Be.dot(Ve);
                if (m >= 0 && f <= m)
                    return t.copy(e);
                const v = f * l - o * m;
                if (v <= 0 && l >= 0 && m <= 0)
                    return r = l / (l - m),
                    t.copy(a).addScaledVector(Be, r);
                const _ = c * m - f * h;
                if (_ <= 0 && h - c >= 0 && f - m >= 0)
                    return Ge.subVectors(e, b),
                    r = (h - c) / (h - c + (f - m)),
                    t.copy(b).addScaledVector(Ge, r);
                const x = 1 / (_ + v + d);
                return n = v * x,
                r = d * x,
                t.copy(a).addScaledVector(ze, n).addScaledVector(Be, r)
            }
            equals(t) {
                return t.a.equals(this.a) && t.b.equals(this.b) && t.c.equals(this.c)
            }
        }
        let je = 0;
        class Xe extends at {
            constructor() {
                super(),
                Object.defineProperty(this, "id", {
                    value: je++
                }),
                this.uuid = ht(),
                this.name = "",
                this.type = "Material",
                this.fog = !0,
                this.blending = 1,
                this.side = 0,
                this.vertexColors = !1,
                this.opacity = 1,
                this.format = B,
                this.transparent = !1,
                this.blendSrc = 204,
                this.blendDst = 205,
                this.blendEquation = m,
                this.blendSrcAlpha = null,
                this.blendDstAlpha = null,
                this.blendEquationAlpha = null,
                this.depthFunc = 3,
                this.depthTest = !0,
                this.depthWrite = !0,
                this.stencilWriteMask = 255,
                this.stencilFunc = 519,
                this.stencilRef = 0,
                this.stencilFuncMask = 255,
                this.stencilFail = tt,
                this.stencilZFail = tt,
                this.stencilZPass = tt,
                this.stencilWrite = !1,
                this.clippingPlanes = null,
                this.clipIntersection = !1,
                this.clipShadows = !1,
                this.shadowSide = null,
                this.colorWrite = !0,
                this.precision = null,
                this.polygonOffset = !1,
                this.polygonOffsetFactor = 0,
                this.polygonOffsetUnits = 0,
                this.dithering = !1,
                this.alphaToCoverage = !1,
                this.premultipliedAlpha = !1,
                this.visible = !0,
                this.toneMapped = !0,
                this.userData = {},
                this.version = 0,
                this._alphaTest = 0
            }
            get alphaTest() {
                return this._alphaTest
            }
            set alphaTest(t) {
                this._alphaTest > 0 != t > 0 && this.version++,
                this._alphaTest = t
            }
            onBuild() {}
            onBeforeRender() {}
            onBeforeCompile() {}
            customProgramCacheKey() {
                return this.onBeforeCompile.toString()
            }
            setValues(t) {
                if (void 0 !== t)
                    for (const e in t) {
                        const n = t[e];
                        if (void 0 === n) {
                            console.warn("THREE.Material: '" + e + "' parameter is undefined.");
                            continue
                        }
                        if ("shading" === e) {
                            console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."),
                            this.flatShading = 1 === n;
                            continue
                        }
                        const r = this[e];
                        void 0 !== r ? r && r.isColor ? r.set(n) : r && r.isVector3 && n && n.isVector3 ? r.copy(n) : this[e] = n : console.warn("THREE." + this.type + ": '" + e + "' is not a property of this material.")
                    }
            }
            toJSON(meta) {
                const t = void 0 === meta || "string" == typeof meta;
                t && (meta = {
                    textures: {},
                    images: {}
                });
                const data = {
                    metadata: {
                        version: 4.5,
                        type: "Material",
                        generator: "Material.toJSON"
                    }
                };
                function e(t) {
                    const e = [];
                    for (const n in t) {
                        const data = t[n];
                        delete data.metadata,
                        e.push(data)
                    }
                    return e
                }
                if (data.uuid = this.uuid,
                data.type = this.type,
                "" !== this.name && (data.name = this.name),
                this.color && this.color.isColor && (data.color = this.color.getHex()),
                void 0 !== this.roughness && (data.roughness = this.roughness),
                void 0 !== this.metalness && (data.metalness = this.metalness),
                void 0 !== this.sheen && (data.sheen = this.sheen),
                this.sheenColor && this.sheenColor.isColor && (data.sheenColor = this.sheenColor.getHex()),
                void 0 !== this.sheenRoughness && (data.sheenRoughness = this.sheenRoughness),
                this.emissive && this.emissive.isColor && (data.emissive = this.emissive.getHex()),
                this.emissiveIntensity && 1 !== this.emissiveIntensity && (data.emissiveIntensity = this.emissiveIntensity),
                this.specular && this.specular.isColor && (data.specular = this.specular.getHex()),
                void 0 !== this.specularIntensity && (data.specularIntensity = this.specularIntensity),
                this.specularColor && this.specularColor.isColor && (data.specularColor = this.specularColor.getHex()),
                void 0 !== this.shininess && (data.shininess = this.shininess),
                void 0 !== this.clearcoat && (data.clearcoat = this.clearcoat),
                void 0 !== this.clearcoatRoughness && (data.clearcoatRoughness = this.clearcoatRoughness),
                this.clearcoatMap && this.clearcoatMap.isTexture && (data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid),
                this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid),
                this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid,
                data.clearcoatNormalScale = this.clearcoatNormalScale.toArray()),
                this.map && this.map.isTexture && (data.map = this.map.toJSON(meta).uuid),
                this.matcap && this.matcap.isTexture && (data.matcap = this.matcap.toJSON(meta).uuid),
                this.alphaMap && this.alphaMap.isTexture && (data.alphaMap = this.alphaMap.toJSON(meta).uuid),
                this.lightMap && this.lightMap.isTexture && (data.lightMap = this.lightMap.toJSON(meta).uuid,
                data.lightMapIntensity = this.lightMapIntensity),
                this.aoMap && this.aoMap.isTexture && (data.aoMap = this.aoMap.toJSON(meta).uuid,
                data.aoMapIntensity = this.aoMapIntensity),
                this.bumpMap && this.bumpMap.isTexture && (data.bumpMap = this.bumpMap.toJSON(meta).uuid,
                data.bumpScale = this.bumpScale),
                this.normalMap && this.normalMap.isTexture && (data.normalMap = this.normalMap.toJSON(meta).uuid,
                data.normalMapType = this.normalMapType,
                data.normalScale = this.normalScale.toArray()),
                this.displacementMap && this.displacementMap.isTexture && (data.displacementMap = this.displacementMap.toJSON(meta).uuid,
                data.displacementScale = this.displacementScale,
                data.displacementBias = this.displacementBias),
                this.roughnessMap && this.roughnessMap.isTexture && (data.roughnessMap = this.roughnessMap.toJSON(meta).uuid),
                this.metalnessMap && this.metalnessMap.isTexture && (data.metalnessMap = this.metalnessMap.toJSON(meta).uuid),
                this.emissiveMap && this.emissiveMap.isTexture && (data.emissiveMap = this.emissiveMap.toJSON(meta).uuid),
                this.specularMap && this.specularMap.isTexture && (data.specularMap = this.specularMap.toJSON(meta).uuid),
                this.specularIntensityMap && this.specularIntensityMap.isTexture && (data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid),
                this.specularColorMap && this.specularColorMap.isTexture && (data.specularColorMap = this.specularColorMap.toJSON(meta).uuid),
                this.envMap && this.envMap.isTexture && (data.envMap = this.envMap.toJSON(meta).uuid,
                void 0 !== this.combine && (data.combine = this.combine)),
                void 0 !== this.envMapIntensity && (data.envMapIntensity = this.envMapIntensity),
                void 0 !== this.reflectivity && (data.reflectivity = this.reflectivity),
                void 0 !== this.refractionRatio && (data.refractionRatio = this.refractionRatio),
                this.gradientMap && this.gradientMap.isTexture && (data.gradientMap = this.gradientMap.toJSON(meta).uuid),
                void 0 !== this.transmission && (data.transmission = this.transmission),
                this.transmissionMap && this.transmissionMap.isTexture && (data.transmissionMap = this.transmissionMap.toJSON(meta).uuid),
                void 0 !== this.thickness && (data.thickness = this.thickness),
                this.thicknessMap && this.thicknessMap.isTexture && (data.thicknessMap = this.thicknessMap.toJSON(meta).uuid),
                void 0 !== this.attenuationDistance && (data.attenuationDistance = this.attenuationDistance),
                void 0 !== this.attenuationColor && (data.attenuationColor = this.attenuationColor.getHex()),
                void 0 !== this.size && (data.size = this.size),
                null !== this.shadowSide && (data.shadowSide = this.shadowSide),
                void 0 !== this.sizeAttenuation && (data.sizeAttenuation = this.sizeAttenuation),
                1 !== this.blending && (data.blending = this.blending),
                0 !== this.side && (data.side = this.side),
                this.vertexColors && (data.vertexColors = !0),
                this.opacity < 1 && (data.opacity = this.opacity),
                this.format !== B && (data.format = this.format),
                !0 === this.transparent && (data.transparent = this.transparent),
                data.depthFunc = this.depthFunc,
                data.depthTest = this.depthTest,
                data.depthWrite = this.depthWrite,
                data.colorWrite = this.colorWrite,
                data.stencilWrite = this.stencilWrite,
                data.stencilWriteMask = this.stencilWriteMask,
                data.stencilFunc = this.stencilFunc,
                data.stencilRef = this.stencilRef,
                data.stencilFuncMask = this.stencilFuncMask,
                data.stencilFail = this.stencilFail,
                data.stencilZFail = this.stencilZFail,
                data.stencilZPass = this.stencilZPass,
                this.rotation && 0 !== this.rotation && (data.rotation = this.rotation),
                !0 === this.polygonOffset && (data.polygonOffset = !0),
                0 !== this.polygonOffsetFactor && (data.polygonOffsetFactor = this.polygonOffsetFactor),
                0 !== this.polygonOffsetUnits && (data.polygonOffsetUnits = this.polygonOffsetUnits),
                this.linewidth && 1 !== this.linewidth && (data.linewidth = this.linewidth),
                void 0 !== this.dashSize && (data.dashSize = this.dashSize),
                void 0 !== this.gapSize && (data.gapSize = this.gapSize),
                void 0 !== this.scale && (data.scale = this.scale),
                !0 === this.dithering && (data.dithering = !0),
                this.alphaTest > 0 && (data.alphaTest = this.alphaTest),
                !0 === this.alphaToCoverage && (data.alphaToCoverage = this.alphaToCoverage),
                !0 === this.premultipliedAlpha && (data.premultipliedAlpha = this.premultipliedAlpha),
                !0 === this.wireframe && (data.wireframe = this.wireframe),
                this.wireframeLinewidth > 1 && (data.wireframeLinewidth = this.wireframeLinewidth),
                "round" !== this.wireframeLinecap && (data.wireframeLinecap = this.wireframeLinecap),
                "round" !== this.wireframeLinejoin && (data.wireframeLinejoin = this.wireframeLinejoin),
                !0 === this.flatShading && (data.flatShading = this.flatShading),
                !1 === this.visible && (data.visible = !1),
                !1 === this.toneMapped && (data.toneMapped = !1),
                "{}" !== JSON.stringify(this.userData) && (data.userData = this.userData),
                t) {
                    const t = e(meta.textures)
                      , n = e(meta.images);
                    t.length > 0 && (data.textures = t),
                    n.length > 0 && (data.images = n)
                }
                return data
            }
            clone() {
                return (new this.constructor).copy(this)
            }
            copy(source) {
                this.name = source.name,
                this.fog = source.fog,
                this.blending = source.blending,
                this.side = source.side,
                this.vertexColors = source.vertexColors,
                this.opacity = source.opacity,
                this.format = source.format,
                this.transparent = source.transparent,
                this.blendSrc = source.blendSrc,
                this.blendDst = source.blendDst,
                this.blendEquation = source.blendEquation,
                this.blendSrcAlpha = source.blendSrcAlpha,
                this.blendDstAlpha = source.blendDstAlpha,
                this.blendEquationAlpha = source.blendEquationAlpha,
                this.depthFunc = source.depthFunc,
                this.depthTest = source.depthTest,
                this.depthWrite = source.depthWrite,
                this.stencilWriteMask = source.stencilWriteMask,
                this.stencilFunc = source.stencilFunc,
                this.stencilRef = source.stencilRef,
                this.stencilFuncMask = source.stencilFuncMask,
                this.stencilFail = source.stencilFail,
                this.stencilZFail = source.stencilZFail,
                this.stencilZPass = source.stencilZPass,
                this.stencilWrite = source.stencilWrite;
                const t = source.clippingPlanes;
                let e = null;
                if (null !== t) {
                    const n = t.length;
                    e = new Array(n);
                    for (let i = 0; i !== n; ++i)
                        e[i] = t[i].clone()
                }
                return this.clippingPlanes = e,
                this.clipIntersection = source.clipIntersection,
                this.clipShadows = source.clipShadows,
                this.shadowSide = source.shadowSide,
                this.colorWrite = source.colorWrite,
                this.precision = source.precision,
                this.polygonOffset = source.polygonOffset,
                this.polygonOffsetFactor = source.polygonOffsetFactor,
                this.polygonOffsetUnits = source.polygonOffsetUnits,
                this.dithering = source.dithering,
                this.alphaTest = source.alphaTest,
                this.alphaToCoverage = source.alphaToCoverage,
                this.premultipliedAlpha = source.premultipliedAlpha,
                this.visible = source.visible,
                this.toneMapped = source.toneMapped,
                this.userData = JSON.parse(JSON.stringify(source.userData)),
                this
            }
            dispose() {
                this.dispatchEvent({
                    type: "dispose"
                })
            }
            set needsUpdate(t) {
                !0 === t && this.version++
            }
        }
        Xe.prototype.isMaterial = !0;
        const qe = {
            aliceblue: 15792383,
            antiquewhite: 16444375,
            aqua: 65535,
            aquamarine: 8388564,
            azure: 15794175,
            beige: 16119260,
            bisque: 16770244,
            black: 0,
            blanchedalmond: 16772045,
            blue: 255,
            blueviolet: 9055202,
            brown: 10824234,
            burlywood: 14596231,
            cadetblue: 6266528,
            chartreuse: 8388352,
            chocolate: 13789470,
            coral: 16744272,
            cornflowerblue: 6591981,
            cornsilk: 16775388,
            crimson: 14423100,
            cyan: 65535,
            darkblue: 139,
            darkcyan: 35723,
            darkgoldenrod: 12092939,
            darkgray: 11119017,
            darkgreen: 25600,
            darkgrey: 11119017,
            darkkhaki: 12433259,
            darkmagenta: 9109643,
            darkolivegreen: 5597999,
            darkorange: 16747520,
            darkorchid: 10040012,
            darkred: 9109504,
            darksalmon: 15308410,
            darkseagreen: 9419919,
            darkslateblue: 4734347,
            darkslategray: 3100495,
            darkslategrey: 3100495,
            darkturquoise: 52945,
            darkviolet: 9699539,
            deeppink: 16716947,
            deepskyblue: 49151,
            dimgray: 6908265,
            dimgrey: 6908265,
            dodgerblue: 2003199,
            firebrick: 11674146,
            floralwhite: 16775920,
            forestgreen: 2263842,
            fuchsia: 16711935,
            gainsboro: 14474460,
            ghostwhite: 16316671,
            gold: 16766720,
            goldenrod: 14329120,
            gray: 8421504,
            green: 32768,
            greenyellow: 11403055,
            grey: 8421504,
            honeydew: 15794160,
            hotpink: 16738740,
            indianred: 13458524,
            indigo: 4915330,
            ivory: 16777200,
            khaki: 15787660,
            lavender: 15132410,
            lavenderblush: 16773365,
            lawngreen: 8190976,
            lemonchiffon: 16775885,
            lightblue: 11393254,
            lightcoral: 15761536,
            lightcyan: 14745599,
            lightgoldenrodyellow: 16448210,
            lightgray: 13882323,
            lightgreen: 9498256,
            lightgrey: 13882323,
            lightpink: 16758465,
            lightsalmon: 16752762,
            lightseagreen: 2142890,
            lightskyblue: 8900346,
            lightslategray: 7833753,
            lightslategrey: 7833753,
            lightsteelblue: 11584734,
            lightyellow: 16777184,
            lime: 65280,
            limegreen: 3329330,
            linen: 16445670,
            magenta: 16711935,
            maroon: 8388608,
            mediumaquamarine: 6737322,
            mediumblue: 205,
            mediumorchid: 12211667,
            mediumpurple: 9662683,
            mediumseagreen: 3978097,
            mediumslateblue: 8087790,
            mediumspringgreen: 64154,
            mediumturquoise: 4772300,
            mediumvioletred: 13047173,
            midnightblue: 1644912,
            mintcream: 16121850,
            mistyrose: 16770273,
            moccasin: 16770229,
            navajowhite: 16768685,
            navy: 128,
            oldlace: 16643558,
            olive: 8421376,
            olivedrab: 7048739,
            orange: 16753920,
            orangered: 16729344,
            orchid: 14315734,
            palegoldenrod: 15657130,
            palegreen: 10025880,
            paleturquoise: 11529966,
            palevioletred: 14381203,
            papayawhip: 16773077,
            peachpuff: 16767673,
            peru: 13468991,
            pink: 16761035,
            plum: 14524637,
            powderblue: 11591910,
            purple: 8388736,
            rebeccapurple: 6697881,
            red: 16711680,
            rosybrown: 12357519,
            royalblue: 4286945,
            saddlebrown: 9127187,
            salmon: 16416882,
            sandybrown: 16032864,
            seagreen: 3050327,
            seashell: 16774638,
            sienna: 10506797,
            silver: 12632256,
            skyblue: 8900331,
            slateblue: 6970061,
            slategray: 7372944,
            slategrey: 7372944,
            snow: 16775930,
            springgreen: 65407,
            steelblue: 4620980,
            tan: 13808780,
            teal: 32896,
            thistle: 14204888,
            tomato: 16737095,
            turquoise: 4251856,
            violet: 15631086,
            wheat: 16113331,
            white: 16777215,
            whitesmoke: 16119285,
            yellow: 16776960,
            yellowgreen: 10145074
        }
          , Ye = {
            h: 0,
            s: 0,
            l: 0
        }
          , Ze = {
            h: 0,
            s: 0,
            l: 0
        };
        function Je(p, q, t) {
            return t < 0 && (t += 1),
            t > 1 && (t -= 1),
            t < 1 / 6 ? p + 6 * (q - p) * t : t < .5 ? q : t < 2 / 3 ? p + 6 * (q - p) * (2 / 3 - t) : p
        }
        function Ke(t) {
            return t < .04045 ? .0773993808 * t : Math.pow(.9478672986 * t + .0521327014, 2.4)
        }
        function Qe(t) {
            return t < .0031308 ? 12.92 * t : 1.055 * Math.pow(t, .41666) - .055
        }
        class $e {
            constructor(t, g, b) {
                return void 0 === g && void 0 === b ? this.set(t) : this.setRGB(t, g, b)
            }
            set(t) {
                return t && t.isColor ? this.copy(t) : "number" == typeof t ? this.setHex(t) : "string" == typeof t && this.setStyle(t),
                this
            }
            setScalar(t) {
                return this.r = t,
                this.g = t,
                this.b = t,
                this
            }
            setHex(t) {
                return t = Math.floor(t),
                this.r = (t >> 16 & 255) / 255,
                this.g = (t >> 8 & 255) / 255,
                this.b = (255 & t) / 255,
                this
            }
            setRGB(t, g, b) {
                return this.r = t,
                this.g = g,
                this.b = b,
                this
            }
            setHSL(t, s, e) {
                if (t = pt(t, 1),
                s = ut(s, 0, 1),
                e = ut(e, 0, 1),
                0 === s)
                    this.r = this.g = this.b = e;
                else {
                    const p = e <= .5 ? e * (1 + s) : e + s - e * s
                      , q = 2 * e - p;
                    this.r = Je(q, p, t + 1 / 3),
                    this.g = Je(q, p, t),
                    this.b = Je(q, p, t - 1 / 3)
                }
                return this
            }
            setStyle(style) {
                function t(t) {
                    void 0 !== t && parseFloat(t) < 1 && console.warn("THREE.Color: Alpha component of " + style + " will be ignored.")
                }
                let e;
                if (e = /^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(style)) {
                    let n;
                    const r = e[1]
                      , o = e[2];
                    switch (r) {
                    case "rgb":
                    case "rgba":
                        if (n = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))
                            return this.r = Math.min(255, parseInt(n[1], 10)) / 255,
                            this.g = Math.min(255, parseInt(n[2], 10)) / 255,
                            this.b = Math.min(255, parseInt(n[3], 10)) / 255,
                            t(n[4]),
                            this;
                        if (n = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))
                            return this.r = Math.min(100, parseInt(n[1], 10)) / 100,
                            this.g = Math.min(100, parseInt(n[2], 10)) / 100,
                            this.b = Math.min(100, parseInt(n[3], 10)) / 100,
                            t(n[4]),
                            this;
                        break;
                    case "hsl":
                    case "hsla":
                        if (n = /^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) {
                            const e = parseFloat(n[1]) / 360
                              , s = parseInt(n[2], 10) / 100
                              , r = parseInt(n[3], 10) / 100;
                            return t(n[4]),
                            this.setHSL(e, s, r)
                        }
                    }
                } else if (e = /^\#([A-Fa-f\d]+)$/.exec(style)) {
                    const t = e[1]
                      , n = t.length;
                    if (3 === n)
                        return this.r = parseInt(t.charAt(0) + t.charAt(0), 16) / 255,
                        this.g = parseInt(t.charAt(1) + t.charAt(1), 16) / 255,
                        this.b = parseInt(t.charAt(2) + t.charAt(2), 16) / 255,
                        this;
                    if (6 === n)
                        return this.r = parseInt(t.charAt(0) + t.charAt(1), 16) / 255,
                        this.g = parseInt(t.charAt(2) + t.charAt(3), 16) / 255,
                        this.b = parseInt(t.charAt(4) + t.charAt(5), 16) / 255,
                        this
                }
                return style && style.length > 0 ? this.setColorName(style) : this
            }
            setColorName(style) {
                const t = qe[style.toLowerCase()];
                return void 0 !== t ? this.setHex(t) : console.warn("THREE.Color: Unknown color " + style),
                this
            }
            clone() {
                return new this.constructor(this.r,this.g,this.b)
            }
            copy(t) {
                return this.r = t.r,
                this.g = t.g,
                this.b = t.b,
                this
            }
            copyGammaToLinear(t, e=2) {
                return this.r = Math.pow(t.r, e),
                this.g = Math.pow(t.g, e),
                this.b = Math.pow(t.b, e),
                this
            }
            copyLinearToGamma(t, e=2) {
                const n = e > 0 ? 1 / e : 1;
                return this.r = Math.pow(t.r, n),
                this.g = Math.pow(t.g, n),
                this.b = Math.pow(t.b, n),
                this
            }
            convertGammaToLinear(t) {
                return this.copyGammaToLinear(this, t),
                this
            }
            convertLinearToGamma(t) {
                return this.copyLinearToGamma(this, t),
                this
            }
            copySRGBToLinear(t) {
                return this.r = Ke(t.r),
                this.g = Ke(t.g),
                this.b = Ke(t.b),
                this
            }
            copyLinearToSRGB(t) {
                return this.r = Qe(t.r),
                this.g = Qe(t.g),
                this.b = Qe(t.b),
                this
            }
            convertSRGBToLinear() {
                return this.copySRGBToLinear(this),
                this
            }
            convertLinearToSRGB() {
                return this.copyLinearToSRGB(this),
                this
            }
            getHex() {
                return 255 * this.r << 16 ^ 255 * this.g << 8 ^ 255 * this.b << 0
            }
            getHexString() {
                return ("000000" + this.getHex().toString(16)).slice(-6)
            }
            getHSL(t) {
                const e = this.r
                  , g = this.g
                  , b = this.b
                  , n = Math.max(e, g, b)
                  , r = Math.min(e, g, b);
                let o, l;
                const c = (r + n) / 2;
                if (r === n)
                    o = 0,
                    l = 0;
                else {
                    const t = n - r;
                    switch (l = c <= .5 ? t / (n + r) : t / (2 - n - r),
                    n) {
                    case e:
                        o = (g - b) / t + (g < b ? 6 : 0);
                        break;
                    case g:
                        o = (b - e) / t + 2;
                        break;
                    case b:
                        o = (e - g) / t + 4
                    }
                    o /= 6
                }
                return t.h = o,
                t.s = l,
                t.l = c,
                t
            }
            getStyle() {
                return "rgb(" + (255 * this.r | 0) + "," + (255 * this.g | 0) + "," + (255 * this.b | 0) + ")"
            }
            offsetHSL(t, s, e) {
                return this.getHSL(Ye),
                Ye.h += t,
                Ye.s += s,
                Ye.l += e,
                this.setHSL(Ye.h, Ye.s, Ye.l),
                this
            }
            add(t) {
                return this.r += t.r,
                this.g += t.g,
                this.b += t.b,
                this
            }
            addColors(t, e) {
                return this.r = t.r + e.r,
                this.g = t.g + e.g,
                this.b = t.b + e.b,
                this
            }
            addScalar(s) {
                return this.r += s,
                this.g += s,
                this.b += s,
                this
            }
            sub(t) {
                return this.r = Math.max(0, this.r - t.r),
                this.g = Math.max(0, this.g - t.g),
                this.b = Math.max(0, this.b - t.b),
                this
            }
            multiply(t) {
                return this.r *= t.r,
                this.g *= t.g,
                this.b *= t.b,
                this
            }
            multiplyScalar(s) {
                return this.r *= s,
                this.g *= s,
                this.b *= s,
                this
            }
            lerp(t, e) {
                return this.r += (t.r - this.r) * e,
                this.g += (t.g - this.g) * e,
                this.b += (t.b - this.b) * e,
                this
            }
            lerpColors(t, e, n) {
                return this.r = t.r + (e.r - t.r) * n,
                this.g = t.g + (e.g - t.g) * n,
                this.b = t.b + (e.b - t.b) * n,
                this
            }
            lerpHSL(t, e) {
                this.getHSL(Ye),
                t.getHSL(Ze);
                const n = ft(Ye.h, Ze.h, e)
                  , s = ft(Ye.s, Ze.s, e)
                  , r = ft(Ye.l, Ze.l, e);
                return this.setHSL(n, s, r),
                this
            }
            equals(t) {
                return t.r === this.r && t.g === this.g && t.b === this.b
            }
            fromArray(t, e=0) {
                return this.r = t[e],
                this.g = t[e + 1],
                this.b = t[e + 2],
                this
            }
            toArray(t=[], e=0) {
                return t[e] = this.r,
                t[e + 1] = this.g,
                t[e + 2] = this.b,
                t
            }
            fromBufferAttribute(t, e) {
                return this.r = t.getX(e),
                this.g = t.getY(e),
                this.b = t.getZ(e),
                !0 === t.normalized && (this.r /= 255,
                this.g /= 255,
                this.b /= 255),
                this
            }
            toJSON() {
                return this.getHex()
            }
        }
        $e.NAMES = qe,
        $e.prototype.isColor = !0,
        $e.prototype.r = 1,
        $e.prototype.g = 1,
        $e.prototype.b = 1;
        class tn extends Xe {
            constructor(t) {
                super(),
                this.type = "MeshBasicMaterial",
                this.color = new $e(16777215),
                this.map = null,
                this.lightMap = null,
                this.lightMapIntensity = 1,
                this.aoMap = null,
                this.aoMapIntensity = 1,
                this.specularMap = null,
                this.alphaMap = null,
                this.envMap = null,
                this.combine = 0,
                this.reflectivity = 1,
                this.refractionRatio = .98,
                this.wireframe = !1,
                this.wireframeLinewidth = 1,
                this.wireframeLinecap = "round",
                this.wireframeLinejoin = "round",
                this.setValues(t)
            }
            copy(source) {
                return super.copy(source),
                this.color.copy(source.color),
                this.map = source.map,
                this.lightMap = source.lightMap,
                this.lightMapIntensity = source.lightMapIntensity,
                this.aoMap = source.aoMap,
                this.aoMapIntensity = source.aoMapIntensity,
                this.specularMap = source.specularMap,
                this.alphaMap = source.alphaMap,
                this.envMap = source.envMap,
                this.combine = source.combine,
                this.reflectivity = source.reflectivity,
                this.refractionRatio = source.refractionRatio,
                this.wireframe = source.wireframe,
                this.wireframeLinewidth = source.wireframeLinewidth,
                this.wireframeLinecap = source.wireframeLinecap,
                this.wireframeLinejoin = source.wireframeLinejoin,
                this
            }
        }
        tn.prototype.isMeshBasicMaterial = !0;
        const en = new Pt
          , nn = new vt;
        class rn {
            constructor(t, e, n) {
                if (Array.isArray(t))
                    throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
                this.name = "",
                this.array = t,
                this.itemSize = e,
                this.count = void 0 !== t ? t.length / e : 0,
                this.normalized = !0 === n,
                this.usage = et,
                this.updateRange = {
                    offset: 0,
                    count: -1
                },
                this.version = 0
            }
            onUploadCallback() {}
            set needsUpdate(t) {
                !0 === t && this.version++
            }
            setUsage(t) {
                return this.usage = t,
                this
            }
            copy(source) {
                return this.name = source.name,
                this.array = new source.array.constructor(source.array),
                this.itemSize = source.itemSize,
                this.count = source.count,
                this.normalized = source.normalized,
                this.usage = source.usage,
                this
            }
            copyAt(t, e, n) {
                t *= this.itemSize,
                n *= e.itemSize;
                for (let i = 0, r = this.itemSize; i < r; i++)
                    this.array[t + i] = e.array[n + i];
                return this
            }
            copyArray(t) {
                return this.array.set(t),
                this
            }
            copyColorsArray(t) {
                const e = this.array;
                let n = 0;
                for (let i = 0, r = t.length; i < r; i++) {
                    let r = t[i];
                    void 0 === r && (console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined", i),
                    r = new $e),
                    e[n++] = r.r,
                    e[n++] = r.g,
                    e[n++] = r.b
                }
                return this
            }
            copyVector2sArray(t) {
                const e = this.array;
                let n = 0;
                for (let i = 0, r = t.length; i < r; i++) {
                    let r = t[i];
                    void 0 === r && (console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined", i),
                    r = new vt),
                    e[n++] = r.x,
                    e[n++] = r.y
                }
                return this
            }
            copyVector3sArray(t) {
                const e = this.array;
                let n = 0;
                for (let i = 0, r = t.length; i < r; i++) {
                    let r = t[i];
                    void 0 === r && (console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined", i),
                    r = new Pt),
                    e[n++] = r.x,
                    e[n++] = r.y,
                    e[n++] = r.z
                }
                return this
            }
            copyVector4sArray(t) {
                const e = this.array;
                let n = 0;
                for (let i = 0, r = t.length; i < r; i++) {
                    let r = t[i];
                    void 0 === r && (console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined", i),
                    r = new At),
                    e[n++] = r.x,
                    e[n++] = r.y,
                    e[n++] = r.z,
                    e[n++] = r.w
                }
                return this
            }
            applyMatrix3(t) {
                if (2 === this.itemSize)
                    for (let i = 0, e = this.count; i < e; i++)
                        nn.fromBufferAttribute(this, i),
                        nn.applyMatrix3(t),
                        this.setXY(i, nn.x, nn.y);
                else if (3 === this.itemSize)
                    for (let i = 0, e = this.count; i < e; i++)
                        en.fromBufferAttribute(this, i),
                        en.applyMatrix3(t),
                        this.setXYZ(i, en.x, en.y, en.z);
                return this
            }
            applyMatrix4(t) {
                for (let i = 0, e = this.count; i < e; i++)
                    en.x = this.getX(i),
                    en.y = this.getY(i),
                    en.z = this.getZ(i),
                    en.applyMatrix4(t),
                    this.setXYZ(i, en.x, en.y, en.z);
                return this
            }
            applyNormalMatrix(t) {
                for (let i = 0, e = this.count; i < e; i++)
                    en.x = this.getX(i),
                    en.y = this.getY(i),
                    en.z = this.getZ(i),
                    en.applyNormalMatrix(t),
                    this.setXYZ(i, en.x, en.y, en.z);
                return this
            }
            transformDirection(t) {
                for (let i = 0, e = this.count; i < e; i++)
                    en.x = this.getX(i),
                    en.y = this.getY(i),
                    en.z = this.getZ(i),
                    en.transformDirection(t),
                    this.setXYZ(i, en.x, en.y, en.z);
                return this
            }
            set(t, e=0) {
                return this.array.set(t, e),
                this
            }
            getX(t) {
                return this.array[t * this.itemSize]
            }
            setX(t, e) {
                return this.array[t * this.itemSize] = e,
                this
            }
            getY(t) {
                return this.array[t * this.itemSize + 1]
            }
            setY(t, e) {
                return this.array[t * this.itemSize + 1] = e,
                this
            }
            getZ(t) {
                return this.array[t * this.itemSize + 2]
            }
            setZ(t, e) {
                return this.array[t * this.itemSize + 2] = e,
                this
            }
            getW(t) {
                return this.array[t * this.itemSize + 3]
            }
            setW(t, e) {
                return this.array[t * this.itemSize + 3] = e,
                this
            }
            setXY(t, e, n) {
                return t *= this.itemSize,
                this.array[t + 0] = e,
                this.array[t + 1] = n,
                this
            }
            setXYZ(t, e, n, r) {
                return t *= this.itemSize,
                this.array[t + 0] = e,
                this.array[t + 1] = n,
                this.array[t + 2] = r,
                this
            }
            setXYZW(t, e, n, r, o) {
                return t *= this.itemSize,
                this.array[t + 0] = e,
                this.array[t + 1] = n,
                this.array[t + 2] = r,
                this.array[t + 3] = o,
                this
            }
            onUpload(t) {
                return this.onUploadCallback = t,
                this
            }
            clone() {
                return new this.constructor(this.array,this.itemSize).copy(this)
            }
            toJSON() {
                const data = {
                    itemSize: this.itemSize,
                    type: this.array.constructor.name,
                    array: Array.prototype.slice.call(this.array),
                    normalized: this.normalized
                };
                return "" !== this.name && (data.name = this.name),
                this.usage !== et && (data.usage = this.usage),
                0 === this.updateRange.offset && -1 === this.updateRange.count || (data.updateRange = this.updateRange),
                data
            }
        }
        rn.prototype.isBufferAttribute = !0;
        class an extends rn {
            constructor(t, e, n) {
                super(new Uint16Array(t), e, n)
            }
        }
        class sn extends rn {
            constructor(t, e, n) {
                super(new Uint32Array(t), e, n)
            }
        }
        (class extends rn {
            constructor(t, e, n) {
                super(new Uint16Array(t), e, n)
            }
        }
        ).prototype.isFloat16BufferAttribute = !0;
        class on extends rn {
            constructor(t, e, n) {
                super(new Float32Array(t), e, n)
            }
        }
        let ln = 0;
        const cn = new le
          , hn = new Ne
          , un = new Pt
          , dn = new It
          , pn = new It
          , fn = new Pt;
        class mn extends at {
            constructor() {
                super(),
                Object.defineProperty(this, "id", {
                    value: ln++
                }),
                this.uuid = ht(),
                this.name = "",
                this.type = "BufferGeometry",
                this.index = null,
                this.attributes = {},
                this.morphAttributes = {},
                this.morphTargetsRelative = !1,
                this.groups = [],
                this.boundingBox = null,
                this.boundingSphere = null,
                this.drawRange = {
                    start: 0,
                    count: 1 / 0
                },
                this.userData = {}
            }
            getIndex() {
                return this.index
            }
            setIndex(t) {
                return Array.isArray(t) ? this.index = new (xt(t) > 65535 ? sn : an)(t,1) : this.index = t,
                this
            }
            getAttribute(t) {
                return this.attributes[t]
            }
            setAttribute(t, e) {
                return this.attributes[t] = e,
                this
            }
            deleteAttribute(t) {
                return delete this.attributes[t],
                this
            }
            hasAttribute(t) {
                return void 0 !== this.attributes[t]
            }
            addGroup(t, e, n=0) {
                this.groups.push({
                    start: t,
                    count: e,
                    materialIndex: n
                })
            }
            clearGroups() {
                this.groups = []
            }
            setDrawRange(t, e) {
                this.drawRange.start = t,
                this.drawRange.count = e
            }
            applyMatrix4(t) {
                const e = this.attributes.position;
                void 0 !== e && (e.applyMatrix4(t),
                e.needsUpdate = !0);
                const n = this.attributes.normal;
                if (void 0 !== n) {
                    const e = (new _t).getNormalMatrix(t);
                    n.applyNormalMatrix(e),
                    n.needsUpdate = !0
                }
                const r = this.attributes.tangent;
                return void 0 !== r && (r.transformDirection(t),
                r.needsUpdate = !0),
                null !== this.boundingBox && this.computeBoundingBox(),
                null !== this.boundingSphere && this.computeBoundingSphere(),
                this
            }
            applyQuaternion(q) {
                return cn.makeRotationFromQuaternion(q),
                this.applyMatrix4(cn),
                this
            }
            rotateX(t) {
                return cn.makeRotationX(t),
                this.applyMatrix4(cn),
                this
            }
            rotateY(t) {
                return cn.makeRotationY(t),
                this.applyMatrix4(cn),
                this
            }
            rotateZ(t) {
                return cn.makeRotationZ(t),
                this.applyMatrix4(cn),
                this
            }
            translate(t, e, n) {
                return cn.makeTranslation(t, e, n),
                this.applyMatrix4(cn),
                this
            }
            scale(t, e, n) {
                return cn.makeScale(t, e, n),
                this.applyMatrix4(cn),
                this
            }
            lookAt(t) {
                return hn.lookAt(t),
                hn.updateMatrix(),
                this.applyMatrix4(hn.matrix),
                this
            }
            center() {
                return this.computeBoundingBox(),
                this.boundingBox.getCenter(un).negate(),
                this.translate(un.x, un.y, un.z),
                this
            }
            setFromPoints(t) {
                const e = [];
                for (let i = 0, n = t.length; i < n; i++) {
                    const n = t[i];
                    e.push(n.x, n.y, n.z || 0)
                }
                return this.setAttribute("position", new on(e,3)),
                this
            }
            computeBoundingBox() {
                null === this.boundingBox && (this.boundingBox = new It);
                const t = this.attributes.position
                  , e = this.morphAttributes.position;
                if (t && t.isGLBufferAttribute)
                    return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this),
                    void this.boundingBox.set(new Pt(-1 / 0,-1 / 0,-1 / 0), new Pt(1 / 0,1 / 0,1 / 0));
                if (void 0 !== t) {
                    if (this.boundingBox.setFromBufferAttribute(t),
                    e)
                        for (let i = 0, t = e.length; i < t; i++) {
                            const t = e[i];
                            dn.setFromBufferAttribute(t),
                            this.morphTargetsRelative ? (fn.addVectors(this.boundingBox.min, dn.min),
                            this.boundingBox.expandByPoint(fn),
                            fn.addVectors(this.boundingBox.max, dn.max),
                            this.boundingBox.expandByPoint(fn)) : (this.boundingBox.expandByPoint(dn.min),
                            this.boundingBox.expandByPoint(dn.max))
                        }
                } else
                    this.boundingBox.makeEmpty();
                (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this)
            }
            computeBoundingSphere() {
                null === this.boundingSphere && (this.boundingSphere = new $t);
                const t = this.attributes.position
                  , e = this.morphAttributes.position;
                if (t && t.isGLBufferAttribute)
                    return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this),
                    void this.boundingSphere.set(new Pt, 1 / 0);
                if (t) {
                    const n = this.boundingSphere.center;
                    if (dn.setFromBufferAttribute(t),
                    e)
                        for (let i = 0, t = e.length; i < t; i++) {
                            const t = e[i];
                            pn.setFromBufferAttribute(t),
                            this.morphTargetsRelative ? (fn.addVectors(dn.min, pn.min),
                            dn.expandByPoint(fn),
                            fn.addVectors(dn.max, pn.max),
                            dn.expandByPoint(fn)) : (dn.expandByPoint(pn.min),
                            dn.expandByPoint(pn.max))
                        }
                    dn.getCenter(n);
                    let r = 0;
                    for (let i = 0, e = t.count; i < e; i++)
                        fn.fromBufferAttribute(t, i),
                        r = Math.max(r, n.distanceToSquared(fn));
                    if (e)
                        for (let i = 0, o = e.length; i < o; i++) {
                            const o = e[i]
                              , l = this.morphTargetsRelative;
                            for (let e = 0, c = o.count; e < c; e++)
                                fn.fromBufferAttribute(o, e),
                                l && (un.fromBufferAttribute(t, e),
                                fn.add(un)),
                                r = Math.max(r, n.distanceToSquared(fn))
                        }
                    this.boundingSphere.radius = Math.sqrt(r),
                    isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this)
                }
            }
            computeTangents() {
                const t = this.index
                  , e = this.attributes;
                if (null === t || void 0 === e.position || void 0 === e.normal || void 0 === e.uv)
                    return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
                const n = t.array
                  , r = e.position.array
                  , o = e.normal.array
                  , l = e.uv.array
                  , c = r.length / 3;
                void 0 === e.tangent && this.setAttribute("tangent", new rn(new Float32Array(4 * c),4));
                const h = e.tangent.array
                  , d = []
                  , f = [];
                for (let i = 0; i < c; i++)
                    d[i] = new Pt,
                    f[i] = new Pt;
                const m = new Pt
                  , v = new Pt
                  , _ = new Pt
                  , x = new vt
                  , y = new vt
                  , M = new vt
                  , w = new Pt
                  , S = new Pt;
                function T(a, b, t) {
                    m.fromArray(r, 3 * a),
                    v.fromArray(r, 3 * b),
                    _.fromArray(r, 3 * t),
                    x.fromArray(l, 2 * a),
                    y.fromArray(l, 2 * b),
                    M.fromArray(l, 2 * t),
                    v.sub(m),
                    _.sub(m),
                    y.sub(x),
                    M.sub(x);
                    const e = 1 / (y.x * M.y - M.x * y.y);
                    isFinite(e) && (w.copy(v).multiplyScalar(M.y).addScaledVector(_, -y.y).multiplyScalar(e),
                    S.copy(_).multiplyScalar(y.x).addScaledVector(v, -M.x).multiplyScalar(e),
                    d[a].add(w),
                    d[b].add(w),
                    d[t].add(w),
                    f[a].add(S),
                    f[b].add(S),
                    f[t].add(S))
                }
                let E = this.groups;
                0 === E.length && (E = [{
                    start: 0,
                    count: n.length
                }]);
                for (let i = 0, t = E.length; i < t; ++i) {
                    const t = E[i]
                      , e = t.start;
                    for (let r = e, o = e + t.count; r < o; r += 3)
                        T(n[r + 0], n[r + 1], n[r + 2])
                }
                const A = new Pt
                  , L = new Pt
                  , R = new Pt
                  , C = new Pt;
                function P(t) {
                    R.fromArray(o, 3 * t),
                    C.copy(R);
                    const e = d[t];
                    A.copy(e),
                    A.sub(R.multiplyScalar(R.dot(e))).normalize(),
                    L.crossVectors(C, e);
                    const n = L.dot(f[t]) < 0 ? -1 : 1;
                    h[4 * t] = A.x,
                    h[4 * t + 1] = A.y,
                    h[4 * t + 2] = A.z,
                    h[4 * t + 3] = n
                }
                for (let i = 0, t = E.length; i < t; ++i) {
                    const t = E[i]
                      , e = t.start;
                    for (let r = e, o = e + t.count; r < o; r += 3)
                        P(n[r + 0]),
                        P(n[r + 1]),
                        P(n[r + 2])
                }
            }
            computeVertexNormals() {
                const t = this.index
                  , e = this.getAttribute("position");
                if (void 0 !== e) {
                    let n = this.getAttribute("normal");
                    if (void 0 === n)
                        n = new rn(new Float32Array(3 * e.count),3),
                        this.setAttribute("normal", n);
                    else
                        for (let i = 0, t = n.count; i < t; i++)
                            n.setXYZ(i, 0, 0, 0);
                    const r = new Pt
                      , o = new Pt
                      , l = new Pt
                      , c = new Pt
                      , h = new Pt
                      , d = new Pt
                      , f = new Pt
                      , m = new Pt;
                    if (t)
                        for (let i = 0, v = t.count; i < v; i += 3) {
                            const v = t.getX(i + 0)
                              , _ = t.getX(i + 1)
                              , x = t.getX(i + 2);
                            r.fromBufferAttribute(e, v),
                            o.fromBufferAttribute(e, _),
                            l.fromBufferAttribute(e, x),
                            f.subVectors(l, o),
                            m.subVectors(r, o),
                            f.cross(m),
                            c.fromBufferAttribute(n, v),
                            h.fromBufferAttribute(n, _),
                            d.fromBufferAttribute(n, x),
                            c.add(f),
                            h.add(f),
                            d.add(f),
                            n.setXYZ(v, c.x, c.y, c.z),
                            n.setXYZ(_, h.x, h.y, h.z),
                            n.setXYZ(x, d.x, d.y, d.z)
                        }
                    else
                        for (let i = 0, t = e.count; i < t; i += 3)
                            r.fromBufferAttribute(e, i + 0),
                            o.fromBufferAttribute(e, i + 1),
                            l.fromBufferAttribute(e, i + 2),
                            f.subVectors(l, o),
                            m.subVectors(r, o),
                            f.cross(m),
                            n.setXYZ(i + 0, f.x, f.y, f.z),
                            n.setXYZ(i + 1, f.x, f.y, f.z),
                            n.setXYZ(i + 2, f.x, f.y, f.z);
                    this.normalizeNormals(),
                    n.needsUpdate = !0
                }
            }
            merge(t, e) {
                if (!t || !t.isBufferGeometry)
                    return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.", t);
                void 0 === e && (e = 0,
                console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));
                const n = this.attributes;
                for (const r in n) {
                    if (void 0 === t.attributes[r])
                        continue;
                    const o = n[r].array
                      , l = t.attributes[r]
                      , c = l.array
                      , h = l.itemSize * e
                      , d = Math.min(c.length, o.length - h);
                    for (let i = 0, t = h; i < d; i++,
                    t++)
                        o[t] = c[i]
                }
                return this
            }
            normalizeNormals() {
                const t = this.attributes.normal;
                for (let i = 0, e = t.count; i < e; i++)
                    fn.fromBufferAttribute(t, i),
                    fn.normalize(),
                    t.setXYZ(i, fn.x, fn.y, fn.z)
            }
            toNonIndexed() {
                function t(t, e) {
                    const n = t.array
                      , r = t.itemSize
                      , o = t.normalized
                      , l = new n.constructor(e.length * r);
                    let c = 0
                      , h = 0;
                    for (let i = 0, o = e.length; i < o; i++) {
                        c = t.isInterleavedBufferAttribute ? e[i] * t.data.stride + t.offset : e[i] * r;
                        for (let t = 0; t < r; t++)
                            l[h++] = n[c++]
                    }
                    return new rn(l,r,o)
                }
                if (null === this.index)
                    return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),
                    this;
                const e = new mn
                  , n = this.index.array
                  , r = this.attributes;
                for (const o in r) {
                    const l = t(r[o], n);
                    e.setAttribute(o, l)
                }
                const o = this.morphAttributes;
                for (const r in o) {
                    const l = []
                      , c = o[r];
                    for (let i = 0, e = c.length; i < e; i++) {
                        const e = t(c[i], n);
                        l.push(e)
                    }
                    e.morphAttributes[r] = l
                }
                e.morphTargetsRelative = this.morphTargetsRelative;
                const l = this.groups;
                for (let i = 0, t = l.length; i < t; i++) {
                    const t = l[i];
                    e.addGroup(t.start, t.count, t.materialIndex)
                }
                return e
            }
            toJSON() {
                const data = {
                    metadata: {
                        version: 4.5,
                        type: "BufferGeometry",
                        generator: "BufferGeometry.toJSON"
                    }
                };
                if (data.uuid = this.uuid,
                data.type = this.type,
                "" !== this.name && (data.name = this.name),
                Object.keys(this.userData).length > 0 && (data.userData = this.userData),
                void 0 !== this.parameters) {
                    const t = this.parameters;
                    for (const e in t)
                        void 0 !== t[e] && (data[e] = t[e]);
                    return data
                }
                data.data = {
                    attributes: {}
                };
                const t = this.index;
                null !== t && (data.data.index = {
                    type: t.array.constructor.name,
                    array: Array.prototype.slice.call(t.array)
                });
                const e = this.attributes;
                for (const t in e) {
                    const n = e[t];
                    data.data.attributes[t] = n.toJSON(data.data)
                }
                const n = {};
                let r = !1;
                for (const t in this.morphAttributes) {
                    const e = this.morphAttributes[t]
                      , o = [];
                    for (let i = 0, t = e.length; i < t; i++) {
                        const t = e[i];
                        o.push(t.toJSON(data.data))
                    }
                    o.length > 0 && (n[t] = o,
                    r = !0)
                }
                r && (data.data.morphAttributes = n,
                data.data.morphTargetsRelative = this.morphTargetsRelative);
                const o = this.groups;
                o.length > 0 && (data.data.groups = JSON.parse(JSON.stringify(o)));
                const l = this.boundingSphere;
                return null !== l && (data.data.boundingSphere = {
                    center: l.center.toArray(),
                    radius: l.radius
                }),
                data
            }
            clone() {
                return (new this.constructor).copy(this)
            }
            copy(source) {
                this.index = null,
                this.attributes = {},
                this.morphAttributes = {},
                this.groups = [],
                this.boundingBox = null,
                this.boundingSphere = null;
                const data = {};
                this.name = source.name;
                const t = source.index;
                null !== t && this.setIndex(t.clone(data));
                const e = source.attributes;
                for (const t in e) {
                    const n = e[t];
                    this.setAttribute(t, n.clone(data))
                }
                const n = source.morphAttributes;
                for (const t in n) {
                    const e = []
                      , r = n[t];
                    for (let i = 0, t = r.length; i < t; i++)
                        e.push(r[i].clone(data));
                    this.morphAttributes[t] = e
                }
                this.morphTargetsRelative = source.morphTargetsRelative;
                const r = source.groups;
                for (let i = 0, t = r.length; i < t; i++) {
                    const t = r[i];
                    this.addGroup(t.start, t.count, t.materialIndex)
                }
                const o = source.boundingBox;
                null !== o && (this.boundingBox = o.clone());
                const l = source.boundingSphere;
                return null !== l && (this.boundingSphere = l.clone()),
                this.drawRange.start = source.drawRange.start,
                this.drawRange.count = source.drawRange.count,
                this.userData = source.userData,
                void 0 !== source.parameters && (this.parameters = Object.assign({}, source.parameters)),
                this
            }
            dispose() {
                this.dispatchEvent({
                    type: "dispose"
                })
            }
        }
        mn.prototype.isBufferGeometry = !0;
        const gn = new le
          , vn = new oe
          , _n = new $t
          , xn = new Pt
          , yn = new Pt
          , Mn = new Pt
          , bn = new Pt
          , wn = new Pt
          , Sn = new Pt
          , Tn = new Pt
          , En = new Pt
          , An = new Pt
          , Ln = new vt
          , Rn = new vt
          , Cn = new vt
          , Pn = new Pt
          , Dn = new Pt;
        class Nn extends Ne {
            constructor(t=new mn, e=new tn) {
                super(),
                this.type = "Mesh",
                this.geometry = t,
                this.material = e,
                this.updateMorphTargets()
            }
            copy(source) {
                return super.copy(source),
                void 0 !== source.morphTargetInfluences && (this.morphTargetInfluences = source.morphTargetInfluences.slice()),
                void 0 !== source.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary)),
                this.material = source.material,
                this.geometry = source.geometry,
                this
            }
            updateMorphTargets() {
                const t = this.geometry;
                if (t.isBufferGeometry) {
                    const e = t.morphAttributes
                      , n = Object.keys(e);
                    if (n.length > 0) {
                        const t = e[n[0]];
                        if (void 0 !== t) {
                            this.morphTargetInfluences = [],
                            this.morphTargetDictionary = {};
                            for (let e = 0, n = t.length; e < n; e++) {
                                const n = t[e].name || String(e);
                                this.morphTargetInfluences.push(0),
                                this.morphTargetDictionary[n] = e
                            }
                        }
                    }
                } else {
                    const e = t.morphTargets;
                    void 0 !== e && e.length > 0 && console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")
                }
            }
            raycast(t, e) {
                const n = this.geometry
                  , r = this.material
                  , o = this.matrixWorld;
                if (void 0 === r)
                    return;
                if (null === n.boundingSphere && n.computeBoundingSphere(),
                _n.copy(n.boundingSphere),
                _n.applyMatrix4(o),
                !1 === t.ray.intersectsSphere(_n))
                    return;
                if (gn.copy(o).invert(),
                vn.copy(t.ray).applyMatrix4(gn),
                null !== n.boundingBox && !1 === vn.intersectsBox(n.boundingBox))
                    return;
                let l;
                if (n.isBufferGeometry) {
                    const o = n.index
                      , c = n.attributes.position
                      , h = n.morphAttributes.position
                      , d = n.morphTargetsRelative
                      , f = n.attributes.uv
                      , m = n.attributes.uv2
                      , v = n.groups
                      , _ = n.drawRange;
                    if (null !== o)
                        if (Array.isArray(r))
                            for (let i = 0, n = v.length; i < n; i++) {
                                const n = v[i]
                                  , x = r[n.materialIndex];
                                for (let r = Math.max(n.start, _.start), v = Math.min(o.count, Math.min(n.start + n.count, _.start + _.count)); r < v; r += 3) {
                                    const a = o.getX(r)
                                      , b = o.getX(r + 1)
                                      , v = o.getX(r + 2);
                                    l = In(this, x, t, vn, c, h, d, f, m, a, b, v),
                                    l && (l.faceIndex = Math.floor(r / 3),
                                    l.face.materialIndex = n.materialIndex,
                                    e.push(l))
                                }
                            }
                        else {
                            for (let i = Math.max(0, _.start), n = Math.min(o.count, _.start + _.count); i < n; i += 3) {
                                const a = o.getX(i)
                                  , b = o.getX(i + 1)
                                  , n = o.getX(i + 2);
                                l = In(this, r, t, vn, c, h, d, f, m, a, b, n),
                                l && (l.faceIndex = Math.floor(i / 3),
                                e.push(l))
                            }
                        }
                    else if (void 0 !== c)
                        if (Array.isArray(r))
                            for (let i = 0, n = v.length; i < n; i++) {
                                const n = v[i]
                                  , o = r[n.materialIndex];
                                for (let r = Math.max(n.start, _.start), v = Math.min(c.count, Math.min(n.start + n.count, _.start + _.count)); r < v; r += 3) {
                                    l = In(this, o, t, vn, c, h, d, f, m, r, r + 1, r + 2),
                                    l && (l.faceIndex = Math.floor(r / 3),
                                    l.face.materialIndex = n.materialIndex,
                                    e.push(l))
                                }
                            }
                        else {
                            for (let i = Math.max(0, _.start), n = Math.min(c.count, _.start + _.count); i < n; i += 3) {
                                l = In(this, r, t, vn, c, h, d, f, m, i, i + 1, i + 2),
                                l && (l.faceIndex = Math.floor(i / 3),
                                e.push(l))
                            }
                        }
                } else
                    n.isGeometry && console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")
            }
        }
        function In(object, t, e, n, r, o, l, c, h, a, b, d) {
            xn.fromBufferAttribute(r, a),
            yn.fromBufferAttribute(r, b),
            Mn.fromBufferAttribute(r, d);
            const f = object.morphTargetInfluences;
            if (o && f) {
                Tn.set(0, 0, 0),
                En.set(0, 0, 0),
                An.set(0, 0, 0);
                for (let i = 0, t = o.length; i < t; i++) {
                    const t = f[i]
                      , e = o[i];
                    0 !== t && (bn.fromBufferAttribute(e, a),
                    wn.fromBufferAttribute(e, b),
                    Sn.fromBufferAttribute(e, d),
                    l ? (Tn.addScaledVector(bn, t),
                    En.addScaledVector(wn, t),
                    An.addScaledVector(Sn, t)) : (Tn.addScaledVector(bn.sub(xn), t),
                    En.addScaledVector(wn.sub(yn), t),
                    An.addScaledVector(Sn.sub(Mn), t)))
                }
                xn.add(Tn),
                yn.add(En),
                Mn.add(An)
            }
            object.isSkinnedMesh && (object.boneTransform(a, xn),
            object.boneTransform(b, yn),
            object.boneTransform(d, Mn));
            const m = function(object, t, e, n, r, o, l, c) {
                let h;
                if (h = 1 === t.side ? n.intersectTriangle(l, o, r, !0, c) : n.intersectTriangle(r, o, l, 2 !== t.side, c),
                null === h)
                    return null;
                Dn.copy(c),
                Dn.applyMatrix4(object.matrixWorld);
                const d = e.ray.origin.distanceTo(Dn);
                return d < e.near || d > e.far ? null : {
                    distance: d,
                    point: Dn.clone(),
                    object: object
                }
            }(object, t, e, n, xn, yn, Mn, Pn);
            if (m) {
                c && (Ln.fromBufferAttribute(c, a),
                Rn.fromBufferAttribute(c, b),
                Cn.fromBufferAttribute(c, d),
                m.uv = We.getUV(Pn, xn, yn, Mn, Ln, Rn, Cn, new vt)),
                h && (Ln.fromBufferAttribute(h, a),
                Rn.fromBufferAttribute(h, b),
                Cn.fromBufferAttribute(h, d),
                m.uv2 = We.getUV(Pn, xn, yn, Mn, Ln, Rn, Cn, new vt));
                const t = {
                    a: a,
                    b: b,
                    c: d,
                    normal: new Pt,
                    materialIndex: 0
                };
                We.getNormal(xn, yn, Mn, t.normal),
                m.face = t
            }
            return m
        }
        Nn.prototype.isMesh = !0;
        class On extends mn {
            constructor(t=1, e=1, n=1, r=1, o=1, l=1) {
                super(),
                this.type = "BoxGeometry",
                this.parameters = {
                    width: t,
                    height: e,
                    depth: n,
                    widthSegments: r,
                    heightSegments: o,
                    depthSegments: l
                };
                const c = this;
                r = Math.floor(r),
                o = Math.floor(o),
                l = Math.floor(l);
                const h = []
                  , d = []
                  , f = []
                  , m = [];
                let v = 0
                  , _ = 0;
                function x(u, t, e, n, r, o, l, x, y, M, w) {
                    const S = o / y
                      , T = l / M
                      , E = o / 2
                      , A = l / 2
                      , L = x / 2
                      , R = y + 1
                      , C = M + 1;
                    let P = 0
                      , D = 0;
                    const N = new Pt;
                    for (let o = 0; o < C; o++) {
                        const l = o * T - A;
                        for (let c = 0; c < R; c++) {
                            const h = c * S - E;
                            N[u] = h * n,
                            N[t] = l * r,
                            N[e] = L,
                            d.push(N.x, N.y, N.z),
                            N[u] = 0,
                            N[t] = 0,
                            N[e] = x > 0 ? 1 : -1,
                            f.push(N.x, N.y, N.z),
                            m.push(c / y),
                            m.push(1 - o / M),
                            P += 1
                        }
                    }
                    for (let t = 0; t < M; t++)
                        for (let e = 0; e < y; e++) {
                            const a = v + e + R * t
                              , b = v + e + R * (t + 1)
                              , n = v + (e + 1) + R * (t + 1)
                              , r = v + (e + 1) + R * t;
                            h.push(a, b, r),
                            h.push(b, n, r),
                            D += 6
                        }
                    c.addGroup(_, D, w),
                    _ += D,
                    v += P
                }
                x("z", "y", "x", -1, -1, n, e, t, l, o, 0),
                x("z", "y", "x", 1, -1, n, e, -t, l, o, 1),
                x("x", "z", "y", 1, 1, t, n, e, r, l, 2),
                x("x", "z", "y", 1, -1, t, n, -e, r, l, 3),
                x("x", "y", "z", 1, -1, t, e, n, r, o, 4),
                x("x", "y", "z", -1, -1, t, e, -n, r, o, 5),
                this.setIndex(h),
                this.setAttribute("position", new on(d,3)),
                this.setAttribute("normal", new on(f,3)),
                this.setAttribute("uv", new on(m,2))
            }
            static fromJSON(data) {
                return new On(data.width,data.height,data.depth,data.widthSegments,data.heightSegments,data.depthSegments)
            }
        }
        function Fn(t) {
            const e = {};
            for (const u in t) {
                e[u] = {};
                for (const p in t[u]) {
                    const n = t[u][p];
                    n && (n.isColor || n.isMatrix3 || n.isMatrix4 || n.isVector2 || n.isVector3 || n.isVector4 || n.isTexture || n.isQuaternion) ? e[u][p] = n.clone() : Array.isArray(n) ? e[u][p] = n.slice() : e[u][p] = n
                }
            }
            return e
        }
        function Un(t) {
            const e = {};
            for (let u = 0; u < t.length; u++) {
                const n = Fn(t[u]);
                for (const p in n)
                    e[p] = n[p]
            }
            return e
        }
        const zn = {
            clone: Fn,
            merge: Un
        };
        class Bn extends Xe {
            constructor(t) {
                super(),
                this.type = "ShaderMaterial",
                this.defines = {},
                this.uniforms = {},
                this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",
                this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",
                this.linewidth = 1,
                this.wireframe = !1,
                this.wireframeLinewidth = 1,
                this.fog = !1,
                this.lights = !1,
                this.clipping = !1,
                this.extensions = {
                    derivatives: !1,
                    fragDepth: !1,
                    drawBuffers: !1,
                    shaderTextureLOD: !1
                },
                this.defaultAttributeValues = {
                    color: [1, 1, 1],
                    uv: [0, 0],
                    uv2: [0, 0]
                },
                this.index0AttributeName = void 0,
                this.uniformsNeedUpdate = !1,
                this.glslVersion = null,
                void 0 !== t && (void 0 !== t.attributes && console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),
                this.setValues(t))
            }
            copy(source) {
                return super.copy(source),
                this.fragmentShader = source.fragmentShader,
                this.vertexShader = source.vertexShader,
                this.uniforms = Fn(source.uniforms),
                this.defines = Object.assign({}, source.defines),
                this.wireframe = source.wireframe,
                this.wireframeLinewidth = source.wireframeLinewidth,
                this.lights = source.lights,
                this.clipping = source.clipping,
                this.extensions = Object.assign({}, source.extensions),
                this.glslVersion = source.glslVersion,
                this
            }
            toJSON(meta) {
                const data = super.toJSON(meta);
                data.glslVersion = this.glslVersion,
                data.uniforms = {};
                for (const t in this.uniforms) {
                    const e = this.uniforms[t].value;
                    e && e.isTexture ? data.uniforms[t] = {
                        type: "t",
                        value: e.toJSON(meta).uuid
                    } : e && e.isColor ? data.uniforms[t] = {
                        type: "c",
                        value: e.getHex()
                    } : e && e.isVector2 ? data.uniforms[t] = {
                        type: "v2",
                        value: e.toArray()
                    } : e && e.isVector3 ? data.uniforms[t] = {
                        type: "v3",
                        value: e.toArray()
                    } : e && e.isVector4 ? data.uniforms[t] = {
                        type: "v4",
                        value: e.toArray()
                    } : e && e.isMatrix3 ? data.uniforms[t] = {
                        type: "m3",
                        value: e.toArray()
                    } : e && e.isMatrix4 ? data.uniforms[t] = {
                        type: "m4",
                        value: e.toArray()
                    } : data.uniforms[t] = {
                        value: e
                    }
                }
                Object.keys(this.defines).length > 0 && (data.defines = this.defines),
                data.vertexShader = this.vertexShader,
                data.fragmentShader = this.fragmentShader;
                const t = {};
                for (const e in this.extensions)
                    !0 === this.extensions[e] && (t[e] = !0);
                return Object.keys(t).length > 0 && (data.extensions = t),
                data
            }
        }
        Bn.prototype.isShaderMaterial = !0;
        class Gn extends Ne {
            constructor() {
                super(),
                this.type = "Camera",
                this.matrixWorldInverse = new le,
                this.projectionMatrix = new le,
                this.projectionMatrixInverse = new le
            }
            copy(source, t) {
                return super.copy(source, t),
                this.matrixWorldInverse.copy(source.matrixWorldInverse),
                this.projectionMatrix.copy(source.projectionMatrix),
                this.projectionMatrixInverse.copy(source.projectionMatrixInverse),
                this
            }
            getWorldDirection(t) {
                this.updateWorldMatrix(!0, !1);
                const e = this.matrixWorld.elements;
                return t.set(-e[8], -e[9], -e[10]).normalize()
            }
            updateMatrixWorld(t) {
                super.updateMatrixWorld(t),
                this.matrixWorldInverse.copy(this.matrixWorld).invert()
            }
            updateWorldMatrix(t, e) {
                super.updateWorldMatrix(t, e),
                this.matrixWorldInverse.copy(this.matrixWorld).invert()
            }
            clone() {
                return (new this.constructor).copy(this)
            }
        }
        Gn.prototype.isCamera = !0;
        class Hn extends Gn {
            constructor(t=50, e=1, n=.1, r=2e3) {
                super(),
                this.type = "PerspectiveCamera",
                this.fov = t,
                this.zoom = 1,
                this.near = n,
                this.far = r,
                this.focus = 10,
                this.aspect = e,
                this.view = null,
                this.filmGauge = 35,
                this.filmOffset = 0,
                this.updateProjectionMatrix()
            }
            copy(source, t) {
                return super.copy(source, t),
                this.fov = source.fov,
                this.zoom = source.zoom,
                this.near = source.near,
                this.far = source.far,
                this.focus = source.focus,
                this.aspect = source.aspect,
                this.view = null === source.view ? null : Object.assign({}, source.view),
                this.filmGauge = source.filmGauge,
                this.filmOffset = source.filmOffset,
                this
            }
            setFocalLength(t) {
                const e = .5 * this.getFilmHeight() / t;
                this.fov = 2 * ot * Math.atan(e),
                this.updateProjectionMatrix()
            }
            getFocalLength() {
                const t = Math.tan(.5 * st * this.fov);
                return .5 * this.getFilmHeight() / t
            }
            getEffectiveFOV() {
                return 2 * ot * Math.atan(Math.tan(.5 * st * this.fov) / this.zoom)
            }
            getFilmWidth() {
                return this.filmGauge * Math.min(this.aspect, 1)
            }
            getFilmHeight() {
                return this.filmGauge / Math.max(this.aspect, 1)
            }
            setViewOffset(t, e, n, r, o, l) {
                this.aspect = t / e,
                null === this.view && (this.view = {
                    enabled: !0,
                    fullWidth: 1,
                    fullHeight: 1,
                    offsetX: 0,
                    offsetY: 0,
                    width: 1,
                    height: 1
                }),
                this.view.enabled = !0,
                this.view.fullWidth = t,
                this.view.fullHeight = e,
                this.view.offsetX = n,
                this.view.offsetY = r,
                this.view.width = o,
                this.view.height = l,
                this.updateProjectionMatrix()
            }
            clearViewOffset() {
                null !== this.view && (this.view.enabled = !1),
                this.updateProjectionMatrix()
            }
            updateProjectionMatrix() {
                const t = this.near;
                let e = t * Math.tan(.5 * st * this.fov) / this.zoom
                  , n = 2 * e
                  , r = this.aspect * n
                  , o = -.5 * r;
                const view = this.view;
                if (null !== this.view && this.view.enabled) {
                    const t = view.fullWidth
                      , l = view.fullHeight;
                    o += view.offsetX * r / t,
                    e -= view.offsetY * n / l,
                    r *= view.width / t,
                    n *= view.height / l
                }
                const l = this.filmOffset;
                0 !== l && (o += t * l / this.getFilmWidth()),
                this.projectionMatrix.makePerspective(o, o + r, e, e - n, t, this.far),
                this.projectionMatrixInverse.copy(this.projectionMatrix).invert()
            }
            toJSON(meta) {
                const data = super.toJSON(meta);
                return data.object.fov = this.fov,
                data.object.zoom = this.zoom,
                data.object.near = this.near,
                data.object.far = this.far,
                data.object.focus = this.focus,
                data.object.aspect = this.aspect,
                null !== this.view && (data.object.view = Object.assign({}, this.view)),
                data.object.filmGauge = this.filmGauge,
                data.object.filmOffset = this.filmOffset,
                data
            }
        }
        Hn.prototype.isPerspectiveCamera = !0;
        const kn = 90;
        class Vn extends Ne {
            constructor(t, e, n) {
                if (super(),
                this.type = "CubeCamera",
                !0 !== n.isWebGLCubeRenderTarget)
                    return void console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");
                this.renderTarget = n;
                const r = new Hn(kn,1,t,e);
                r.layers = this.layers,
                r.up.set(0, -1, 0),
                r.lookAt(new Pt(1,0,0)),
                this.add(r);
                const o = new Hn(kn,1,t,e);
                o.layers = this.layers,
                o.up.set(0, -1, 0),
                o.lookAt(new Pt(-1,0,0)),
                this.add(o);
                const l = new Hn(kn,1,t,e);
                l.layers = this.layers,
                l.up.set(0, 0, 1),
                l.lookAt(new Pt(0,1,0)),
                this.add(l);
                const c = new Hn(kn,1,t,e);
                c.layers = this.layers,
                c.up.set(0, 0, -1),
                c.lookAt(new Pt(0,-1,0)),
                this.add(c);
                const h = new Hn(kn,1,t,e);
                h.layers = this.layers,
                h.up.set(0, -1, 0),
                h.lookAt(new Pt(0,0,1)),
                this.add(h);
                const d = new Hn(kn,1,t,e);
                d.layers = this.layers,
                d.up.set(0, -1, 0),
                d.lookAt(new Pt(0,0,-1)),
                this.add(d)
            }
            update(t, e) {
                null === this.parent && this.updateMatrixWorld();
                const n = this.renderTarget
                  , [r,o,l,c,h,d] = this.children
                  , f = t.xr.enabled
                  , m = t.getRenderTarget();
                t.xr.enabled = !1;
                const v = n.texture.generateMipmaps;
                n.texture.generateMipmaps = !1,
                t.setRenderTarget(n, 0),
                t.render(e, r),
                t.setRenderTarget(n, 1),
                t.render(e, o),
                t.setRenderTarget(n, 2),
                t.render(e, l),
                t.setRenderTarget(n, 3),
                t.render(e, c),
                t.setRenderTarget(n, 4),
                t.render(e, h),
                n.texture.generateMipmaps = v,
                t.setRenderTarget(n, 5),
                t.render(e, d),
                t.setRenderTarget(m),
                t.xr.enabled = f
            }
        }
        class Wn extends Tt {
            constructor(t, e, n, r, o, l, c, h, d, f) {
                super(t = void 0 !== t ? t : [], e = void 0 !== e ? e : v, n, r, o, l, c, h, d, f),
                this.flipY = !1
            }
            get images() {
                return this.image
            }
            set images(t) {
                this.image = t
            }
        }
        Wn.prototype.isCubeTexture = !0;
        class jn extends Lt {
            constructor(t, e, n) {
                Number.isInteger(e) && (console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),
                e = n),
                super(t, t, e),
                e = e || {},
                this.texture = new Wn(void 0,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),
                this.texture.isRenderTargetTexture = !0,
                this.texture.generateMipmaps = void 0 !== e.generateMipmaps && e.generateMipmaps,
                this.texture.minFilter = void 0 !== e.minFilter ? e.minFilter : C,
                this.texture._needsFlipEnvMap = !1
            }
            fromEquirectangularTexture(t, e) {
                this.texture.type = e.type,
                this.texture.format = B,
                this.texture.encoding = e.encoding,
                this.texture.generateMipmaps = e.generateMipmaps,
                this.texture.minFilter = e.minFilter,
                this.texture.magFilter = e.magFilter;
                const n = {
                    uniforms: {
                        tEquirect: {
                            value: null
                        }
                    },
                    vertexShader: "\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",
                    fragmentShader: "\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"
                }
                  , r = new On(5,5,5)
                  , o = new Bn({
                    name: "CubemapFromEquirect",
                    uniforms: Fn(n.uniforms),
                    vertexShader: n.vertexShader,
                    fragmentShader: n.fragmentShader,
                    side: 1,
                    blending: 0
                });
                o.uniforms.tEquirect.value = e;
                const l = new Nn(r,o)
                  , c = e.minFilter;
                e.minFilter === P && (e.minFilter = C);
                return new Vn(1,10,this).update(t, l),
                e.minFilter = c,
                l.geometry.dispose(),
                l.material.dispose(),
                this
            }
            clear(t, e, n, r) {
                const o = t.getRenderTarget();
                for (let i = 0; i < 6; i++)
                    t.setRenderTarget(this, i),
                    t.clear(e, n, r);
                t.setRenderTarget(o)
            }
        }
        jn.prototype.isWebGLCubeRenderTarget = !0;
        const Xn = new Pt
          , qn = new Pt
          , Yn = new _t;
        class Zn {
            constructor(t=new Pt(1,0,0), e=0) {
                this.normal = t,
                this.constant = e
            }
            set(t, e) {
                return this.normal.copy(t),
                this.constant = e,
                this
            }
            setComponents(t, e, n, r) {
                return this.normal.set(t, e, n),
                this.constant = r,
                this
            }
            setFromNormalAndCoplanarPoint(t, e) {
                return this.normal.copy(t),
                this.constant = -e.dot(this.normal),
                this
            }
            setFromCoplanarPoints(a, b, t) {
                const e = Xn.subVectors(t, b).cross(qn.subVectors(a, b)).normalize();
                return this.setFromNormalAndCoplanarPoint(e, a),
                this
            }
            copy(t) {
                return this.normal.copy(t.normal),
                this.constant = t.constant,
                this
            }
            normalize() {
                const t = 1 / this.normal.length();
                return this.normal.multiplyScalar(t),
                this.constant *= t,
                this
            }
            negate() {
                return this.constant *= -1,
                this.normal.negate(),
                this
            }
            distanceToPoint(t) {
                return this.normal.dot(t) + this.constant
            }
            distanceToSphere(t) {
                return this.distanceToPoint(t.center) - t.radius
            }
            projectPoint(t, e) {
                return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)
            }
            intersectLine(line, t) {
                const e = line.delta(Xn)
                  , n = this.normal.dot(e);
                if (0 === n)
                    return 0 === this.distanceToPoint(line.start) ? t.copy(line.start) : null;
                const r = -(line.start.dot(this.normal) + this.constant) / n;
                return r < 0 || r > 1 ? null : t.copy(e).multiplyScalar(r).add(line.start)
            }
            intersectsLine(line) {
                const t = this.distanceToPoint(line.start)
                  , e = this.distanceToPoint(line.end);
                return t < 0 && e > 0 || e < 0 && t > 0
            }
            intersectsBox(t) {
                return t.intersectsPlane(this)
            }
            intersectsSphere(t) {
                return t.intersectsPlane(this)
            }
            coplanarPoint(t) {
                return t.copy(this.normal).multiplyScalar(-this.constant)
            }
            applyMatrix4(t, e) {
                const n = e || Yn.getNormalMatrix(t)
                  , r = this.coplanarPoint(Xn).applyMatrix4(t)
                  , o = this.normal.applyMatrix3(n).normalize();
                return this.constant = -r.dot(o),
                this
            }
            translate(t) {
                return this.constant -= t.dot(this.normal),
                this
            }
            equals(t) {
                return t.normal.equals(this.normal) && t.constant === this.constant
            }
            clone() {
                return (new this.constructor).copy(this)
            }
        }
        Zn.prototype.isPlane = !0;
        const Jn = new $t
          , Kn = new Pt;
        class Qn {
            constructor(t=new Zn, e=new Zn, n=new Zn, r=new Zn, o=new Zn, l=new Zn) {
                this.planes = [t, e, n, r, o, l]
            }
            set(t, e, n, r, o, l) {
                const c = this.planes;
                return c[0].copy(t),
                c[1].copy(e),
                c[2].copy(n),
                c[3].copy(r),
                c[4].copy(o),
                c[5].copy(l),
                this
            }
            copy(t) {
                const e = this.planes;
                for (let i = 0; i < 6; i++)
                    e[i].copy(t.planes[i]);
                return this
            }
            setFromProjectionMatrix(t) {
                const e = this.planes
                  , n = t.elements
                  , r = n[0]
                  , o = n[1]
                  , l = n[2]
                  , c = n[3]
                  , h = n[4]
                  , d = n[5]
                  , f = n[6]
                  , m = n[7]
                  , v = n[8]
                  , _ = n[9]
                  , x = n[10]
                  , y = n[11]
                  , M = n[12]
                  , w = n[13]
                  , S = n[14]
                  , T = n[15];
                return e[0].setComponents(c - r, m - h, y - v, T - M).normalize(),
                e[1].setComponents(c + r, m + h, y + v, T + M).normalize(),
                e[2].setComponents(c + o, m + d, y + _, T + w).normalize(),
                e[3].setComponents(c - o, m - d, y - _, T - w).normalize(),
                e[4].setComponents(c - l, m - f, y - x, T - S).normalize(),
                e[5].setComponents(c + l, m + f, y + x, T + S).normalize(),
                this
            }
            intersectsObject(object) {
                const t = object.geometry;
                return null === t.boundingSphere && t.computeBoundingSphere(),
                Jn.copy(t.boundingSphere).applyMatrix4(object.matrixWorld),
                this.intersectsSphere(Jn)
            }
            intersectsSprite(t) {
                return Jn.center.set(0, 0, 0),
                Jn.radius = .7071067811865476,
                Jn.applyMatrix4(t.matrixWorld),
                this.intersectsSphere(Jn)
            }
            intersectsSphere(t) {
                const e = this.planes
                  , n = t.center
                  , r = -t.radius;
                for (let i = 0; i < 6; i++) {
                    if (e[i].distanceToPoint(n) < r)
                        return !1
                }
                return !0
            }
            intersectsBox(t) {
                const e = this.planes;
                for (let i = 0; i < 6; i++) {
                    const n = e[i];
                    if (Kn.x = n.normal.x > 0 ? t.max.x : t.min.x,
                    Kn.y = n.normal.y > 0 ? t.max.y : t.min.y,
                    Kn.z = n.normal.z > 0 ? t.max.z : t.min.z,
                    n.distanceToPoint(Kn) < 0)
                        return !1
                }
                return !0
            }
            containsPoint(t) {
                const e = this.planes;
                for (let i = 0; i < 6; i++)
                    if (e[i].distanceToPoint(t) < 0)
                        return !1;
                return !0
            }
            clone() {
                return (new this.constructor).copy(this)
            }
        }
        function $n() {
            let t = null
              , e = !1
              , n = null
              , r = null;
            function o(time, e) {
                n(time, e),
                r = t.requestAnimationFrame(o)
            }
            return {
                start: function() {
                    !0 !== e && null !== n && (r = t.requestAnimationFrame(o),
                    e = !0)
                },
                stop: function() {
                    t.cancelAnimationFrame(r),
                    e = !1
                },
                setAnimationLoop: function(t) {
                    n = t
                },
                setContext: function(e) {
                    t = e
                }
            }
        }
        function ti(t, e) {
            const n = e.isWebGL2
              , r = new WeakMap;
            return {
                get: function(t) {
                    return t.isInterleavedBufferAttribute && (t = t.data),
                    r.get(t)
                },
                remove: function(e) {
                    e.isInterleavedBufferAttribute && (e = e.data);
                    const data = r.get(e);
                    data && (t.deleteBuffer(data.buffer),
                    r.delete(e))
                },
                update: function(e, o) {
                    if (e.isGLBufferAttribute) {
                        const t = r.get(e);
                        return void ((!t || t.version < e.version) && r.set(e, {
                            buffer: e.buffer,
                            type: e.type,
                            bytesPerElement: e.elementSize,
                            version: e.version
                        }))
                    }
                    e.isInterleavedBufferAttribute && (e = e.data);
                    const data = r.get(e);
                    void 0 === data ? r.set(e, function(e, r) {
                        const o = e.array
                          , l = e.usage
                          , c = t.createBuffer();
                        t.bindBuffer(r, c),
                        t.bufferData(r, o, l),
                        e.onUploadCallback();
                        let h = 5126;
                        return o instanceof Float32Array ? h = 5126 : o instanceof Float64Array ? console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.") : o instanceof Uint16Array ? e.isFloat16BufferAttribute ? n ? h = 5131 : console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.") : h = 5123 : o instanceof Int16Array ? h = 5122 : o instanceof Uint32Array ? h = 5125 : o instanceof Int32Array ? h = 5124 : o instanceof Int8Array ? h = 5120 : (o instanceof Uint8Array || o instanceof Uint8ClampedArray) && (h = 5121),
                        {
                            buffer: c,
                            type: h,
                            bytesPerElement: o.BYTES_PER_ELEMENT,
                            version: e.version
                        }
                    }(e, o)) : data.version < e.version && (!function(e, r, o) {
                        const l = r.array
                          , c = r.updateRange;
                        t.bindBuffer(o, e),
                        -1 === c.count ? t.bufferSubData(o, 0, l) : (n ? t.bufferSubData(o, c.offset * l.BYTES_PER_ELEMENT, l, c.offset, c.count) : t.bufferSubData(o, c.offset * l.BYTES_PER_ELEMENT, l.subarray(c.offset, c.offset + c.count)),
                        c.count = -1)
                    }(data.buffer, e, o),
                    data.version = e.version)
                }
            }
        }
        class ei extends mn {
            constructor(t=1, e=1, n=1, r=1) {
                super(),
                this.type = "PlaneGeometry",
                this.parameters = {
                    width: t,
                    height: e,
                    widthSegments: n,
                    heightSegments: r
                };
                const o = t / 2
                  , l = e / 2
                  , c = Math.floor(n)
                  , h = Math.floor(r)
                  , d = c + 1
                  , f = h + 1
                  , m = t / c
                  , v = e / h
                  , _ = []
                  , x = []
                  , y = []
                  , M = [];
                for (let t = 0; t < f; t++) {
                    const e = t * v - l;
                    for (let n = 0; n < d; n++) {
                        const r = n * m - o;
                        x.push(r, -e, 0),
                        y.push(0, 0, 1),
                        M.push(n / c),
                        M.push(1 - t / h)
                    }
                }
                for (let t = 0; t < h; t++)
                    for (let e = 0; e < c; e++) {
                        const a = e + d * t
                          , b = e + d * (t + 1)
                          , n = e + 1 + d * (t + 1)
                          , r = e + 1 + d * t;
                        _.push(a, b, r),
                        _.push(b, n, r)
                    }
                this.setIndex(_),
                this.setAttribute("position", new on(x,3)),
                this.setAttribute("normal", new on(y,3)),
                this.setAttribute("uv", new on(M,2))
            }
            static fromJSON(data) {
                return new ei(data.width,data.height,data.widthSegments,data.heightSegments)
            }
        }
        const ni = {
            alphamap_fragment: "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",
            alphamap_pars_fragment: "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
            alphatest_fragment: "#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif",
            alphatest_pars_fragment: "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",
            aomap_fragment: "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",
            aomap_pars_fragment: "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",
            begin_vertex: "vec3 transformed = vec3( position );",
            beginnormal_vertex: "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",
            bsdfs: "vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif",
            bumpmap_pars_fragment: "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",
            clipping_planes_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",
            clipping_planes_pars_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",
            clipping_planes_pars_vertex: "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",
            clipping_planes_vertex: "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",
            color_fragment: "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",
            color_pars_fragment: "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",
            color_pars_vertex: "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",
            color_vertex: "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",
            common: "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",
            cube_uv_reflection_fragment: "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tfloat texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );\n\t\tvec2 f = fract( uv );\n\t\tuv += 0.5 - f;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tif ( mipInt < cubeUV_maxMipLevel ) {\n\t\t\tuv.y += 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y += filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *= texelSize;\n\t\tvec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x += texelSize;\n\t\tvec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.y += texelSize;\n\t\tvec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x -= texelSize;\n\t\tvec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tvec3 tm = mix( tl, tr, f.x );\n\t\tvec3 bm = mix( bl, br, f.x );\n\t\treturn mix( tm, bm, f.y );\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",
            defaultnormal_vertex: "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",
            displacementmap_pars_vertex: "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",
            displacementmap_vertex: "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",
            emissivemap_fragment: "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",
            emissivemap_pars_fragment: "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",
            encodings_fragment: "gl_FragColor = linearToOutputTexel( gl_FragColor );",
            encodings_pars_fragment: "\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat M = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.r, max( value.g, value.b ) );\n\tfloat D = max( maxRange / maxRGB, 1.0 );\n\tD = clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp = cLogLuvM * value.rgb;\n\tXp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract( Le );\n\tvResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}",
            envmap_fragment: "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t\tenvColor = envMapTexelToLinear( envColor );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",
            envmap_common_pars_fragment: "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",
            envmap_pars_fragment: "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",
            envmap_pars_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",
            envmap_physical_pars_fragment: "#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec;\n\t\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\t\treflectVec = reflect( - viewDir, normal );\n\t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\t#else\n\t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );\n\t\t\t#endif\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif",
            envmap_vertex: "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",
            fog_vertex: "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",
            fog_pars_vertex: "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",
            fog_fragment: "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",
            fog_pars_fragment: "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",
            gradientmap_pars_fragment: "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",
            lightmap_fragment: "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tlightMapIrradiance *= PI;\n\t#endif\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",
            lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",
            lights_lambert_vertex: "vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",
            lights_pars_begin: "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",
            lights_toon_fragment: "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",
            lights_toon_pars_fragment: "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",
            lights_phong_fragment: "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",
            lights_phong_pars_fragment: "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",
            lights_physical_fragment: "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= specularColorMapTexelToLinear( texture2D( specularColorMap, vUv ) ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= sheenColorMapTexelToLinear( texture2D( sheenColorMap, vUv ) ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif",
            lights_physical_pars_fragment: "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",
            lights_fragment_begin: "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",
            lights_fragment_maps: "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",
            lights_fragment_end: "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",
            logdepthbuf_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",
            logdepthbuf_pars_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",
            logdepthbuf_pars_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",
            logdepthbuf_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",
            map_fragment: "#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif",
            map_pars_fragment: "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",
            map_particle_fragment: "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, uv );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",
            map_particle_pars_fragment: "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",
            metalnessmap_fragment: "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",
            metalnessmap_pars_fragment: "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",
            morphnormal_vertex: "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",
            morphtarget_pars_vertex: "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform vec2 morphTargetsTextureSize;\n\t\tvec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {\n\t\t\tfloat texelIndex = float( vertexIndex * stride + offset );\n\t\t\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\n\t\t\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n\t\t\treturn texture( morphTargetsTexture, morphUV ).xyz;\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",
            morphtarget_vertex: "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\t#ifndef USE_MORPHNORMALS\n\t\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];\n\t\t\t#else\n\t\t\t\tif ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];\n\t\t\t#endif\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",
            normal_fragment_begin: "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",
            normal_fragment_maps: "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",
            normal_pars_fragment: "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",
            normal_pars_vertex: "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",
            normal_vertex: "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",
            normalmap_pars_fragment: "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",
            clearcoat_normal_fragment_begin: "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",
            clearcoat_normal_fragment_maps: "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",
            clearcoat_pars_fragment: "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",
            output_fragment: "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",
            packing: "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",
            premultiplied_alpha_fragment: "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",
            project_vertex: "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",
            dithering_fragment: "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",
            dithering_pars_fragment: "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",
            roughnessmap_fragment: "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",
            roughnessmap_pars_fragment: "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",
            shadowmap_pars_fragment: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",
            shadowmap_pars_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",
            shadowmap_vertex: "#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",
            shadowmask_pars_fragment: "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",
            skinbase_vertex: "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",
            skinning_pars_vertex: "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",
            skinning_vertex: "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",
            skinnormal_vertex: "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",
            specularmap_fragment: "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",
            specularmap_pars_fragment: "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",
            tonemapping_fragment: "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",
            tonemapping_pars_fragment: "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",
            transmission_fragment: "#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif",
            transmission_pars_fragment: "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( float roughness, float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,\n\t\tvec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,\n\t\tvec3 attenuationColor, float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif",
            uv_pars_fragment: "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",
            uv_pars_vertex: "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",
            uv_vertex: "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",
            uv2_pars_fragment: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",
            uv2_pars_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",
            uv2_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",
            worldpos_vertex: "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",
            background_vert: "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",
            background_frag: "uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
            cube_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",
            cube_frag: "#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
            depth_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",
            depth_frag: "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",
            distanceRGBA_vert: "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",
            distanceRGBA_frag: "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",
            equirect_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",
            equirect_frag: "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tvec4 texColor = texture2D( tEquirect, sampleUV );\n\tgl_FragColor = mapTexelToLinear( texColor );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",
            linedashed_vert: "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
            linedashed_frag: "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
            meshbasic_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",
            meshbasic_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
            meshlambert_vert: "#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
            meshlambert_frag: "uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
            meshmatcap_vert: "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",
            meshmatcap_frag: "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t\tmatcapColor = matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor = vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
            meshnormal_vert: "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",
            meshnormal_frag: "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}",
            meshphong_vert: "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
            meshphong_frag: "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
            meshphysical_vert: "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",
            meshphysical_frag: "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - clearcoat * Fcc ) + clearcoatSpecular * clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
            meshtoon_vert: "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
            meshtoon_frag: "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",
            points_vert: "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",
            points_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",
            shadow_vert: "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",
            shadow_frag: "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",
            sprite_vert: "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",
            sprite_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}"
        }
          , ii = {
            common: {
                diffuse: {
                    value: new $e(16777215)
                },
                opacity: {
                    value: 1
                },
                map: {
                    value: null
                },
                uvTransform: {
                    value: new _t
                },
                uv2Transform: {
                    value: new _t
                },
                alphaMap: {
                    value: null
                },
                alphaTest: {
                    value: 0
                }
            },
            specularmap: {
                specularMap: {
                    value: null
                }
            },
            envmap: {
                envMap: {
                    value: null
                },
                flipEnvMap: {
                    value: -1
                },
                reflectivity: {
                    value: 1
                },
                ior: {
                    value: 1.5
                },
                refractionRatio: {
                    value: .98
                },
                maxMipLevel: {
                    value: 0
                }
            },
            aomap: {
                aoMap: {
                    value: null
                },
                aoMapIntensity: {
                    value: 1
                }
            },
            lightmap: {
                lightMap: {
                    value: null
                },
                lightMapIntensity: {
                    value: 1
                }
            },
            emissivemap: {
                emissiveMap: {
                    value: null
                }
            },
            bumpmap: {
                bumpMap: {
                    value: null
                },
                bumpScale: {
                    value: 1
                }
            },
            normalmap: {
                normalMap: {
                    value: null
                },
                normalScale: {
                    value: new vt(1,1)
                }
            },
            displacementmap: {
                displacementMap: {
                    value: null
                },
                displacementScale: {
                    value: 1
                },
                displacementBias: {
                    value: 0
                }
            },
            roughnessmap: {
                roughnessMap: {
                    value: null
                }
            },
            metalnessmap: {
                metalnessMap: {
                    value: null
                }
            },
            gradientmap: {
                gradientMap: {
                    value: null
                }
            },
            fog: {
                fogDensity: {
                    value: 25e-5
                },
                fogNear: {
                    value: 1
                },
                fogFar: {
                    value: 2e3
                },
                fogColor: {
                    value: new $e(16777215)
                }
            },
            lights: {
                ambientLightColor: {
                    value: []
                },
                lightProbe: {
                    value: []
                },
                directionalLights: {
                    value: [],
                    properties: {
                        direction: {},
                        color: {}
                    }
                },
                directionalLightShadows: {
                    value: [],
                    properties: {
                        shadowBias: {},
                        shadowNormalBias: {},
                        shadowRadius: {},
                        shadowMapSize: {}
                    }
                },
                directionalShadowMap: {
                    value: []
                },
                directionalShadowMatrix: {
                    value: []
                },
                spotLights: {
                    value: [],
                    properties: {
                        color: {},
                        position: {},
                        direction: {},
                        distance: {},
                        coneCos: {},
                        penumbraCos: {},
                        decay: {}
                    }
                },
                spotLightShadows: {
                    value: [],
                    properties: {
                        shadowBias: {},
                        shadowNormalBias: {},
                        shadowRadius: {},
                        shadowMapSize: {}
                    }
                },
                spotShadowMap: {
                    value: []
                },
                spotShadowMatrix: {
                    value: []
                },
                pointLights: {
                    value: [],
                    properties: {
                        color: {},
                        position: {},
                        decay: {},
                        distance: {}
                    }
                },
                pointLightShadows: {
                    value: [],
                    properties: {
                        shadowBias: {},
                        shadowNormalBias: {},
                        shadowRadius: {},
                        shadowMapSize: {},
                        shadowCameraNear: {},
                        shadowCameraFar: {}
                    }
                },
                pointShadowMap: {
                    value: []
                },
                pointShadowMatrix: {
                    value: []
                },
                hemisphereLights: {
                    value: [],
                    properties: {
                        direction: {},
                        skyColor: {},
                        groundColor: {}
                    }
                },
                rectAreaLights: {
                    value: [],
                    properties: {
                        color: {},
                        position: {},
                        width: {},
                        height: {}
                    }
                },
                ltc_1: {
                    value: null
                },
                ltc_2: {
                    value: null
                }
            },
            points: {
                diffuse: {
                    value: new $e(16777215)
                },
                opacity: {
                    value: 1
                },
                size: {
                    value: 1
                },
                scale: {
                    value: 1
                },
                map: {
                    value: null
                },
                alphaMap: {
                    value: null
                },
                alphaTest: {
                    value: 0
                },
                uvTransform: {
                    value: new _t
                }
            },
            sprite: {
                diffuse: {
                    value: new $e(16777215)
                },
                opacity: {
                    value: 1
                },
                center: {
                    value: new vt(.5,.5)
                },
                rotation: {
                    value: 0
                },
                map: {
                    value: null
                },
                alphaMap: {
                    value: null
                },
                alphaTest: {
                    value: 0
                },
                uvTransform: {
                    value: new _t
                }
            }
        }
          , ri = {
            basic: {
                uniforms: Un([ii.common, ii.specularmap, ii.envmap, ii.aomap, ii.lightmap, ii.fog]),
                vertexShader: ni.meshbasic_vert,
                fragmentShader: ni.meshbasic_frag
            },
            lambert: {
                uniforms: Un([ii.common, ii.specularmap, ii.envmap, ii.aomap, ii.lightmap, ii.emissivemap, ii.fog, ii.lights, {
                    emissive: {
                        value: new $e(0)
                    }
                }]),
                vertexShader: ni.meshlambert_vert,
                fragmentShader: ni.meshlambert_frag
            },
            phong: {
                uniforms: Un([ii.common, ii.specularmap, ii.envmap, ii.aomap, ii.lightmap, ii.emissivemap, ii.bumpmap, ii.normalmap, ii.displacementmap, ii.fog, ii.lights, {
                    emissive: {
                        value: new $e(0)
                    },
                    specular: {
                        value: new $e(1118481)
                    },
                    shininess: {
                        value: 30
                    }
                }]),
                vertexShader: ni.meshphong_vert,
                fragmentShader: ni.meshphong_frag
            },
            standard: {
                uniforms: Un([ii.common, ii.envmap, ii.aomap, ii.lightmap, ii.emissivemap, ii.bumpmap, ii.normalmap, ii.displacementmap, ii.roughnessmap, ii.metalnessmap, ii.fog, ii.lights, {
                    emissive: {
                        value: new $e(0)
                    },
                    roughness: {
                        value: 1
                    },
                    metalness: {
                        value: 0
                    },
                    envMapIntensity: {
                        value: 1
                    }
                }]),
                vertexShader: ni.meshphysical_vert,
                fragmentShader: ni.meshphysical_frag
            },
            toon: {
                uniforms: Un([ii.common, ii.aomap, ii.lightmap, ii.emissivemap, ii.bumpmap, ii.normalmap, ii.displacementmap, ii.gradientmap, ii.fog, ii.lights, {
                    emissive: {
                        value: new $e(0)
                    }
                }]),
                vertexShader: ni.meshtoon_vert,
                fragmentShader: ni.meshtoon_frag
            },
            matcap: {
                uniforms: Un([ii.common, ii.bumpmap, ii.normalmap, ii.displacementmap, ii.fog, {
                    matcap: {
                        value: null
                    }
                }]),
                vertexShader: ni.meshmatcap_vert,
                fragmentShader: ni.meshmatcap_frag
            },
            points: {
                uniforms: Un([ii.points, ii.fog]),
                vertexShader: ni.points_vert,
                fragmentShader: ni.points_frag
            },
            dashed: {
                uniforms: Un([ii.common, ii.fog, {
                    scale: {
                        value: 1
                    },
                    dashSize: {
                        value: 1
                    },
                    totalSize: {
                        value: 2
                    }
                }]),
                vertexShader: ni.linedashed_vert,
                fragmentShader: ni.linedashed_frag
            },
            depth: {
                uniforms: Un([ii.common, ii.displacementmap]),
                vertexShader: ni.depth_vert,
                fragmentShader: ni.depth_frag
            },
            normal: {
                uniforms: Un([ii.common, ii.bumpmap, ii.normalmap, ii.displacementmap, {
                    opacity: {
                        value: 1
                    }
                }]),
                vertexShader: ni.meshnormal_vert,
                fragmentShader: ni.meshnormal_frag
            },
            sprite: {
                uniforms: Un([ii.sprite, ii.fog]),
                vertexShader: ni.sprite_vert,
                fragmentShader: ni.sprite_frag
            },
            background: {
                uniforms: {
                    uvTransform: {
                        value: new _t
                    },
                    t2D: {
                        value: null
                    }
                },
                vertexShader: ni.background_vert,
                fragmentShader: ni.background_frag
            },
            cube: {
                uniforms: Un([ii.envmap, {
                    opacity: {
                        value: 1
                    }
                }]),
                vertexShader: ni.cube_vert,
                fragmentShader: ni.cube_frag
            },
            equirect: {
                uniforms: {
                    tEquirect: {
                        value: null
                    }
                },
                vertexShader: ni.equirect_vert,
                fragmentShader: ni.equirect_frag
            },
            distanceRGBA: {
                uniforms: Un([ii.common, ii.displacementmap, {
                    referencePosition: {
                        value: new Pt
                    },
                    nearDistance: {
                        value: 1
                    },
                    farDistance: {
                        value: 1e3
                    }
                }]),
                vertexShader: ni.distanceRGBA_vert,
                fragmentShader: ni.distanceRGBA_frag
            },
            shadow: {
                uniforms: Un([ii.lights, ii.fog, {
                    color: {
                        value: new $e(0)
                    },
                    opacity: {
                        value: 1
                    }
                }]),
                vertexShader: ni.shadow_vert,
                fragmentShader: ni.shadow_frag
            }
        };
        function ai(t, e, n, r, o) {
            const l = new $e(0);
            let c, h, d = 0, f = null, m = 0, v = null;
            function _(t, e) {
                n.buffers.color.setClear(t.r, t.g, t.b, e, o)
            }
            return {
                getClearColor: function() {
                    return l
                },
                setClearColor: function(t, e=1) {
                    l.set(t),
                    d = e,
                    _(l, d)
                },
                getClearAlpha: function() {
                    return d
                },
                setClearAlpha: function(t) {
                    d = t,
                    _(l, d)
                },
                render: function(n, o) {
                    let x = !1
                      , y = !0 === o.isScene ? o.background : null;
                    y && y.isTexture && (y = e.get(y));
                    const w = t.xr
                      , S = w.getSession && w.getSession();
                    S && "additive" === S.environmentBlendMode && (y = null),
                    null === y ? _(l, d) : y && y.isColor && (_(y, 1),
                    x = !0),
                    (t.autoClear || x) && t.clear(t.autoClearColor, t.autoClearDepth, t.autoClearStencil),
                    y && (y.isCubeTexture || y.mapping === M) ? (void 0 === h && (h = new Nn(new On(1,1,1),new Bn({
                        name: "BackgroundCubeMaterial",
                        uniforms: Fn(ri.cube.uniforms),
                        vertexShader: ri.cube.vertexShader,
                        fragmentShader: ri.cube.fragmentShader,
                        side: 1,
                        depthTest: !1,
                        depthWrite: !1,
                        fog: !1
                    })),
                    h.geometry.deleteAttribute("normal"),
                    h.geometry.deleteAttribute("uv"),
                    h.onBeforeRender = function(t, e, n) {
                        this.matrixWorld.copyPosition(n.matrixWorld)
                    }
                    ,
                    Object.defineProperty(h.material, "envMap", {
                        get: function() {
                            return this.uniforms.envMap.value
                        }
                    }),
                    r.update(h)),
                    h.material.uniforms.envMap.value = y,
                    h.material.uniforms.flipEnvMap.value = y.isCubeTexture && !1 === y.isRenderTargetTexture ? -1 : 1,
                    f === y && m === y.version && v === t.toneMapping || (h.material.needsUpdate = !0,
                    f = y,
                    m = y.version,
                    v = t.toneMapping),
                    n.unshift(h, h.geometry, h.material, 0, 0, null)) : y && y.isTexture && (void 0 === c && (c = new Nn(new ei(2,2),new Bn({
                        name: "BackgroundMaterial",
                        uniforms: Fn(ri.background.uniforms),
                        vertexShader: ri.background.vertexShader,
                        fragmentShader: ri.background.fragmentShader,
                        side: 0,
                        depthTest: !1,
                        depthWrite: !1,
                        fog: !1
                    })),
                    c.geometry.deleteAttribute("normal"),
                    Object.defineProperty(c.material, "map", {
                        get: function() {
                            return this.uniforms.t2D.value
                        }
                    }),
                    r.update(c)),
                    c.material.uniforms.t2D.value = y,
                    !0 === y.matrixAutoUpdate && y.updateMatrix(),
                    c.material.uniforms.uvTransform.value.copy(y.matrix),
                    f === y && m === y.version && v === t.toneMapping || (c.material.needsUpdate = !0,
                    f = y,
                    m = y.version,
                    v = t.toneMapping),
                    n.unshift(c, c.geometry, c.material, 0, 0, null))
                }
            }
        }
        function si(t, e, n, r) {
            const o = t.getParameter(34921)
              , l = r.isWebGL2 ? null : e.get("OES_vertex_array_object")
              , c = r.isWebGL2 || null !== l
              , h = {}
              , d = _(null);
            let f = d;
            function m(e) {
                return r.isWebGL2 ? t.bindVertexArray(e) : l.bindVertexArrayOES(e)
            }
            function v(e) {
                return r.isWebGL2 ? t.deleteVertexArray(e) : l.deleteVertexArrayOES(e)
            }
            function _(t) {
                const e = []
                  , n = []
                  , r = [];
                for (let i = 0; i < o; i++)
                    e[i] = 0,
                    n[i] = 0,
                    r[i] = 0;
                return {
                    geometry: null,
                    program: null,
                    wireframe: !1,
                    newAttributes: e,
                    enabledAttributes: n,
                    attributeDivisors: r,
                    object: t,
                    attributes: {},
                    index: null
                }
            }
            function x() {
                const t = f.newAttributes;
                for (let i = 0, e = t.length; i < e; i++)
                    t[i] = 0
            }
            function y(t) {
                M(t, 0)
            }
            function M(n, o) {
                const l = f.newAttributes
                  , c = f.enabledAttributes
                  , h = f.attributeDivisors;
                if (l[n] = 1,
                0 === c[n] && (t.enableVertexAttribArray(n),
                c[n] = 1),
                h[n] !== o) {
                    (r.isWebGL2 ? t : e.get("ANGLE_instanced_arrays"))[r.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](n, o),
                    h[n] = o
                }
            }
            function w() {
                const e = f.newAttributes
                  , n = f.enabledAttributes;
                for (let i = 0, r = n.length; i < r; i++)
                    n[i] !== e[i] && (t.disableVertexAttribArray(i),
                    n[i] = 0)
            }
            function S(e, n, o, l, c, h) {
                !0 !== r.isWebGL2 || 5124 !== o && 5125 !== o ? t.vertexAttribPointer(e, n, o, l, c, h) : t.vertexAttribIPointer(e, n, o, c, h)
            }
            function T() {
                E(),
                f !== d && (f = d,
                m(f.object))
            }
            function E() {
                d.geometry = null,
                d.program = null,
                d.wireframe = !1
            }
            return {
                setup: function(object, o, d, v, T) {
                    let E = !1;
                    if (c) {
                        const e = function(e, n, o) {
                            const c = !0 === o.wireframe;
                            let d = h[e.id];
                            void 0 === d && (d = {},
                            h[e.id] = d);
                            let f = d[n.id];
                            void 0 === f && (f = {},
                            d[n.id] = f);
                            let m = f[c];
                            void 0 === m && (m = _(r.isWebGL2 ? t.createVertexArray() : l.createVertexArrayOES()),
                            f[c] = m);
                            return m
                        }(v, d, o);
                        f !== e && (f = e,
                        m(f.object)),
                        E = function(t, e) {
                            const n = f.attributes
                              , r = t.attributes;
                            let o = 0;
                            for (const t in r) {
                                const e = n[t]
                                  , l = r[t];
                                if (void 0 === e)
                                    return !0;
                                if (e.attribute !== l)
                                    return !0;
                                if (e.data !== l.data)
                                    return !0;
                                o++
                            }
                            return f.attributesNum !== o || f.index !== e
                        }(v, T),
                        E && function(t, e) {
                            const n = {}
                              , r = t.attributes;
                            let o = 0;
                            for (const t in r) {
                                const e = r[t]
                                  , data = {};
                                data.attribute = e,
                                e.data && (data.data = e.data),
                                n[t] = data,
                                o++
                            }
                            f.attributes = n,
                            f.attributesNum = o,
                            f.index = e
                        }(v, T)
                    } else {
                        const t = !0 === o.wireframe;
                        f.geometry === v.id && f.program === d.id && f.wireframe === t || (f.geometry = v.id,
                        f.program = d.id,
                        f.wireframe = t,
                        E = !0)
                    }
                    !0 === object.isInstancedMesh && (E = !0),
                    null !== T && n.update(T, 34963),
                    E && (!function(object, o, l, c) {
                        if (!1 === r.isWebGL2 && (object.isInstancedMesh || c.isInstancedBufferGeometry) && null === e.get("ANGLE_instanced_arrays"))
                            return;
                        x();
                        const h = c.attributes
                          , d = l.getAttributes()
                          , f = o.defaultAttributeValues;
                        for (const e in d) {
                            const r = d[e];
                            if (r.location >= 0) {
                                let o = h[e];
                                if (void 0 === o && ("instanceMatrix" === e && object.instanceMatrix && (o = object.instanceMatrix),
                                "instanceColor" === e && object.instanceColor && (o = object.instanceColor)),
                                void 0 !== o) {
                                    const e = o.normalized
                                      , l = o.itemSize
                                      , h = n.get(o);
                                    if (void 0 === h)
                                        continue;
                                    const d = h.buffer
                                      , f = h.type
                                      , m = h.bytesPerElement;
                                    if (o.isInterleavedBufferAttribute) {
                                        const data = o.data
                                          , n = data.stride
                                          , h = o.offset;
                                        if (data && data.isInstancedInterleavedBuffer) {
                                            for (let i = 0; i < r.locationSize; i++)
                                                M(r.location + i, data.meshPerAttribute);
                                            !0 !== object.isInstancedMesh && void 0 === c._maxInstanceCount && (c._maxInstanceCount = data.meshPerAttribute * data.count)
                                        } else
                                            for (let i = 0; i < r.locationSize; i++)
                                                y(r.location + i);
                                        t.bindBuffer(34962, d);
                                        for (let i = 0; i < r.locationSize; i++)
                                            S(r.location + i, l / r.locationSize, f, e, n * m, (h + l / r.locationSize * i) * m)
                                    } else {
                                        if (o.isInstancedBufferAttribute) {
                                            for (let i = 0; i < r.locationSize; i++)
                                                M(r.location + i, o.meshPerAttribute);
                                            !0 !== object.isInstancedMesh && void 0 === c._maxInstanceCount && (c._maxInstanceCount = o.meshPerAttribute * o.count)
                                        } else
                                            for (let i = 0; i < r.locationSize; i++)
                                                y(r.location + i);
                                        t.bindBuffer(34962, d);
                                        for (let i = 0; i < r.locationSize; i++)
                                            S(r.location + i, l / r.locationSize, f, e, l * m, l / r.locationSize * i * m)
                                    }
                                } else if (void 0 !== f) {
                                    const n = f[e];
                                    if (void 0 !== n)
                                        switch (n.length) {
                                        case 2:
                                            t.vertexAttrib2fv(r.location, n);
                                            break;
                                        case 3:
                                            t.vertexAttrib3fv(r.location, n);
                                            break;
                                        case 4:
                                            t.vertexAttrib4fv(r.location, n);
                                            break;
                                        default:
                                            t.vertexAttrib1fv(r.location, n)
                                        }
                                }
                            }
                        }
                        w()
                    }(object, o, d, v),
                    null !== T && t.bindBuffer(34963, n.get(T).buffer))
                },
                reset: T,
                resetDefaultState: E,
                dispose: function() {
                    T();
                    for (const t in h) {
                        const e = h[t];
                        for (const t in e) {
                            const n = e[t];
                            for (const t in n)
                                v(n[t].object),
                                delete n[t];
                            delete e[t]
                        }
                        delete h[t]
                    }
                },
                releaseStatesOfGeometry: function(t) {
                    if (void 0 === h[t.id])
                        return;
                    const e = h[t.id];
                    for (const t in e) {
                        const n = e[t];
                        for (const t in n)
                            v(n[t].object),
                            delete n[t];
                        delete e[t]
                    }
                    delete h[t.id]
                },
                releaseStatesOfProgram: function(t) {
                    for (const e in h) {
                        const n = h[e];
                        if (void 0 === n[t.id])
                            continue;
                        const r = n[t.id];
                        for (const t in r)
                            v(r[t].object),
                            delete r[t];
                        delete n[t.id]
                    }
                },
                initAttributes: x,
                enableAttribute: y,
                disableUnusedAttributes: w
            }
        }
        function oi(t, e, n, r) {
            const o = r.isWebGL2;
            let l;
            this.setMode = function(t) {
                l = t
            }
            ,
            this.render = function(e, r) {
                t.drawArrays(l, e, r),
                n.update(r, l, 1)
            }
            ,
            this.renderInstances = function(r, c, h) {
                if (0 === h)
                    return;
                let d, f;
                if (o)
                    d = t,
                    f = "drawArraysInstanced";
                else if (d = e.get("ANGLE_instanced_arrays"),
                f = "drawArraysInstancedANGLE",
                null === d)
                    return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                d[f](l, r, c, h),
                n.update(c, l, h)
            }
        }
        function ci(t, e, n) {
            let r;
            function o(e) {
                if ("highp" === e) {
                    if (t.getShaderPrecisionFormat(35633, 36338).precision > 0 && t.getShaderPrecisionFormat(35632, 36338).precision > 0)
                        return "highp";
                    e = "mediump"
                }
                return "mediump" === e && t.getShaderPrecisionFormat(35633, 36337).precision > 0 && t.getShaderPrecisionFormat(35632, 36337).precision > 0 ? "mediump" : "lowp"
            }
            const l = "undefined" != typeof WebGL2RenderingContext && t instanceof WebGL2RenderingContext || "undefined" != typeof WebGL2ComputeRenderingContext && t instanceof WebGL2ComputeRenderingContext;
            let c = void 0 !== n.precision ? n.precision : "highp";
            const h = o(c);
            h !== c && (console.warn("THREE.WebGLRenderer:", c, "not supported, using", h, "instead."),
            c = h);
            const d = l || e.has("WEBGL_draw_buffers")
              , f = !0 === n.logarithmicDepthBuffer
              , m = t.getParameter(34930)
              , v = t.getParameter(35660)
              , _ = t.getParameter(3379)
              , x = t.getParameter(34076)
              , y = t.getParameter(34921)
              , M = t.getParameter(36347)
              , w = t.getParameter(36348)
              , S = t.getParameter(36349)
              , T = v > 0
              , E = l || e.has("OES_texture_float");
            return {
                isWebGL2: l,
                drawBuffers: d,
                getMaxAnisotropy: function() {
                    if (void 0 !== r)
                        return r;
                    if (!0 === e.has("EXT_texture_filter_anisotropic")) {
                        const n = e.get("EXT_texture_filter_anisotropic");
                        r = t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)
                    } else
                        r = 0;
                    return r
                },
                getMaxPrecision: o,
                precision: c,
                logarithmicDepthBuffer: f,
                maxTextures: m,
                maxVertexTextures: v,
                maxTextureSize: _,
                maxCubemapSize: x,
                maxAttributes: y,
                maxVertexUniforms: M,
                maxVaryings: w,
                maxFragmentUniforms: S,
                vertexTextures: T,
                floatFragmentTextures: E,
                floatVertexTextures: T && E,
                maxSamples: l ? t.getParameter(36183) : 0
            }
        }
        function hi(t) {
            const e = this;
            let n = null
              , r = 0
              , o = !1
              , l = !1;
            const c = new Zn
              , h = new _t
              , d = {
                value: null,
                needsUpdate: !1
            };
            function f() {
                d.value !== n && (d.value = n,
                d.needsUpdate = r > 0),
                e.numPlanes = r,
                e.numIntersection = 0
            }
            function m(t, n, r, o) {
                const l = null !== t ? t.length : 0;
                let f = null;
                if (0 !== l) {
                    if (f = d.value,
                    !0 !== o || null === f) {
                        const e = r + 4 * l
                          , o = n.matrixWorldInverse;
                        h.getNormalMatrix(o),
                        (null === f || f.length < e) && (f = new Float32Array(e));
                        for (let i = 0, e = r; i !== l; ++i,
                        e += 4)
                            c.copy(t[i]).applyMatrix4(o, h),
                            c.normal.toArray(f, e),
                            f[e + 3] = c.constant
                    }
                    d.value = f,
                    d.needsUpdate = !0
                }
                return e.numPlanes = l,
                e.numIntersection = 0,
                f
            }
            this.uniform = d,
            this.numPlanes = 0,
            this.numIntersection = 0,
            this.init = function(t, e, l) {
                const c = 0 !== t.length || e || 0 !== r || o;
                return o = e,
                n = m(t, l, 0),
                r = t.length,
                c
            }
            ,
            this.beginShadows = function() {
                l = !0,
                m(null)
            }
            ,
            this.endShadows = function() {
                l = !1,
                f()
            }
            ,
            this.setState = function(e, c, h) {
                const v = e.clippingPlanes
                  , _ = e.clipIntersection
                  , x = e.clipShadows
                  , y = t.get(e);
                if (!o || null === v || 0 === v.length || l && !x)
                    l ? m(null) : f();
                else {
                    const t = l ? 0 : r
                      , e = 4 * t;
                    let o = y.clippingState || null;
                    d.value = o,
                    o = m(v, c, e, h);
                    for (let i = 0; i !== e; ++i)
                        o[i] = n[i];
                    y.clippingState = o,
                    this.numIntersection = _ ? this.numPlanes : 0,
                    this.numPlanes += t
                }
            }
        }
        function ui(t) {
            let e = new WeakMap;
            function n(t, e) {
                return e === x ? t.mapping = v : e === y && (t.mapping = _),
                t
            }
            function r(t) {
                const n = t.target;
                n.removeEventListener("dispose", r);
                const o = e.get(n);
                void 0 !== o && (e.delete(n),
                o.dispose())
            }
            return {
                get: function(o) {
                    if (o && o.isTexture && !1 === o.isRenderTargetTexture) {
                        const l = o.mapping;
                        if (l === x || l === y) {
                            if (e.has(o)) {
                                return n(e.get(o).texture, o.mapping)
                            }
                            {
                                const image = o.image;
                                if (image && image.height > 0) {
                                    const l = t.getRenderTarget()
                                      , c = new jn(image.height / 2);
                                    return c.fromEquirectangularTexture(t, o),
                                    e.set(o, c),
                                    t.setRenderTarget(l),
                                    o.addEventListener("dispose", r),
                                    n(c.texture, o.mapping)
                                }
                                return null
                            }
                        }
                    }
                    return o
                },
                dispose: function() {
                    e = new WeakMap
                }
            }
        }
        ri.physical = {
            uniforms: Un([ri.standard.uniforms, {
                clearcoat: {
                    value: 0
                },
                clearcoatMap: {
                    value: null
                },
                clearcoatRoughness: {
                    value: 0
                },
                clearcoatRoughnessMap: {
                    value: null
                },
                clearcoatNormalScale: {
                    value: new vt(1,1)
                },
                clearcoatNormalMap: {
                    value: null
                },
                sheen: {
                    value: 0
                },
                sheenColor: {
                    value: new $e(0)
                },
                sheenColorMap: {
                    value: null
                },
                sheenRoughness: {
                    value: 0
                },
                sheenRoughnessMap: {
                    value: null
                },
                transmission: {
                    value: 0
                },
                transmissionMap: {
                    value: null
                },
                transmissionSamplerSize: {
                    value: new vt
                },
                transmissionSamplerMap: {
                    value: null
                },
                thickness: {
                    value: 0
                },
                thicknessMap: {
                    value: null
                },
                attenuationDistance: {
                    value: 0
                },
                attenuationColor: {
                    value: new $e(0)
                },
                specularIntensity: {
                    value: 0
                },
                specularIntensityMap: {
                    value: null
                },
                specularColor: {
                    value: new $e(1,1,1)
                },
                specularColorMap: {
                    value: null
                }
            }]),
            vertexShader: ni.meshphysical_vert,
            fragmentShader: ni.meshphysical_frag
        };
        class di extends Gn {
            constructor(t=-1, e=1, n=1, r=-1, o=.1, l=2e3) {
                super(),
                this.type = "OrthographicCamera",
                this.zoom = 1,
                this.view = null,
                this.left = t,
                this.right = e,
                this.top = n,
                this.bottom = r,
                this.near = o,
                this.far = l,
                this.updateProjectionMatrix()
            }
            copy(source, t) {
                return super.copy(source, t),
                this.left = source.left,
                this.right = source.right,
                this.top = source.top,
                this.bottom = source.bottom,
                this.near = source.near,
                this.far = source.far,
                this.zoom = source.zoom,
                this.view = null === source.view ? null : Object.assign({}, source.view),
                this
            }
            setViewOffset(t, e, n, r, o, l) {
                null === this.view && (this.view = {
                    enabled: !0,
                    fullWidth: 1,
                    fullHeight: 1,
                    offsetX: 0,
                    offsetY: 0,
                    width: 1,
                    height: 1
                }),
                this.view.enabled = !0,
                this.view.fullWidth = t,
                this.view.fullHeight = e,
                this.view.offsetX = n,
                this.view.offsetY = r,
                this.view.width = o,
                this.view.height = l,
                this.updateProjectionMatrix()
            }
            clearViewOffset() {
                null !== this.view && (this.view.enabled = !1),
                this.updateProjectionMatrix()
            }
            updateProjectionMatrix() {
                const t = (this.right - this.left) / (2 * this.zoom)
                  , e = (this.top - this.bottom) / (2 * this.zoom)
                  , n = (this.right + this.left) / 2
                  , r = (this.top + this.bottom) / 2;
                let o = n - t
                  , l = n + t
                  , c = r + e
                  , h = r - e;
                if (null !== this.view && this.view.enabled) {
                    const t = (this.right - this.left) / this.view.fullWidth / this.zoom
                      , e = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
                    o += t * this.view.offsetX,
                    l = o + t * this.view.width,
                    c -= e * this.view.offsetY,
                    h = c - e * this.view.height
                }
                this.projectionMatrix.makeOrthographic(o, l, c, h, this.near, this.far),
                this.projectionMatrixInverse.copy(this.projectionMatrix).invert()
            }
            toJSON(meta) {
                const data = super.toJSON(meta);
                return data.object.zoom = this.zoom,
                data.object.left = this.left,
                data.object.right = this.right,
                data.object.top = this.top,
                data.object.bottom = this.bottom,
                data.object.near = this.near,
                data.object.far = this.far,
                null !== this.view && (data.object.view = Object.assign({}, this.view)),
                data
            }
        }
        di.prototype.isOrthographicCamera = !0;
        class pi extends Bn {
            constructor(t) {
                super(t),
                this.type = "RawShaderMaterial"
            }
        }
        pi.prototype.isRawShaderMaterial = !0;
        const fi = Math.pow(2, 8)
          , mi = [.125, .215, .35, .446, .526, .582]
          , gi = 5 + mi.length
          , vi = 20
          , _i = {
            [J]: 0,
            [K]: 1,
            [$]: 2,
            3004: 3,
            3005: 4,
            3006: 5,
            [Q]: 6
        }
          , xi = new di
          , {_lodPlanes: yi, _sizeLods: Mi, _sigmas: bi} = Ci()
          , wi = new $e;
        let Si = null;
        const Ti = (1 + Math.sqrt(5)) / 2
          , Ei = 1 / Ti
          , Ai = [new Pt(1,1,1), new Pt(-1,1,1), new Pt(1,1,-1), new Pt(-1,1,-1), new Pt(0,Ti,Ei), new Pt(0,Ti,-Ei), new Pt(Ei,0,Ti), new Pt(-Ei,0,Ti), new Pt(Ti,Ei,0), new Pt(-Ti,Ei,0)];
        class Li {
            constructor(t) {
                this._renderer = t,
                this._pingPongRenderTarget = null,
                this._blurMaterial = function(t) {
                    const e = new Float32Array(t)
                      , n = new Pt(0,1,0);
                    return new pi({
                        name: "SphericalGaussianBlur",
                        defines: {
                            n: t
                        },
                        uniforms: {
                            envMap: {
                                value: null
                            },
                            samples: {
                                value: 1
                            },
                            weights: {
                                value: e
                            },
                            latitudinal: {
                                value: !1
                            },
                            dTheta: {
                                value: 0
                            },
                            mipInt: {
                                value: 0
                            },
                            poleAxis: {
                                value: n
                            },
                            inputEncoding: {
                                value: _i[3e3]
                            },
                            outputEncoding: {
                                value: _i[3e3]
                            }
                        },
                        vertexShader: Oi(),
                        fragmentShader: `\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t${Fi()}\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,
                        blending: 0,
                        depthTest: !1,
                        depthWrite: !1
                    })
                }(vi),
                this._equirectShader = null,
                this._cubemapShader = null,
                this._compileMaterial(this._blurMaterial)
            }
            fromScene(t, e=0, n=.1, r=100) {
                Si = this._renderer.getRenderTarget();
                const o = this._allocateTargets();
                return this._sceneToCubeUV(t, n, r, o),
                e > 0 && this._blur(o, 0, 0, e),
                this._applyPMREM(o),
                this._cleanup(o),
                o
            }
            fromEquirectangular(t) {
                return this._fromTexture(t)
            }
            fromCubemap(t) {
                return this._fromTexture(t)
            }
            compileCubemapShader() {
                null === this._cubemapShader && (this._cubemapShader = Ii(),
                this._compileMaterial(this._cubemapShader))
            }
            compileEquirectangularShader() {
                null === this._equirectShader && (this._equirectShader = Ni(),
                this._compileMaterial(this._equirectShader))
            }
            dispose() {
                this._blurMaterial.dispose(),
                null !== this._cubemapShader && this._cubemapShader.dispose(),
                null !== this._equirectShader && this._equirectShader.dispose();
                for (let i = 0; i < yi.length; i++)
                    yi[i].dispose()
            }
            _cleanup(t) {
                this._pingPongRenderTarget.dispose(),
                this._renderer.setRenderTarget(Si),
                t.scissorTest = !1,
                Di(t, 0, 0, t.width, t.height)
            }
            _fromTexture(t) {
                Si = this._renderer.getRenderTarget();
                const e = this._allocateTargets(t);
                return this._textureToCubeUV(t, e),
                this._applyPMREM(e),
                this._cleanup(e),
                e
            }
            _allocateTargets(t) {
                const e = {
                    magFilter: A,
                    minFilter: A,
                    generateMipmaps: !1,
                    type: D,
                    format: 1023,
                    encoding: Ri(t) ? t.encoding : $,
                    depthBuffer: !1
                }
                  , n = Pi(e);
                return n.depthBuffer = !t,
                this._pingPongRenderTarget = Pi(e),
                n
            }
            _compileMaterial(t) {
                const e = new Nn(yi[0],t);
                this._renderer.compile(e, xi)
            }
            _sceneToCubeUV(t, e, n, r) {
                const o = new Hn(90,1,e,n)
                  , l = [1, -1, 1, 1, 1, 1]
                  , c = [1, 1, 1, -1, -1, -1]
                  , h = this._renderer
                  , d = h.autoClear
                  , f = h.outputEncoding
                  , m = h.toneMapping;
                h.getClearColor(wi),
                h.toneMapping = 0,
                h.outputEncoding = J,
                h.autoClear = !1;
                const v = new tn({
                    name: "PMREM.Background",
                    side: 1,
                    depthWrite: !1,
                    depthTest: !1
                })
                  , _ = new Nn(new On,v);
                let x = !1;
                const y = t.background;
                y ? y.isColor && (v.color.copy(y),
                t.background = null,
                x = !0) : (v.color.copy(wi),
                x = !0);
                for (let i = 0; i < 6; i++) {
                    const col = i % 3;
                    0 == col ? (o.up.set(0, l[i], 0),
                    o.lookAt(c[i], 0, 0)) : 1 == col ? (o.up.set(0, 0, l[i]),
                    o.lookAt(0, c[i], 0)) : (o.up.set(0, l[i], 0),
                    o.lookAt(0, 0, c[i])),
                    Di(r, col * fi, i > 2 ? fi : 0, fi, fi),
                    h.setRenderTarget(r),
                    x && h.render(_, o),
                    h.render(t, o)
                }
                _.geometry.dispose(),
                _.material.dispose(),
                h.toneMapping = m,
                h.outputEncoding = f,
                h.autoClear = d,
                t.background = y
            }
            _setEncoding(t, e) {
                !0 === this._renderer.capabilities.isWebGL2 && e.format === B && e.type === D && e.encoding === K ? t.value = _i[3e3] : t.value = _i[e.encoding]
            }
            _textureToCubeUV(t, e) {
                const n = this._renderer
                  , r = t.mapping === v || t.mapping === _;
                r ? null == this._cubemapShader && (this._cubemapShader = Ii()) : null == this._equirectShader && (this._equirectShader = Ni());
                const o = r ? this._cubemapShader : this._equirectShader
                  , l = new Nn(yi[0],o)
                  , c = o.uniforms;
                c.envMap.value = t,
                r || c.texelSize.value.set(1 / t.image.width, 1 / t.image.height),
                this._setEncoding(c.inputEncoding, t),
                this._setEncoding(c.outputEncoding, e.texture),
                Di(e, 0, 0, 3 * fi, 2 * fi),
                n.setRenderTarget(e),
                n.render(l, xi)
            }
            _applyPMREM(t) {
                const e = this._renderer
                  , n = e.autoClear;
                e.autoClear = !1;
                for (let i = 1; i < gi; i++) {
                    const e = Math.sqrt(bi[i] * bi[i] - bi[i - 1] * bi[i - 1])
                      , n = Ai[(i - 1) % Ai.length];
                    this._blur(t, i - 1, i, e, n)
                }
                e.autoClear = n
            }
            _blur(t, e, n, r, o) {
                const l = this._pingPongRenderTarget;
                this._halfBlur(t, l, e, n, r, "latitudinal", o),
                this._halfBlur(l, t, n, n, r, "longitudinal", o)
            }
            _halfBlur(t, e, n, r, o, l, c) {
                const h = this._renderer
                  , d = this._blurMaterial;
                "latitudinal" !== l && "longitudinal" !== l && console.error("blur direction must be either latitudinal or longitudinal!");
                const f = new Nn(yi[r],d)
                  , m = d.uniforms
                  , v = Mi[n] - 1
                  , _ = isFinite(o) ? Math.PI / (2 * v) : 2 * Math.PI / 39
                  , x = o / _
                  , y = isFinite(o) ? 1 + Math.floor(3 * x) : vi;
                y > vi && console.warn(`sigmaRadians, ${o}, is too large and will clip, as it requested ${y} samples when the maximum is set to 20`);
                const M = [];
                let w = 0;
                for (let i = 0; i < vi; ++i) {
                    const t = i / x
                      , e = Math.exp(-t * t / 2);
                    M.push(e),
                    0 == i ? w += e : i < y && (w += 2 * e)
                }
                for (let i = 0; i < M.length; i++)
                    M[i] = M[i] / w;
                m.envMap.value = t.texture,
                m.samples.value = y,
                m.weights.value = M,
                m.latitudinal.value = "latitudinal" === l,
                c && (m.poleAxis.value = c),
                m.dTheta.value = _,
                m.mipInt.value = 8 - n,
                this._setEncoding(m.inputEncoding, t.texture),
                this._setEncoding(m.outputEncoding, t.texture);
                const S = Mi[r];
                Di(e, 3 * Math.max(0, fi - 2 * S), (0 === r ? 0 : 2 * fi) + 2 * S * (r > 4 ? r - 8 + 4 : 0), 3 * S, 2 * S),
                h.setRenderTarget(e),
                h.render(f, xi)
            }
        }
        function Ri(t) {
            return void 0 !== t && t.type === D && (t.encoding === J || t.encoding === K || t.encoding === Q)
        }
        function Ci() {
            const t = []
              , e = []
              , n = [];
            let r = 8;
            for (let i = 0; i < gi; i++) {
                const o = Math.pow(2, r);
                e.push(o);
                let l = 1 / o;
                i > 4 ? l = mi[i - 8 + 4 - 1] : 0 == i && (l = 0),
                n.push(l);
                const c = 1 / (o - 1)
                  , h = -c / 2
                  , d = 1 + c / 2
                  , f = [h, h, d, h, d, d, h, h, d, d, h, d]
                  , m = 6
                  , v = 6
                  , _ = 3
                  , x = 2
                  , y = 1
                  , M = new Float32Array(_ * v * m)
                  , w = new Float32Array(x * v * m)
                  , S = new Float32Array(y * v * m);
                for (let t = 0; t < m; t++) {
                    const e = t % 3 * 2 / 3 - 1
                      , n = t > 2 ? 0 : -1
                      , r = [e, n, 0, e + 2 / 3, n, 0, e + 2 / 3, n + 1, 0, e, n, 0, e + 2 / 3, n + 1, 0, e, n + 1, 0];
                    M.set(r, _ * v * t),
                    w.set(f, x * v * t);
                    const o = [t, t, t, t, t, t];
                    S.set(o, y * v * t)
                }
                const T = new mn;
                T.setAttribute("position", new rn(M,_)),
                T.setAttribute("uv", new rn(w,x)),
                T.setAttribute("faceIndex", new rn(S,y)),
                t.push(T),
                r > 4 && r--
            }
            return {
                _lodPlanes: t,
                _sizeLods: e,
                _sigmas: n
            }
        }
        function Pi(t) {
            const e = new Lt(3 * fi,3 * fi,t);
            return e.texture.mapping = M,
            e.texture.name = "PMREM.cubeUv",
            e.scissorTest = !0,
            e
        }
        function Di(t, e, n, r, o) {
            t.viewport.set(e, n, r, o),
            t.scissor.set(e, n, r, o)
        }
        function Ni() {
            const t = new vt(1,1);
            return new pi({
                name: "EquirectangularToCubeUV",
                uniforms: {
                    envMap: {
                        value: null
                    },
                    texelSize: {
                        value: t
                    },
                    inputEncoding: {
                        value: _i[3e3]
                    },
                    outputEncoding: {
                        value: _i[3e3]
                    }
                },
                vertexShader: Oi(),
                fragmentShader: `\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t${Fi()}\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tvec2 f = fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -= f * texelSize;\n\t\t\t\tvec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x += texelSize.x;\n\t\t\t\tvec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y += texelSize.y;\n\t\t\t\tvec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -= texelSize.x;\n\t\t\t\tvec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm = mix( tl, tr, f.x );\n\t\t\t\tvec3 bm = mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb = mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,
                blending: 0,
                depthTest: !1,
                depthWrite: !1
            })
        }
        function Ii() {
            return new pi({
                name: "CubemapToCubeUV",
                uniforms: {
                    envMap: {
                        value: null
                    },
                    inputEncoding: {
                        value: _i[3e3]
                    },
                    outputEncoding: {
                        value: _i[3e3]
                    }
                },
                vertexShader: Oi(),
                fragmentShader: `\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t${Fi()}\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor = linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t`,
                blending: 0,
                depthTest: !1,
                depthWrite: !1
            })
        }
        function Oi() {
            return "\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t"
        }
        function Fi() {
            return "\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include <encodings_pars_fragment>\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding == 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding == 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding == 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding == 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding == 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding == 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding == 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding == 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding == 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding == 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t"
        }
        function Ui(t) {
            let e = new WeakMap
              , n = null;
            function r(t) {
                const n = t.target;
                n.removeEventListener("dispose", r);
                const o = e.get(n);
                void 0 !== o && (e.delete(n),
                o.dispose())
            }
            return {
                get: function(o) {
                    if (o && o.isTexture && !1 === o.isRenderTargetTexture) {
                        const l = o.mapping
                          , c = l === x || l === y
                          , h = l === v || l === _;
                        if (c || h) {
                            if (e.has(o))
                                return e.get(o).texture;
                            {
                                const image = o.image;
                                if (c && image && image.height > 0 || h && image && function(image) {
                                    let t = 0;
                                    const e = 6;
                                    for (let i = 0; i < e; i++)
                                        void 0 !== image[i] && t++;
                                    return t === e
                                }(image)) {
                                    const l = t.getRenderTarget();
                                    null === n && (n = new Li(t));
                                    const h = c ? n.fromEquirectangular(o) : n.fromCubemap(o);
                                    return e.set(o, h),
                                    t.setRenderTarget(l),
                                    o.addEventListener("dispose", r),
                                    h.texture
                                }
                                return null
                            }
                        }
                    }
                    return o
                },
                dispose: function() {
                    e = new WeakMap,
                    null !== n && (n.dispose(),
                    n = null)
                }
            }
        }
        function zi(t) {
            const e = {};
            function n(n) {
                if (void 0 !== e[n])
                    return e[n];
                let r;
                switch (n) {
                case "WEBGL_depth_texture":
                    r = t.getExtension("WEBGL_depth_texture") || t.getExtension("MOZ_WEBGL_depth_texture") || t.getExtension("WEBKIT_WEBGL_depth_texture");
                    break;
                case "EXT_texture_filter_anisotropic":
                    r = t.getExtension("EXT_texture_filter_anisotropic") || t.getExtension("MOZ_EXT_texture_filter_anisotropic") || t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
                    break;
                case "WEBGL_compressed_texture_s3tc":
                    r = t.getExtension("WEBGL_compressed_texture_s3tc") || t.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
                    break;
                case "WEBGL_compressed_texture_pvrtc":
                    r = t.getExtension("WEBGL_compressed_texture_pvrtc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
                    break;
                default:
                    r = t.getExtension(n)
                }
                return e[n] = r,
                r
            }
            return {
                has: function(t) {
                    return null !== n(t)
                },
                init: function(t) {
                    t.isWebGL2 ? n("EXT_color_buffer_float") : (n("WEBGL_depth_texture"),
                    n("OES_texture_float"),
                    n("OES_texture_half_float"),
                    n("OES_texture_half_float_linear"),
                    n("OES_standard_derivatives"),
                    n("OES_element_index_uint"),
                    n("OES_vertex_array_object"),
                    n("ANGLE_instanced_arrays")),
                    n("OES_texture_float_linear"),
                    n("EXT_color_buffer_half_float")
                },
                get: function(t) {
                    const e = n(t);
                    return null === e && console.warn("THREE.WebGLRenderer: " + t + " extension not supported."),
                    e
                }
            }
        }
        function Bi(t, e, n, r) {
            const o = {}
              , l = new WeakMap;
            function c(t) {
                const h = t.target;
                null !== h.index && e.remove(h.index);
                for (const t in h.attributes)
                    e.remove(h.attributes[t]);
                h.removeEventListener("dispose", c),
                delete o[h.id];
                const d = l.get(h);
                d && (e.remove(d),
                l.delete(h)),
                r.releaseStatesOfGeometry(h),
                !0 === h.isInstancedBufferGeometry && delete h._maxInstanceCount,
                n.memory.geometries--
            }
            function h(t) {
                const n = []
                  , r = t.index
                  , o = t.attributes.position;
                let c = 0;
                if (null !== r) {
                    const t = r.array;
                    c = r.version;
                    for (let i = 0, e = t.length; i < e; i += 3) {
                        const a = t[i + 0]
                          , b = t[i + 1]
                          , e = t[i + 2];
                        n.push(a, b, b, e, e, a)
                    }
                } else {
                    const t = o.array;
                    c = o.version;
                    for (let i = 0, e = t.length / 3 - 1; i < e; i += 3) {
                        const a = i + 0
                          , b = i + 1
                          , t = i + 2;
                        n.push(a, b, b, t, t, a)
                    }
                }
                const h = new (xt(n) > 65535 ? sn : an)(n,1);
                h.version = c;
                const d = l.get(t);
                d && e.remove(d),
                l.set(t, h)
            }
            return {
                get: function(object, t) {
                    return !0 === o[t.id] || (t.addEventListener("dispose", c),
                    o[t.id] = !0,
                    n.memory.geometries++),
                    t
                },
                update: function(t) {
                    const n = t.attributes;
                    for (const t in n)
                        e.update(n[t], 34962);
                    const r = t.morphAttributes;
                    for (const t in r) {
                        const n = r[t];
                        for (let i = 0, t = n.length; i < t; i++)
                            e.update(n[i], 34962)
                    }
                },
                getWireframeAttribute: function(t) {
                    const e = l.get(t);
                    if (e) {
                        const n = t.index;
                        null !== n && e.version < n.version && h(t)
                    } else
                        h(t);
                    return l.get(t)
                }
            }
        }
        function Gi(t, e, n, r) {
            const o = r.isWebGL2;
            let l, c, h;
            this.setMode = function(t) {
                l = t
            }
            ,
            this.setIndex = function(t) {
                c = t.type,
                h = t.bytesPerElement
            }
            ,
            this.render = function(e, r) {
                t.drawElements(l, r, c, e * h),
                n.update(r, l, 1)
            }
            ,
            this.renderInstances = function(r, d, f) {
                if (0 === f)
                    return;
                let m, v;
                if (o)
                    m = t,
                    v = "drawElementsInstanced";
                else if (m = e.get("ANGLE_instanced_arrays"),
                v = "drawElementsInstancedANGLE",
                null === m)
                    return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");
                m[v](l, d, c, r * h, f),
                n.update(d, l, f)
            }
        }
        function Hi(t) {
            const e = {
                frame: 0,
                calls: 0,
                triangles: 0,
                points: 0,
                lines: 0
            };
            return {
                memory: {
                    geometries: 0,
                    textures: 0
                },
                render: e,
                programs: null,
                autoReset: !0,
                reset: function() {
                    e.frame++,
                    e.calls = 0,
                    e.triangles = 0,
                    e.points = 0,
                    e.lines = 0
                },
                update: function(t, n, r) {
                    switch (e.calls++,
                    n) {
                    case 4:
                        e.triangles += r * (t / 3);
                        break;
                    case 1:
                        e.lines += r * (t / 2);
                        break;
                    case 3:
                        e.lines += r * (t - 1);
                        break;
                    case 2:
                        e.lines += r * t;
                        break;
                    case 0:
                        e.points += r * t;
                        break;
                    default:
                        console.error("THREE.WebGLInfo: Unknown draw mode:", n)
                    }
                }
            }
        }
        class ki extends Tt {
            constructor(data=null, t=1, e=1, n=1) {
                super(null),
                this.image = {
                    data: data,
                    width: t,
                    height: e,
                    depth: n
                },
                this.magFilter = A,
                this.minFilter = A,
                this.wrapR = T,
                this.generateMipmaps = !1,
                this.flipY = !1,
                this.unpackAlignment = 1,
                this.needsUpdate = !0
            }
        }
        function Vi(a, b) {
            return a[0] - b[0]
        }
        function Wi(a, b) {
            return Math.abs(b[1]) - Math.abs(a[1])
        }
        function ji(t, e) {
            let n = 1;
            const r = e.isInterleavedBufferAttribute ? e.data.array : e.array;
            r instanceof Int8Array ? n = 127 : r instanceof Int16Array ? n = 32767 : r instanceof Int32Array ? n = 2147483647 : console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ", r),
            t.divideScalar(n)
        }
        function Xi(t, e, n) {
            const r = {}
              , o = new Float32Array(8)
              , l = new WeakMap
              , c = new Pt
              , h = [];
            for (let i = 0; i < 8; i++)
                h[i] = [i, 0];
            return {
                update: function(object, d, f, m) {
                    const v = object.morphTargetInfluences;
                    if (!0 === e.isWebGL2) {
                        const r = d.morphAttributes.position.length;
                        let o = l.get(d);
                        if (void 0 === o || o.count !== r) {
                            void 0 !== o && o.texture.dispose();
                            const t = void 0 !== d.morphAttributes.normal
                              , n = d.morphAttributes.position
                              , h = d.morphAttributes.normal || []
                              , f = !0 === t ? 2 : 1;
                            let m = d.attributes.position.count * f
                              , v = 1;
                            m > e.maxTextureSize && (v = Math.ceil(m / e.maxTextureSize),
                            m = e.maxTextureSize);
                            const _ = new Float32Array(m * v * 4 * r)
                              , x = new ki(_,m,v,r);
                            x.format = B,
                            x.type = O;
                            const y = 4 * f;
                            for (let i = 0; i < r; i++) {
                                const e = n[i]
                                  , r = h[i]
                                  , o = m * v * 4 * i;
                                for (let n = 0; n < e.count; n++) {
                                    c.fromBufferAttribute(e, n),
                                    !0 === e.normalized && ji(c, e);
                                    const l = n * y;
                                    _[o + l + 0] = c.x,
                                    _[o + l + 1] = c.y,
                                    _[o + l + 2] = c.z,
                                    _[o + l + 3] = 0,
                                    !0 === t && (c.fromBufferAttribute(r, n),
                                    !0 === r.normalized && ji(c, r),
                                    _[o + l + 4] = c.x,
                                    _[o + l + 5] = c.y,
                                    _[o + l + 6] = c.z,
                                    _[o + l + 7] = 0)
                                }
                            }
                            o = {
                                count: r,
                                texture: x,
                                size: new vt(m,v)
                            },
                            l.set(d, o)
                        }
                        let h = 0;
                        for (let i = 0; i < v.length; i++)
                            h += v[i];
                        const f = d.morphTargetsRelative ? 1 : 1 - h;
                        m.getUniforms().setValue(t, "morphTargetBaseInfluence", f),
                        m.getUniforms().setValue(t, "morphTargetInfluences", v),
                        m.getUniforms().setValue(t, "morphTargetsTexture", o.texture, n),
                        m.getUniforms().setValue(t, "morphTargetsTextureSize", o.size)
                    } else {
                        const e = void 0 === v ? 0 : v.length;
                        let n = r[d.id];
                        if (void 0 === n || n.length !== e) {
                            n = [];
                            for (let i = 0; i < e; i++)
                                n[i] = [i, 0];
                            r[d.id] = n
                        }
                        for (let i = 0; i < e; i++) {
                            const t = n[i];
                            t[0] = i,
                            t[1] = v[i]
                        }
                        n.sort(Wi);
                        for (let i = 0; i < 8; i++)
                            i < e && n[i][1] ? (h[i][0] = n[i][0],
                            h[i][1] = n[i][1]) : (h[i][0] = Number.MAX_SAFE_INTEGER,
                            h[i][1] = 0);
                        h.sort(Vi);
                        const l = d.morphAttributes.position
                          , c = d.morphAttributes.normal;
                        let f = 0;
                        for (let i = 0; i < 8; i++) {
                            const t = h[i]
                              , e = t[0]
                              , n = t[1];
                            e !== Number.MAX_SAFE_INTEGER && n ? (l && d.getAttribute("morphTarget" + i) !== l[e] && d.setAttribute("morphTarget" + i, l[e]),
                            c && d.getAttribute("morphNormal" + i) !== c[e] && d.setAttribute("morphNormal" + i, c[e]),
                            o[i] = n,
                            f += n) : (l && !0 === d.hasAttribute("morphTarget" + i) && d.deleteAttribute("morphTarget" + i),
                            c && !0 === d.hasAttribute("morphNormal" + i) && d.deleteAttribute("morphNormal" + i),
                            o[i] = 0)
                        }
                        const _ = d.morphTargetsRelative ? 1 : 1 - f;
                        m.getUniforms().setValue(t, "morphTargetBaseInfluence", _),
                        m.getUniforms().setValue(t, "morphTargetInfluences", o)
                    }
                }
            }
        }
        function qi(t, e, n, r) {
            let o = new WeakMap;
            function l(t) {
                const e = t.target;
                e.removeEventListener("dispose", l),
                n.remove(e.instanceMatrix),
                null !== e.instanceColor && n.remove(e.instanceColor)
            }
            return {
                update: function(object) {
                    const t = r.render.frame
                      , c = object.geometry
                      , h = e.get(object, c);
                    return o.get(h) !== t && (e.update(h),
                    o.set(h, t)),
                    object.isInstancedMesh && (!1 === object.hasEventListener("dispose", l) && object.addEventListener("dispose", l),
                    n.update(object.instanceMatrix, 34962),
                    null !== object.instanceColor && n.update(object.instanceColor, 34962)),
                    h
                },
                dispose: function() {
                    o = new WeakMap
                }
            }
        }
        ki.prototype.isDataTexture2DArray = !0;
        class Yi extends Tt {
            constructor(data=null, t=1, e=1, n=1) {
                super(null),
                this.image = {
                    data: data,
                    width: t,
                    height: e,
                    depth: n
                },
                this.magFilter = A,
                this.minFilter = A,
                this.wrapR = T,
                this.generateMipmaps = !1,
                this.flipY = !1,
                this.unpackAlignment = 1,
                this.needsUpdate = !0
            }
        }
        Yi.prototype.isDataTexture3D = !0;
        const Zi = new Tt
          , Ji = new ki
          , Ki = new Yi
          , Qi = new Wn
          , $i = []
          , er = []
          , nr = new Float32Array(16)
          , ir = new Float32Array(9)
          , rr = new Float32Array(4);
        function ar(t, e, n) {
            const r = t[0];
            if (r <= 0 || r > 0)
                return t;
            const o = e * n;
            let l = $i[o];
            if (void 0 === l && (l = new Float32Array(o),
            $i[o] = l),
            0 !== e) {
                r.toArray(l, 0);
                for (let i = 1, r = 0; i !== e; ++i)
                    r += n,
                    t[i].toArray(l, r)
            }
            return l
        }
        function sr(a, b) {
            if (a.length !== b.length)
                return !1;
            for (let i = 0, t = a.length; i < t; i++)
                if (a[i] !== b[i])
                    return !1;
            return !0
        }
        function or(a, b) {
            for (let i = 0, t = b.length; i < t; i++)
                a[i] = b[i]
        }
        function lr(t, e) {
            let n = er[e];
            void 0 === n && (n = new Int32Array(e),
            er[e] = n);
            for (let i = 0; i !== e; ++i)
                n[i] = t.allocateTextureUnit();
            return n
        }
        function cr(t, e) {
            const n = this.cache;
            n[0] !== e && (t.uniform1f(this.addr, e),
            n[0] = e)
        }
        function ur(t, e) {
            const n = this.cache;
            if (void 0 !== e.x)
                n[0] === e.x && n[1] === e.y || (t.uniform2f(this.addr, e.x, e.y),
                n[0] = e.x,
                n[1] = e.y);
            else {
                if (sr(n, e))
                    return;
                t.uniform2fv(this.addr, e),
                or(n, e)
            }
        }
        function dr(t, e) {
            const n = this.cache;
            if (void 0 !== e.x)
                n[0] === e.x && n[1] === e.y && n[2] === e.z || (t.uniform3f(this.addr, e.x, e.y, e.z),
                n[0] = e.x,
                n[1] = e.y,
                n[2] = e.z);
            else if (void 0 !== e.r)
                n[0] === e.r && n[1] === e.g && n[2] === e.b || (t.uniform3f(this.addr, e.r, e.g, e.b),
                n[0] = e.r,
                n[1] = e.g,
                n[2] = e.b);
            else {
                if (sr(n, e))
                    return;
                t.uniform3fv(this.addr, e),
                or(n, e)
            }
        }
        function pr(t, e) {
            const n = this.cache;
            if (void 0 !== e.x)
                n[0] === e.x && n[1] === e.y && n[2] === e.z && n[3] === e.w || (t.uniform4f(this.addr, e.x, e.y, e.z, e.w),
                n[0] = e.x,
                n[1] = e.y,
                n[2] = e.z,
                n[3] = e.w);
            else {
                if (sr(n, e))
                    return;
                t.uniform4fv(this.addr, e),
                or(n, e)
            }
        }
        function fr(t, e) {
            const n = this.cache
              , r = e.elements;
            if (void 0 === r) {
                if (sr(n, e))
                    return;
                t.uniformMatrix2fv(this.addr, !1, e),
                or(n, e)
            } else {
                if (sr(n, r))
                    return;
                rr.set(r),
                t.uniformMatrix2fv(this.addr, !1, rr),
                or(n, r)
            }
        }
        function mr(t, e) {
            const n = this.cache
              , r = e.elements;
            if (void 0 === r) {
                if (sr(n, e))
                    return;
                t.uniformMatrix3fv(this.addr, !1, e),
                or(n, e)
            } else {
                if (sr(n, r))
                    return;
                ir.set(r),
                t.uniformMatrix3fv(this.addr, !1, ir),
                or(n, r)
            }
        }
        function gr(t, e) {
            const n = this.cache
              , r = e.elements;
            if (void 0 === r) {
                if (sr(n, e))
                    return;
                t.uniformMatrix4fv(this.addr, !1, e),
                or(n, e)
            } else {
                if (sr(n, r))
                    return;
                nr.set(r),
                t.uniformMatrix4fv(this.addr, !1, nr),
                or(n, r)
            }
        }
        function vr(t, e) {
            const n = this.cache;
            n[0] !== e && (t.uniform1i(this.addr, e),
            n[0] = e)
        }
        function _r(t, e) {
            const n = this.cache;
            sr(n, e) || (t.uniform2iv(this.addr, e),
            or(n, e))
        }
        function xr(t, e) {
            const n = this.cache;
            sr(n, e) || (t.uniform3iv(this.addr, e),
            or(n, e))
        }
        function yr(t, e) {
            const n = this.cache;
            sr(n, e) || (t.uniform4iv(this.addr, e),
            or(n, e))
        }
        function Mr(t, e) {
            const n = this.cache;
            n[0] !== e && (t.uniform1ui(this.addr, e),
            n[0] = e)
        }
        function wr(t, e) {
            const n = this.cache;
            sr(n, e) || (t.uniform2uiv(this.addr, e),
            or(n, e))
        }
        function Sr(t, e) {
            const n = this.cache;
            sr(n, e) || (t.uniform3uiv(this.addr, e),
            or(n, e))
        }
        function Tr(t, e) {
            const n = this.cache;
            sr(n, e) || (t.uniform4uiv(this.addr, e),
            or(n, e))
        }
        function Er(t, e, n) {
            const r = this.cache
              , o = n.allocateTextureUnit();
            r[0] !== o && (t.uniform1i(this.addr, o),
            r[0] = o),
            n.safeSetTexture2D(e || Zi, o)
        }
        function Ar(t, e, n) {
            const r = this.cache
              , o = n.allocateTextureUnit();
            r[0] !== o && (t.uniform1i(this.addr, o),
            r[0] = o),
            n.setTexture3D(e || Ki, o)
        }
        function Lr(t, e, n) {
            const r = this.cache
              , o = n.allocateTextureUnit();
            r[0] !== o && (t.uniform1i(this.addr, o),
            r[0] = o),
            n.safeSetTextureCube(e || Qi, o)
        }
        function Rr(t, e, n) {
            const r = this.cache
              , o = n.allocateTextureUnit();
            r[0] !== o && (t.uniform1i(this.addr, o),
            r[0] = o),
            n.setTexture2DArray(e || Ji, o)
        }
        function Cr(t, e) {
            t.uniform1fv(this.addr, e)
        }
        function Pr(t, e) {
            const data = ar(e, this.size, 2);
            t.uniform2fv(this.addr, data)
        }
        function Dr(t, e) {
            const data = ar(e, this.size, 3);
            t.uniform3fv(this.addr, data)
        }
        function Nr(t, e) {
            const data = ar(e, this.size, 4);
            t.uniform4fv(this.addr, data)
        }
        function Ir(t, e) {
            const data = ar(e, this.size, 4);
            t.uniformMatrix2fv(this.addr, !1, data)
        }
        function Or(t, e) {
            const data = ar(e, this.size, 9);
            t.uniformMatrix3fv(this.addr, !1, data)
        }
        function Fr(t, e) {
            const data = ar(e, this.size, 16);
            t.uniformMatrix4fv(this.addr, !1, data)
        }
        function Ur(t, e) {
            t.uniform1iv(this.addr, e)
        }
        function zr(t, e) {
            t.uniform2iv(this.addr, e)
        }
        function Br(t, e) {
            t.uniform3iv(this.addr, e)
        }
        function Gr(t, e) {
            t.uniform4iv(this.addr, e)
        }
        function Hr(t, e) {
            t.uniform1uiv(this.addr, e)
        }
        function kr(t, e) {
            t.uniform2uiv(this.addr, e)
        }
        function Vr(t, e) {
            t.uniform3uiv(this.addr, e)
        }
        function Wr(t, e) {
            t.uniform4uiv(this.addr, e)
        }
        function jr(t, e, n) {
            const r = e.length
              , o = lr(n, r);
            t.uniform1iv(this.addr, o);
            for (let i = 0; i !== r; ++i)
                n.safeSetTexture2D(e[i] || Zi, o[i])
        }
        function Xr(t, e, n) {
            const r = e.length
              , o = lr(n, r);
            t.uniform1iv(this.addr, o);
            for (let i = 0; i !== r; ++i)
                n.safeSetTextureCube(e[i] || Qi, o[i])
        }
        function qr(t, e, n) {
            this.id = t,
            this.addr = n,
            this.cache = [],
            this.setValue = function(t) {
                switch (t) {
                case 5126:
                    return cr;
                case 35664:
                    return ur;
                case 35665:
                    return dr;
                case 35666:
                    return pr;
                case 35674:
                    return fr;
                case 35675:
                    return mr;
                case 35676:
                    return gr;
                case 5124:
                case 35670:
                    return vr;
                case 35667:
                case 35671:
                    return _r;
                case 35668:
                case 35672:
                    return xr;
                case 35669:
                case 35673:
                    return yr;
                case 5125:
                    return Mr;
                case 36294:
                    return wr;
                case 36295:
                    return Sr;
                case 36296:
                    return Tr;
                case 35678:
                case 36198:
                case 36298:
                case 36306:
                case 35682:
                    return Er;
                case 35679:
                case 36299:
                case 36307:
                    return Ar;
                case 35680:
                case 36300:
                case 36308:
                case 36293:
                    return Lr;
                case 36289:
                case 36303:
                case 36311:
                case 36292:
                    return Rr
                }
            }(e.type)
        }
        function Yr(t, e, n) {
            this.id = t,
            this.addr = n,
            this.cache = [],
            this.size = e.size,
            this.setValue = function(t) {
                switch (t) {
                case 5126:
                    return Cr;
                case 35664:
                    return Pr;
                case 35665:
                    return Dr;
                case 35666:
                    return Nr;
                case 35674:
                    return Ir;
                case 35675:
                    return Or;
                case 35676:
                    return Fr;
                case 5124:
                case 35670:
                    return Ur;
                case 35667:
                case 35671:
                    return zr;
                case 35668:
                case 35672:
                    return Br;
                case 35669:
                case 35673:
                    return Gr;
                case 5125:
                    return Hr;
                case 36294:
                    return kr;
                case 36295:
                    return Vr;
                case 36296:
                    return Wr;
                case 35678:
                case 36198:
                case 36298:
                case 36306:
                case 35682:
                    return jr;
                case 35680:
                case 36300:
                case 36308:
                case 36293:
                    return Xr
                }
            }(e.type)
        }
        function Zr(t) {
            this.id = t,
            this.seq = [],
            this.map = {}
        }
        Yr.prototype.updateCache = function(data) {
            const t = this.cache;
            data instanceof Float32Array && t.length !== data.length && (this.cache = new Float32Array(data.length)),
            or(t, data)
        }
        ,
        Zr.prototype.setValue = function(t, e, n) {
            const r = this.seq;
            for (let i = 0, o = r.length; i !== o; ++i) {
                const u = r[i];
                u.setValue(t, e[u.id], n)
            }
        }
        ;
        const Jr = /(\w+)(\])?(\[|\.)?/g;
        function Kr(t, e) {
            t.seq.push(e),
            t.map[e.id] = e
        }
        function Qr(t, e, n) {
            const path = t.name
              , r = path.length;
            for (Jr.lastIndex = 0; ; ) {
                const o = Jr.exec(path)
                  , l = Jr.lastIndex;
                let c = o[1];
                const h = "]" === o[2]
                  , d = o[3];
                if (h && (c |= 0),
                void 0 === d || "[" === d && l + 2 === r) {
                    Kr(n, void 0 === d ? new qr(c,t,e) : new Yr(c,t,e));
                    break
                }
                {
                    let t = n.map[c];
                    void 0 === t && (t = new Zr(c),
                    Kr(n, t)),
                    n = t
                }
            }
        }
        function $r(t, e) {
            this.seq = [],
            this.map = {};
            const n = t.getProgramParameter(e, 35718);
            for (let i = 0; i < n; ++i) {
                const n = t.getActiveUniform(e, i);
                Qr(n, t.getUniformLocation(e, n.name), this)
            }
        }
        function ta(t, e, n) {
            const r = t.createShader(e);
            return t.shaderSource(r, n),
            t.compileShader(r),
            r
        }
        $r.prototype.setValue = function(t, e, n, r) {
            const u = this.map[e];
            void 0 !== u && u.setValue(t, n, r)
        }
        ,
        $r.prototype.setOptional = function(t, object, e) {
            const n = object[e];
            void 0 !== n && this.setValue(t, e, n)
        }
        ,
        $r.upload = function(t, e, n, r) {
            for (let i = 0, o = e.length; i !== o; ++i) {
                const u = e[i]
                  , o = n[u.id];
                !1 !== o.needsUpdate && u.setValue(t, o.value, r)
            }
        }
        ,
        $r.seqWithValue = function(t, e) {
            const n = [];
            for (let i = 0, r = t.length; i !== r; ++i) {
                const u = t[i];
                u.id in e && n.push(u)
            }
            return n
        }
        ;
        let ea = 0;
        function na(t) {
            switch (t) {
            case J:
                return ["Linear", "( value )"];
            case K:
                return ["sRGB", "( value )"];
            case $:
                return ["RGBE", "( value )"];
            case 3004:
                return ["RGBM", "( value, 7.0 )"];
            case 3005:
                return ["RGBM", "( value, 16.0 )"];
            case 3006:
                return ["RGBD", "( value, 256.0 )"];
            case Q:
                return ["Gamma", "( value, float( GAMMA_FACTOR ) )"];
            case 3003:
                return ["LogLuv", "( value )"];
            default:
                return console.warn("THREE.WebGLProgram: Unsupported encoding:", t),
                ["Linear", "( value )"]
            }
        }
        function ia(t, e, n) {
            const r = t.getShaderParameter(e, 35713)
              , o = t.getShaderInfoLog(e).trim();
            return r && "" === o ? "" : n.toUpperCase() + "\n\n" + o + "\n\n" + function(t) {
                const e = t.split("\n");
                for (let i = 0; i < e.length; i++)
                    e[i] = i + 1 + ": " + e[i];
                return e.join("\n")
            }(t.getShaderSource(e))
        }
        function ra(t, e) {
            const n = na(e);
            return "vec4 " + t + "( vec4 value ) { return " + n[0] + "ToLinear" + n[1] + "; }"
        }
        function aa(t, e) {
            const n = na(e);
            return "vec4 " + t + "( vec4 value ) { return LinearTo" + n[0] + n[1] + "; }"
        }
        function sa(t, e) {
            let n;
            switch (e) {
            case 1:
                n = "Linear";
                break;
            case 2:
                n = "Reinhard";
                break;
            case 3:
                n = "OptimizedCineon";
                break;
            case 4:
                n = "ACESFilmic";
                break;
            case 5:
                n = "Custom";
                break;
            default:
                console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e),
                n = "Linear"
            }
            return "vec3 " + t + "( vec3 color ) { return " + n + "ToneMapping( color ); }"
        }
        function oa(t) {
            return "" !== t
        }
        function la(t, e) {
            return t.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows)
        }
        function ca(t, e) {
            return t.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection)
        }
        const ha = /^[ \t]*#include +<([\w\d./]+)>/gm;
        function ua(t) {
            return t.replace(ha, da)
        }
        function da(t, e) {
            const n = ni[e];
            if (void 0 === n)
                throw new Error("Can not resolve #include <" + e + ">");
            return ua(n)
        }
        const pa = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g
          , fa = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
        function ma(t) {
            return t.replace(fa, va).replace(pa, ga)
        }
        function ga(t, e, n, r) {
            return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),
            va(t, e, n, r)
        }
        function va(t, e, n, r) {
            let o = "";
            for (let i = parseInt(e); i < parseInt(n); i++)
                o += r.replace(/\[\s*i\s*\]/g, "[ " + i + " ]").replace(/UNROLLED_LOOP_INDEX/g, i);
            return o
        }
        function _a(t) {
            let e = "precision " + t.precision + " float;\nprecision " + t.precision + " int;";
            return "highp" === t.precision ? e += "\n#define HIGH_PRECISION" : "mediump" === t.precision ? e += "\n#define MEDIUM_PRECISION" : "lowp" === t.precision && (e += "\n#define LOW_PRECISION"),
            e
        }
        function xa(t, e, n, r) {
            const o = t.getContext()
              , l = n.defines;
            let c = n.vertexShader
              , h = n.fragmentShader;
            const d = function(t) {
                let e = "SHADOWMAP_TYPE_BASIC";
                return 1 === t.shadowMapType ? e = "SHADOWMAP_TYPE_PCF" : 2 === t.shadowMapType ? e = "SHADOWMAP_TYPE_PCF_SOFT" : 3 === t.shadowMapType && (e = "SHADOWMAP_TYPE_VSM"),
                e
            }(n)
              , f = function(t) {
                let e = "ENVMAP_TYPE_CUBE";
                if (t.envMap)
                    switch (t.envMapMode) {
                    case v:
                    case _:
                        e = "ENVMAP_TYPE_CUBE";
                        break;
                    case M:
                    case w:
                        e = "ENVMAP_TYPE_CUBE_UV"
                    }
                return e
            }(n)
              , m = function(t) {
                let e = "ENVMAP_MODE_REFLECTION";
                if (t.envMap)
                    switch (t.envMapMode) {
                    case _:
                    case w:
                        e = "ENVMAP_MODE_REFRACTION"
                    }
                return e
            }(n)
              , x = function(t) {
                let e = "ENVMAP_BLENDING_NONE";
                if (t.envMap)
                    switch (t.combine) {
                    case 0:
                        e = "ENVMAP_BLENDING_MULTIPLY";
                        break;
                    case 1:
                        e = "ENVMAP_BLENDING_MIX";
                        break;
                    case 2:
                        e = "ENVMAP_BLENDING_ADD"
                    }
                return e
            }(n)
              , y = t.gammaFactor > 0 ? t.gammaFactor : 1
              , S = n.isWebGL2 ? "" : function(t) {
                return [t.extensionDerivatives || t.envMapCubeUV || t.bumpMap || t.tangentSpaceNormalMap || t.clearcoatNormalMap || t.flatShading || "physical" === t.shaderID ? "#extension GL_OES_standard_derivatives : enable" : "", (t.extensionFragDepth || t.logarithmicDepthBuffer) && t.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "", t.extensionDrawBuffers && t.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "", (t.extensionShaderTextureLOD || t.envMap || t.transmission) && t.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(oa).join("\n")
            }(n)
              , T = function(t) {
                const e = [];
                for (const n in t) {
                    const r = t[n];
                    !1 !== r && e.push("#define " + n + " " + r)
                }
                return e.join("\n")
            }(l)
              , E = o.createProgram();
            let A, L, R = n.glslVersion ? "#version " + n.glslVersion + "\n" : "";
            n.isRawShaderMaterial ? (A = [T].filter(oa).join("\n"),
            A.length > 0 && (A += "\n"),
            L = [S, T].filter(oa).join("\n"),
            L.length > 0 && (L += "\n")) : (A = [_a(n), "#define SHADER_NAME " + n.shaderName, T, n.instancing ? "#define USE_INSTANCING" : "", n.instancingColor ? "#define USE_INSTANCING_COLOR" : "", n.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", "#define GAMMA_FACTOR " + y, "#define MAX_BONES " + n.maxBones, n.useFog && n.fog ? "#define USE_FOG" : "", n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "", n.map ? "#define USE_MAP" : "", n.envMap ? "#define USE_ENVMAP" : "", n.envMap ? "#define " + m : "", n.lightMap ? "#define USE_LIGHTMAP" : "", n.aoMap ? "#define USE_AOMAP" : "", n.emissiveMap ? "#define USE_EMISSIVEMAP" : "", n.bumpMap ? "#define USE_BUMPMAP" : "", n.normalMap ? "#define USE_NORMALMAP" : "", n.normalMap && n.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", n.normalMap && n.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", n.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", n.displacementMap && n.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", n.specularMap ? "#define USE_SPECULARMAP" : "", n.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "", n.specularColorMap ? "#define USE_SPECULARCOLORMAP" : "", n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", n.metalnessMap ? "#define USE_METALNESSMAP" : "", n.alphaMap ? "#define USE_ALPHAMAP" : "", n.transmission ? "#define USE_TRANSMISSION" : "", n.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", n.thicknessMap ? "#define USE_THICKNESSMAP" : "", n.sheenColorMap ? "#define USE_SHEENCOLORMAP" : "", n.sheenRoughnessMap ? "#define USE_SHEENROUGHNESSMAP" : "", n.vertexTangents ? "#define USE_TANGENT" : "", n.vertexColors ? "#define USE_COLOR" : "", n.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", n.vertexUvs ? "#define USE_UV" : "", n.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", n.flatShading ? "#define FLAT_SHADED" : "", n.skinning ? "#define USE_SKINNING" : "", n.useVertexTexture ? "#define BONE_TEXTURE" : "", n.morphTargets ? "#define USE_MORPHTARGETS" : "", n.morphNormals && !1 === n.flatShading ? "#define USE_MORPHNORMALS" : "", n.morphTargets && n.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "", n.morphTargets && n.isWebGL2 ? "#define MORPHTARGETS_COUNT " + n.morphTargetsCount : "", n.doubleSided ? "#define DOUBLE_SIDED" : "", n.flipSided ? "#define FLIP_SIDED" : "", n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", n.shadowMapEnabled ? "#define " + d : "", n.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", n.logarithmicDepthBuffer && n.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", "#ifdef USE_INSTANCING", "\tattribute mat4 instanceMatrix;", "#endif", "#ifdef USE_INSTANCING_COLOR", "\tattribute vec3 instanceColor;", "#endif", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_TANGENT", "\tattribute vec4 tangent;", "#endif", "#if defined( USE_COLOR_ALPHA )", "\tattribute vec4 color;", "#elif defined( USE_COLOR )", "\tattribute vec3 color;", "#endif", "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(oa).join("\n"),
            L = [S, _a(n), "#define SHADER_NAME " + n.shaderName, T, "#define GAMMA_FACTOR " + y, n.useFog && n.fog ? "#define USE_FOG" : "", n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "", n.map ? "#define USE_MAP" : "", n.matcap ? "#define USE_MATCAP" : "", n.envMap ? "#define USE_ENVMAP" : "", n.envMap ? "#define " + f : "", n.envMap ? "#define " + m : "", n.envMap ? "#define " + x : "", n.lightMap ? "#define USE_LIGHTMAP" : "", n.aoMap ? "#define USE_AOMAP" : "", n.emissiveMap ? "#define USE_EMISSIVEMAP" : "", n.bumpMap ? "#define USE_BUMPMAP" : "", n.normalMap ? "#define USE_NORMALMAP" : "", n.normalMap && n.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", n.normalMap && n.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", n.clearcoat ? "#define USE_CLEARCOAT" : "", n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", n.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", n.specularMap ? "#define USE_SPECULARMAP" : "", n.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "", n.specularColorMap ? "#define USE_SPECULARCOLORMAP" : "", n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", n.metalnessMap ? "#define USE_METALNESSMAP" : "", n.alphaMap ? "#define USE_ALPHAMAP" : "", n.alphaTest ? "#define USE_ALPHATEST" : "", n.sheen ? "#define USE_SHEEN" : "", n.sheenColorMap ? "#define USE_SHEENCOLORMAP" : "", n.sheenRoughnessMap ? "#define USE_SHEENROUGHNESSMAP" : "", n.transmission ? "#define USE_TRANSMISSION" : "", n.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", n.thicknessMap ? "#define USE_THICKNESSMAP" : "", n.vertexTangents ? "#define USE_TANGENT" : "", n.vertexColors || n.instancingColor ? "#define USE_COLOR" : "", n.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", n.vertexUvs ? "#define USE_UV" : "", n.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", n.gradientMap ? "#define USE_GRADIENTMAP" : "", n.flatShading ? "#define FLAT_SHADED" : "", n.doubleSided ? "#define DOUBLE_SIDED" : "", n.flipSided ? "#define FLIP_SIDED" : "", n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", n.shadowMapEnabled ? "#define " + d : "", n.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", n.physicallyCorrectLights ? "#define PHYSICALLY_CORRECT_LIGHTS" : "", n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", n.logarithmicDepthBuffer && n.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", (n.extensionShaderTextureLOD || n.envMap) && n.rendererExtensionShaderTextureLod ? "#define TEXTURE_LOD_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", 0 !== n.toneMapping ? "#define TONE_MAPPING" : "", 0 !== n.toneMapping ? ni.tonemapping_pars_fragment : "", 0 !== n.toneMapping ? sa("toneMapping", n.toneMapping) : "", n.dithering ? "#define DITHERING" : "", n.format === z ? "#define OPAQUE" : "", ni.encodings_pars_fragment, n.map ? ra("mapTexelToLinear", n.mapEncoding) : "", n.matcap ? ra("matcapTexelToLinear", n.matcapEncoding) : "", n.envMap ? ra("envMapTexelToLinear", n.envMapEncoding) : "", n.emissiveMap ? ra("emissiveMapTexelToLinear", n.emissiveMapEncoding) : "", n.specularColorMap ? ra("specularColorMapTexelToLinear", n.specularColorMapEncoding) : "", n.sheenColorMap ? ra("sheenColorMapTexelToLinear", n.sheenColorMapEncoding) : "", n.lightMap ? ra("lightMapTexelToLinear", n.lightMapEncoding) : "", aa("linearToOutputTexel", n.outputEncoding), n.depthPacking ? "#define DEPTH_PACKING " + n.depthPacking : "", "\n"].filter(oa).join("\n")),
            c = ua(c),
            c = la(c, n),
            c = ca(c, n),
            h = ua(h),
            h = la(h, n),
            h = ca(h, n),
            c = ma(c),
            h = ma(h),
            n.isWebGL2 && !0 !== n.isRawShaderMaterial && (R = "#version 300 es\n",
            A = ["precision mediump sampler2DArray;", "#define attribute in", "#define varying out", "#define texture2D texture"].join("\n") + "\n" + A,
            L = ["#define varying in", n.glslVersion === it ? "" : "out highp vec4 pc_fragColor;", n.glslVersion === it ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth", "#define texture2D texture", "#define textureCube texture", "#define texture2DProj textureProj", "#define texture2DLodEXT textureLod", "#define texture2DProjLodEXT textureProjLod", "#define textureCubeLodEXT textureLod", "#define texture2DGradEXT textureGrad", "#define texture2DProjGradEXT textureProjGrad", "#define textureCubeGradEXT textureGrad"].join("\n") + "\n" + L);
            const C = R + L + h
              , P = ta(o, 35633, R + A + c)
              , D = ta(o, 35632, C);
            if (o.attachShader(E, P),
            o.attachShader(E, D),
            void 0 !== n.index0AttributeName ? o.bindAttribLocation(E, 0, n.index0AttributeName) : !0 === n.morphTargets && o.bindAttribLocation(E, 0, "position"),
            o.linkProgram(E),
            t.debug.checkShaderErrors) {
                const t = o.getProgramInfoLog(E).trim()
                  , e = o.getShaderInfoLog(P).trim()
                  , n = o.getShaderInfoLog(D).trim();
                let r = !0
                  , l = !0;
                if (!1 === o.getProgramParameter(E, 35714)) {
                    r = !1;
                    const e = ia(o, P, "vertex")
                      , n = ia(o, D, "fragment");
                    console.error("THREE.WebGLProgram: Shader Error " + o.getError() + " - VALIDATE_STATUS " + o.getProgramParameter(E, 35715) + "\n\nProgram Info Log: " + t + "\n" + e + "\n" + n)
                } else
                    "" !== t ? console.warn("THREE.WebGLProgram: Program Info Log:", t) : "" !== e && "" !== n || (l = !1);
                l && (this.diagnostics = {
                    runnable: r,
                    programLog: t,
                    vertexShader: {
                        log: e,
                        prefix: A
                    },
                    fragmentShader: {
                        log: n,
                        prefix: L
                    }
                })
            }
            let N, I;
            return o.deleteShader(P),
            o.deleteShader(D),
            this.getUniforms = function() {
                return void 0 === N && (N = new $r(o,E)),
                N
            }
            ,
            this.getAttributes = function() {
                return void 0 === I && (I = function(t, e) {
                    const n = {}
                      , r = t.getProgramParameter(e, 35721);
                    for (let i = 0; i < r; i++) {
                        const r = t.getActiveAttrib(e, i)
                          , o = r.name;
                        let l = 1;
                        35674 === r.type && (l = 2),
                        35675 === r.type && (l = 3),
                        35676 === r.type && (l = 4),
                        n[o] = {
                            type: r.type,
                            location: t.getAttribLocation(e, o),
                            locationSize: l
                        }
                    }
                    return n
                }(o, E)),
                I
            }
            ,
            this.destroy = function() {
                r.releaseStatesOfProgram(this),
                o.deleteProgram(E),
                this.program = void 0
            }
            ,
            this.name = n.shaderName,
            this.id = ea++,
            this.cacheKey = e,
            this.usedTimes = 1,
            this.program = E,
            this.vertexShader = P,
            this.fragmentShader = D,
            this
        }
        function ya(t, e, n, r, o, l, c) {
            const h = []
              , d = o.isWebGL2
              , f = o.logarithmicDepthBuffer
              , m = o.floatVertexTextures
              , v = o.maxVertexUniforms
              , _ = o.vertexTextures;
            let x = o.precision;
            const y = {
                MeshDepthMaterial: "depth",
                MeshDistanceMaterial: "distanceRGBA",
                MeshNormalMaterial: "normal",
                MeshBasicMaterial: "basic",
                MeshLambertMaterial: "lambert",
                MeshPhongMaterial: "phong",
                MeshToonMaterial: "toon",
                MeshStandardMaterial: "physical",
                MeshPhysicalMaterial: "physical",
                MeshMatcapMaterial: "matcap",
                LineBasicMaterial: "basic",
                LineDashedMaterial: "dashed",
                PointsMaterial: "points",
                ShadowMaterial: "shadow",
                SpriteMaterial: "sprite"
            }
              , S = ["precision", "isWebGL2", "supportsVertexTextures", "outputEncoding", "instancing", "instancingColor", "map", "mapEncoding", "matcap", "matcapEncoding", "envMap", "envMapMode", "envMapEncoding", "envMapCubeUV", "lightMap", "lightMapEncoding", "aoMap", "emissiveMap", "emissiveMapEncoding", "bumpMap", "normalMap", "objectSpaceNormalMap", "tangentSpaceNormalMap", "clearcoat", "clearcoatMap", "clearcoatRoughnessMap", "clearcoatNormalMap", "displacementMap", "specularMap", , "roughnessMap", "metalnessMap", "gradientMap", "alphaMap", "alphaTest", "combine", "vertexColors", "vertexAlphas", "vertexTangents", "vertexUvs", "uvsVertexOnly", "fog", "useFog", "fogExp2", "flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning", "maxBones", "useVertexTexture", "morphTargets", "morphNormals", "morphTargetsCount", "premultipliedAlpha", "numDirLights", "numPointLights", "numSpotLights", "numHemiLights", "numRectAreaLights", "numDirLightShadows", "numPointLightShadows", "numSpotLightShadows", "shadowMapEnabled", "shadowMapType", "toneMapping", "physicallyCorrectLights", "doubleSided", "flipSided", "numClippingPlanes", "numClipIntersection", "depthPacking", "dithering", "format", "specularIntensityMap", "specularColorMap", "specularColorMapEncoding", "transmission", "transmissionMap", "thicknessMap", "sheen", "sheenColorMap", "sheenColorMapEncoding", "sheenRoughnessMap"];
            function T(map) {
                let t;
                return map && map.isTexture ? t = map.encoding : map && map.isWebGLRenderTarget ? (console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),
                t = map.texture.encoding) : t = J,
                d && map && map.isTexture && map.format === B && map.type === D && map.encoding === K && (t = J),
                t
            }
            return {
                getParameters: function(l, h, S, E, object) {
                    const A = E.fog
                      , L = l.isMeshStandardMaterial ? E.environment : null
                      , R = (l.isMeshStandardMaterial ? n : e).get(l.envMap || L)
                      , C = y[l.type]
                      , P = object.isSkinnedMesh ? function(object) {
                        const t = object.skeleton.bones;
                        if (m)
                            return 1024;
                        {
                            const e = v
                              , n = Math.floor((e - 20) / 4)
                              , r = Math.min(n, t.length);
                            return r < t.length ? (console.warn("THREE.WebGLRenderer: Skeleton has " + t.length + " bones. This GPU supports " + r + "."),
                            0) : r
                        }
                    }(object) : 0;
                    let D, N;
                    if (null !== l.precision && (x = o.getMaxPrecision(l.precision),
                    x !== l.precision && console.warn("THREE.WebGLProgram.getParameters:", l.precision, "not supported, using", x, "instead.")),
                    C) {
                        const t = ri[C];
                        D = t.vertexShader,
                        N = t.fragmentShader
                    } else
                        D = l.vertexShader,
                        N = l.fragmentShader;
                    const I = t.getRenderTarget()
                      , O = l.alphaTest > 0
                      , F = l.clearcoat > 0;
                    return {
                        isWebGL2: d,
                        shaderID: C,
                        shaderName: l.type,
                        vertexShader: D,
                        fragmentShader: N,
                        defines: l.defines,
                        isRawShaderMaterial: !0 === l.isRawShaderMaterial,
                        glslVersion: l.glslVersion,
                        precision: x,
                        instancing: !0 === object.isInstancedMesh,
                        instancingColor: !0 === object.isInstancedMesh && null !== object.instanceColor,
                        supportsVertexTextures: _,
                        outputEncoding: null !== I ? T(I.texture) : t.outputEncoding,
                        map: !!l.map,
                        mapEncoding: T(l.map),
                        matcap: !!l.matcap,
                        matcapEncoding: T(l.matcap),
                        envMap: !!R,
                        envMapMode: R && R.mapping,
                        envMapEncoding: T(R),
                        envMapCubeUV: !!R && (R.mapping === M || R.mapping === w),
                        lightMap: !!l.lightMap,
                        lightMapEncoding: T(l.lightMap),
                        aoMap: !!l.aoMap,
                        emissiveMap: !!l.emissiveMap,
                        emissiveMapEncoding: T(l.emissiveMap),
                        bumpMap: !!l.bumpMap,
                        normalMap: !!l.normalMap,
                        objectSpaceNormalMap: 1 === l.normalMapType,
                        tangentSpaceNormalMap: 0 === l.normalMapType,
                        clearcoat: F,
                        clearcoatMap: F && !!l.clearcoatMap,
                        clearcoatRoughnessMap: F && !!l.clearcoatRoughnessMap,
                        clearcoatNormalMap: F && !!l.clearcoatNormalMap,
                        displacementMap: !!l.displacementMap,
                        roughnessMap: !!l.roughnessMap,
                        metalnessMap: !!l.metalnessMap,
                        specularMap: !!l.specularMap,
                        specularIntensityMap: !!l.specularIntensityMap,
                        specularColorMap: !!l.specularColorMap,
                        specularColorMapEncoding: T(l.specularColorMap),
                        alphaMap: !!l.alphaMap,
                        alphaTest: O,
                        gradientMap: !!l.gradientMap,
                        sheen: l.sheen > 0,
                        sheenColorMap: !!l.sheenColorMap,
                        sheenColorMapEncoding: T(l.sheenColorMap),
                        sheenRoughnessMap: !!l.sheenRoughnessMap,
                        transmission: l.transmission > 0,
                        transmissionMap: !!l.transmissionMap,
                        thicknessMap: !!l.thicknessMap,
                        combine: l.combine,
                        vertexTangents: !!l.normalMap && !!object.geometry && !!object.geometry.attributes.tangent,
                        vertexColors: l.vertexColors,
                        vertexAlphas: !0 === l.vertexColors && !!object.geometry && !!object.geometry.attributes.color && 4 === object.geometry.attributes.color.itemSize,
                        vertexUvs: !!l.map || !!l.bumpMap || !!l.normalMap || !!l.specularMap || !!l.alphaMap || !!l.emissiveMap || !!l.roughnessMap || !!l.metalnessMap || !!l.clearcoatMap || !!l.clearcoatRoughnessMap || !!l.clearcoatNormalMap || !!l.displacementMap || !!l.transmissionMap || !!l.thicknessMap || !!l.specularIntensityMap || !!l.specularColorMap || !!l.sheenColorMap || l.sheenRoughnessMap,
                        uvsVertexOnly: !(l.map || l.bumpMap || l.normalMap || l.specularMap || l.alphaMap || l.emissiveMap || l.roughnessMap || l.metalnessMap || l.clearcoatNormalMap || l.transmission > 0 || l.transmissionMap || l.thicknessMap || l.specularIntensityMap || l.specularColorMap || !!l.sheen > 0 || l.sheenColorMap || l.sheenRoughnessMap || !l.displacementMap),
                        fog: !!A,
                        useFog: l.fog,
                        fogExp2: A && A.isFogExp2,
                        flatShading: !!l.flatShading,
                        sizeAttenuation: l.sizeAttenuation,
                        logarithmicDepthBuffer: f,
                        skinning: !0 === object.isSkinnedMesh && P > 0,
                        maxBones: P,
                        useVertexTexture: m,
                        morphTargets: !!object.geometry && !!object.geometry.morphAttributes.position,
                        morphNormals: !!object.geometry && !!object.geometry.morphAttributes.normal,
                        morphTargetsCount: object.geometry && object.geometry.morphAttributes.position ? object.geometry.morphAttributes.position.length : 0,
                        numDirLights: h.directional.length,
                        numPointLights: h.point.length,
                        numSpotLights: h.spot.length,
                        numRectAreaLights: h.rectArea.length,
                        numHemiLights: h.hemi.length,
                        numDirLightShadows: h.directionalShadowMap.length,
                        numPointLightShadows: h.pointShadowMap.length,
                        numSpotLightShadows: h.spotShadowMap.length,
                        numClippingPlanes: c.numPlanes,
                        numClipIntersection: c.numIntersection,
                        format: l.format,
                        dithering: l.dithering,
                        shadowMapEnabled: t.shadowMap.enabled && S.length > 0,
                        shadowMapType: t.shadowMap.type,
                        toneMapping: l.toneMapped ? t.toneMapping : 0,
                        physicallyCorrectLights: t.physicallyCorrectLights,
                        premultipliedAlpha: l.premultipliedAlpha,
                        doubleSided: 2 === l.side,
                        flipSided: 1 === l.side,
                        depthPacking: void 0 !== l.depthPacking && l.depthPacking,
                        index0AttributeName: l.index0AttributeName,
                        extensionDerivatives: l.extensions && l.extensions.derivatives,
                        extensionFragDepth: l.extensions && l.extensions.fragDepth,
                        extensionDrawBuffers: l.extensions && l.extensions.drawBuffers,
                        extensionShaderTextureLOD: l.extensions && l.extensions.shaderTextureLOD,
                        rendererExtensionFragDepth: d || r.has("EXT_frag_depth"),
                        rendererExtensionDrawBuffers: d || r.has("WEBGL_draw_buffers"),
                        rendererExtensionShaderTextureLod: d || r.has("EXT_shader_texture_lod"),
                        customProgramCacheKey: l.customProgramCacheKey()
                    }
                },
                getProgramCacheKey: function(e) {
                    const n = [];
                    if (e.shaderID ? n.push(e.shaderID) : (n.push(Mt(e.fragmentShader)),
                    n.push(Mt(e.vertexShader))),
                    void 0 !== e.defines)
                        for (const t in e.defines)
                            n.push(t),
                            n.push(e.defines[t]);
                    if (!1 === e.isRawShaderMaterial) {
                        for (let i = 0; i < S.length; i++)
                            n.push(e[S[i]]);
                        n.push(t.outputEncoding),
                        n.push(t.gammaFactor)
                    }
                    return n.push(e.customProgramCacheKey),
                    n.join()
                },
                getUniforms: function(t) {
                    const e = y[t.type];
                    let n;
                    if (e) {
                        const t = ri[e];
                        n = zn.clone(t.uniforms)
                    } else
                        n = t.uniforms;
                    return n
                },
                acquireProgram: function(e, n) {
                    let r;
                    for (let p = 0, t = h.length; p < t; p++) {
                        const t = h[p];
                        if (t.cacheKey === n) {
                            r = t,
                            ++r.usedTimes;
                            break
                        }
                    }
                    return void 0 === r && (r = new xa(t,n,e,l),
                    h.push(r)),
                    r
                },
                releaseProgram: function(t) {
                    if (0 == --t.usedTimes) {
                        const i = h.indexOf(t);
                        h[i] = h[h.length - 1],
                        h.pop(),
                        t.destroy()
                    }
                },
                programs: h
            }
        }
        function Ma() {
            let t = new WeakMap;
            return {
                get: function(object) {
                    let map = t.get(object);
                    return void 0 === map && (map = {},
                    t.set(object, map)),
                    map
                },
                remove: function(object) {
                    t.delete(object)
                },
                update: function(object, e, n) {
                    t.get(object)[e] = n
                },
                dispose: function() {
                    t = new WeakMap
                }
            }
        }
        function ba(a, b) {
            return a.groupOrder !== b.groupOrder ? a.groupOrder - b.groupOrder : a.renderOrder !== b.renderOrder ? a.renderOrder - b.renderOrder : a.program !== b.program ? a.program.id - b.program.id : a.material.id !== b.material.id ? a.material.id - b.material.id : a.z !== b.z ? a.z - b.z : a.id - b.id
        }
        function wa(a, b) {
            return a.groupOrder !== b.groupOrder ? a.groupOrder - b.groupOrder : a.renderOrder !== b.renderOrder ? a.renderOrder - b.renderOrder : a.z !== b.z ? b.z - a.z : a.id - b.id
        }
        function Sa(t) {
            const e = [];
            let n = 0;
            const r = []
              , o = []
              , l = []
              , c = {
                id: -1
            };
            function h(object, r, o, l, h, d) {
                let f = e[n];
                const m = t.get(o);
                return void 0 === f ? (f = {
                    id: object.id,
                    object: object,
                    geometry: r,
                    material: o,
                    program: m.program || c,
                    groupOrder: l,
                    renderOrder: object.renderOrder,
                    z: h,
                    group: d
                },
                e[n] = f) : (f.id = object.id,
                f.object = object,
                f.geometry = r,
                f.material = o,
                f.program = m.program || c,
                f.groupOrder = l,
                f.renderOrder = object.renderOrder,
                f.z = h,
                f.group = d),
                n++,
                f
            }
            return {
                opaque: r,
                transmissive: o,
                transparent: l,
                init: function() {
                    n = 0,
                    r.length = 0,
                    o.length = 0,
                    l.length = 0
                },
                push: function(object, t, e, n, c, d) {
                    const f = h(object, t, e, n, c, d);
                    e.transmission > 0 ? o.push(f) : !0 === e.transparent ? l.push(f) : r.push(f)
                },
                unshift: function(object, t, e, n, c, d) {
                    const f = h(object, t, e, n, c, d);
                    e.transmission > 0 ? o.unshift(f) : !0 === e.transparent ? l.unshift(f) : r.unshift(f)
                },
                finish: function() {
                    for (let i = n, t = e.length; i < t; i++) {
                        const t = e[i];
                        if (null === t.id)
                            break;
                        t.id = null,
                        t.object = null,
                        t.geometry = null,
                        t.material = null,
                        t.program = null,
                        t.group = null
                    }
                },
                sort: function(t, e) {
                    r.length > 1 && r.sort(t || ba),
                    o.length > 1 && o.sort(e || wa),
                    l.length > 1 && l.sort(e || wa)
                }
            }
        }
        function Ta(t) {
            let e = new WeakMap;
            return {
                get: function(n, r) {
                    let o;
                    return !1 === e.has(n) ? (o = new Sa(t),
                    e.set(n, [o])) : r >= e.get(n).length ? (o = new Sa(t),
                    e.get(n).push(o)) : o = e.get(n)[r],
                    o
                },
                dispose: function() {
                    e = new WeakMap
                }
            }
        }
        function Ea() {
            const t = {};
            return {
                get: function(e) {
                    if (void 0 !== t[e.id])
                        return t[e.id];
                    let n;
                    switch (e.type) {
                    case "DirectionalLight":
                        n = {
                            direction: new Pt,
                            color: new $e
                        };
                        break;
                    case "SpotLight":
                        n = {
                            position: new Pt,
                            direction: new Pt,
                            color: new $e,
                            distance: 0,
                            coneCos: 0,
                            penumbraCos: 0,
                            decay: 0
                        };
                        break;
                    case "PointLight":
                        n = {
                            position: new Pt,
                            color: new $e,
                            distance: 0,
                            decay: 0
                        };
                        break;
                    case "HemisphereLight":
                        n = {
                            direction: new Pt,
                            skyColor: new $e,
                            groundColor: new $e
                        };
                        break;
                    case "RectAreaLight":
                        n = {
                            color: new $e,
                            position: new Pt,
                            halfWidth: new Pt,
                            halfHeight: new Pt
                        }
                    }
                    return t[e.id] = n,
                    n
                }
            }
        }
        let Aa = 0;
        function La(t, e) {
            return (e.castShadow ? 1 : 0) - (t.castShadow ? 1 : 0)
        }
        function Ra(t, e) {
            const n = new Ea
              , r = function() {
                const t = {};
                return {
                    get: function(e) {
                        if (void 0 !== t[e.id])
                            return t[e.id];
                        let n;
                        switch (e.type) {
                        case "DirectionalLight":
                        case "SpotLight":
                            n = {
                                shadowBias: 0,
                                shadowNormalBias: 0,
                                shadowRadius: 1,
                                shadowMapSize: new vt
                            };
                            break;
                        case "PointLight":
                            n = {
                                shadowBias: 0,
                                shadowNormalBias: 0,
                                shadowRadius: 1,
                                shadowMapSize: new vt,
                                shadowCameraNear: 1,
                                shadowCameraFar: 1e3
                            }
                        }
                        return t[e.id] = n,
                        n
                    }
                }
            }()
              , o = {
                version: 0,
                hash: {
                    directionalLength: -1,
                    pointLength: -1,
                    spotLength: -1,
                    rectAreaLength: -1,
                    hemiLength: -1,
                    numDirectionalShadows: -1,
                    numPointShadows: -1,
                    numSpotShadows: -1
                },
                ambient: [0, 0, 0],
                probe: [],
                directional: [],
                directionalShadow: [],
                directionalShadowMap: [],
                directionalShadowMatrix: [],
                spot: [],
                spotShadow: [],
                spotShadowMap: [],
                spotShadowMatrix: [],
                rectArea: [],
                rectAreaLTC1: null,
                rectAreaLTC2: null,
                point: [],
                pointShadow: [],
                pointShadowMap: [],
                pointShadowMatrix: [],
                hemi: []
            };
            for (let i = 0; i < 9; i++)
                o.probe.push(new Pt);
            const l = new Pt
              , c = new le
              , h = new le;
            return {
                setup: function(l, c) {
                    let h = 0
                      , g = 0
                      , b = 0;
                    for (let i = 0; i < 9; i++)
                        o.probe[i].set(0, 0, 0);
                    let d = 0
                      , f = 0
                      , m = 0
                      , v = 0
                      , _ = 0
                      , x = 0
                      , y = 0
                      , M = 0;
                    l.sort(La);
                    const w = !0 !== c ? Math.PI : 1;
                    for (let i = 0, t = l.length; i < t; i++) {
                        const t = l[i]
                          , e = t.color
                          , c = t.intensity
                          , S = t.distance
                          , T = t.shadow && t.shadow.map ? t.shadow.map.texture : null;
                        if (t.isAmbientLight)
                            h += e.r * c * w,
                            g += e.g * c * w,
                            b += e.b * c * w;
                        else if (t.isLightProbe)
                            for (let e = 0; e < 9; e++)
                                o.probe[e].addScaledVector(t.sh.coefficients[e], c);
                        else if (t.isDirectionalLight) {
                            const e = n.get(t);
                            if (e.color.copy(t.color).multiplyScalar(t.intensity * w),
                            t.castShadow) {
                                const shadow = t.shadow
                                  , e = r.get(t);
                                e.shadowBias = shadow.bias,
                                e.shadowNormalBias = shadow.normalBias,
                                e.shadowRadius = shadow.radius,
                                e.shadowMapSize = shadow.mapSize,
                                o.directionalShadow[d] = e,
                                o.directionalShadowMap[d] = T,
                                o.directionalShadowMatrix[d] = t.shadow.matrix,
                                x++
                            }
                            o.directional[d] = e,
                            d++
                        } else if (t.isSpotLight) {
                            const l = n.get(t);
                            if (l.position.setFromMatrixPosition(t.matrixWorld),
                            l.color.copy(e).multiplyScalar(c * w),
                            l.distance = S,
                            l.coneCos = Math.cos(t.angle),
                            l.penumbraCos = Math.cos(t.angle * (1 - t.penumbra)),
                            l.decay = t.decay,
                            t.castShadow) {
                                const shadow = t.shadow
                                  , e = r.get(t);
                                e.shadowBias = shadow.bias,
                                e.shadowNormalBias = shadow.normalBias,
                                e.shadowRadius = shadow.radius,
                                e.shadowMapSize = shadow.mapSize,
                                o.spotShadow[m] = e,
                                o.spotShadowMap[m] = T,
                                o.spotShadowMatrix[m] = t.shadow.matrix,
                                M++
                            }
                            o.spot[m] = l,
                            m++
                        } else if (t.isRectAreaLight) {
                            const r = n.get(t);
                            r.color.copy(e).multiplyScalar(c),
                            r.halfWidth.set(.5 * t.width, 0, 0),
                            r.halfHeight.set(0, .5 * t.height, 0),
                            o.rectArea[v] = r,
                            v++
                        } else if (t.isPointLight) {
                            const e = n.get(t);
                            if (e.color.copy(t.color).multiplyScalar(t.intensity * w),
                            e.distance = t.distance,
                            e.decay = t.decay,
                            t.castShadow) {
                                const shadow = t.shadow
                                  , e = r.get(t);
                                e.shadowBias = shadow.bias,
                                e.shadowNormalBias = shadow.normalBias,
                                e.shadowRadius = shadow.radius,
                                e.shadowMapSize = shadow.mapSize,
                                e.shadowCameraNear = shadow.camera.near,
                                e.shadowCameraFar = shadow.camera.far,
                                o.pointShadow[f] = e,
                                o.pointShadowMap[f] = T,
                                o.pointShadowMatrix[f] = t.shadow.matrix,
                                y++
                            }
                            o.point[f] = e,
                            f++
                        } else if (t.isHemisphereLight) {
                            const e = n.get(t);
                            e.skyColor.copy(t.color).multiplyScalar(c * w),
                            e.groundColor.copy(t.groundColor).multiplyScalar(c * w),
                            o.hemi[_] = e,
                            _++
                        }
                    }
                    v > 0 && (e.isWebGL2 || !0 === t.has("OES_texture_float_linear") ? (o.rectAreaLTC1 = ii.LTC_FLOAT_1,
                    o.rectAreaLTC2 = ii.LTC_FLOAT_2) : !0 === t.has("OES_texture_half_float_linear") ? (o.rectAreaLTC1 = ii.LTC_HALF_1,
                    o.rectAreaLTC2 = ii.LTC_HALF_2) : console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),
                    o.ambient[0] = h,
                    o.ambient[1] = g,
                    o.ambient[2] = b;
                    const S = o.hash;
                    S.directionalLength === d && S.pointLength === f && S.spotLength === m && S.rectAreaLength === v && S.hemiLength === _ && S.numDirectionalShadows === x && S.numPointShadows === y && S.numSpotShadows === M || (o.directional.length = d,
                    o.spot.length = m,
                    o.rectArea.length = v,
                    o.point.length = f,
                    o.hemi.length = _,
                    o.directionalShadow.length = x,
                    o.directionalShadowMap.length = x,
                    o.pointShadow.length = y,
                    o.pointShadowMap.length = y,
                    o.spotShadow.length = M,
                    o.spotShadowMap.length = M,
                    o.directionalShadowMatrix.length = x,
                    o.pointShadowMatrix.length = y,
                    o.spotShadowMatrix.length = M,
                    S.directionalLength = d,
                    S.pointLength = f,
                    S.spotLength = m,
                    S.rectAreaLength = v,
                    S.hemiLength = _,
                    S.numDirectionalShadows = x,
                    S.numPointShadows = y,
                    S.numSpotShadows = M,
                    o.version = Aa++)
                },
                setupView: function(t, e) {
                    let n = 0
                      , r = 0
                      , d = 0
                      , f = 0
                      , m = 0;
                    const v = e.matrixWorldInverse;
                    for (let i = 0, e = t.length; i < e; i++) {
                        const e = t[i];
                        if (e.isDirectionalLight) {
                            const t = o.directional[n];
                            t.direction.setFromMatrixPosition(e.matrixWorld),
                            l.setFromMatrixPosition(e.target.matrixWorld),
                            t.direction.sub(l),
                            t.direction.transformDirection(v),
                            n++
                        } else if (e.isSpotLight) {
                            const t = o.spot[d];
                            t.position.setFromMatrixPosition(e.matrixWorld),
                            t.position.applyMatrix4(v),
                            t.direction.setFromMatrixPosition(e.matrixWorld),
                            l.setFromMatrixPosition(e.target.matrixWorld),
                            t.direction.sub(l),
                            t.direction.transformDirection(v),
                            d++
                        } else if (e.isRectAreaLight) {
                            const t = o.rectArea[f];
                            t.position.setFromMatrixPosition(e.matrixWorld),
                            t.position.applyMatrix4(v),
                            h.identity(),
                            c.copy(e.matrixWorld),
                            c.premultiply(v),
                            h.extractRotation(c),
                            t.halfWidth.set(.5 * e.width, 0, 0),
                            t.halfHeight.set(0, .5 * e.height, 0),
                            t.halfWidth.applyMatrix4(h),
                            t.halfHeight.applyMatrix4(h),
                            f++
                        } else if (e.isPointLight) {
                            const t = o.point[r];
                            t.position.setFromMatrixPosition(e.matrixWorld),
                            t.position.applyMatrix4(v),
                            r++
                        } else if (e.isHemisphereLight) {
                            const t = o.hemi[m];
                            t.direction.setFromMatrixPosition(e.matrixWorld),
                            t.direction.transformDirection(v),
                            t.direction.normalize(),
                            m++
                        }
                    }
                },
                state: o
            }
        }
        function Ca(t, e) {
            const n = new Ra(t,e)
              , r = []
              , o = [];
            return {
                init: function() {
                    r.length = 0,
                    o.length = 0
                },
                state: {
                    lightsArray: r,
                    shadowsArray: o,
                    lights: n
                },
                setupLights: function(t) {
                    n.setup(r, t)
                },
                setupLightsView: function(t) {
                    n.setupView(r, t)
                },
                pushLight: function(t) {
                    r.push(t)
                },
                pushShadow: function(t) {
                    o.push(t)
                }
            }
        }
        function Pa(t, e) {
            let n = new WeakMap;
            return {
                get: function(r, o=0) {
                    let l;
                    return !1 === n.has(r) ? (l = new Ca(t,e),
                    n.set(r, [l])) : o >= n.get(r).length ? (l = new Ca(t,e),
                    n.get(r).push(l)) : l = n.get(r)[o],
                    l
                },
                dispose: function() {
                    n = new WeakMap
                }
            }
        }
        class Da extends Xe {
            constructor(t) {
                super(),
                this.type = "MeshDepthMaterial",
                this.depthPacking = 3200,
                this.map = null,
                this.alphaMap = null,
                this.displacementMap = null,
                this.displacementScale = 1,
                this.displacementBias = 0,
                this.wireframe = !1,
                this.wireframeLinewidth = 1,
                this.fog = !1,
                this.setValues(t)
            }
            copy(source) {
                return super.copy(source),
                this.depthPacking = source.depthPacking,
                this.map = source.map,
                this.alphaMap = source.alphaMap,
                this.displacementMap = source.displacementMap,
                this.displacementScale = source.displacementScale,
                this.displacementBias = source.displacementBias,
                this.wireframe = source.wireframe,
                this.wireframeLinewidth = source.wireframeLinewidth,
                this
            }
        }
        Da.prototype.isMeshDepthMaterial = !0;
        class Na extends Xe {
            constructor(t) {
                super(),
                this.type = "MeshDistanceMaterial",
                this.referencePosition = new Pt,
                this.nearDistance = 1,
                this.farDistance = 1e3,
                this.map = null,
                this.alphaMap = null,
                this.displacementMap = null,
                this.displacementScale = 1,
                this.displacementBias = 0,
                this.fog = !1,
                this.setValues(t)
            }
            copy(source) {
                return super.copy(source),
                this.referencePosition.copy(source.referencePosition),
                this.nearDistance = source.nearDistance,
                this.farDistance = source.farDistance,
                this.map = source.map,
                this.alphaMap = source.alphaMap,
                this.displacementMap = source.displacementMap,
                this.displacementScale = source.displacementScale,
                this.displacementBias = source.displacementBias,
                this
            }
        }
        Na.prototype.isMeshDistanceMaterial = !0;
        function Ia(t, e, n) {
            let r = new Qn;
            const o = new vt
              , l = new vt
              , c = new At
              , h = new Da({
                depthPacking: 3201
            })
              , d = new Na
              , f = {}
              , m = n.maxTextureSize
              , v = {
                0: 1,
                1: 0,
                2: 2
            }
              , _ = new Bn({
                defines: {
                    VSM_SAMPLES: 8
                },
                uniforms: {
                    shadow_pass: {
                        value: null
                    },
                    resolution: {
                        value: new vt
                    },
                    radius: {
                        value: 4
                    }
                },
                vertexShader: "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",
                fragmentShader: "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"
            })
              , x = _.clone();
            x.defines.HORIZONTAL_PASS = 1;
            const y = new mn;
            y.setAttribute("position", new rn(new Float32Array([-1, -1, .5, 3, -1, .5, -1, 3, .5]),3));
            const M = new Nn(y,_)
              , w = this;
            function S(shadow, n) {
                const r = e.update(M);
                _.defines.VSM_SAMPLES !== shadow.blurSamples && (_.defines.VSM_SAMPLES = shadow.blurSamples,
                x.defines.VSM_SAMPLES = shadow.blurSamples,
                _.needsUpdate = !0,
                x.needsUpdate = !0),
                _.uniforms.shadow_pass.value = shadow.map.texture,
                _.uniforms.resolution.value = shadow.mapSize,
                _.uniforms.radius.value = shadow.radius,
                t.setRenderTarget(shadow.mapPass),
                t.clear(),
                t.renderBufferDirect(n, null, r, _, M, null),
                x.uniforms.shadow_pass.value = shadow.mapPass.texture,
                x.uniforms.resolution.value = shadow.mapSize,
                x.uniforms.radius.value = shadow.radius,
                t.setRenderTarget(shadow.map),
                t.clear(),
                t.renderBufferDirect(n, null, r, x, M, null)
            }
            function T(object, e, n, r, o, l, c) {
                let m = null;
                const _ = !0 === r.isPointLight ? object.customDistanceMaterial : object.customDepthMaterial;
                if (m = void 0 !== _ ? _ : !0 === r.isPointLight ? d : h,
                t.localClippingEnabled && !0 === n.clipShadows && 0 !== n.clippingPlanes.length || n.displacementMap && 0 !== n.displacementScale || n.alphaMap && n.alphaTest > 0) {
                    const t = m.uuid
                      , e = n.uuid;
                    let r = f[t];
                    void 0 === r && (r = {},
                    f[t] = r);
                    let o = r[e];
                    void 0 === o && (o = m.clone(),
                    r[e] = o),
                    m = o
                }
                return m.visible = n.visible,
                m.wireframe = n.wireframe,
                m.side = 3 === c ? null !== n.shadowSide ? n.shadowSide : n.side : null !== n.shadowSide ? n.shadowSide : v[n.side],
                m.alphaMap = n.alphaMap,
                m.alphaTest = n.alphaTest,
                m.clipShadows = n.clipShadows,
                m.clippingPlanes = n.clippingPlanes,
                m.clipIntersection = n.clipIntersection,
                m.displacementMap = n.displacementMap,
                m.displacementScale = n.displacementScale,
                m.displacementBias = n.displacementBias,
                m.wireframeLinewidth = n.wireframeLinewidth,
                m.linewidth = n.linewidth,
                !0 === r.isPointLight && !0 === m.isMeshDistanceMaterial && (m.referencePosition.setFromMatrixPosition(r.matrixWorld),
                m.nearDistance = o,
                m.farDistance = l),
                m
            }
            function E(object, n, o, l, c) {
                if (!1 === object.visible)
                    return;
                if (object.layers.test(n.layers) && (object.isMesh || object.isLine || object.isPoints) && (object.castShadow || object.receiveShadow && 3 === c) && (!object.frustumCulled || r.intersectsObject(object))) {
                    object.modelViewMatrix.multiplyMatrices(o.matrixWorldInverse, object.matrixWorld);
                    const n = e.update(object)
                      , r = object.material;
                    if (Array.isArray(r)) {
                        const e = n.groups;
                        for (let h = 0, d = e.length; h < d; h++) {
                            const d = e[h]
                              , f = r[d.materialIndex];
                            if (f && f.visible) {
                                const e = T(object, 0, f, l, o.near, o.far, c);
                                t.renderBufferDirect(o, null, n, e, object, d)
                            }
                        }
                    } else if (r.visible) {
                        const e = T(object, 0, r, l, o.near, o.far, c);
                        t.renderBufferDirect(o, null, n, e, object, null)
                    }
                }
                const h = object.children;
                for (let i = 0, t = h.length; i < t; i++)
                    E(h[i], n, o, l, c)
            }
            this.enabled = !1,
            this.autoUpdate = !0,
            this.needsUpdate = !1,
            this.type = 1,
            this.render = function(e, n, h) {
                if (!1 === w.enabled)
                    return;
                if (!1 === w.autoUpdate && !1 === w.needsUpdate)
                    return;
                if (0 === e.length)
                    return;
                const d = t.getRenderTarget()
                  , f = t.getActiveCubeFace()
                  , v = t.getActiveMipmapLevel()
                  , _ = t.state;
                _.setBlending(0),
                _.buffers.color.setClear(1, 1, 1, 1),
                _.buffers.depth.setTest(!0),
                _.setScissorTest(!1);
                for (let i = 0, d = e.length; i < d; i++) {
                    const d = e[i]
                      , shadow = d.shadow;
                    if (void 0 === shadow) {
                        console.warn("THREE.WebGLShadowMap:", d, "has no shadow.");
                        continue
                    }
                    if (!1 === shadow.autoUpdate && !1 === shadow.needsUpdate)
                        continue;
                    o.copy(shadow.mapSize);
                    const f = shadow.getFrameExtents();
                    if (o.multiply(f),
                    l.copy(shadow.mapSize),
                    (o.x > m || o.y > m) && (o.x > m && (l.x = Math.floor(m / f.x),
                    o.x = l.x * f.x,
                    shadow.mapSize.x = l.x),
                    o.y > m && (l.y = Math.floor(m / f.y),
                    o.y = l.y * f.y,
                    shadow.mapSize.y = l.y)),
                    null === shadow.map && !shadow.isPointLightShadow && 3 === this.type) {
                        const t = {
                            minFilter: C,
                            magFilter: C,
                            format: B
                        };
                        shadow.map = new Lt(o.x,o.y,t),
                        shadow.map.texture.name = d.name + ".shadowMap",
                        shadow.mapPass = new Lt(o.x,o.y,t),
                        shadow.camera.updateProjectionMatrix()
                    }
                    if (null === shadow.map) {
                        const t = {
                            minFilter: A,
                            magFilter: A,
                            format: B
                        };
                        shadow.map = new Lt(o.x,o.y,t),
                        shadow.map.texture.name = d.name + ".shadowMap",
                        shadow.camera.updateProjectionMatrix()
                    }
                    t.setRenderTarget(shadow.map),
                    t.clear();
                    const v = shadow.getViewportCount();
                    for (let t = 0; t < v; t++) {
                        const e = shadow.getViewport(t);
                        c.set(l.x * e.x, l.y * e.y, l.x * e.z, l.y * e.w),
                        _.viewport(c),
                        shadow.updateMatrices(d, t),
                        r = shadow.getFrustum(),
                        E(n, h, shadow.camera, d, this.type)
                    }
                    shadow.isPointLightShadow || 3 !== this.type || S(shadow, h),
                    shadow.needsUpdate = !1
                }
                w.needsUpdate = !1,
                t.setRenderTarget(d, f, v)
            }
        }
        function Oa(t, e, n) {
            const r = n.isWebGL2;
            const o = new function() {
                let e = !1;
                const n = new At;
                let r = null;
                const o = new At(0,0,0,0);
                return {
                    setMask: function(n) {
                        r === n || e || (t.colorMask(n, n, n, n),
                        r = n)
                    },
                    setLocked: function(t) {
                        e = t
                    },
                    setClear: function(e, g, b, a, r) {
                        !0 === r && (e *= a,
                        g *= a,
                        b *= a),
                        n.set(e, g, b, a),
                        !1 === o.equals(n) && (t.clearColor(e, g, b, a),
                        o.copy(n))
                    },
                    reset: function() {
                        e = !1,
                        r = null,
                        o.set(-1, 0, 0, 0)
                    }
                }
            }
              , l = new function() {
                let e = !1
                  , n = null
                  , r = null
                  , o = null;
                return {
                    setTest: function(t) {
                        t ? j(2929) : X(2929)
                    },
                    setMask: function(r) {
                        n === r || e || (t.depthMask(r),
                        n = r)
                    },
                    setFunc: function(e) {
                        if (r !== e) {
                            if (e)
                                switch (e) {
                                case 0:
                                    t.depthFunc(512);
                                    break;
                                case 1:
                                    t.depthFunc(519);
                                    break;
                                case 2:
                                    t.depthFunc(513);
                                    break;
                                case 3:
                                default:
                                    t.depthFunc(515);
                                    break;
                                case 4:
                                    t.depthFunc(514);
                                    break;
                                case 5:
                                    t.depthFunc(518);
                                    break;
                                case 6:
                                    t.depthFunc(516);
                                    break;
                                case 7:
                                    t.depthFunc(517)
                                }
                            else
                                t.depthFunc(515);
                            r = e
                        }
                    },
                    setLocked: function(t) {
                        e = t
                    },
                    setClear: function(e) {
                        o !== e && (t.clearDepth(e),
                        o = e)
                    },
                    reset: function() {
                        e = !1,
                        n = null,
                        r = null,
                        o = null
                    }
                }
            }
              , c = new function() {
                let e = !1
                  , n = null
                  , r = null
                  , o = null
                  , l = null
                  , c = null
                  , h = null
                  , d = null
                  , f = null;
                return {
                    setTest: function(t) {
                        e || (t ? j(2960) : X(2960))
                    },
                    setMask: function(r) {
                        n === r || e || (t.stencilMask(r),
                        n = r)
                    },
                    setFunc: function(e, n, c) {
                        r === e && o === n && l === c || (t.stencilFunc(e, n, c),
                        r = e,
                        o = n,
                        l = c)
                    },
                    setOp: function(e, n, r) {
                        c === e && h === n && d === r || (t.stencilOp(e, n, r),
                        c = e,
                        h = n,
                        d = r)
                    },
                    setLocked: function(t) {
                        e = t
                    },
                    setClear: function(e) {
                        f !== e && (t.clearStencil(e),
                        f = e)
                    },
                    reset: function() {
                        e = !1,
                        n = null,
                        r = null,
                        o = null,
                        l = null,
                        c = null,
                        h = null,
                        d = null,
                        f = null
                    }
                }
            }
            ;
            let h = {}
              , d = null
              , f = {}
              , v = null
              , _ = !1
              , x = null
              , y = null
              , M = null
              , w = null
              , S = null
              , T = null
              , E = null
              , A = !1
              , L = null
              , R = null
              , C = null
              , P = null
              , D = null;
            const N = t.getParameter(35661);
            let I = !1
              , O = 0;
            const F = t.getParameter(7938);
            -1 !== F.indexOf("WebGL") ? (O = parseFloat(/^WebGL (\d)/.exec(F)[1]),
            I = O >= 1) : -1 !== F.indexOf("OpenGL ES") && (O = parseFloat(/^OpenGL ES (\d)/.exec(F)[1]),
            I = O >= 2);
            let U = null
              , z = {};
            const B = t.getParameter(3088)
              , G = t.getParameter(2978)
              , H = (new At).fromArray(B)
              , k = (new At).fromArray(G);
            function V(e, n, r) {
                const data = new Uint8Array(4)
                  , o = t.createTexture();
                t.bindTexture(e, o),
                t.texParameteri(e, 10241, 9728),
                t.texParameteri(e, 10240, 9728);
                for (let i = 0; i < r; i++)
                    t.texImage2D(n + i, 0, 6408, 1, 1, 0, 6408, 5121, data);
                return o
            }
            const W = {};
            function j(e) {
                !0 !== h[e] && (t.enable(e),
                h[e] = !0)
            }
            function X(e) {
                !1 !== h[e] && (t.disable(e),
                h[e] = !1)
            }
            W[3553] = V(3553, 3553, 1),
            W[34067] = V(34067, 34069, 6),
            o.setClear(0, 0, 0, 1),
            l.setClear(1),
            c.setClear(0),
            j(2929),
            l.setFunc(3),
            K(!1),
            Q(1),
            j(2884),
            J(0);
            const Y = {
                [m]: 32774,
                101: 32778,
                102: 32779
            };
            if (r)
                Y[103] = 32775,
                Y[104] = 32776;
            else {
                const t = e.get("EXT_blend_minmax");
                null !== t && (Y[103] = t.MIN_EXT,
                Y[104] = t.MAX_EXT)
            }
            const Z = {
                200: 0,
                201: 1,
                202: 768,
                204: 770,
                210: 776,
                208: 774,
                206: 772,
                203: 769,
                205: 771,
                209: 775,
                207: 773
            };
            function J(e, n, r, o, l, c, h, d) {
                if (0 !== e) {
                    if (!1 === _ && (j(3042),
                    _ = !0),
                    5 === e)
                        l = l || n,
                        c = c || r,
                        h = h || o,
                        n === y && l === S || (t.blendEquationSeparate(Y[n], Y[l]),
                        y = n,
                        S = l),
                        r === M && o === w && c === T && h === E || (t.blendFuncSeparate(Z[r], Z[o], Z[c], Z[h]),
                        M = r,
                        w = o,
                        T = c,
                        E = h),
                        x = e,
                        A = null;
                    else if (e !== x || d !== A) {
                        if (y === m && S === m || (t.blendEquation(32774),
                        y = m,
                        S = m),
                        d)
                            switch (e) {
                            case 1:
                                t.blendFuncSeparate(1, 771, 1, 771);
                                break;
                            case 2:
                                t.blendFunc(1, 1);
                                break;
                            case 3:
                                t.blendFuncSeparate(0, 0, 769, 771);
                                break;
                            case 4:
                                t.blendFuncSeparate(0, 768, 0, 770);
                                break;
                            default:
                                console.error("THREE.WebGLState: Invalid blending: ", e)
                            }
                        else
                            switch (e) {
                            case 1:
                                t.blendFuncSeparate(770, 771, 1, 771);
                                break;
                            case 2:
                                t.blendFunc(770, 1);
                                break;
                            case 3:
                                t.blendFunc(0, 769);
                                break;
                            case 4:
                                t.blendFunc(0, 768);
                                break;
                            default:
                                console.error("THREE.WebGLState: Invalid blending: ", e)
                            }
                        M = null,
                        w = null,
                        T = null,
                        E = null,
                        x = e,
                        A = d
                    }
                } else
                    !0 === _ && (X(3042),
                    _ = !1)
            }
            function K(e) {
                L !== e && (e ? t.frontFace(2304) : t.frontFace(2305),
                L = e)
            }
            function Q(e) {
                0 !== e ? (j(2884),
                e !== R && (1 === e ? t.cullFace(1029) : 2 === e ? t.cullFace(1028) : t.cullFace(1032))) : X(2884),
                R = e
            }
            function $(e, n, r) {
                e ? (j(32823),
                P === n && D === r || (t.polygonOffset(n, r),
                P = n,
                D = r)) : X(32823)
            }
            function tt(e) {
                void 0 === e && (e = 33984 + N - 1),
                U !== e && (t.activeTexture(e),
                U = e)
            }
            return {
                buffers: {
                    color: o,
                    depth: l,
                    stencil: c
                },
                enable: j,
                disable: X,
                bindFramebuffer: function(e, n) {
                    return null === n && null !== d && (n = d),
                    f[e] !== n && (t.bindFramebuffer(e, n),
                    f[e] = n,
                    r && (36009 === e && (f[36160] = n),
                    36160 === e && (f[36009] = n)),
                    !0)
                },
                bindXRFramebuffer: function(e) {
                    e !== d && (t.bindFramebuffer(36160, e),
                    d = e)
                },
                useProgram: function(e) {
                    return v !== e && (t.useProgram(e),
                    v = e,
                    !0)
                },
                setBlending: J,
                setMaterial: function(t, e) {
                    2 === t.side ? X(2884) : j(2884);
                    let n = 1 === t.side;
                    e && (n = !n),
                    K(n),
                    1 === t.blending && !1 === t.transparent ? J(0) : J(t.blending, t.blendEquation, t.blendSrc, t.blendDst, t.blendEquationAlpha, t.blendSrcAlpha, t.blendDstAlpha, t.premultipliedAlpha),
                    l.setFunc(t.depthFunc),
                    l.setTest(t.depthTest),
                    l.setMask(t.depthWrite),
                    o.setMask(t.colorWrite);
                    const r = t.stencilWrite;
                    c.setTest(r),
                    r && (c.setMask(t.stencilWriteMask),
                    c.setFunc(t.stencilFunc, t.stencilRef, t.stencilFuncMask),
                    c.setOp(t.stencilFail, t.stencilZFail, t.stencilZPass)),
                    $(t.polygonOffset, t.polygonOffsetFactor, t.polygonOffsetUnits),
                    !0 === t.alphaToCoverage ? j(32926) : X(32926)
                },
                setFlipSided: K,
                setCullFace: Q,
                setLineWidth: function(e) {
                    e !== C && (I && t.lineWidth(e),
                    C = e)
                },
                setPolygonOffset: $,
                setScissorTest: function(t) {
                    t ? j(3089) : X(3089)
                },
                activeTexture: tt,
                bindTexture: function(e, n) {
                    null === U && tt();
                    let r = z[U];
                    void 0 === r && (r = {
                        type: void 0,
                        texture: void 0
                    },
                    z[U] = r),
                    r.type === e && r.texture === n || (t.bindTexture(e, n || W[e]),
                    r.type = e,
                    r.texture = n)
                },
                unbindTexture: function() {
                    const e = z[U];
                    void 0 !== e && void 0 !== e.type && (t.bindTexture(e.type, null),
                    e.type = void 0,
                    e.texture = void 0)
                },
                compressedTexImage2D: function() {
                    try {
                        t.compressedTexImage2D.apply(t, arguments)
                    } catch (t) {
                        console.error("THREE.WebGLState:", t)
                    }
                },
                texImage2D: function() {
                    try {
                        t.texImage2D.apply(t, arguments)
                    } catch (t) {
                        console.error("THREE.WebGLState:", t)
                    }
                },
                texImage3D: function() {
                    try {
                        t.texImage3D.apply(t, arguments)
                    } catch (t) {
                        console.error("THREE.WebGLState:", t)
                    }
                },
                scissor: function(e) {
                    !1 === H.equals(e) && (t.scissor(e.x, e.y, e.z, e.w),
                    H.copy(e))
                },
                viewport: function(e) {
                    !1 === k.equals(e) && (t.viewport(e.x, e.y, e.z, e.w),
                    k.copy(e))
                },
                reset: function() {
                    t.disable(3042),
                    t.disable(2884),
                    t.disable(2929),
                    t.disable(32823),
                    t.disable(3089),
                    t.disable(2960),
                    t.disable(32926),
                    t.blendEquation(32774),
                    t.blendFunc(1, 0),
                    t.blendFuncSeparate(1, 0, 1, 0),
                    t.colorMask(!0, !0, !0, !0),
                    t.clearColor(0, 0, 0, 0),
                    t.depthMask(!0),
                    t.depthFunc(513),
                    t.clearDepth(1),
                    t.stencilMask(4294967295),
                    t.stencilFunc(519, 0, 4294967295),
                    t.stencilOp(7680, 7680, 7680),
                    t.clearStencil(0),
                    t.cullFace(1029),
                    t.frontFace(2305),
                    t.polygonOffset(0, 0),
                    t.activeTexture(33984),
                    t.bindFramebuffer(36160, null),
                    !0 === r && (t.bindFramebuffer(36009, null),
                    t.bindFramebuffer(36008, null)),
                    t.useProgram(null),
                    t.lineWidth(1),
                    t.scissor(0, 0, t.canvas.width, t.canvas.height),
                    t.viewport(0, 0, t.canvas.width, t.canvas.height),
                    h = {},
                    U = null,
                    z = {},
                    d = null,
                    f = {},
                    v = null,
                    _ = !1,
                    x = null,
                    y = null,
                    M = null,
                    w = null,
                    S = null,
                    T = null,
                    E = null,
                    A = !1,
                    L = null,
                    R = null,
                    C = null,
                    P = null,
                    D = null,
                    H.set(0, 0, t.canvas.width, t.canvas.height),
                    k.set(0, 0, t.canvas.width, t.canvas.height),
                    o.reset(),
                    l.reset(),
                    c.reset()
                }
            }
        }
        function Fa(t, e, n, r, o, l, c) {
            const h = o.isWebGL2
              , d = o.maxTextures
              , f = o.maxCubemapSize
              , m = o.maxTextureSize
              , v = o.maxSamples
              , _ = new WeakMap;
            let x, y = !1;
            try {
                y = "undefined" != typeof OffscreenCanvas && null !== new OffscreenCanvas(1,1).getContext("2d")
            } catch (t) {}
            function M(t, e) {
                return y ? new OffscreenCanvas(t,e) : yt("canvas")
            }
            function w(image, t, e, n) {
                let r = 1;
                if ((image.width > n || image.height > n) && (r = n / Math.max(image.width, image.height)),
                r < 1 || !0 === t) {
                    if ("undefined" != typeof HTMLImageElement && image instanceof HTMLImageElement || "undefined" != typeof HTMLCanvasElement && image instanceof HTMLCanvasElement || "undefined" != typeof ImageBitmap && image instanceof ImageBitmap) {
                        const n = t ? gt : Math.floor
                          , o = n(r * image.width)
                          , l = n(r * image.height);
                        void 0 === x && (x = M(o, l));
                        const canvas = e ? M(o, l) : x;
                        canvas.width = o,
                        canvas.height = l;
                        return canvas.getContext("2d").drawImage(image, 0, 0, o, l),
                        console.warn("THREE.WebGLRenderer: Texture has been resized from (" + image.width + "x" + image.height + ") to (" + o + "x" + l + ")."),
                        canvas
                    }
                    return "data"in image && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + image.width + "x" + image.height + ")."),
                    image
                }
                return image
            }
            function D(image) {
                return mt(image.width) && mt(image.height)
            }
            function k(t, e) {
                return t.generateMipmaps && e && t.minFilter !== A && t.minFilter !== C
            }
            function V(e, n, o, l, c=1) {
                t.generateMipmap(e);
                r.get(n).__maxMipLevel = Math.log2(Math.max(o, l, c))
            }
            function W(n, r, o, l) {
                if (!1 === h)
                    return r;
                if (null !== n) {
                    if (void 0 !== t[n])
                        return t[n];
                    console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + n + "'")
                }
                let c = r;
                return 6403 === r && (5126 === o && (c = 33326),
                5131 === o && (c = 33325),
                5121 === o && (c = 33321)),
                6407 === r && (5126 === o && (c = 34837),
                5131 === o && (c = 34843),
                5121 === o && (c = 32849)),
                6408 === r && (5126 === o && (c = 34836),
                5131 === o && (c = 34842),
                5121 === o && (c = l === K ? 35907 : 32856)),
                33325 !== c && 33326 !== c && 34842 !== c && 34836 !== c || e.get("EXT_color_buffer_float"),
                c
            }
            function j(t) {
                return t === A || t === L || t === R ? 9728 : 9729
            }
            function X(e) {
                const n = e.target;
                n.removeEventListener("dispose", X),
                function(e) {
                    const n = r.get(e);
                    if (void 0 === n.__webglInit)
                        return;
                    t.deleteTexture(n.__webglTexture),
                    r.remove(e)
                }(n),
                n.isVideoTexture && _.delete(n),
                c.memory.textures--
            }
            function Y(e) {
                const n = e.target;
                n.removeEventListener("dispose", Y),
                function(e) {
                    const n = e.texture
                      , o = r.get(e)
                      , l = r.get(n);
                    if (!e)
                        return;
                    void 0 !== l.__webglTexture && (t.deleteTexture(l.__webglTexture),
                    c.memory.textures--);
                    e.depthTexture && e.depthTexture.dispose();
                    if (e.isWebGLCubeRenderTarget)
                        for (let i = 0; i < 6; i++)
                            t.deleteFramebuffer(o.__webglFramebuffer[i]),
                            o.__webglDepthbuffer && t.deleteRenderbuffer(o.__webglDepthbuffer[i]);
                    else
                        t.deleteFramebuffer(o.__webglFramebuffer),
                        o.__webglDepthbuffer && t.deleteRenderbuffer(o.__webglDepthbuffer),
                        o.__webglMultisampledFramebuffer && t.deleteFramebuffer(o.__webglMultisampledFramebuffer),
                        o.__webglColorRenderbuffer && t.deleteRenderbuffer(o.__webglColorRenderbuffer),
                        o.__webglDepthRenderbuffer && t.deleteRenderbuffer(o.__webglDepthRenderbuffer);
                    if (e.isWebGLMultipleRenderTargets)
                        for (let i = 0, e = n.length; i < e; i++) {
                            const e = r.get(n[i]);
                            e.__webglTexture && (t.deleteTexture(e.__webglTexture),
                            c.memory.textures--),
                            r.remove(n[i])
                        }
                    r.remove(n),
                    r.remove(e)
                }(n)
            }
            let Z = 0;
            function J(t, slot) {
                const e = r.get(t);
                if (t.isVideoTexture && function(t) {
                    const e = c.render.frame;
                    _.get(t) !== e && (_.set(t, e),
                    t.update())
                }(t),
                t.version > 0 && e.__version !== t.version) {
                    const image = t.image;
                    if (void 0 === image)
                        console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");
                    else {
                        if (!1 !== image.complete)
                            return void it(e, t, slot);
                        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")
                    }
                }
                n.activeTexture(33984 + slot),
                n.bindTexture(3553, e.__webglTexture)
            }
            function Q(e, slot) {
                const o = r.get(e);
                e.version > 0 && o.__version !== e.version ? function(e, r, slot) {
                    if (6 !== r.image.length)
                        return;
                    nt(e, r),
                    n.activeTexture(33984 + slot),
                    n.bindTexture(34067, e.__webglTexture),
                    t.pixelStorei(37440, r.flipY),
                    t.pixelStorei(37441, r.premultiplyAlpha),
                    t.pixelStorei(3317, r.unpackAlignment),
                    t.pixelStorei(37443, 0);
                    const o = r && (r.isCompressedTexture || r.image[0].isCompressedTexture)
                      , c = r.image[0] && r.image[0].isDataTexture
                      , d = [];
                    for (let i = 0; i < 6; i++)
                        d[i] = o || c ? c ? r.image[i].image : r.image[i] : w(r.image[i], !1, !0, f);
                    const image = d[0]
                      , m = D(image) || h
                      , v = l.convert(r.format)
                      , _ = l.convert(r.type)
                      , x = W(r.internalFormat, v, _, r.encoding);
                    let y;
                    if (et(34067, r, m),
                    o) {
                        for (let i = 0; i < 6; i++) {
                            y = d[i].mipmaps;
                            for (let t = 0; t < y.length; t++) {
                                const e = y[t];
                                r.format !== B && r.format !== z ? null !== v ? n.compressedTexImage2D(34069 + i, t, x, e.width, e.height, 0, e.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : n.texImage2D(34069 + i, t, x, e.width, e.height, 0, v, _, e.data)
                            }
                        }
                        e.__maxMipLevel = y.length - 1
                    } else {
                        y = r.mipmaps;
                        for (let i = 0; i < 6; i++)
                            if (c) {
                                n.texImage2D(34069 + i, 0, x, d[i].width, d[i].height, 0, v, _, d[i].data);
                                for (let t = 0; t < y.length; t++) {
                                    const e = y[t].image[i].image;
                                    n.texImage2D(34069 + i, t + 1, x, e.width, e.height, 0, v, _, e.data)
                                }
                            } else {
                                n.texImage2D(34069 + i, 0, x, v, _, d[i]);
                                for (let t = 0; t < y.length; t++) {
                                    const e = y[t];
                                    n.texImage2D(34069 + i, t + 1, x, v, _, e.image[i])
                                }
                            }
                        e.__maxMipLevel = y.length
                    }
                    k(r, m) && V(34067, r, image.width, image.height);
                    e.__version = r.version,
                    r.onUpdate && r.onUpdate(r)
                }(o, e, slot) : (n.activeTexture(33984 + slot),
                n.bindTexture(34067, o.__webglTexture))
            }
            const $ = {
                [S]: 10497,
                [T]: 33071,
                [E]: 33648
            }
              , tt = {
                [A]: 9728,
                [L]: 9984,
                [R]: 9986,
                [C]: 9729,
                1007: 9985,
                [P]: 9987
            };
            function et(n, l, c) {
                if (c ? (t.texParameteri(n, 10242, $[l.wrapS]),
                t.texParameteri(n, 10243, $[l.wrapT]),
                32879 !== n && 35866 !== n || t.texParameteri(n, 32882, $[l.wrapR]),
                t.texParameteri(n, 10240, tt[l.magFilter]),
                t.texParameteri(n, 10241, tt[l.minFilter])) : (t.texParameteri(n, 10242, 33071),
                t.texParameteri(n, 10243, 33071),
                32879 !== n && 35866 !== n || t.texParameteri(n, 32882, 33071),
                l.wrapS === T && l.wrapT === T || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),
                t.texParameteri(n, 10240, j(l.magFilter)),
                t.texParameteri(n, 10241, j(l.minFilter)),
                l.minFilter !== A && l.minFilter !== C && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),
                !0 === e.has("EXT_texture_filter_anisotropic")) {
                    const c = e.get("EXT_texture_filter_anisotropic");
                    if (l.type === O && !1 === e.has("OES_texture_float_linear"))
                        return;
                    if (!1 === h && l.type === F && !1 === e.has("OES_texture_half_float_linear"))
                        return;
                    (l.anisotropy > 1 || r.get(l).__currentAnisotropy) && (t.texParameterf(n, c.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(l.anisotropy, o.getMaxAnisotropy())),
                    r.get(l).__currentAnisotropy = l.anisotropy)
                }
            }
            function nt(e, n) {
                void 0 === e.__webglInit && (e.__webglInit = !0,
                n.addEventListener("dispose", X),
                e.__webglTexture = t.createTexture(),
                c.memory.textures++)
            }
            function it(e, r, slot) {
                let o = 3553;
                r.isDataTexture2DArray && (o = 35866),
                r.isDataTexture3D && (o = 32879),
                nt(e, r),
                n.activeTexture(33984 + slot),
                n.bindTexture(o, e.__webglTexture),
                t.pixelStorei(37440, r.flipY),
                t.pixelStorei(37441, r.premultiplyAlpha),
                t.pixelStorei(3317, r.unpackAlignment),
                t.pixelStorei(37443, 0);
                const c = function(t) {
                    return !h && (t.wrapS !== T || t.wrapT !== T || t.minFilter !== A && t.minFilter !== C)
                }(r) && !1 === D(r.image)
                  , image = w(r.image, c, !1, m)
                  , d = D(image) || h
                  , f = l.convert(r.format);
                let v, _ = l.convert(r.type), x = W(r.internalFormat, f, _, r.encoding);
                et(o, r, d);
                const y = r.mipmaps;
                if (r.isDepthTexture)
                    x = 6402,
                    h ? x = r.type === O ? 36012 : r.type === I ? 33190 : r.type === U ? 35056 : 33189 : r.type === O && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),
                    r.format === G && 6402 === x && r.type !== N && r.type !== I && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),
                    r.type = N,
                    _ = l.convert(r.type)),
                    r.format === H && 6402 === x && (x = 34041,
                    r.type !== U && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),
                    r.type = U,
                    _ = l.convert(r.type))),
                    n.texImage2D(3553, 0, x, image.width, image.height, 0, f, _, null);
                else if (r.isDataTexture)
                    if (y.length > 0 && d) {
                        for (let i = 0, t = y.length; i < t; i++)
                            v = y[i],
                            n.texImage2D(3553, i, x, v.width, v.height, 0, f, _, v.data);
                        r.generateMipmaps = !1,
                        e.__maxMipLevel = y.length - 1
                    } else
                        n.texImage2D(3553, 0, x, image.width, image.height, 0, f, _, image.data),
                        e.__maxMipLevel = 0;
                else if (r.isCompressedTexture) {
                    for (let i = 0, t = y.length; i < t; i++)
                        v = y[i],
                        r.format !== B && r.format !== z ? null !== f ? n.compressedTexImage2D(3553, i, x, v.width, v.height, 0, v.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : n.texImage2D(3553, i, x, v.width, v.height, 0, f, _, v.data);
                    e.__maxMipLevel = y.length - 1
                } else if (r.isDataTexture2DArray)
                    n.texImage3D(35866, 0, x, image.width, image.height, image.depth, 0, f, _, image.data),
                    e.__maxMipLevel = 0;
                else if (r.isDataTexture3D)
                    n.texImage3D(32879, 0, x, image.width, image.height, image.depth, 0, f, _, image.data),
                    e.__maxMipLevel = 0;
                else if (y.length > 0 && d) {
                    for (let i = 0, t = y.length; i < t; i++)
                        v = y[i],
                        n.texImage2D(3553, i, x, f, _, v);
                    r.generateMipmaps = !1,
                    e.__maxMipLevel = y.length - 1
                } else
                    n.texImage2D(3553, 0, x, f, _, image),
                    e.__maxMipLevel = 0;
                k(r, d) && V(o, r, image.width, image.height),
                e.__version = r.version,
                r.onUpdate && r.onUpdate(r)
            }
            function at(e, o, c, h, d) {
                const f = l.convert(c.format)
                  , m = l.convert(c.type)
                  , v = W(c.internalFormat, f, m, c.encoding);
                32879 === d || 35866 === d ? n.texImage3D(d, 0, v, o.width, o.height, o.depth, 0, f, m, null) : n.texImage2D(d, 0, v, o.width, o.height, 0, f, m, null),
                n.bindFramebuffer(36160, e),
                t.framebufferTexture2D(36160, h, d, r.get(c).__webglTexture, 0),
                n.bindFramebuffer(36160, null)
            }
            function st(e, n, r) {
                if (t.bindRenderbuffer(36161, e),
                n.depthBuffer && !n.stencilBuffer) {
                    let o = 33189;
                    if (r) {
                        const e = n.depthTexture;
                        e && e.isDepthTexture && (e.type === O ? o = 36012 : e.type === I && (o = 33190));
                        const r = lt(n);
                        t.renderbufferStorageMultisample(36161, r, o, n.width, n.height)
                    } else
                        t.renderbufferStorage(36161, o, n.width, n.height);
                    t.framebufferRenderbuffer(36160, 36096, 36161, e)
                } else if (n.depthBuffer && n.stencilBuffer) {
                    if (r) {
                        const e = lt(n);
                        t.renderbufferStorageMultisample(36161, e, 35056, n.width, n.height)
                    } else
                        t.renderbufferStorage(36161, 34041, n.width, n.height);
                    t.framebufferRenderbuffer(36160, 33306, 36161, e)
                } else {
                    const e = !0 === n.isWebGLMultipleRenderTargets ? n.texture[0] : n.texture
                      , o = l.convert(e.format)
                      , c = l.convert(e.type)
                      , h = W(e.internalFormat, o, c, e.encoding);
                    if (r) {
                        const e = lt(n);
                        t.renderbufferStorageMultisample(36161, e, h, n.width, n.height)
                    } else
                        t.renderbufferStorage(36161, h, n.width, n.height)
                }
                t.bindRenderbuffer(36161, null)
            }
            function ot(e) {
                const o = r.get(e)
                  , l = !0 === e.isWebGLCubeRenderTarget;
                if (e.depthTexture) {
                    if (l)
                        throw new Error("target.depthTexture not supported in Cube render targets");
                    !function(e, o) {
                        if (o && o.isWebGLCubeRenderTarget)
                            throw new Error("Depth Texture with cube render targets is not supported");
                        if (n.bindFramebuffer(36160, e),
                        !o.depthTexture || !o.depthTexture.isDepthTexture)
                            throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
                        r.get(o.depthTexture).__webglTexture && o.depthTexture.image.width === o.width && o.depthTexture.image.height === o.height || (o.depthTexture.image.width = o.width,
                        o.depthTexture.image.height = o.height,
                        o.depthTexture.needsUpdate = !0),
                        J(o.depthTexture, 0);
                        const l = r.get(o.depthTexture).__webglTexture;
                        if (o.depthTexture.format === G)
                            t.framebufferTexture2D(36160, 36096, 3553, l, 0);
                        else {
                            if (o.depthTexture.format !== H)
                                throw new Error("Unknown depthTexture format");
                            t.framebufferTexture2D(36160, 33306, 3553, l, 0)
                        }
                    }(o.__webglFramebuffer, e)
                } else if (l) {
                    o.__webglDepthbuffer = [];
                    for (let i = 0; i < 6; i++)
                        n.bindFramebuffer(36160, o.__webglFramebuffer[i]),
                        o.__webglDepthbuffer[i] = t.createRenderbuffer(),
                        st(o.__webglDepthbuffer[i], e, !1)
                } else
                    n.bindFramebuffer(36160, o.__webglFramebuffer),
                    o.__webglDepthbuffer = t.createRenderbuffer(),
                    st(o.__webglDepthbuffer, e, !1);
                n.bindFramebuffer(36160, null)
            }
            function lt(t) {
                return h && t.isWebGLMultisampleRenderTarget ? Math.min(v, t.samples) : 0
            }
            let ct = !1
              , ht = !1;
            this.allocateTextureUnit = function() {
                const t = Z;
                return t >= d && console.warn("THREE.WebGLTextures: Trying to use " + t + " texture units while this GPU supports only " + d),
                Z += 1,
                t
            }
            ,
            this.resetTextureUnits = function() {
                Z = 0
            }
            ,
            this.setTexture2D = J,
            this.setTexture2DArray = function(t, slot) {
                const e = r.get(t);
                t.version > 0 && e.__version !== t.version ? it(e, t, slot) : (n.activeTexture(33984 + slot),
                n.bindTexture(35866, e.__webglTexture))
            }
            ,
            this.setTexture3D = function(t, slot) {
                const e = r.get(t);
                t.version > 0 && e.__version !== t.version ? it(e, t, slot) : (n.activeTexture(33984 + slot),
                n.bindTexture(32879, e.__webglTexture))
            }
            ,
            this.setTextureCube = Q,
            this.setupRenderTarget = function(e) {
                const d = e.texture
                  , f = r.get(e)
                  , m = r.get(d);
                e.addEventListener("dispose", Y),
                !0 !== e.isWebGLMultipleRenderTargets && (m.__webglTexture = t.createTexture(),
                m.__version = d.version,
                c.memory.textures++);
                const v = !0 === e.isWebGLCubeRenderTarget
                  , _ = !0 === e.isWebGLMultipleRenderTargets
                  , x = !0 === e.isWebGLMultisampleRenderTarget
                  , y = d.isDataTexture3D || d.isDataTexture2DArray
                  , M = D(e) || h;
                if (!h || d.format !== z || d.type !== O && d.type !== F || (d.format = B,
                console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),
                v) {
                    f.__webglFramebuffer = [];
                    for (let i = 0; i < 6; i++)
                        f.__webglFramebuffer[i] = t.createFramebuffer()
                } else if (f.__webglFramebuffer = t.createFramebuffer(),
                _)
                    if (o.drawBuffers) {
                        const n = e.texture;
                        for (let i = 0, e = n.length; i < e; i++) {
                            const e = r.get(n[i]);
                            void 0 === e.__webglTexture && (e.__webglTexture = t.createTexture(),
                            c.memory.textures++)
                        }
                    } else
                        console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");
                else if (x)
                    if (h) {
                        f.__webglMultisampledFramebuffer = t.createFramebuffer(),
                        f.__webglColorRenderbuffer = t.createRenderbuffer(),
                        t.bindRenderbuffer(36161, f.__webglColorRenderbuffer);
                        const r = l.convert(d.format)
                          , o = l.convert(d.type)
                          , c = W(d.internalFormat, r, o, d.encoding)
                          , h = lt(e);
                        t.renderbufferStorageMultisample(36161, h, c, e.width, e.height),
                        n.bindFramebuffer(36160, f.__webglMultisampledFramebuffer),
                        t.framebufferRenderbuffer(36160, 36064, 36161, f.__webglColorRenderbuffer),
                        t.bindRenderbuffer(36161, null),
                        e.depthBuffer && (f.__webglDepthRenderbuffer = t.createRenderbuffer(),
                        st(f.__webglDepthRenderbuffer, e, !0)),
                        n.bindFramebuffer(36160, null)
                    } else
                        console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");
                if (v) {
                    n.bindTexture(34067, m.__webglTexture),
                    et(34067, d, M);
                    for (let i = 0; i < 6; i++)
                        at(f.__webglFramebuffer[i], e, d, 36064, 34069 + i);
                    k(d, M) && V(34067, d, e.width, e.height),
                    n.unbindTexture()
                } else if (_) {
                    const t = e.texture;
                    for (let i = 0, o = t.length; i < o; i++) {
                        const o = t[i]
                          , l = r.get(o);
                        n.bindTexture(3553, l.__webglTexture),
                        et(3553, o, M),
                        at(f.__webglFramebuffer, e, o, 36064 + i, 3553),
                        k(o, M) && V(3553, o, e.width, e.height)
                    }
                    n.unbindTexture()
                } else {
                    let t = 3553;
                    if (y)
                        if (h) {
                            t = d.isDataTexture3D ? 32879 : 35866
                        } else
                            console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.");
                    n.bindTexture(t, m.__webglTexture),
                    et(t, d, M),
                    at(f.__webglFramebuffer, e, d, 36064, t),
                    k(d, M) && V(t, d, e.width, e.height, e.depth),
                    n.unbindTexture()
                }
                e.depthBuffer && ot(e)
            }
            ,
            this.updateRenderTargetMipmap = function(t) {
                const e = D(t) || h
                  , o = !0 === t.isWebGLMultipleRenderTargets ? t.texture : [t.texture];
                for (let i = 0, l = o.length; i < l; i++) {
                    const l = o[i];
                    if (k(l, e)) {
                        const e = t.isWebGLCubeRenderTarget ? 34067 : 3553
                          , o = r.get(l).__webglTexture;
                        n.bindTexture(e, o),
                        V(e, l, t.width, t.height),
                        n.unbindTexture()
                    }
                }
            }
            ,
            this.updateMultisampleRenderTarget = function(e) {
                if (e.isWebGLMultisampleRenderTarget)
                    if (h) {
                        const o = e.width
                          , l = e.height;
                        let mask = 16384;
                        e.depthBuffer && (mask |= 256),
                        e.stencilBuffer && (mask |= 1024);
                        const c = r.get(e);
                        n.bindFramebuffer(36008, c.__webglMultisampledFramebuffer),
                        n.bindFramebuffer(36009, c.__webglFramebuffer),
                        t.blitFramebuffer(0, 0, o, l, 0, 0, o, l, mask, 9728),
                        n.bindFramebuffer(36008, null),
                        n.bindFramebuffer(36009, c.__webglMultisampledFramebuffer)
                    } else
                        console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")
            }
            ,
            this.safeSetTexture2D = function(t, slot) {
                t && t.isWebGLRenderTarget && (!1 === ct && (console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),
                ct = !0),
                t = t.texture),
                J(t, slot)
            }
            ,
            this.safeSetTextureCube = function(t, slot) {
                t && t.isWebGLCubeRenderTarget && (!1 === ht && (console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),
                ht = !0),
                t = t.texture),
                Q(t, slot)
            }
        }
        function Ua(t, e, n) {
            const r = n.isWebGL2;
            return {
                convert: function(p) {
                    let t;
                    if (p === D)
                        return 5121;
                    if (1017 === p)
                        return 32819;
                    if (1018 === p)
                        return 32820;
                    if (1019 === p)
                        return 33635;
                    if (1010 === p)
                        return 5120;
                    if (1011 === p)
                        return 5122;
                    if (p === N)
                        return 5123;
                    if (1013 === p)
                        return 5124;
                    if (p === I)
                        return 5125;
                    if (p === O)
                        return 5126;
                    if (p === F)
                        return r ? 5131 : (t = e.get("OES_texture_half_float"),
                        null !== t ? t.HALF_FLOAT_OES : null);
                    if (1021 === p)
                        return 6406;
                    if (p === z)
                        return 6407;
                    if (p === B)
                        return 6408;
                    if (1024 === p)
                        return 6409;
                    if (1025 === p)
                        return 6410;
                    if (p === G)
                        return 6402;
                    if (p === H)
                        return 34041;
                    if (1028 === p)
                        return 6403;
                    if (1029 === p)
                        return 36244;
                    if (1030 === p)
                        return 33319;
                    if (1031 === p)
                        return 33320;
                    if (1032 === p)
                        return 36248;
                    if (1033 === p)
                        return 36249;
                    if (33776 === p || 33777 === p || 33778 === p || 33779 === p) {
                        if (t = e.get("WEBGL_compressed_texture_s3tc"),
                        null === t)
                            return null;
                        if (33776 === p)
                            return t.COMPRESSED_RGB_S3TC_DXT1_EXT;
                        if (33777 === p)
                            return t.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                        if (33778 === p)
                            return t.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                        if (33779 === p)
                            return t.COMPRESSED_RGBA_S3TC_DXT5_EXT
                    }
                    if (35840 === p || 35841 === p || 35842 === p || 35843 === p) {
                        if (t = e.get("WEBGL_compressed_texture_pvrtc"),
                        null === t)
                            return null;
                        if (35840 === p)
                            return t.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                        if (35841 === p)
                            return t.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                        if (35842 === p)
                            return t.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                        if (35843 === p)
                            return t.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
                    }
                    if (36196 === p)
                        return t = e.get("WEBGL_compressed_texture_etc1"),
                        null !== t ? t.COMPRESSED_RGB_ETC1_WEBGL : null;
                    if ((37492 === p || 37496 === p) && (t = e.get("WEBGL_compressed_texture_etc"),
                    null !== t)) {
                        if (37492 === p)
                            return t.COMPRESSED_RGB8_ETC2;
                        if (37496 === p)
                            return t.COMPRESSED_RGBA8_ETC2_EAC
                    }
                    return 37808 === p || 37809 === p || 37810 === p || 37811 === p || 37812 === p || 37813 === p || 37814 === p || 37815 === p || 37816 === p || 37817 === p || 37818 === p || 37819 === p || 37820 === p || 37821 === p || 37840 === p || 37841 === p || 37842 === p || 37843 === p || 37844 === p || 37845 === p || 37846 === p || 37847 === p || 37848 === p || 37849 === p || 37850 === p || 37851 === p || 37852 === p || 37853 === p ? (t = e.get("WEBGL_compressed_texture_astc"),
                    null !== t ? p : null) : 36492 === p ? (t = e.get("EXT_texture_compression_bptc"),
                    null !== t ? p : null) : p === U ? r ? 34042 : (t = e.get("WEBGL_depth_texture"),
                    null !== t ? t.UNSIGNED_INT_24_8_WEBGL : null) : void 0
                }
            }
        }
        class za extends Hn {
            constructor(t=[]) {
                super(),
                this.cameras = t
            }
        }
        za.prototype.isArrayCamera = !0;
        class Ba extends Ne {
            constructor() {
                super(),
                this.type = "Group"
            }
        }
        Ba.prototype.isGroup = !0;
        const Ga = {
            type: "move"
        };
        class Ha {
            constructor() {
                this._targetRay = null,
                this._grip = null,
                this._hand = null
            }
            getHandSpace() {
                return null === this._hand && (this._hand = new Ba,
                this._hand.matrixAutoUpdate = !1,
                this._hand.visible = !1,
                this._hand.joints = {},
                this._hand.inputState = {
                    pinching: !1
                }),
                this._hand
            }
            getTargetRaySpace() {
                return null === this._targetRay && (this._targetRay = new Ba,
                this._targetRay.matrixAutoUpdate = !1,
                this._targetRay.visible = !1,
                this._targetRay.hasLinearVelocity = !1,
                this._targetRay.linearVelocity = new Pt,
                this._targetRay.hasAngularVelocity = !1,
                this._targetRay.angularVelocity = new Pt),
                this._targetRay
            }
            getGripSpace() {
                return null === this._grip && (this._grip = new Ba,
                this._grip.matrixAutoUpdate = !1,
                this._grip.visible = !1,
                this._grip.hasLinearVelocity = !1,
                this._grip.linearVelocity = new Pt,
                this._grip.hasAngularVelocity = !1,
                this._grip.angularVelocity = new Pt),
                this._grip
            }
            dispatchEvent(t) {
                return null !== this._targetRay && this._targetRay.dispatchEvent(t),
                null !== this._grip && this._grip.dispatchEvent(t),
                null !== this._hand && this._hand.dispatchEvent(t),
                this
            }
            disconnect(t) {
                return this.dispatchEvent({
                    type: "disconnected",
                    data: t
                }),
                null !== this._targetRay && (this._targetRay.visible = !1),
                null !== this._grip && (this._grip.visible = !1),
                null !== this._hand && (this._hand.visible = !1),
                this
            }
            update(t, e, n) {
                let r = null
                  , o = null
                  , l = null;
                const c = this._targetRay
                  , h = this._grip
                  , d = this._hand;
                if (t && "visible-blurred" !== e.session.visibilityState)
                    if (null !== c && (r = e.getPose(t.targetRaySpace, n),
                    null !== r && (c.matrix.fromArray(r.transform.matrix),
                    c.matrix.decompose(c.position, c.rotation, c.scale),
                    r.linearVelocity ? (c.hasLinearVelocity = !0,
                    c.linearVelocity.copy(r.linearVelocity)) : c.hasLinearVelocity = !1,
                    r.angularVelocity ? (c.hasAngularVelocity = !0,
                    c.angularVelocity.copy(r.angularVelocity)) : c.hasAngularVelocity = !1,
                    this.dispatchEvent(Ga))),
                    d && t.hand) {
                        l = !0;
                        for (const r of t.hand.values()) {
                            const t = e.getJointPose(r, n);
                            if (void 0 === d.joints[r.jointName]) {
                                const t = new Ba;
                                t.matrixAutoUpdate = !1,
                                t.visible = !1,
                                d.joints[r.jointName] = t,
                                d.add(t)
                            }
                            const o = d.joints[r.jointName];
                            null !== t && (o.matrix.fromArray(t.transform.matrix),
                            o.matrix.decompose(o.position, o.rotation, o.scale),
                            o.jointRadius = t.radius),
                            o.visible = null !== t
                        }
                        const r = d.joints["index-finger-tip"]
                          , o = d.joints["thumb-tip"]
                          , c = r.position.distanceTo(o.position)
                          , h = .02
                          , f = .005;
                        d.inputState.pinching && c > h + f ? (d.inputState.pinching = !1,
                        this.dispatchEvent({
                            type: "pinchend",
                            handedness: t.handedness,
                            target: this
                        })) : !d.inputState.pinching && c <= h - f && (d.inputState.pinching = !0,
                        this.dispatchEvent({
                            type: "pinchstart",
                            handedness: t.handedness,
                            target: this
                        }))
                    } else
                        null !== h && t.gripSpace && (o = e.getPose(t.gripSpace, n),
                        null !== o && (h.matrix.fromArray(o.transform.matrix),
                        h.matrix.decompose(h.position, h.rotation, h.scale),
                        o.linearVelocity ? (h.hasLinearVelocity = !0,
                        h.linearVelocity.copy(o.linearVelocity)) : h.hasLinearVelocity = !1,
                        o.angularVelocity ? (h.hasAngularVelocity = !0,
                        h.angularVelocity.copy(o.angularVelocity)) : h.hasAngularVelocity = !1));
                return null !== c && (c.visible = null !== r),
                null !== h && (h.visible = null !== o),
                null !== d && (d.visible = null !== l),
                this
            }
        }
        class ka extends at {
            constructor(t, e) {
                super();
                const n = this
                  , r = t.state;
                let o = null
                  , l = 1
                  , c = null
                  , h = "local-floor"
                  , d = null
                  , f = null
                  , m = null
                  , v = null
                  , _ = null
                  , x = !1
                  , y = null
                  , M = null
                  , w = null
                  , S = null
                  , T = null
                  , E = null;
                const A = []
                  , L = new Map
                  , R = new Hn;
                R.layers.enable(1),
                R.viewport = new At;
                const C = new Hn;
                C.layers.enable(2),
                C.viewport = new At;
                const P = [R, C]
                  , D = new za;
                D.layers.enable(1),
                D.layers.enable(2);
                let N = null
                  , I = null;
                function O(t) {
                    const e = L.get(t.inputSource);
                    e && e.dispatchEvent({
                        type: t.type,
                        data: t.inputSource
                    })
                }
                function F() {
                    L.forEach((function(t, e) {
                        t.disconnect(e)
                    }
                    )),
                    L.clear(),
                    N = null,
                    I = null,
                    r.bindXRFramebuffer(null),
                    t.setRenderTarget(t.getRenderTarget()),
                    m && e.deleteFramebuffer(m),
                    y && e.deleteFramebuffer(y),
                    M && e.deleteRenderbuffer(M),
                    w && e.deleteRenderbuffer(w),
                    m = null,
                    y = null,
                    M = null,
                    w = null,
                    _ = null,
                    v = null,
                    f = null,
                    o = null,
                    k.stop(),
                    n.isPresenting = !1,
                    n.dispatchEvent({
                        type: "sessionend"
                    })
                }
                function U(t) {
                    const e = o.inputSources;
                    for (let i = 0; i < A.length; i++)
                        L.set(e[i], A[i]);
                    for (let i = 0; i < t.removed.length; i++) {
                        const e = t.removed[i]
                          , n = L.get(e);
                        n && (n.dispatchEvent({
                            type: "disconnected",
                            data: e
                        }),
                        L.delete(e))
                    }
                    for (let i = 0; i < t.added.length; i++) {
                        const e = t.added[i]
                          , n = L.get(e);
                        n && n.dispatchEvent({
                            type: "connected",
                            data: e
                        })
                    }
                }
                this.cameraAutoUpdate = !0,
                this.enabled = !1,
                this.isPresenting = !1,
                this.getController = function(t) {
                    let e = A[t];
                    return void 0 === e && (e = new Ha,
                    A[t] = e),
                    e.getTargetRaySpace()
                }
                ,
                this.getControllerGrip = function(t) {
                    let e = A[t];
                    return void 0 === e && (e = new Ha,
                    A[t] = e),
                    e.getGripSpace()
                }
                ,
                this.getHand = function(t) {
                    let e = A[t];
                    return void 0 === e && (e = new Ha,
                    A[t] = e),
                    e.getHandSpace()
                }
                ,
                this.setFramebufferScaleFactor = function(t) {
                    l = t,
                    !0 === n.isPresenting && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")
                }
                ,
                this.setReferenceSpaceType = function(t) {
                    h = t,
                    !0 === n.isPresenting && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")
                }
                ,
                this.getReferenceSpace = function() {
                    return c
                }
                ,
                this.getBaseLayer = function() {
                    return null !== v ? v : _
                }
                ,
                this.getBinding = function() {
                    return f
                }
                ,
                this.getFrame = function() {
                    return S
                }
                ,
                this.getSession = function() {
                    return o
                }
                ,
                this.setSession = async function(t) {
                    if (o = t,
                    null !== o) {
                        o.addEventListener("select", O),
                        o.addEventListener("selectstart", O),
                        o.addEventListener("selectend", O),
                        o.addEventListener("squeeze", O),
                        o.addEventListener("squeezestart", O),
                        o.addEventListener("squeezeend", O),
                        o.addEventListener("end", F),
                        o.addEventListener("inputsourceschange", U);
                        const t = e.getContextAttributes();
                        if (!0 !== t.xrCompatible && await e.makeXRCompatible(),
                        void 0 === o.renderState.layers) {
                            const n = {
                                antialias: t.antialias,
                                alpha: t.alpha,
                                depth: t.depth,
                                stencil: t.stencil,
                                framebufferScaleFactor: l
                            };
                            _ = new XRWebGLLayer(o,e,n),
                            o.updateRenderState({
                                baseLayer: _
                            })
                        } else if (e instanceof WebGLRenderingContext) {
                            const n = {
                                antialias: !0,
                                alpha: t.alpha,
                                depth: t.depth,
                                stencil: t.stencil,
                                framebufferScaleFactor: l
                            };
                            _ = new XRWebGLLayer(o,e,n),
                            o.updateRenderState({
                                layers: [_]
                            })
                        } else {
                            x = t.antialias;
                            let n = null;
                            t.depth && (E = 256,
                            t.stencil && (E |= 1024),
                            T = t.stencil ? 33306 : 36096,
                            n = t.stencil ? 35056 : 33190);
                            const c = {
                                colorFormat: t.alpha ? 32856 : 32849,
                                depthFormat: n,
                                scaleFactor: l
                            };
                            f = new XRWebGLBinding(o,e),
                            v = f.createProjectionLayer(c),
                            m = e.createFramebuffer(),
                            o.updateRenderState({
                                layers: [v]
                            }),
                            x && (y = e.createFramebuffer(),
                            M = e.createRenderbuffer(),
                            e.bindRenderbuffer(36161, M),
                            e.renderbufferStorageMultisample(36161, 4, 32856, v.textureWidth, v.textureHeight),
                            r.bindFramebuffer(36160, y),
                            e.framebufferRenderbuffer(36160, 36064, 36161, M),
                            e.bindRenderbuffer(36161, null),
                            null !== n && (w = e.createRenderbuffer(),
                            e.bindRenderbuffer(36161, w),
                            e.renderbufferStorageMultisample(36161, 4, n, v.textureWidth, v.textureHeight),
                            e.framebufferRenderbuffer(36160, T, 36161, w),
                            e.bindRenderbuffer(36161, null)),
                            r.bindFramebuffer(36160, null))
                        }
                        c = await o.requestReferenceSpace(h),
                        k.setContext(o),
                        k.start(),
                        n.isPresenting = !0,
                        n.dispatchEvent({
                            type: "sessionstart"
                        })
                    }
                }
                ;
                const z = new Pt
                  , B = new Pt;
                function G(t, e) {
                    null === e ? t.matrixWorld.copy(t.matrix) : t.matrixWorld.multiplyMatrices(e.matrixWorld, t.matrix),
                    t.matrixWorldInverse.copy(t.matrixWorld).invert()
                }
                this.updateCamera = function(t) {
                    if (null === o)
                        return;
                    D.near = C.near = R.near = t.near,
                    D.far = C.far = R.far = t.far,
                    N === D.near && I === D.far || (o.updateRenderState({
                        depthNear: D.near,
                        depthFar: D.far
                    }),
                    N = D.near,
                    I = D.far);
                    const e = t.parent
                      , n = D.cameras;
                    G(D, e);
                    for (let i = 0; i < n.length; i++)
                        G(n[i], e);
                    D.matrixWorld.decompose(D.position, D.quaternion, D.scale),
                    t.position.copy(D.position),
                    t.quaternion.copy(D.quaternion),
                    t.scale.copy(D.scale),
                    t.matrix.copy(D.matrix),
                    t.matrixWorld.copy(D.matrixWorld);
                    const r = t.children;
                    for (let i = 0, t = r.length; i < t; i++)
                        r[i].updateMatrixWorld(!0);
                    2 === n.length ? function(t, e, n) {
                        z.setFromMatrixPosition(e.matrixWorld),
                        B.setFromMatrixPosition(n.matrixWorld);
                        const r = z.distanceTo(B)
                          , o = e.projectionMatrix.elements
                          , l = n.projectionMatrix.elements
                          , c = o[14] / (o[10] - 1)
                          , h = o[14] / (o[10] + 1)
                          , d = (o[9] + 1) / o[5]
                          , f = (o[9] - 1) / o[5]
                          , m = (o[8] - 1) / o[0]
                          , v = (l[8] + 1) / l[0]
                          , _ = c * m
                          , x = c * v
                          , y = r / (-m + v)
                          , M = y * -m;
                        e.matrixWorld.decompose(t.position, t.quaternion, t.scale),
                        t.translateX(M),
                        t.translateZ(y),
                        t.matrixWorld.compose(t.position, t.quaternion, t.scale),
                        t.matrixWorldInverse.copy(t.matrixWorld).invert();
                        const w = c + y
                          , S = h + y
                          , T = _ - M
                          , E = x + (r - M)
                          , A = d * h / S * w
                          , L = f * h / S * w;
                        t.projectionMatrix.makePerspective(T, E, A, L, w, S)
                    }(D, R, C) : D.projectionMatrix.copy(R.projectionMatrix)
                }
                ,
                this.getCamera = function() {
                    return D
                }
                ,
                this.getFoveation = function() {
                    return null !== v ? v.fixedFoveation : null !== _ ? _.fixedFoveation : void 0
                }
                ,
                this.setFoveation = function(t) {
                    null !== v && (v.fixedFoveation = t),
                    null !== _ && void 0 !== _.fixedFoveation && (_.fixedFoveation = t)
                }
                ;
                let H = null;
                const k = new $n;
                k.setAnimationLoop((function(time, t) {
                    if (d = t.getViewerPose(c),
                    S = t,
                    null !== d) {
                        const t = d.views;
                        null !== _ && r.bindXRFramebuffer(_.framebuffer);
                        let n = !1;
                        t.length !== D.cameras.length && (D.cameras.length = 0,
                        n = !0);
                        for (let i = 0; i < t.length; i++) {
                            const view = t[i];
                            let o = null;
                            if (null !== _)
                                o = _.getViewport(view);
                            else {
                                const t = f.getViewSubImage(v, view);
                                r.bindXRFramebuffer(m),
                                void 0 !== t.depthStencilTexture && e.framebufferTexture2D(36160, T, 3553, t.depthStencilTexture, 0),
                                e.framebufferTexture2D(36160, 36064, 3553, t.colorTexture, 0),
                                o = t.viewport
                            }
                            const l = P[i];
                            l.matrix.fromArray(view.transform.matrix),
                            l.projectionMatrix.fromArray(view.projectionMatrix),
                            l.viewport.set(o.x, o.y, o.width, o.height),
                            0 === i && D.matrix.copy(l.matrix),
                            !0 === n && D.cameras.push(l)
                        }
                        x && (r.bindXRFramebuffer(y),
                        null !== E && e.clear(E))
                    }
                    const n = o.inputSources;
                    for (let i = 0; i < A.length; i++) {
                        const e = A[i]
                          , r = n[i];
                        e.update(r, t, c)
                    }
                    if (H && H(time, t),
                    x) {
                        const t = v.textureWidth
                          , n = v.textureHeight;
                        r.bindFramebuffer(36008, y),
                        r.bindFramebuffer(36009, m),
                        e.invalidateFramebuffer(36008, [T]),
                        e.invalidateFramebuffer(36009, [T]),
                        e.blitFramebuffer(0, 0, t, n, 0, 0, t, n, 16384, 9728),
                        e.invalidateFramebuffer(36008, [36064]),
                        r.bindFramebuffer(36008, null),
                        r.bindFramebuffer(36009, null),
                        r.bindFramebuffer(36160, y)
                    }
                    S = null
                }
                )),
                this.setAnimationLoop = function(t) {
                    H = t
                }
                ,
                this.dispose = function() {}
            }
        }
        function Va(t) {
            function e(e, n) {
                e.opacity.value = n.opacity,
                n.color && e.diffuse.value.copy(n.color),
                n.emissive && e.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity),
                n.map && (e.map.value = n.map),
                n.alphaMap && (e.alphaMap.value = n.alphaMap),
                n.specularMap && (e.specularMap.value = n.specularMap),
                n.alphaTest > 0 && (e.alphaTest.value = n.alphaTest);
                const r = t.get(n).envMap;
                if (r) {
                    e.envMap.value = r,
                    e.flipEnvMap.value = r.isCubeTexture && !1 === r.isRenderTargetTexture ? -1 : 1,
                    e.reflectivity.value = n.reflectivity,
                    e.ior.value = n.ior,
                    e.refractionRatio.value = n.refractionRatio;
                    const o = t.get(r).__maxMipLevel;
                    void 0 !== o && (e.maxMipLevel.value = o)
                }
                let o, l;
                n.lightMap && (e.lightMap.value = n.lightMap,
                e.lightMapIntensity.value = n.lightMapIntensity),
                n.aoMap && (e.aoMap.value = n.aoMap,
                e.aoMapIntensity.value = n.aoMapIntensity),
                n.map ? o = n.map : n.specularMap ? o = n.specularMap : n.displacementMap ? o = n.displacementMap : n.normalMap ? o = n.normalMap : n.bumpMap ? o = n.bumpMap : n.roughnessMap ? o = n.roughnessMap : n.metalnessMap ? o = n.metalnessMap : n.alphaMap ? o = n.alphaMap : n.emissiveMap ? o = n.emissiveMap : n.clearcoatMap ? o = n.clearcoatMap : n.clearcoatNormalMap ? o = n.clearcoatNormalMap : n.clearcoatRoughnessMap ? o = n.clearcoatRoughnessMap : n.specularIntensityMap ? o = n.specularIntensityMap : n.specularColorMap ? o = n.specularColorMap : n.transmissionMap ? o = n.transmissionMap : n.thicknessMap ? o = n.thicknessMap : n.sheenColorMap ? o = n.sheenColorMap : n.sheenRoughnessMap && (o = n.sheenRoughnessMap),
                void 0 !== o && (o.isWebGLRenderTarget && (o = o.texture),
                !0 === o.matrixAutoUpdate && o.updateMatrix(),
                e.uvTransform.value.copy(o.matrix)),
                n.aoMap ? l = n.aoMap : n.lightMap && (l = n.lightMap),
                void 0 !== l && (l.isWebGLRenderTarget && (l = l.texture),
                !0 === l.matrixAutoUpdate && l.updateMatrix(),
                e.uv2Transform.value.copy(l.matrix))
            }
            function n(e, n) {
                e.roughness.value = n.roughness,
                e.metalness.value = n.metalness,
                n.roughnessMap && (e.roughnessMap.value = n.roughnessMap),
                n.metalnessMap && (e.metalnessMap.value = n.metalnessMap),
                n.emissiveMap && (e.emissiveMap.value = n.emissiveMap),
                n.bumpMap && (e.bumpMap.value = n.bumpMap,
                e.bumpScale.value = n.bumpScale,
                1 === n.side && (e.bumpScale.value *= -1)),
                n.normalMap && (e.normalMap.value = n.normalMap,
                e.normalScale.value.copy(n.normalScale),
                1 === n.side && e.normalScale.value.negate()),
                n.displacementMap && (e.displacementMap.value = n.displacementMap,
                e.displacementScale.value = n.displacementScale,
                e.displacementBias.value = n.displacementBias);
                t.get(n).envMap && (e.envMapIntensity.value = n.envMapIntensity)
            }
            return {
                refreshFogUniforms: function(t, e) {
                    t.fogColor.value.copy(e.color),
                    e.isFog ? (t.fogNear.value = e.near,
                    t.fogFar.value = e.far) : e.isFogExp2 && (t.fogDensity.value = e.density)
                },
                refreshMaterialUniforms: function(t, r, o, l, c) {
                    r.isMeshBasicMaterial ? e(t, r) : r.isMeshLambertMaterial ? (e(t, r),
                    function(t, e) {
                        e.emissiveMap && (t.emissiveMap.value = e.emissiveMap)
                    }(t, r)) : r.isMeshToonMaterial ? (e(t, r),
                    function(t, e) {
                        e.gradientMap && (t.gradientMap.value = e.gradientMap);
                        e.emissiveMap && (t.emissiveMap.value = e.emissiveMap);
                        e.bumpMap && (t.bumpMap.value = e.bumpMap,
                        t.bumpScale.value = e.bumpScale,
                        1 === e.side && (t.bumpScale.value *= -1));
                        e.normalMap && (t.normalMap.value = e.normalMap,
                        t.normalScale.value.copy(e.normalScale),
                        1 === e.side && t.normalScale.value.negate());
                        e.displacementMap && (t.displacementMap.value = e.displacementMap,
                        t.displacementScale.value = e.displacementScale,
                        t.displacementBias.value = e.displacementBias)
                    }(t, r)) : r.isMeshPhongMaterial ? (e(t, r),
                    function(t, e) {
                        t.specular.value.copy(e.specular),
                        t.shininess.value = Math.max(e.shininess, 1e-4),
                        e.emissiveMap && (t.emissiveMap.value = e.emissiveMap);
                        e.bumpMap && (t.bumpMap.value = e.bumpMap,
                        t.bumpScale.value = e.bumpScale,
                        1 === e.side && (t.bumpScale.value *= -1));
                        e.normalMap && (t.normalMap.value = e.normalMap,
                        t.normalScale.value.copy(e.normalScale),
                        1 === e.side && t.normalScale.value.negate());
                        e.displacementMap && (t.displacementMap.value = e.displacementMap,
                        t.displacementScale.value = e.displacementScale,
                        t.displacementBias.value = e.displacementBias)
                    }(t, r)) : r.isMeshStandardMaterial ? (e(t, r),
                    r.isMeshPhysicalMaterial ? function(t, e, r) {
                        n(t, e),
                        t.ior.value = e.ior,
                        e.sheen > 0 && (t.sheenColor.value.copy(e.sheenColor).multiplyScalar(e.sheen),
                        t.sheenRoughness.value = e.sheenRoughness,
                        e.sheenColorMap && (t.sheenColorMap.value = e.sheenColorMap),
                        e.sheenRoughnessMap && (t.sheenRoughnessMap.value = e.sheenRoughnessMap));
                        e.clearcoat > 0 && (t.clearcoat.value = e.clearcoat,
                        t.clearcoatRoughness.value = e.clearcoatRoughness,
                        e.clearcoatMap && (t.clearcoatMap.value = e.clearcoatMap),
                        e.clearcoatRoughnessMap && (t.clearcoatRoughnessMap.value = e.clearcoatRoughnessMap),
                        e.clearcoatNormalMap && (t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),
                        t.clearcoatNormalMap.value = e.clearcoatNormalMap,
                        1 === e.side && t.clearcoatNormalScale.value.negate()));
                        e.transmission > 0 && (t.transmission.value = e.transmission,
                        t.transmissionSamplerMap.value = r.texture,
                        t.transmissionSamplerSize.value.set(r.width, r.height),
                        e.transmissionMap && (t.transmissionMap.value = e.transmissionMap),
                        t.thickness.value = e.thickness,
                        e.thicknessMap && (t.thicknessMap.value = e.thicknessMap),
                        t.attenuationDistance.value = e.attenuationDistance,
                        t.attenuationColor.value.copy(e.attenuationColor));
                        t.specularIntensity.value = e.specularIntensity,
                        t.specularColor.value.copy(e.specularColor),
                        e.specularIntensityMap && (t.specularIntensityMap.value = e.specularIntensityMap);
                        e.specularColorMap && (t.specularColorMap.value = e.specularColorMap)
                    }(t, r, c) : n(t, r)) : r.isMeshMatcapMaterial ? (e(t, r),
                    function(t, e) {
                        e.matcap && (t.matcap.value = e.matcap);
                        e.bumpMap && (t.bumpMap.value = e.bumpMap,
                        t.bumpScale.value = e.bumpScale,
                        1 === e.side && (t.bumpScale.value *= -1));
                        e.normalMap && (t.normalMap.value = e.normalMap,
                        t.normalScale.value.copy(e.normalScale),
                        1 === e.side && t.normalScale.value.negate());
                        e.displacementMap && (t.displacementMap.value = e.displacementMap,
                        t.displacementScale.value = e.displacementScale,
                        t.displacementBias.value = e.displacementBias)
                    }(t, r)) : r.isMeshDepthMaterial ? (e(t, r),
                    function(t, e) {
                        e.displacementMap && (t.displacementMap.value = e.displacementMap,
                        t.displacementScale.value = e.displacementScale,
                        t.displacementBias.value = e.displacementBias)
                    }(t, r)) : r.isMeshDistanceMaterial ? (e(t, r),
                    function(t, e) {
                        e.displacementMap && (t.displacementMap.value = e.displacementMap,
                        t.displacementScale.value = e.displacementScale,
                        t.displacementBias.value = e.displacementBias);
                        t.referencePosition.value.copy(e.referencePosition),
                        t.nearDistance.value = e.nearDistance,
                        t.farDistance.value = e.farDistance
                    }(t, r)) : r.isMeshNormalMaterial ? (e(t, r),
                    function(t, e) {
                        e.bumpMap && (t.bumpMap.value = e.bumpMap,
                        t.bumpScale.value = e.bumpScale,
                        1 === e.side && (t.bumpScale.value *= -1));
                        e.normalMap && (t.normalMap.value = e.normalMap,
                        t.normalScale.value.copy(e.normalScale),
                        1 === e.side && t.normalScale.value.negate());
                        e.displacementMap && (t.displacementMap.value = e.displacementMap,
                        t.displacementScale.value = e.displacementScale,
                        t.displacementBias.value = e.displacementBias)
                    }(t, r)) : r.isLineBasicMaterial ? (function(t, e) {
                        t.diffuse.value.copy(e.color),
                        t.opacity.value = e.opacity
                    }(t, r),
                    r.isLineDashedMaterial && function(t, e) {
                        t.dashSize.value = e.dashSize,
                        t.totalSize.value = e.dashSize + e.gapSize,
                        t.scale.value = e.scale
                    }(t, r)) : r.isPointsMaterial ? function(t, e, n, r) {
                        t.diffuse.value.copy(e.color),
                        t.opacity.value = e.opacity,
                        t.size.value = e.size * n,
                        t.scale.value = .5 * r,
                        e.map && (t.map.value = e.map);
                        e.alphaMap && (t.alphaMap.value = e.alphaMap);
                        e.alphaTest > 0 && (t.alphaTest.value = e.alphaTest);
                        let o;
                        e.map ? o = e.map : e.alphaMap && (o = e.alphaMap);
                        void 0 !== o && (!0 === o.matrixAutoUpdate && o.updateMatrix(),
                        t.uvTransform.value.copy(o.matrix))
                    }(t, r, o, l) : r.isSpriteMaterial ? function(t, e) {
                        t.diffuse.value.copy(e.color),
                        t.opacity.value = e.opacity,
                        t.rotation.value = e.rotation,
                        e.map && (t.map.value = e.map);
                        e.alphaMap && (t.alphaMap.value = e.alphaMap);
                        e.alphaTest > 0 && (t.alphaTest.value = e.alphaTest);
                        let n;
                        e.map ? n = e.map : e.alphaMap && (n = e.alphaMap);
                        void 0 !== n && (!0 === n.matrixAutoUpdate && n.updateMatrix(),
                        t.uvTransform.value.copy(n.matrix))
                    }(t, r) : r.isShadowMaterial ? (t.color.value.copy(r.color),
                    t.opacity.value = r.opacity) : r.isShaderMaterial && (r.uniformsNeedUpdate = !1)
                }
            }
        }
        function Wa(t={}) {
            const e = void 0 !== t.canvas ? t.canvas : function() {
                const canvas = yt("canvas");
                return canvas.style.display = "block",
                canvas
            }()
              , n = void 0 !== t.context ? t.context : null
              , r = void 0 !== t.alpha && t.alpha
              , o = void 0 === t.depth || t.depth
              , l = void 0 === t.stencil || t.stencil
              , c = void 0 !== t.antialias && t.antialias
              , h = void 0 === t.premultipliedAlpha || t.premultipliedAlpha
              , d = void 0 !== t.preserveDrawingBuffer && t.preserveDrawingBuffer
              , f = void 0 !== t.powerPreference ? t.powerPreference : "default"
              , m = void 0 !== t.failIfMajorPerformanceCaveat && t.failIfMajorPerformanceCaveat;
            let v = null
              , _ = null;
            const x = []
              , y = [];
            this.domElement = e,
            this.debug = {
                checkShaderErrors: !0
            },
            this.autoClear = !0,
            this.autoClearColor = !0,
            this.autoClearDepth = !0,
            this.autoClearStencil = !0,
            this.sortObjects = !0,
            this.clippingPlanes = [],
            this.localClippingEnabled = !1,
            this.gammaFactor = 2,
            this.outputEncoding = J,
            this.physicallyCorrectLights = !1,
            this.toneMapping = 0,
            this.toneMappingExposure = 1;
            const M = this;
            let w = !1
              , S = 0
              , E = 0
              , L = null
              , R = -1
              , C = null;
            const N = new At
              , I = new At;
            let U = null
              , z = e.width
              , G = e.height
              , H = 1
              , k = null
              , V = null;
            const W = new At(0,0,z,G)
              , j = new At(0,0,z,G);
            let X = !1;
            const Y = []
              , Z = new Qn;
            let K = !1
              , Q = !1
              , $ = null;
            const tt = new le
              , et = new Pt
              , nt = {
                background: null,
                fog: null,
                environment: null,
                overrideMaterial: null,
                isScene: !0
            };
            function it() {
                return null === L ? H : 1
            }
            let at, st, ot, lt, ct, ht, ut, pt, ft, mt, gt, vt, _t, xt, Mt, bt, wt, St, Tt, Et, Ct, Dt, Nt, It = n;
            function Ot(t, n) {
                for (let i = 0; i < t.length; i++) {
                    const r = t[i]
                      , o = e.getContext(r, n);
                    if (null !== o)
                        return o
                }
                return null
            }
            try {
                const t = {
                    alpha: r,
                    depth: o,
                    stencil: l,
                    antialias: c,
                    premultipliedAlpha: h,
                    preserveDrawingBuffer: d,
                    powerPreference: f,
                    failIfMajorPerformanceCaveat: m
                };
                if (e.addEventListener("webglcontextlost", zt, !1),
                e.addEventListener("webglcontextrestored", Bt, !1),
                null === It) {
                    const e = ["webgl2", "webgl", "experimental-webgl"];
                    if (!0 === M.isWebGL1Renderer && e.shift(),
                    It = Ot(e, t),
                    null === It)
                        throw Ot(e) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.")
                }
                void 0 === It.getShaderPrecisionFormat && (It.getShaderPrecisionFormat = function() {
                    return {
                        rangeMin: 1,
                        rangeMax: 1,
                        precision: 1
                    }
                }
                )
            } catch (t) {
                throw console.error("THREE.WebGLRenderer: " + t.message),
                t
            }
            function Ft() {
                at = new zi(It),
                st = new ci(It,at,t),
                at.init(st),
                Dt = new Ua(It,at,st),
                ot = new Oa(It,at,st),
                Y[0] = 1029,
                lt = new Hi(It),
                ct = new Ma,
                ht = new Fa(It,at,ot,ct,st,Dt,lt),
                ut = new ui(M),
                pt = new Ui(M),
                ft = new ti(It,st),
                Nt = new si(It,at,ft,st),
                mt = new Bi(It,ft,lt,Nt),
                gt = new qi(It,mt,ft,lt),
                Tt = new Xi(It,st,ht),
                bt = new hi(ct),
                vt = new ya(M,ut,pt,at,st,Nt,bt),
                _t = new Va(ct),
                xt = new Ta(ct),
                Mt = new Pa(at,st),
                St = new ai(M,ut,ot,gt,h),
                wt = new Ia(M,gt,st),
                Et = new oi(It,at,lt,st),
                Ct = new Gi(It,at,lt,st),
                lt.programs = vt.programs,
                M.capabilities = st,
                M.extensions = at,
                M.properties = ct,
                M.renderLists = xt,
                M.shadowMap = wt,
                M.state = ot,
                M.info = lt
            }
            Ft();
            const Ut = new ka(M,It);
            function zt(t) {
                t.preventDefault(),
                console.log("THREE.WebGLRenderer: Context Lost."),
                w = !0
            }
            function Bt() {
                console.log("THREE.WebGLRenderer: Context Restored."),
                w = !1;
                const t = lt.autoReset
                  , e = wt.enabled
                  , n = wt.autoUpdate
                  , r = wt.needsUpdate
                  , o = wt.type;
                Ft(),
                lt.autoReset = t,
                wt.enabled = e,
                wt.autoUpdate = n,
                wt.needsUpdate = r,
                wt.type = o
            }
            function Gt(t) {
                const e = t.target;
                e.removeEventListener("dispose", Gt),
                function(t) {
                    (function(t) {
                        const e = ct.get(t).programs;
                        void 0 !== e && e.forEach((function(t) {
                            vt.releaseProgram(t)
                        }
                        ))
                    }
                    )(t),
                    ct.remove(t)
                }(e)
            }
            this.xr = Ut,
            this.getContext = function() {
                return It
            }
            ,
            this.getContextAttributes = function() {
                return It.getContextAttributes()
            }
            ,
            this.forceContextLoss = function() {
                const t = at.get("WEBGL_lose_context");
                t && t.loseContext()
            }
            ,
            this.forceContextRestore = function() {
                const t = at.get("WEBGL_lose_context");
                t && t.restoreContext()
            }
            ,
            this.getPixelRatio = function() {
                return H
            }
            ,
            this.setPixelRatio = function(t) {
                void 0 !== t && (H = t,
                this.setSize(z, G, !1))
            }
            ,
            this.getSize = function(t) {
                return t.set(z, G)
            }
            ,
            this.setSize = function(t, n, r) {
                Ut.isPresenting ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.") : (z = t,
                G = n,
                e.width = Math.floor(t * H),
                e.height = Math.floor(n * H),
                !1 !== r && (e.style.width = t + "px",
                e.style.height = n + "px"),
                this.setViewport(0, 0, t, n))
            }
            ,
            this.getDrawingBufferSize = function(t) {
                return t.set(z * H, G * H).floor()
            }
            ,
            this.setDrawingBufferSize = function(t, n, r) {
                z = t,
                G = n,
                H = r,
                e.width = Math.floor(t * r),
                e.height = Math.floor(n * r),
                this.setViewport(0, 0, t, n)
            }
            ,
            this.getCurrentViewport = function(t) {
                return t.copy(N)
            }
            ,
            this.getViewport = function(t) {
                return t.copy(W)
            }
            ,
            this.setViewport = function(t, e, n, r) {
                t.isVector4 ? W.set(t.x, t.y, t.z, t.w) : W.set(t, e, n, r),
                ot.viewport(N.copy(W).multiplyScalar(H).floor())
            }
            ,
            this.getScissor = function(t) {
                return t.copy(j)
            }
            ,
            this.setScissor = function(t, e, n, r) {
                t.isVector4 ? j.set(t.x, t.y, t.z, t.w) : j.set(t, e, n, r),
                ot.scissor(I.copy(j).multiplyScalar(H).floor())
            }
            ,
            this.getScissorTest = function() {
                return X
            }
            ,
            this.setScissorTest = function(t) {
                ot.setScissorTest(X = t)
            }
            ,
            this.setOpaqueSort = function(t) {
                k = t
            }
            ,
            this.setTransparentSort = function(t) {
                V = t
            }
            ,
            this.getClearColor = function(t) {
                return t.copy(St.getClearColor())
            }
            ,
            this.setClearColor = function() {
                St.setClearColor.apply(St, arguments)
            }
            ,
            this.getClearAlpha = function() {
                return St.getClearAlpha()
            }
            ,
            this.setClearAlpha = function() {
                St.setClearAlpha.apply(St, arguments)
            }
            ,
            this.clear = function(t, e, n) {
                let r = 0;
                (void 0 === t || t) && (r |= 16384),
                (void 0 === e || e) && (r |= 256),
                (void 0 === n || n) && (r |= 1024),
                It.clear(r)
            }
            ,
            this.clearColor = function() {
                this.clear(!0, !1, !1)
            }
            ,
            this.clearDepth = function() {
                this.clear(!1, !0, !1)
            }
            ,
            this.clearStencil = function() {
                this.clear(!1, !1, !0)
            }
            ,
            this.dispose = function() {
                e.removeEventListener("webglcontextlost", zt, !1),
                e.removeEventListener("webglcontextrestored", Bt, !1),
                xt.dispose(),
                Mt.dispose(),
                ct.dispose(),
                ut.dispose(),
                pt.dispose(),
                gt.dispose(),
                Nt.dispose(),
                Ut.dispose(),
                Ut.removeEventListener("sessionstart", kt),
                Ut.removeEventListener("sessionend", Vt),
                $ && ($.dispose(),
                $ = null),
                Wt.stop()
            }
            ,
            this.renderBufferDirect = function(t, e, n, r, object, o) {
                null === e && (e = nt);
                const l = object.isMesh && object.matrixWorld.determinant() < 0
                  , c = function(t, e, n, r, object) {
                    !0 !== e.isScene && (e = nt);
                    ht.resetTextureUnits();
                    const o = e.fog
                      , l = r.isMeshStandardMaterial ? e.environment : null
                      , c = null === L ? M.outputEncoding : L.texture.encoding
                      , h = (r.isMeshStandardMaterial ? pt : ut).get(r.envMap || l)
                      , d = !0 === r.vertexColors && !!n.attributes.color && 4 === n.attributes.color.itemSize
                      , f = !!r.normalMap && !!n.attributes.tangent
                      , m = !!n.morphAttributes.position
                      , v = !!n.morphAttributes.normal
                      , x = n.morphAttributes.position ? n.morphAttributes.position.length : 0
                      , y = ct.get(r)
                      , w = _.state.lights;
                    if (!0 === K && (!0 === Q || t !== C)) {
                        const e = t === C && r.id === R;
                        bt.setState(r, t, e)
                    }
                    let S = !1;
                    r.version === y.__version ? y.needsLights && y.lightsStateVersion !== w.state.version || y.outputEncoding !== c || object.isInstancedMesh && !1 === y.instancing ? S = !0 : object.isInstancedMesh || !0 !== y.instancing ? object.isSkinnedMesh && !1 === y.skinning ? S = !0 : object.isSkinnedMesh || !0 !== y.skinning ? y.envMap !== h || r.fog && y.fog !== o ? S = !0 : void 0 === y.numClippingPlanes || y.numClippingPlanes === bt.numPlanes && y.numIntersection === bt.numIntersection ? (y.vertexAlphas !== d || y.vertexTangents !== f || y.morphTargets !== m || y.morphNormals !== v || !0 === st.isWebGL2 && y.morphTargetsCount !== x) && (S = !0) : S = !0 : S = !0 : S = !0 : (S = !0,
                    y.__version = r.version);
                    let T = y.currentProgram;
                    !0 === S && (T = Zt(r, e, object));
                    let E = !1
                      , A = !1
                      , P = !1;
                    const D = T.getUniforms()
                      , N = y.uniforms;
                    ot.useProgram(T.program) && (E = !0,
                    A = !0,
                    P = !0);
                    r.id !== R && (R = r.id,
                    A = !0);
                    if (E || C !== t) {
                        if (D.setValue(It, "projectionMatrix", t.projectionMatrix),
                        st.logarithmicDepthBuffer && D.setValue(It, "logDepthBufFC", 2 / (Math.log(t.far + 1) / Math.LN2)),
                        C !== t && (C = t,
                        A = !0,
                        P = !0),
                        r.isShaderMaterial || r.isMeshPhongMaterial || r.isMeshToonMaterial || r.isMeshStandardMaterial || r.envMap) {
                            const e = D.map.cameraPosition;
                            void 0 !== e && e.setValue(It, et.setFromMatrixPosition(t.matrixWorld))
                        }
                        (r.isMeshPhongMaterial || r.isMeshToonMaterial || r.isMeshLambertMaterial || r.isMeshBasicMaterial || r.isMeshStandardMaterial || r.isShaderMaterial) && D.setValue(It, "isOrthographic", !0 === t.isOrthographicCamera),
                        (r.isMeshPhongMaterial || r.isMeshToonMaterial || r.isMeshLambertMaterial || r.isMeshBasicMaterial || r.isMeshStandardMaterial || r.isShaderMaterial || r.isShadowMaterial || object.isSkinnedMesh) && D.setValue(It, "viewMatrix", t.matrixWorldInverse)
                    }
                    if (object.isSkinnedMesh) {
                        D.setOptional(It, object, "bindMatrix"),
                        D.setOptional(It, object, "bindMatrixInverse");
                        const t = object.skeleton;
                        t && (st.floatVertexTextures ? (null === t.boneTexture && t.computeBoneTexture(),
                        D.setValue(It, "boneTexture", t.boneTexture, ht),
                        D.setValue(It, "boneTextureSize", t.boneTextureSize)) : D.setOptional(It, t, "boneMatrices"))
                    }
                    !n || void 0 === n.morphAttributes.position && void 0 === n.morphAttributes.normal || Tt.update(object, n, r, T);
                    (A || y.receiveShadow !== object.receiveShadow) && (y.receiveShadow = object.receiveShadow,
                    D.setValue(It, "receiveShadow", object.receiveShadow));
                    A && (D.setValue(It, "toneMappingExposure", M.toneMappingExposure),
                    y.needsLights && (O = P,
                    (I = N).ambientLightColor.needsUpdate = O,
                    I.lightProbe.needsUpdate = O,
                    I.directionalLights.needsUpdate = O,
                    I.directionalLightShadows.needsUpdate = O,
                    I.pointLights.needsUpdate = O,
                    I.pointLightShadows.needsUpdate = O,
                    I.spotLights.needsUpdate = O,
                    I.spotLightShadows.needsUpdate = O,
                    I.rectAreaLights.needsUpdate = O,
                    I.hemisphereLights.needsUpdate = O),
                    o && r.fog && _t.refreshFogUniforms(N, o),
                    _t.refreshMaterialUniforms(N, r, H, G, $),
                    $r.upload(It, y.uniformsList, N, ht));
                    var I, O;
                    r.isShaderMaterial && !0 === r.uniformsNeedUpdate && ($r.upload(It, y.uniformsList, N, ht),
                    r.uniformsNeedUpdate = !1);
                    r.isSpriteMaterial && D.setValue(It, "center", object.center);
                    return D.setValue(It, "modelViewMatrix", object.modelViewMatrix),
                    D.setValue(It, "normalMatrix", object.normalMatrix),
                    D.setValue(It, "modelMatrix", object.matrixWorld),
                    T
                }(t, e, n, r, object);
                ot.setMaterial(r, l);
                let h = n.index;
                const d = n.attributes.position;
                if (null === h) {
                    if (void 0 === d || 0 === d.count)
                        return
                } else if (0 === h.count)
                    return;
                let f, m = 1;
                !0 === r.wireframe && (h = mt.getWireframeAttribute(n),
                m = 2),
                Nt.setup(object, r, c, n, h);
                let v = Et;
                null !== h && (f = ft.get(h),
                v = Ct,
                v.setIndex(f));
                const x = null !== h ? h.count : d.count
                  , y = n.drawRange.start * m
                  , w = n.drawRange.count * m
                  , S = null !== o ? o.start * m : 0
                  , T = null !== o ? o.count * m : 1 / 0
                  , E = Math.max(y, S)
                  , A = Math.min(x, y + w, S + T) - 1
                  , P = Math.max(0, A - E + 1);
                if (0 !== P) {
                    if (object.isMesh)
                        !0 === r.wireframe ? (ot.setLineWidth(r.wireframeLinewidth * it()),
                        v.setMode(1)) : v.setMode(4);
                    else if (object.isLine) {
                        let t = r.linewidth;
                        void 0 === t && (t = 1),
                        ot.setLineWidth(t * it()),
                        object.isLineSegments ? v.setMode(1) : object.isLineLoop ? v.setMode(2) : v.setMode(3)
                    } else
                        object.isPoints ? v.setMode(0) : object.isSprite && v.setMode(4);
                    if (object.isInstancedMesh)
                        v.renderInstances(E, P, object.count);
                    else if (n.isInstancedBufferGeometry) {
                        const t = Math.min(n.instanceCount, n._maxInstanceCount);
                        v.renderInstances(E, P, t)
                    } else
                        v.render(E, P)
                }
            }
            ,
            this.compile = function(t, e) {
                _ = Mt.get(t),
                _.init(),
                y.push(_),
                t.traverseVisible((function(object) {
                    object.isLight && object.layers.test(e.layers) && (_.pushLight(object),
                    object.castShadow && _.pushShadow(object))
                }
                )),
                _.setupLights(M.physicallyCorrectLights),
                t.traverse((function(object) {
                    const e = object.material;
                    if (e)
                        if (Array.isArray(e))
                            for (let i = 0; i < e.length; i++) {
                                Zt(e[i], t, object)
                            }
                        else
                            Zt(e, t, object)
                }
                )),
                y.pop(),
                _ = null
            }
            ;
            let Ht = null;
            function kt() {
                Wt.stop()
            }
            function Vt() {
                Wt.start()
            }
            const Wt = new $n;
            function jt(object, t, e, n) {
                if (!1 === object.visible)
                    return;
                if (object.layers.test(t.layers))
                    if (object.isGroup)
                        e = object.renderOrder;
                    else if (object.isLOD)
                        !0 === object.autoUpdate && object.update(t);
                    else if (object.isLight)
                        _.pushLight(object),
                        object.castShadow && _.pushShadow(object);
                    else if (object.isSprite) {
                        if (!object.frustumCulled || Z.intersectsSprite(object)) {
                            n && et.setFromMatrixPosition(object.matrixWorld).applyMatrix4(tt);
                            const t = gt.update(object)
                              , r = object.material;
                            r.visible && v.push(object, t, r, e, et.z, null)
                        }
                    } else if ((object.isMesh || object.isLine || object.isPoints) && (object.isSkinnedMesh && object.skeleton.frame !== lt.render.frame && (object.skeleton.update(),
                    object.skeleton.frame = lt.render.frame),
                    !object.frustumCulled || Z.intersectsObject(object))) {
                        n && et.setFromMatrixPosition(object.matrixWorld).applyMatrix4(tt);
                        const t = gt.update(object)
                          , r = object.material;
                        if (Array.isArray(r)) {
                            const n = t.groups;
                            for (let i = 0, o = n.length; i < o; i++) {
                                const o = n[i]
                                  , l = r[o.materialIndex];
                                l && l.visible && v.push(object, t, l, e, et.z, o)
                            }
                        } else
                            r.visible && v.push(object, t, r, e, et.z, null)
                    }
                const r = object.children;
                for (let i = 0, o = r.length; i < o; i++)
                    jt(r[i], t, e, n)
            }
            function Xt(t, e, n, r) {
                const o = t.opaque
                  , l = t.transmissive
                  , h = t.transparent;
                _.setupLightsView(n),
                l.length > 0 && function(t, e, n) {
                    if (null === $) {
                        const t = !0 === c && !0 === st.isWebGL2;
                        $ = new (t ? Rt : Lt)(1024,1024,{
                            generateMipmaps: !0,
                            type: null !== Dt.convert(F) ? F : D,
                            minFilter: P,
                            magFilter: A,
                            wrapS: T,
                            wrapT: T
                        })
                    }
                    const r = M.getRenderTarget();
                    M.setRenderTarget($),
                    M.clear();
                    const o = M.toneMapping;
                    M.toneMapping = 0,
                    qt(t, e, n),
                    M.toneMapping = o,
                    ht.updateMultisampleRenderTarget($),
                    ht.updateRenderTargetMipmap($),
                    M.setRenderTarget(r)
                }(o, e, n),
                r && ot.viewport(N.copy(r)),
                o.length > 0 && qt(o, e, n),
                l.length > 0 && qt(l, e, n),
                h.length > 0 && qt(h, e, n)
            }
            function qt(t, e, n) {
                const r = !0 === e.isScene ? e.overrideMaterial : null;
                for (let i = 0, o = t.length; i < o; i++) {
                    const o = t[i]
                      , object = o.object
                      , l = o.geometry
                      , c = null === r ? o.material : r
                      , h = o.group;
                    object.layers.test(n.layers) && Yt(object, e, n, l, c, h)
                }
            }
            function Yt(object, t, e, n, r, o) {
                object.onBeforeRender(M, t, e, n, r, o),
                object.modelViewMatrix.multiplyMatrices(e.matrixWorldInverse, object.matrixWorld),
                object.normalMatrix.getNormalMatrix(object.modelViewMatrix),
                r.onBeforeRender(M, t, e, n, object, o),
                !0 === r.transparent && 2 === r.side ? (r.side = 1,
                r.needsUpdate = !0,
                M.renderBufferDirect(e, t, n, r, object, o),
                r.side = 0,
                r.needsUpdate = !0,
                M.renderBufferDirect(e, t, n, r, object, o),
                r.side = 2) : M.renderBufferDirect(e, t, n, r, object, o),
                object.onAfterRender(M, t, e, n, r, o)
            }
            function Zt(t, e, object) {
                !0 !== e.isScene && (e = nt);
                const n = ct.get(t)
                  , r = _.state.lights
                  , o = _.state.shadowsArray
                  , l = r.state.version
                  , c = vt.getParameters(t, r.state, o, e, object)
                  , h = vt.getProgramCacheKey(c);
                let d = n.programs;
                n.environment = t.isMeshStandardMaterial ? e.environment : null,
                n.fog = e.fog,
                n.envMap = (t.isMeshStandardMaterial ? pt : ut).get(t.envMap || n.environment),
                void 0 === d && (t.addEventListener("dispose", Gt),
                d = new Map,
                n.programs = d);
                let f = d.get(h);
                if (void 0 !== f) {
                    if (n.currentProgram === f && n.lightsStateVersion === l)
                        return Jt(t, c),
                        f
                } else
                    c.uniforms = vt.getUniforms(t),
                    t.onBuild(object, c, M),
                    t.onBeforeCompile(c, M),
                    f = vt.acquireProgram(c, h),
                    d.set(h, f),
                    n.uniforms = c.uniforms;
                const m = n.uniforms;
                (t.isShaderMaterial || t.isRawShaderMaterial) && !0 !== t.clipping || (m.clippingPlanes = bt.uniform),
                Jt(t, c),
                n.needsLights = function(t) {
                    return t.isMeshLambertMaterial || t.isMeshToonMaterial || t.isMeshPhongMaterial || t.isMeshStandardMaterial || t.isShadowMaterial || t.isShaderMaterial && !0 === t.lights
                }(t),
                n.lightsStateVersion = l,
                n.needsLights && (m.ambientLightColor.value = r.state.ambient,
                m.lightProbe.value = r.state.probe,
                m.directionalLights.value = r.state.directional,
                m.directionalLightShadows.value = r.state.directionalShadow,
                m.spotLights.value = r.state.spot,
                m.spotLightShadows.value = r.state.spotShadow,
                m.rectAreaLights.value = r.state.rectArea,
                m.ltc_1.value = r.state.rectAreaLTC1,
                m.ltc_2.value = r.state.rectAreaLTC2,
                m.pointLights.value = r.state.point,
                m.pointLightShadows.value = r.state.pointShadow,
                m.hemisphereLights.value = r.state.hemi,
                m.directionalShadowMap.value = r.state.directionalShadowMap,
                m.directionalShadowMatrix.value = r.state.directionalShadowMatrix,
                m.spotShadowMap.value = r.state.spotShadowMap,
                m.spotShadowMatrix.value = r.state.spotShadowMatrix,
                m.pointShadowMap.value = r.state.pointShadowMap,
                m.pointShadowMatrix.value = r.state.pointShadowMatrix);
                const v = f.getUniforms()
                  , x = $r.seqWithValue(v.seq, m);
                return n.currentProgram = f,
                n.uniformsList = x,
                f
            }
            function Jt(t, e) {
                const n = ct.get(t);
                n.outputEncoding = e.outputEncoding,
                n.instancing = e.instancing,
                n.skinning = e.skinning,
                n.morphTargets = e.morphTargets,
                n.morphNormals = e.morphNormals,
                n.morphTargetsCount = e.morphTargetsCount,
                n.numClippingPlanes = e.numClippingPlanes,
                n.numIntersection = e.numClipIntersection,
                n.vertexAlphas = e.vertexAlphas,
                n.vertexTangents = e.vertexTangents
            }
            Wt.setAnimationLoop((function(time) {
                Ht && Ht(time)
            }
            )),
            "undefined" != typeof window && Wt.setContext(window),
            this.setAnimationLoop = function(t) {
                Ht = t,
                Ut.setAnimationLoop(t),
                null === t ? Wt.stop() : Wt.start()
            }
            ,
            Ut.addEventListener("sessionstart", kt),
            Ut.addEventListener("sessionend", Vt),
            this.render = function(t, e) {
                if (void 0 !== e && !0 !== e.isCamera)
                    return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
                if (!0 === w)
                    return;
                !0 === t.autoUpdate && t.updateMatrixWorld(),
                null === e.parent && e.updateMatrixWorld(),
                !0 === Ut.enabled && !0 === Ut.isPresenting && (!0 === Ut.cameraAutoUpdate && Ut.updateCamera(e),
                e = Ut.getCamera()),
                !0 === t.isScene && t.onBeforeRender(M, t, e, L),
                _ = Mt.get(t, y.length),
                _.init(),
                y.push(_),
                tt.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse),
                Z.setFromProjectionMatrix(tt),
                Q = this.localClippingEnabled,
                K = bt.init(this.clippingPlanes, Q, e),
                v = xt.get(t, x.length),
                v.init(),
                x.push(v),
                jt(t, e, 0, M.sortObjects),
                v.finish(),
                !0 === M.sortObjects && v.sort(k, V),
                !0 === K && bt.beginShadows();
                const n = _.state.shadowsArray;
                if (wt.render(n, t, e),
                !0 === K && bt.endShadows(),
                !0 === this.info.autoReset && this.info.reset(),
                St.render(v, t),
                _.setupLights(M.physicallyCorrectLights),
                e.isArrayCamera) {
                    const n = e.cameras;
                    for (let i = 0, e = n.length; i < e; i++) {
                        const e = n[i];
                        Xt(v, t, e, e.viewport)
                    }
                } else
                    Xt(v, t, e);
                null !== L && (ht.updateMultisampleRenderTarget(L),
                ht.updateRenderTargetMipmap(L)),
                !0 === t.isScene && t.onAfterRender(M, t, e),
                ot.buffers.depth.setTest(!0),
                ot.buffers.depth.setMask(!0),
                ot.buffers.color.setMask(!0),
                ot.setPolygonOffset(!1),
                Nt.resetDefaultState(),
                R = -1,
                C = null,
                y.pop(),
                _ = y.length > 0 ? y[y.length - 1] : null,
                x.pop(),
                v = x.length > 0 ? x[x.length - 1] : null
            }
            ,
            this.getActiveCubeFace = function() {
                return S
            }
            ,
            this.getActiveMipmapLevel = function() {
                return E
            }
            ,
            this.getRenderTarget = function() {
                return L
            }
            ,
            this.setRenderTarget = function(t, e=0, n=0) {
                L = t,
                S = e,
                E = n,
                t && void 0 === ct.get(t).__webglFramebuffer && ht.setupRenderTarget(t);
                let r = null
                  , o = !1
                  , l = !1;
                if (t) {
                    const n = t.texture;
                    (n.isDataTexture3D || n.isDataTexture2DArray) && (l = !0);
                    const c = ct.get(t).__webglFramebuffer;
                    t.isWebGLCubeRenderTarget ? (r = c[e],
                    o = !0) : r = t.isWebGLMultisampleRenderTarget ? ct.get(t).__webglMultisampledFramebuffer : c,
                    N.copy(t.viewport),
                    I.copy(t.scissor),
                    U = t.scissorTest
                } else
                    N.copy(W).multiplyScalar(H).floor(),
                    I.copy(j).multiplyScalar(H).floor(),
                    U = X;
                if (ot.bindFramebuffer(36160, r) && st.drawBuffers) {
                    let e = !1;
                    if (t)
                        if (t.isWebGLMultipleRenderTargets) {
                            const n = t.texture;
                            if (Y.length !== n.length || 36064 !== Y[0]) {
                                for (let i = 0, t = n.length; i < t; i++)
                                    Y[i] = 36064 + i;
                                Y.length = n.length,
                                e = !0
                            }
                        } else
                            1 === Y.length && 36064 === Y[0] || (Y[0] = 36064,
                            Y.length = 1,
                            e = !0);
                    else
                        1 === Y.length && 1029 === Y[0] || (Y[0] = 1029,
                        Y.length = 1,
                        e = !0);
                    e && (st.isWebGL2 ? It.drawBuffers(Y) : at.get("WEBGL_draw_buffers").drawBuffersWEBGL(Y))
                }
                if (ot.viewport(N),
                ot.scissor(I),
                ot.setScissorTest(U),
                o) {
                    const r = ct.get(t.texture);
                    It.framebufferTexture2D(36160, 36064, 34069 + e, r.__webglTexture, n)
                } else if (l) {
                    const r = ct.get(t.texture)
                      , o = e || 0;
                    It.framebufferTextureLayer(36160, 36064, r.__webglTexture, n || 0, o)
                }
                R = -1
            }
            ,
            this.readRenderTargetPixels = function(t, e, n, r, o, l, c) {
                if (!t || !t.isWebGLRenderTarget)
                    return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
                let h = ct.get(t).__webglFramebuffer;
                if (t.isWebGLCubeRenderTarget && void 0 !== c && (h = h[c]),
                h) {
                    ot.bindFramebuffer(36160, h);
                    try {
                        const c = t.texture
                          , h = c.format
                          , d = c.type;
                        if (h !== B && Dt.convert(h) !== It.getParameter(35739))
                            return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
                        const f = d === F && (at.has("EXT_color_buffer_half_float") || st.isWebGL2 && at.has("EXT_color_buffer_float"));
                        if (!(d === D || Dt.convert(d) === It.getParameter(35738) || d === O && (st.isWebGL2 || at.has("OES_texture_float") || at.has("WEBGL_color_buffer_float")) || f))
                            return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
                        36053 === It.checkFramebufferStatus(36160) ? e >= 0 && e <= t.width - r && n >= 0 && n <= t.height - o && It.readPixels(e, n, r, o, Dt.convert(h), Dt.convert(d), l) : console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")
                    } finally {
                        const t = null !== L ? ct.get(L).__webglFramebuffer : null;
                        ot.bindFramebuffer(36160, t)
                    }
                }
            }
            ,
            this.copyFramebufferToTexture = function(t, e, n=0) {
                const r = Math.pow(2, -n)
                  , o = Math.floor(e.image.width * r)
                  , l = Math.floor(e.image.height * r);
                let c = Dt.convert(e.format);
                st.isWebGL2 && (6407 === c && (c = 32849),
                6408 === c && (c = 32856)),
                ht.setTexture2D(e, 0),
                It.copyTexImage2D(3553, n, c, t.x, t.y, o, l, 0),
                ot.unbindTexture()
            }
            ,
            this.copyTextureToTexture = function(t, e, n, r=0) {
                const o = e.image.width
                  , l = e.image.height
                  , c = Dt.convert(n.format)
                  , h = Dt.convert(n.type);
                ht.setTexture2D(n, 0),
                It.pixelStorei(37440, n.flipY),
                It.pixelStorei(37441, n.premultiplyAlpha),
                It.pixelStorei(3317, n.unpackAlignment),
                e.isDataTexture ? It.texSubImage2D(3553, r, t.x, t.y, o, l, c, h, e.image.data) : e.isCompressedTexture ? It.compressedTexSubImage2D(3553, r, t.x, t.y, e.mipmaps[0].width, e.mipmaps[0].height, c, e.mipmaps[0].data) : It.texSubImage2D(3553, r, t.x, t.y, c, h, e.image),
                0 === r && n.generateMipmaps && It.generateMipmap(3553),
                ot.unbindTexture()
            }
            ,
            this.copyTextureToTexture3D = function(t, e, n, r, o=0) {
                if (M.isWebGL1Renderer)
                    return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");
                const l = t.max.x - t.min.x + 1
                  , c = t.max.y - t.min.y + 1
                  , h = t.max.z - t.min.z + 1
                  , d = Dt.convert(r.format)
                  , f = Dt.convert(r.type);
                let m;
                if (r.isDataTexture3D)
                    ht.setTexture3D(r, 0),
                    m = 32879;
                else {
                    if (!r.isDataTexture2DArray)
                        return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
                    ht.setTexture2DArray(r, 0),
                    m = 35866
                }
                It.pixelStorei(37440, r.flipY),
                It.pixelStorei(37441, r.premultiplyAlpha),
                It.pixelStorei(3317, r.unpackAlignment);
                const v = It.getParameter(3314)
                  , _ = It.getParameter(32878)
                  , x = It.getParameter(3316)
                  , y = It.getParameter(3315)
                  , w = It.getParameter(32877)
                  , image = n.isCompressedTexture ? n.mipmaps[0] : n.image;
                It.pixelStorei(3314, image.width),
                It.pixelStorei(32878, image.height),
                It.pixelStorei(3316, t.min.x),
                It.pixelStorei(3315, t.min.y),
                It.pixelStorei(32877, t.min.z),
                n.isDataTexture || n.isDataTexture3D ? It.texSubImage3D(m, o, e.x, e.y, e.z, l, c, h, d, f, image.data) : n.isCompressedTexture ? (console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),
                It.compressedTexSubImage3D(m, o, e.x, e.y, e.z, l, c, h, d, image.data)) : It.texSubImage3D(m, o, e.x, e.y, e.z, l, c, h, d, f, image),
                It.pixelStorei(3314, v),
                It.pixelStorei(32878, _),
                It.pixelStorei(3316, x),
                It.pixelStorei(3315, y),
                It.pixelStorei(32877, w),
                0 === o && r.generateMipmaps && It.generateMipmap(m),
                ot.unbindTexture()
            }
            ,
            this.initTexture = function(t) {
                ht.setTexture2D(t, 0),
                ot.unbindTexture()
            }
            ,
            this.resetState = function() {
                S = 0,
                E = 0,
                L = null,
                ot.reset(),
                Nt.reset()
            }
            ,
            "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{
                detail: this
            }))
        }
        Wa.prototype.isWebGLRenderer = !0;
        (class extends Wa {
        }
        ).prototype.isWebGL1Renderer = !0;
        class ja {
            constructor(t, e=25e-5) {
                this.name = "",
                this.color = new $e(t),
                this.density = e
            }
            clone() {
                return new ja(this.color,this.density)
            }
            toJSON() {
                return {
                    type: "FogExp2",
                    color: this.color.getHex(),
                    density: this.density
                }
            }
        }
        ja.prototype.isFogExp2 = !0;
        class Xa {
            constructor(t, e=1, n=1e3) {
                this.name = "",
                this.color = new $e(t),
                this.near = e,
                this.far = n
            }
            clone() {
                return new Xa(this.color,this.near,this.far)
            }
            toJSON() {
                return {
                    type: "Fog",
                    color: this.color.getHex(),
                    near: this.near,
                    far: this.far
                }
            }
        }
        Xa.prototype.isFog = !0;
        class qa extends Ne {
            constructor() {
                super(),
                this.type = "Scene",
                this.background = null,
                this.environment = null,
                this.fog = null,
                this.overrideMaterial = null,
                this.autoUpdate = !0,
                "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{
                    detail: this
                }))
            }
            copy(source, t) {
                return super.copy(source, t),
                null !== source.background && (this.background = source.background.clone()),
                null !== source.environment && (this.environment = source.environment.clone()),
                null !== source.fog && (this.fog = source.fog.clone()),
                null !== source.overrideMaterial && (this.overrideMaterial = source.overrideMaterial.clone()),
                this.autoUpdate = source.autoUpdate,
                this.matrixAutoUpdate = source.matrixAutoUpdate,
                this
            }
            toJSON(meta) {
                const data = super.toJSON(meta);
                return null !== this.fog && (data.object.fog = this.fog.toJSON()),
                data
            }
        }
        qa.prototype.isScene = !0;
        class Ya {
            constructor(t, e) {
                this.array = t,
                this.stride = e,
                this.count = void 0 !== t ? t.length / e : 0,
                this.usage = et,
                this.updateRange = {
                    offset: 0,
                    count: -1
                },
                this.version = 0,
                this.uuid = ht()
            }
            onUploadCallback() {}
            set needsUpdate(t) {
                !0 === t && this.version++
            }
            setUsage(t) {
                return this.usage = t,
                this
            }
            copy(source) {
                return this.array = new source.array.constructor(source.array),
                this.count = source.count,
                this.stride = source.stride,
                this.usage = source.usage,
                this
            }
            copyAt(t, e, n) {
                t *= this.stride,
                n *= e.stride;
                for (let i = 0, r = this.stride; i < r; i++)
                    this.array[t + i] = e.array[n + i];
                return this
            }
            set(t, e=0) {
                return this.array.set(t, e),
                this
            }
            clone(data) {
                void 0 === data.arrayBuffers && (data.arrayBuffers = {}),
                void 0 === this.array.buffer._uuid && (this.array.buffer._uuid = ht()),
                void 0 === data.arrayBuffers[this.array.buffer._uuid] && (data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
                const t = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid])
                  , e = new this.constructor(t,this.stride);
                return e.setUsage(this.usage),
                e
            }
            onUpload(t) {
                return this.onUploadCallback = t,
                this
            }
            toJSON(data) {
                return void 0 === data.arrayBuffers && (data.arrayBuffers = {}),
                void 0 === this.array.buffer._uuid && (this.array.buffer._uuid = ht()),
                void 0 === data.arrayBuffers[this.array.buffer._uuid] && (data.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(new Uint32Array(this.array.buffer))),
                {
                    uuid: this.uuid,
                    buffer: this.array.buffer._uuid,
                    type: this.array.constructor.name,
                    stride: this.stride
                }
            }
        }
        Ya.prototype.isInterleavedBuffer = !0;
        const Za = new Pt;
        class Ja {
            constructor(t, e, n, r=!1) {
                this.name = "",
                this.data = t,
                this.itemSize = e,
                this.offset = n,
                this.normalized = !0 === r
            }
            get count() {
                return this.data.count
            }
            get array() {
                return this.data.array
            }
            set needsUpdate(t) {
                this.data.needsUpdate = t
            }
            applyMatrix4(t) {
                for (let i = 0, e = this.data.count; i < e; i++)
                    Za.x = this.getX(i),
                    Za.y = this.getY(i),
                    Za.z = this.getZ(i),
                    Za.applyMatrix4(t),
                    this.setXYZ(i, Za.x, Za.y, Za.z);
                return this
            }
            applyNormalMatrix(t) {
                for (let i = 0, e = this.count; i < e; i++)
                    Za.x = this.getX(i),
                    Za.y = this.getY(i),
                    Za.z = this.getZ(i),
                    Za.applyNormalMatrix(t),
                    this.setXYZ(i, Za.x, Za.y, Za.z);
                return this
            }
            transformDirection(t) {
                for (let i = 0, e = this.count; i < e; i++)
                    Za.x = this.getX(i),
                    Za.y = this.getY(i),
                    Za.z = this.getZ(i),
                    Za.transformDirection(t),
                    this.setXYZ(i, Za.x, Za.y, Za.z);
                return this
            }
            setX(t, e) {
                return this.data.array[t * this.data.stride + this.offset] = e,
                this
            }
            setY(t, e) {
                return this.data.array[t * this.data.stride + this.offset + 1] = e,
                this
            }
            setZ(t, e) {
                return this.data.array[t * this.data.stride + this.offset + 2] = e,
                this
            }
            setW(t, e) {
                return this.data.array[t * this.data.stride + this.offset + 3] = e,
                this
            }
            getX(t) {
                return this.data.array[t * this.data.stride + this.offset]
            }
            getY(t) {
                return this.data.array[t * this.data.stride + this.offset + 1]
            }
            getZ(t) {
                return this.data.array[t * this.data.stride + this.offset + 2]
            }
            getW(t) {
                return this.data.array[t * this.data.stride + this.offset + 3]
            }
            setXY(t, e, n) {
                return t = t * this.data.stride + this.offset,
                this.data.array[t + 0] = e,
                this.data.array[t + 1] = n,
                this
            }
            setXYZ(t, e, n, r) {
                return t = t * this.data.stride + this.offset,
                this.data.array[t + 0] = e,
                this.data.array[t + 1] = n,
                this.data.array[t + 2] = r,
                this
            }
            setXYZW(t, e, n, r, o) {
                return t = t * this.data.stride + this.offset,
                this.data.array[t + 0] = e,
                this.data.array[t + 1] = n,
                this.data.array[t + 2] = r,
                this.data.array[t + 3] = o,
                this
            }
            clone(data) {
                if (void 0 === data) {
                    console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");
                    const t = [];
                    for (let i = 0; i < this.count; i++) {
                        const e = i * this.data.stride + this.offset;
                        for (let n = 0; n < this.itemSize; n++)
                            t.push(this.data.array[e + n])
                    }
                    return new rn(new this.array.constructor(t),this.itemSize,this.normalized)
                }
                return void 0 === data.interleavedBuffers && (data.interleavedBuffers = {}),
                void 0 === data.interleavedBuffers[this.data.uuid] && (data.interleavedBuffers[this.data.uuid] = this.data.clone(data)),
                new Ja(data.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)
            }
            toJSON(data) {
                if (void 0 === data) {
                    console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");
                    const t = [];
                    for (let i = 0; i < this.count; i++) {
                        const e = i * this.data.stride + this.offset;
                        for (let n = 0; n < this.itemSize; n++)
                            t.push(this.data.array[e + n])
                    }
                    return {
                        itemSize: this.itemSize,
                        type: this.array.constructor.name,
                        array: t,
                        normalized: this.normalized
                    }
                }
                return void 0 === data.interleavedBuffers && (data.interleavedBuffers = {}),
                void 0 === data.interleavedBuffers[this.data.uuid] && (data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data)),
                {
                    isInterleavedBufferAttribute: !0,
                    itemSize: this.itemSize,
                    data: this.data.uuid,
                    offset: this.offset,
                    normalized: this.normalized
                }
            }
        }
        Ja.prototype.isInterleavedBufferAttribute = !0;
        class Ka extends Xe {
            constructor(t) {
                super(),
                this.type = "SpriteMaterial",
                this.color = new $e(16777215),
                this.map = null,
                this.alphaMap = null,
                this.rotation = 0,
                this.sizeAttenuation = !0,
                this.transparent = !0,
                this.setValues(t)
            }
            copy(source) {
                return super.copy(source),
                this.color.copy(source.color),
                this.map = source.map,
                this.alphaMap = source.alphaMap,
                this.rotation = source.rotation,
                this.sizeAttenuation = source.sizeAttenuation,
                this
            }
        }
        let Qa;
        Ka.prototype.isSpriteMaterial = !0;
        const $a = new Pt
          , ts = new Pt
          , es = new Pt
          , ns = new vt
          , is = new vt
          , rs = new le
          , as = new Pt
          , ss = new Pt
          , os = new Pt
          , ls = new vt
          , cs = new vt
          , hs = new vt;
        class us extends Ne {
            constructor(t) {
                if (super(),
                this.type = "Sprite",
                void 0 === Qa) {
                    Qa = new mn;
                    const t = new Float32Array([-.5, -.5, 0, 0, 0, .5, -.5, 0, 1, 0, .5, .5, 0, 1, 1, -.5, .5, 0, 0, 1])
                      , e = new Ya(t,5);
                    Qa.setIndex([0, 1, 2, 0, 2, 3]),
                    Qa.setAttribute("position", new Ja(e,3,0,!1)),
                    Qa.setAttribute("uv", new Ja(e,2,3,!1))
                }
                this.geometry = Qa,
                this.material = void 0 !== t ? t : new Ka,
                this.center = new vt(.5,.5)
            }
            raycast(t, e) {
                null === t.camera && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),
                ts.setFromMatrixScale(this.matrixWorld),
                rs.copy(t.camera.matrixWorld),
                this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse, this.matrixWorld),
                es.setFromMatrixPosition(this.modelViewMatrix),
                t.camera.isPerspectiveCamera && !1 === this.material.sizeAttenuation && ts.multiplyScalar(-es.z);
                const n = this.material.rotation;
                let r, o;
                0 !== n && (o = Math.cos(n),
                r = Math.sin(n));
                const l = this.center;
                ds(as.set(-.5, -.5, 0), es, l, ts, r, o),
                ds(ss.set(.5, -.5, 0), es, l, ts, r, o),
                ds(os.set(.5, .5, 0), es, l, ts, r, o),
                ls.set(0, 0),
                cs.set(1, 0),
                hs.set(1, 1);
                let c = t.ray.intersectTriangle(as, ss, os, !1, $a);
                if (null === c && (ds(ss.set(-.5, .5, 0), es, l, ts, r, o),
                cs.set(0, 1),
                c = t.ray.intersectTriangle(as, os, ss, !1, $a),
                null === c))
                    return;
                const h = t.ray.origin.distanceTo($a);
                h < t.near || h > t.far || e.push({
                    distance: h,
                    point: $a.clone(),
                    uv: We.getUV($a, as, ss, os, ls, cs, hs, new vt),
                    face: null,
                    object: this
                })
            }
            copy(source) {
                return super.copy(source),
                void 0 !== source.center && this.center.copy(source.center),
                this.material = source.material,
                this
            }
        }
        function ds(t, e, n, r, o, l) {
            ns.subVectors(t, n).addScalar(.5).multiply(r),
            void 0 !== o ? (is.x = l * ns.x - o * ns.y,
            is.y = o * ns.x + l * ns.y) : is.copy(ns),
            t.copy(e),
            t.x += is.x,
            t.y += is.y,
            t.applyMatrix4(rs)
        }
        us.prototype.isSprite = !0;
        const ps = new Pt
          , fs = new At
          , ms = new At
          , gs = new Pt
          , vs = new le;
        class _s extends Nn {
            constructor(t, e) {
                super(t, e),
                this.type = "SkinnedMesh",
                this.bindMode = "attached",
                this.bindMatrix = new le,
                this.bindMatrixInverse = new le
            }
            copy(source) {
                return super.copy(source),
                this.bindMode = source.bindMode,
                this.bindMatrix.copy(source.bindMatrix),
                this.bindMatrixInverse.copy(source.bindMatrixInverse),
                this.skeleton = source.skeleton,
                this
            }
            bind(t, e) {
                this.skeleton = t,
                void 0 === e && (this.updateMatrixWorld(!0),
                this.skeleton.calculateInverses(),
                e = this.matrixWorld),
                this.bindMatrix.copy(e),
                this.bindMatrixInverse.copy(e).invert()
            }
            pose() {
                this.skeleton.pose()
            }
            normalizeSkinWeights() {
                const t = new At
                  , e = this.geometry.attributes.skinWeight;
                for (let i = 0, n = e.count; i < n; i++) {
                    t.x = e.getX(i),
                    t.y = e.getY(i),
                    t.z = e.getZ(i),
                    t.w = e.getW(i);
                    const n = 1 / t.manhattanLength();
                    n !== 1 / 0 ? t.multiplyScalar(n) : t.set(1, 0, 0, 0),
                    e.setXYZW(i, t.x, t.y, t.z, t.w)
                }
            }
            updateMatrixWorld(t) {
                super.updateMatrixWorld(t),
                "attached" === this.bindMode ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : "detached" === this.bindMode ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode)
            }
            boneTransform(t, e) {
                const n = this.skeleton
                  , r = this.geometry;
                fs.fromBufferAttribute(r.attributes.skinIndex, t),
                ms.fromBufferAttribute(r.attributes.skinWeight, t),
                ps.copy(e).applyMatrix4(this.bindMatrix),
                e.set(0, 0, 0);
                for (let i = 0; i < 4; i++) {
                    const t = ms.getComponent(i);
                    if (0 !== t) {
                        const r = fs.getComponent(i);
                        vs.multiplyMatrices(n.bones[r].matrixWorld, n.boneInverses[r]),
                        e.addScaledVector(gs.copy(ps).applyMatrix4(vs), t)
                    }
                }
                return e.applyMatrix4(this.bindMatrixInverse)
            }
        }
        _s.prototype.isSkinnedMesh = !0;
        class xs extends Ne {
            constructor() {
                super(),
                this.type = "Bone"
            }
        }
        xs.prototype.isBone = !0;
        class ys extends Tt {
            constructor(data=null, t=1, e=1, n, r, o, l, c, h=1003, d=1003, f, m) {
                super(null, o, l, c, h, d, n, r, f, m),
                this.image = {
                    data: data,
                    width: t,
                    height: e
                },
                this.magFilter = h,
                this.minFilter = d,
                this.generateMipmaps = !1,
                this.flipY = !1,
                this.unpackAlignment = 1,
                this.needsUpdate = !0
            }
        }
        ys.prototype.isDataTexture = !0;
        class Ms extends rn {
            constructor(t, e, n, r=1) {
                "number" == typeof n && (r = n,
                n = !1,
                console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),
                super(t, e, n),
                this.meshPerAttribute = r
            }
            copy(source) {
                return super.copy(source),
                this.meshPerAttribute = source.meshPerAttribute,
                this
            }
            toJSON() {
                const data = super.toJSON();
                return data.meshPerAttribute = this.meshPerAttribute,
                data.isInstancedBufferAttribute = !0,
                data
            }
        }
        Ms.prototype.isInstancedBufferAttribute = !0;
        const bs = new le
          , ws = new le
          , Ss = []
          , Ts = new Nn;
        class Es extends Nn {
            constructor(t, e, n) {
                super(t, e),
                this.instanceMatrix = new Ms(new Float32Array(16 * n),16),
                this.instanceColor = null,
                this.count = n,
                this.frustumCulled = !1
            }
            copy(source) {
                return super.copy(source),
                this.instanceMatrix.copy(source.instanceMatrix),
                null !== source.instanceColor && (this.instanceColor = source.instanceColor.clone()),
                this.count = source.count,
                this
            }
            getColorAt(t, e) {
                e.fromArray(this.instanceColor.array, 3 * t)
            }
            getMatrixAt(t, e) {
                e.fromArray(this.instanceMatrix.array, 16 * t)
            }
            raycast(t, e) {
                const n = this.matrixWorld
                  , r = this.count;
                if (Ts.geometry = this.geometry,
                Ts.material = this.material,
                void 0 !== Ts.material)
                    for (let o = 0; o < r; o++) {
                        this.getMatrixAt(o, bs),
                        ws.multiplyMatrices(n, bs),
                        Ts.matrixWorld = ws,
                        Ts.raycast(t, Ss);
                        for (let i = 0, t = Ss.length; i < t; i++) {
                            const t = Ss[i];
                            t.instanceId = o,
                            t.object = this,
                            e.push(t)
                        }
                        Ss.length = 0
                    }
            }
            setColorAt(t, e) {
                null === this.instanceColor && (this.instanceColor = new Ms(new Float32Array(3 * this.instanceMatrix.count),3)),
                e.toArray(this.instanceColor.array, 3 * t)
            }
            setMatrixAt(t, e) {
                e.toArray(this.instanceMatrix.array, 16 * t)
            }
            updateMorphTargets() {}
            dispose() {
                this.dispatchEvent({
                    type: "dispose"
                })
            }
        }
        Es.prototype.isInstancedMesh = !0;
        class As extends Xe {
            constructor(t) {
                super(),
                this.type = "LineBasicMaterial",
                this.color = new $e(16777215),
                this.linewidth = 1,
                this.linecap = "round",
                this.linejoin = "round",
                this.setValues(t)
            }
            copy(source) {
                return super.copy(source),
                this.color.copy(source.color),
                this.linewidth = source.linewidth,
                this.linecap = source.linecap,
                this.linejoin = source.linejoin,
                this
            }
        }
        As.prototype.isLineBasicMaterial = !0;
        const Ls = new Pt
          , Rs = new Pt
          , Cs = new le
          , Ps = new oe
          , Ds = new $t;
        class Ns extends Ne {
            constructor(t=new mn, e=new As) {
                super(),
                this.type = "Line",
                this.geometry = t,
                this.material = e,
                this.updateMorphTargets()
            }
            copy(source) {
                return super.copy(source),
                this.material = source.material,
                this.geometry = source.geometry,
                this
            }
            computeLineDistances() {
                const t = this.geometry;
                if (t.isBufferGeometry)
                    if (null === t.index) {
                        const e = t.attributes.position
                          , n = [0];
                        for (let i = 1, t = e.count; i < t; i++)
                            Ls.fromBufferAttribute(e, i - 1),
                            Rs.fromBufferAttribute(e, i),
                            n[i] = n[i - 1],
                            n[i] += Ls.distanceTo(Rs);
                        t.setAttribute("lineDistance", new on(n,1))
                    } else
                        console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
                else
                    t.isGeometry && console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
                return this
            }
            raycast(t, e) {
                const n = this.geometry
                  , r = this.matrixWorld
                  , o = t.params.Line.threshold
                  , l = n.drawRange;
                if (null === n.boundingSphere && n.computeBoundingSphere(),
                Ds.copy(n.boundingSphere),
                Ds.applyMatrix4(r),
                Ds.radius += o,
                !1 === t.ray.intersectsSphere(Ds))
                    return;
                Cs.copy(r).invert(),
                Ps.copy(t.ray).applyMatrix4(Cs);
                const c = o / ((this.scale.x + this.scale.y + this.scale.z) / 3)
                  , h = c * c
                  , d = new Pt
                  , f = new Pt
                  , m = new Pt
                  , v = new Pt
                  , _ = this.isLineSegments ? 2 : 1;
                if (n.isBufferGeometry) {
                    const r = n.index
                      , o = n.attributes.position;
                    if (null !== r) {
                        for (let i = Math.max(0, l.start), n = Math.min(r.count, l.start + l.count) - 1; i < n; i += _) {
                            const a = r.getX(i)
                              , b = r.getX(i + 1);
                            d.fromBufferAttribute(o, a),
                            f.fromBufferAttribute(o, b);
                            if (Ps.distanceSqToSegment(d, f, v, m) > h)
                                continue;
                            v.applyMatrix4(this.matrixWorld);
                            const n = t.ray.origin.distanceTo(v);
                            n < t.near || n > t.far || e.push({
                                distance: n,
                                point: m.clone().applyMatrix4(this.matrixWorld),
                                index: i,
                                face: null,
                                faceIndex: null,
                                object: this
                            })
                        }
                    } else {
                        for (let i = Math.max(0, l.start), n = Math.min(o.count, l.start + l.count) - 1; i < n; i += _) {
                            d.fromBufferAttribute(o, i),
                            f.fromBufferAttribute(o, i + 1);
                            if (Ps.distanceSqToSegment(d, f, v, m) > h)
                                continue;
                            v.applyMatrix4(this.matrixWorld);
                            const n = t.ray.origin.distanceTo(v);
                            n < t.near || n > t.far || e.push({
                                distance: n,
                                point: m.clone().applyMatrix4(this.matrixWorld),
                                index: i,
                                face: null,
                                faceIndex: null,
                                object: this
                            })
                        }
                    }
                } else
                    n.isGeometry && console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")
            }
            updateMorphTargets() {
                const t = this.geometry;
                if (t.isBufferGeometry) {
                    const e = t.morphAttributes
                      , n = Object.keys(e);
                    if (n.length > 0) {
                        const t = e[n[0]];
                        if (void 0 !== t) {
                            this.morphTargetInfluences = [],
                            this.morphTargetDictionary = {};
                            for (let e = 0, n = t.length; e < n; e++) {
                                const n = t[e].name || String(e);
                                this.morphTargetInfluences.push(0),
                                this.morphTargetDictionary[n] = e
                            }
                        }
                    }
                } else {
                    const e = t.morphTargets;
                    void 0 !== e && e.length > 0 && console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")
                }
            }
        }
        Ns.prototype.isLine = !0;
        const Is = new Pt
          , Os = new Pt;
        class Fs extends Ns {
            constructor(t, e) {
                super(t, e),
                this.type = "LineSegments"
            }
            computeLineDistances() {
                const t = this.geometry;
                if (t.isBufferGeometry)
                    if (null === t.index) {
                        const e = t.attributes.position
                          , n = [];
                        for (let i = 0, t = e.count; i < t; i += 2)
                            Is.fromBufferAttribute(e, i),
                            Os.fromBufferAttribute(e, i + 1),
                            n[i] = 0 === i ? 0 : n[i - 1],
                            n[i + 1] = n[i] + Is.distanceTo(Os);
                        t.setAttribute("lineDistance", new on(n,1))
                    } else
                        console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
                else
                    t.isGeometry && console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");
                return this
            }
        }
        Fs.prototype.isLineSegments = !0;
        class Us extends Ns {
            constructor(t, e) {
                super(t, e),
                this.type = "LineLoop"
            }
        }
        Us.prototype.isLineLoop = !0;
        class zs extends Xe {
            constructor(t) {
                super(),
                this.type = "PointsMaterial",
                this.color = new $e(16777215),
                this.map = null,
                this.alphaMap = null,
                this.size = 1,
                this.sizeAttenuation = !0,
                this.setValues(t)
            }
            copy(source) {
                return super.copy(source),
                this.color.copy(source.color),
                this.map = source.map,
                this.alphaMap = source.alphaMap,
                this.size = source.size,
                this.sizeAttenuation = source.sizeAttenuation,
                this
            }
        }
        zs.prototype.isPointsMaterial = !0;
        const Bs = new le
          , Gs = new oe
          , Hs = new $t
          , ks = new Pt;
        class Vs extends Ne {
            constructor(t=new mn, e=new zs) {
                super(),
                this.type = "Points",
                this.geometry = t,
                this.material = e,
                this.updateMorphTargets()
            }
            copy(source) {
                return super.copy(source),
                this.material = source.material,
                this.geometry = source.geometry,
                this
            }
            raycast(t, e) {
                const n = this.geometry
                  , r = this.matrixWorld
                  , o = t.params.Points.threshold
                  , l = n.drawRange;
                if (null === n.boundingSphere && n.computeBoundingSphere(),
                Hs.copy(n.boundingSphere),
                Hs.applyMatrix4(r),
                Hs.radius += o,
                !1 === t.ray.intersectsSphere(Hs))
                    return;
                Bs.copy(r).invert(),
                Gs.copy(t.ray).applyMatrix4(Bs);
                const c = o / ((this.scale.x + this.scale.y + this.scale.z) / 3)
                  , h = c * c;
                if (n.isBufferGeometry) {
                    const o = n.index
                      , c = n.attributes.position;
                    if (null !== o) {
                        for (let i = Math.max(0, l.start), n = Math.min(o.count, l.start + l.count); i < n; i++) {
                            const a = o.getX(i);
                            ks.fromBufferAttribute(c, a),
                            Ws(ks, a, h, r, t, e, this)
                        }
                    } else {
                        for (let i = Math.max(0, l.start), n = Math.min(c.count, l.start + l.count); i < n; i++)
                            ks.fromBufferAttribute(c, i),
                            Ws(ks, i, h, r, t, e, this)
                    }
                } else
                    console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")
            }
            updateMorphTargets() {
                const t = this.geometry;
                if (t.isBufferGeometry) {
                    const e = t.morphAttributes
                      , n = Object.keys(e);
                    if (n.length > 0) {
                        const t = e[n[0]];
                        if (void 0 !== t) {
                            this.morphTargetInfluences = [],
                            this.morphTargetDictionary = {};
                            for (let e = 0, n = t.length; e < n; e++) {
                                const n = t[e].name || String(e);
                                this.morphTargetInfluences.push(0),
                                this.morphTargetDictionary[n] = e
                            }
                        }
                    }
                } else {
                    const e = t.morphTargets;
                    void 0 !== e && e.length > 0 && console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")
                }
            }
        }
        function Ws(t, e, n, r, o, l, object) {
            const c = Gs.distanceSqToPoint(t);
            if (c < n) {
                const n = new Pt;
                Gs.closestPointToPoint(t, n),
                n.applyMatrix4(r);
                const h = o.ray.origin.distanceTo(n);
                if (h < o.near || h > o.far)
                    return;
                l.push({
                    distance: h,
                    distanceToRay: Math.sqrt(c),
                    point: n,
                    index: e,
                    face: null,
                    object: object
                })
            }
        }
        Vs.prototype.isPoints = !0;
        (class extends Tt {
            constructor(video, t, e, n, r, o, l, c, h) {
                super(video, t, e, n, r, o, l, c, h),
                this.format = void 0 !== l ? l : z,
                this.minFilter = void 0 !== o ? o : C,
                this.magFilter = void 0 !== r ? r : C,
                this.generateMipmaps = !1;
                const d = this;
                "requestVideoFrameCallback"in video && video.requestVideoFrameCallback((function t() {
                    d.needsUpdate = !0,
                    video.requestVideoFrameCallback(t)
                }
                ))
            }
            clone() {
                return new this.constructor(this.image).copy(this)
            }
            update() {
                const video = this.image;
                !1 === "requestVideoFrameCallback"in video && video.readyState >= video.HAVE_CURRENT_DATA && (this.needsUpdate = !0)
            }
        }
        ).prototype.isVideoTexture = !0;
        class js extends Tt {
            constructor(t, e, n, r, o, l, c, h, d, f, m, v) {
                super(null, l, c, h, d, f, r, o, m, v),
                this.image = {
                    width: e,
                    height: n
                },
                this.mipmaps = t,
                this.flipY = !1,
                this.generateMipmaps = !1
            }
        }
        js.prototype.isCompressedTexture = !0;
        (class extends Tt {
            constructor(canvas, t, e, n, r, o, l, c, h) {
                super(canvas, t, e, n, r, o, l, c, h),
                this.needsUpdate = !0
            }
        }
        ).prototype.isCanvasTexture = !0;
        (class extends Tt {
            constructor(t, e, n, r, o, l, c, h, d, f) {
                if ((f = void 0 !== f ? f : G) !== G && f !== H)
                    throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
                void 0 === n && f === G && (n = N),
                void 0 === n && f === H && (n = U),
                super(null, r, o, l, c, h, f, n, d),
                this.image = {
                    width: t,
                    height: e
                },
                this.magFilter = void 0 !== c ? c : A,
                this.minFilter = void 0 !== h ? h : A,
                this.flipY = !1,
                this.generateMipmaps = !1
            }
        }
        ).prototype.isDepthTexture = !0;
        new Pt,
        new Pt,
        new Pt,
        new We;
        class Xs {
            constructor() {
                this.type = "Curve",
                this.arcLengthDivisions = 200
            }
            getPoint() {
                return console.warn("THREE.Curve: .getPoint() not implemented."),
                null
            }
            getPointAt(u, t) {
                const e = this.getUtoTmapping(u);
                return this.getPoint(e, t)
            }
            getPoints(t=5) {
                const e = [];
                for (let n = 0; n <= t; n++)
                    e.push(this.getPoint(n / t));
                return e
            }
            getSpacedPoints(t=5) {
                const e = [];
                for (let n = 0; n <= t; n++)
                    e.push(this.getPointAt(n / t));
                return e
            }
            getLength() {
                const t = this.getLengths();
                return t[t.length - 1]
            }
            getLengths(t=this.arcLengthDivisions) {
                if (this.cacheArcLengths && this.cacheArcLengths.length === t + 1 && !this.needsUpdate)
                    return this.cacheArcLengths;
                this.needsUpdate = !1;
                const e = [];
                let n, r = this.getPoint(0), o = 0;
                e.push(0);
                for (let p = 1; p <= t; p++)
                    n = this.getPoint(p / t),
                    o += n.distanceTo(r),
                    e.push(o),
                    r = n;
                return this.cacheArcLengths = e,
                e
            }
            updateArcLengths() {
                this.needsUpdate = !0,
                this.getLengths()
            }
            getUtoTmapping(u, t) {
                const e = this.getLengths();
                let i = 0;
                const n = e.length;
                let r;
                r = t || u * e[n - 1];
                let o, l = 0, c = n - 1;
                for (; l <= c; )
                    if (i = Math.floor(l + (c - l) / 2),
                    o = e[i] - r,
                    o < 0)
                        l = i + 1;
                    else {
                        if (!(o > 0)) {
                            c = i;
                            break
                        }
                        c = i - 1
                    }
                if (i = c,
                e[i] === r)
                    return i / (n - 1);
                const h = e[i];
                return (i + (r - h) / (e[i + 1] - h)) / (n - 1)
            }
            getTangent(t, e) {
                const n = 1e-4;
                let r = t - n
                  , o = t + n;
                r < 0 && (r = 0),
                o > 1 && (o = 1);
                const l = this.getPoint(r)
                  , c = this.getPoint(o)
                  , h = e || (l.isVector2 ? new vt : new Pt);
                return h.copy(c).sub(l).normalize(),
                h
            }
            getTangentAt(u, t) {
                const e = this.getUtoTmapping(u);
                return this.getTangent(e, t)
            }
            computeFrenetFrames(t, e) {
                const n = new Pt
                  , r = []
                  , o = []
                  , l = []
                  , c = new Pt
                  , h = new le;
                for (let i = 0; i <= t; i++) {
                    const u = i / t;
                    r[i] = this.getTangentAt(u, new Pt)
                }
                o[0] = new Pt,
                l[0] = new Pt;
                let d = Number.MAX_VALUE;
                const f = Math.abs(r[0].x)
                  , m = Math.abs(r[0].y)
                  , v = Math.abs(r[0].z);
                f <= d && (d = f,
                n.set(1, 0, 0)),
                m <= d && (d = m,
                n.set(0, 1, 0)),
                v <= d && n.set(0, 0, 1),
                c.crossVectors(r[0], n).normalize(),
                o[0].crossVectors(r[0], c),
                l[0].crossVectors(r[0], o[0]);
                for (let i = 1; i <= t; i++) {
                    if (o[i] = o[i - 1].clone(),
                    l[i] = l[i - 1].clone(),
                    c.crossVectors(r[i - 1], r[i]),
                    c.length() > Number.EPSILON) {
                        c.normalize();
                        const t = Math.acos(ut(r[i - 1].dot(r[i]), -1, 1));
                        o[i].applyMatrix4(h.makeRotationAxis(c, t))
                    }
                    l[i].crossVectors(r[i], o[i])
                }
                if (!0 === e) {
                    let e = Math.acos(ut(o[0].dot(o[t]), -1, 1));
                    e /= t,
                    r[0].dot(c.crossVectors(o[0], o[t])) > 0 && (e = -e);
                    for (let i = 1; i <= t; i++)
                        o[i].applyMatrix4(h.makeRotationAxis(r[i], e * i)),
                        l[i].crossVectors(r[i], o[i])
                }
                return {
                    tangents: r,
                    normals: o,
                    binormals: l
                }
            }
            clone() {
                return (new this.constructor).copy(this)
            }
            copy(source) {
                return this.arcLengthDivisions = source.arcLengthDivisions,
                this
            }
            toJSON() {
                const data = {
                    metadata: {
                        version: 4.5,
                        type: "Curve",
                        generator: "Curve.toJSON"
                    }
                };
                return data.arcLengthDivisions = this.arcLengthDivisions,
                data.type = this.type,
                data
            }
            fromJSON(t) {
                return this.arcLengthDivisions = t.arcLengthDivisions,
                this
            }
        }
        class qs extends Xs {
            constructor(t=0, e=0, n=1, r=1, o=0, l=2 * Math.PI, c=!1, h=0) {
                super(),
                this.type = "EllipseCurve",
                this.aX = t,
                this.aY = e,
                this.xRadius = n,
                this.yRadius = r,
                this.aStartAngle = o,
                this.aEndAngle = l,
                this.aClockwise = c,
                this.aRotation = h
            }
            getPoint(t, e) {
                const n = e || new vt
                  , r = 2 * Math.PI;
                let o = this.aEndAngle - this.aStartAngle;
                const l = Math.abs(o) < Number.EPSILON;
                for (; o < 0; )
                    o += r;
                for (; o > r; )
                    o -= r;
                o < Number.EPSILON && (o = l ? 0 : r),
                !0 !== this.aClockwise || l || (o === r ? o = -r : o -= r);
                const c = this.aStartAngle + t * o;
                let h = this.aX + this.xRadius * Math.cos(c)
                  , d = this.aY + this.yRadius * Math.sin(c);
                if (0 !== this.aRotation) {
                    const t = Math.cos(this.aRotation)
                      , e = Math.sin(this.aRotation)
                      , n = h - this.aX
                      , r = d - this.aY;
                    h = n * t - r * e + this.aX,
                    d = n * e + r * t + this.aY
                }
                return n.set(h, d)
            }
            copy(source) {
                return super.copy(source),
                this.aX = source.aX,
                this.aY = source.aY,
                this.xRadius = source.xRadius,
                this.yRadius = source.yRadius,
                this.aStartAngle = source.aStartAngle,
                this.aEndAngle = source.aEndAngle,
                this.aClockwise = source.aClockwise,
                this.aRotation = source.aRotation,
                this
            }
            toJSON() {
                const data = super.toJSON();
                return data.aX = this.aX,
                data.aY = this.aY,
                data.xRadius = this.xRadius,
                data.yRadius = this.yRadius,
                data.aStartAngle = this.aStartAngle,
                data.aEndAngle = this.aEndAngle,
                data.aClockwise = this.aClockwise,
                data.aRotation = this.aRotation,
                data
            }
            fromJSON(t) {
                return super.fromJSON(t),
                this.aX = t.aX,
                this.aY = t.aY,
                this.xRadius = t.xRadius,
                this.yRadius = t.yRadius,
                this.aStartAngle = t.aStartAngle,
                this.aEndAngle = t.aEndAngle,
                this.aClockwise = t.aClockwise,
                this.aRotation = t.aRotation,
                this
            }
        }
        qs.prototype.isEllipseCurve = !0;
        class Ys extends qs {
            constructor(t, e, n, r, o, l) {
                super(t, e, n, n, r, o, l),
                this.type = "ArcCurve"
            }
        }
        function Zs() {
            let t = 0
              , e = 0
              , n = 0
              , r = 0;
            function o(o, l, c, h) {
                t = o,
                e = c,
                n = -3 * o + 3 * l - 2 * c - h,
                r = 2 * o - 2 * l + c + h
            }
            return {
                initCatmullRom: function(t, e, n, r, l) {
                    o(e, n, l * (n - t), l * (r - e))
                },
                initNonuniformCatmullRom: function(t, e, n, r, l, c, h) {
                    let d = (e - t) / l - (n - t) / (l + c) + (n - e) / c
                      , f = (n - e) / c - (r - e) / (c + h) + (r - n) / h;
                    d *= c,
                    f *= c,
                    o(e, n, d, f)
                },
                calc: function(o) {
                    const l = o * o;
                    return t + e * o + n * l + r * (l * o)
                }
            }
        }
        Ys.prototype.isArcCurve = !0;
        const Js = new Pt
          , Ks = new Zs
          , Qs = new Zs
          , $s = new Zs;
        class to extends Xs {
            constructor(t=[], e=!1, n="centripetal", r=.5) {
                super(),
                this.type = "CatmullRomCurve3",
                this.points = t,
                this.closed = e,
                this.curveType = n,
                this.tension = r
            }
            getPoint(t, e=new Pt) {
                const n = e
                  , r = this.points
                  , o = r.length
                  , p = (o - (this.closed ? 0 : 1)) * t;
                let l, c, h = Math.floor(p), d = p - h;
                this.closed ? h += h > 0 ? 0 : (Math.floor(Math.abs(h) / o) + 1) * o : 0 === d && h === o - 1 && (h = o - 2,
                d = 1),
                this.closed || h > 0 ? l = r[(h - 1) % o] : (Js.subVectors(r[0], r[1]).add(r[0]),
                l = Js);
                const f = r[h % o]
                  , m = r[(h + 1) % o];
                if (this.closed || h + 2 < o ? c = r[(h + 2) % o] : (Js.subVectors(r[o - 1], r[o - 2]).add(r[o - 1]),
                c = Js),
                "centripetal" === this.curveType || "chordal" === this.curveType) {
                    const t = "chordal" === this.curveType ? .5 : .25;
                    let e = Math.pow(l.distanceToSquared(f), t)
                      , n = Math.pow(f.distanceToSquared(m), t)
                      , r = Math.pow(m.distanceToSquared(c), t);
                    n < 1e-4 && (n = 1),
                    e < 1e-4 && (e = n),
                    r < 1e-4 && (r = n),
                    Ks.initNonuniformCatmullRom(l.x, f.x, m.x, c.x, e, n, r),
                    Qs.initNonuniformCatmullRom(l.y, f.y, m.y, c.y, e, n, r),
                    $s.initNonuniformCatmullRom(l.z, f.z, m.z, c.z, e, n, r)
                } else
                    "catmullrom" === this.curveType && (Ks.initCatmullRom(l.x, f.x, m.x, c.x, this.tension),
                    Qs.initCatmullRom(l.y, f.y, m.y, c.y, this.tension),
                    $s.initCatmullRom(l.z, f.z, m.z, c.z, this.tension));
                return n.set(Ks.calc(d), Qs.calc(d), $s.calc(d)),
                n
            }
            copy(source) {
                super.copy(source),
                this.points = [];
                for (let i = 0, t = source.points.length; i < t; i++) {
                    const t = source.points[i];
                    this.points.push(t.clone())
                }
                return this.closed = source.closed,
                this.curveType = source.curveType,
                this.tension = source.tension,
                this
            }
            toJSON() {
                const data = super.toJSON();
                data.points = [];
                for (let i = 0, t = this.points.length; i < t; i++) {
                    const t = this.points[i];
                    data.points.push(t.toArray())
                }
                return data.closed = this.closed,
                data.curveType = this.curveType,
                data.tension = this.tension,
                data
            }
            fromJSON(t) {
                super.fromJSON(t),
                this.points = [];
                for (let i = 0, e = t.points.length; i < e; i++) {
                    const e = t.points[i];
                    this.points.push((new Pt).fromArray(e))
                }
                return this.closed = t.closed,
                this.curveType = t.curveType,
                this.tension = t.tension,
                this
            }
        }
        function eo(t, e, n, r, o) {
            const l = .5 * (r - e)
              , c = .5 * (o - n)
              , h = t * t;
            return (2 * n - 2 * r + l + c) * (t * h) + (-3 * n + 3 * r - 2 * l - c) * h + l * t + n
        }
        function no(t, e, n, r) {
            return function(t, p) {
                const e = 1 - t;
                return e * e * p
            }(t, e) + function(t, p) {
                return 2 * (1 - t) * t * p
            }(t, n) + function(t, p) {
                return t * t * p
            }(t, r)
        }
        function io(t, e, n, r, o) {
            return function(t, p) {
                const e = 1 - t;
                return e * e * e * p
            }(t, e) + function(t, p) {
                const e = 1 - t;
                return 3 * e * e * t * p
            }(t, n) + function(t, p) {
                return 3 * (1 - t) * t * t * p
            }(t, r) + function(t, p) {
                return t * t * t * p
            }(t, o)
        }
        to.prototype.isCatmullRomCurve3 = !0;
        class ro extends Xs {
            constructor(t=new vt, e=new vt, n=new vt, r=new vt) {
                super(),
                this.type = "CubicBezierCurve",
                this.v0 = t,
                this.v1 = e,
                this.v2 = n,
                this.v3 = r
            }
            getPoint(t, e=new vt) {
                const n = e
                  , r = this.v0
                  , o = this.v1
                  , l = this.v2
                  , c = this.v3;
                return n.set(io(t, r.x, o.x, l.x, c.x), io(t, r.y, o.y, l.y, c.y)),
                n
            }
            copy(source) {
                return super.copy(source),
                this.v0.copy(source.v0),
                this.v1.copy(source.v1),
                this.v2.copy(source.v2),
                this.v3.copy(source.v3),
                this
            }
            toJSON() {
                const data = super.toJSON();
                return data.v0 = this.v0.toArray(),
                data.v1 = this.v1.toArray(),
                data.v2 = this.v2.toArray(),
                data.v3 = this.v3.toArray(),
                data
            }
            fromJSON(t) {
                return super.fromJSON(t),
                this.v0.fromArray(t.v0),
                this.v1.fromArray(t.v1),
                this.v2.fromArray(t.v2),
                this.v3.fromArray(t.v3),
                this
            }
        }
        ro.prototype.isCubicBezierCurve = !0;
        class ao extends Xs {
            constructor(t=new Pt, e=new Pt, n=new Pt, r=new Pt) {
                super(),
                this.type = "CubicBezierCurve3",
                this.v0 = t,
                this.v1 = e,
                this.v2 = n,
                this.v3 = r
            }
            getPoint(t, e=new Pt) {
                const n = e
                  , r = this.v0
                  , o = this.v1
                  , l = this.v2
                  , c = this.v3;
                return n.set(io(t, r.x, o.x, l.x, c.x), io(t, r.y, o.y, l.y, c.y), io(t, r.z, o.z, l.z, c.z)),
                n
            }
            copy(source) {
                return super.copy(source),
                this.v0.copy(source.v0),
                this.v1.copy(source.v1),
                this.v2.copy(source.v2),
                this.v3.copy(source.v3),
                this
            }
            toJSON() {
                const data = super.toJSON();
                return data.v0 = this.v0.toArray(),
                data.v1 = this.v1.toArray(),
                data.v2 = this.v2.toArray(),
                data.v3 = this.v3.toArray(),
                data
            }
            fromJSON(t) {
                return super.fromJSON(t),
                this.v0.fromArray(t.v0),
                this.v1.fromArray(t.v1),
                this.v2.fromArray(t.v2),
                this.v3.fromArray(t.v3),
                this
            }
        }
        ao.prototype.isCubicBezierCurve3 = !0;
        class so extends Xs {
            constructor(t=new vt, e=new vt) {
                super(),
                this.type = "LineCurve",
                this.v1 = t,
                this.v2 = e
            }
            getPoint(t, e=new vt) {
                const n = e;
                return 1 === t ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1),
                n.multiplyScalar(t).add(this.v1)),
                n
            }
            getPointAt(u, t) {
                return this.getPoint(u, t)
            }
            getTangent(t, e) {
                const n = e || new vt;
                return n.copy(this.v2).sub(this.v1).normalize(),
                n
            }
            copy(source) {
                return super.copy(source),
                this.v1.copy(source.v1),
                this.v2.copy(source.v2),
                this
            }
            toJSON() {
                const data = super.toJSON();
                return data.v1 = this.v1.toArray(),
                data.v2 = this.v2.toArray(),
                data
            }
            fromJSON(t) {
                return super.fromJSON(t),
                this.v1.fromArray(t.v1),
                this.v2.fromArray(t.v2),
                this
            }
        }
        so.prototype.isLineCurve = !0;
        class oo extends Xs {
            constructor(t=new vt, e=new vt, n=new vt) {
                super(),
                this.type = "QuadraticBezierCurve",
                this.v0 = t,
                this.v1 = e,
                this.v2 = n
            }
            getPoint(t, e=new vt) {
                const n = e
                  , r = this.v0
                  , o = this.v1
                  , l = this.v2;
                return n.set(no(t, r.x, o.x, l.x), no(t, r.y, o.y, l.y)),
                n
            }
            copy(source) {
                return super.copy(source),
                this.v0.copy(source.v0),
                this.v1.copy(source.v1),
                this.v2.copy(source.v2),
                this
            }
            toJSON() {
                const data = super.toJSON();
                return data.v0 = this.v0.toArray(),
                data.v1 = this.v1.toArray(),
                data.v2 = this.v2.toArray(),
                data
            }
            fromJSON(t) {
                return super.fromJSON(t),
                this.v0.fromArray(t.v0),
                this.v1.fromArray(t.v1),
                this.v2.fromArray(t.v2),
                this
            }
        }
        oo.prototype.isQuadraticBezierCurve = !0;
        class lo extends Xs {
            constructor(t=new Pt, e=new Pt, n=new Pt) {
                super(),
                this.type = "QuadraticBezierCurve3",
                this.v0 = t,
                this.v1 = e,
                this.v2 = n
            }
            getPoint(t, e=new Pt) {
                const n = e
                  , r = this.v0
                  , o = this.v1
                  , l = this.v2;
                return n.set(no(t, r.x, o.x, l.x), no(t, r.y, o.y, l.y), no(t, r.z, o.z, l.z)),
                n
            }
            copy(source) {
                return super.copy(source),
                this.v0.copy(source.v0),
                this.v1.copy(source.v1),
                this.v2.copy(source.v2),
                this
            }
            toJSON() {
                const data = super.toJSON();
                return data.v0 = this.v0.toArray(),
                data.v1 = this.v1.toArray(),
                data.v2 = this.v2.toArray(),
                data
            }
            fromJSON(t) {
                return super.fromJSON(t),
                this.v0.fromArray(t.v0),
                this.v1.fromArray(t.v1),
                this.v2.fromArray(t.v2),
                this
            }
        }
        lo.prototype.isQuadraticBezierCurve3 = !0;
        class co extends Xs {
            constructor(t=[]) {
                super(),
                this.type = "SplineCurve",
                this.points = t
            }
            getPoint(t, e=new vt) {
                const n = e
                  , r = this.points
                  , p = (r.length - 1) * t
                  , o = Math.floor(p)
                  , l = p - o
                  , c = r[0 === o ? o : o - 1]
                  , h = r[o]
                  , d = r[o > r.length - 2 ? r.length - 1 : o + 1]
                  , f = r[o > r.length - 3 ? r.length - 1 : o + 2];
                return n.set(eo(l, c.x, h.x, d.x, f.x), eo(l, c.y, h.y, d.y, f.y)),
                n
            }
            copy(source) {
                super.copy(source),
                this.points = [];
                for (let i = 0, t = source.points.length; i < t; i++) {
                    const t = source.points[i];
                    this.points.push(t.clone())
                }
                return this
            }
            toJSON() {
                const data = super.toJSON();
                data.points = [];
                for (let i = 0, t = this.points.length; i < t; i++) {
                    const t = this.points[i];
                    data.points.push(t.toArray())
                }
                return data
            }
            fromJSON(t) {
                super.fromJSON(t),
                this.points = [];
                for (let i = 0, e = t.points.length; i < e; i++) {
                    const e = t.points[i];
                    this.points.push((new vt).fromArray(e))
                }
                return this
            }
        }
        co.prototype.isSplineCurve = !0;
        var ho = Object.freeze({
            __proto__: null,
            ArcCurve: Ys,
            CatmullRomCurve3: to,
            CubicBezierCurve: ro,
            CubicBezierCurve3: ao,
            EllipseCurve: qs,
            LineCurve: so,
            LineCurve3: class extends Xs {
                constructor(t=new Pt, e=new Pt) {
                    super(),
                    this.type = "LineCurve3",
                    this.isLineCurve3 = !0,
                    this.v1 = t,
                    this.v2 = e
                }
                getPoint(t, e=new Pt) {
                    const n = e;
                    return 1 === t ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1),
                    n.multiplyScalar(t).add(this.v1)),
                    n
                }
                getPointAt(u, t) {
                    return this.getPoint(u, t)
                }
                copy(source) {
                    return super.copy(source),
                    this.v1.copy(source.v1),
                    this.v2.copy(source.v2),
                    this
                }
                toJSON() {
                    const data = super.toJSON();
                    return data.v1 = this.v1.toArray(),
                    data.v2 = this.v2.toArray(),
                    data
                }
                fromJSON(t) {
                    return super.fromJSON(t),
                    this.v1.fromArray(t.v1),
                    this.v2.fromArray(t.v2),
                    this
                }
            }
            ,
            QuadraticBezierCurve: oo,
            QuadraticBezierCurve3: lo,
            SplineCurve: co
        });
        class uo extends Xs {
            constructor() {
                super(),
                this.type = "CurvePath",
                this.curves = [],
                this.autoClose = !1
            }
            add(t) {
                this.curves.push(t)
            }
            closePath() {
                const t = this.curves[0].getPoint(0)
                  , e = this.curves[this.curves.length - 1].getPoint(1);
                t.equals(e) || this.curves.push(new so(e,t))
            }
            getPoint(t, e) {
                const n = t * this.getLength()
                  , r = this.getCurveLengths();
                let i = 0;
                for (; i < r.length; ) {
                    if (r[i] >= n) {
                        const t = r[i] - n
                          , o = this.curves[i]
                          , l = o.getLength()
                          , u = 0 === l ? 0 : 1 - t / l;
                        return o.getPointAt(u, e)
                    }
                    i++
                }
                return null
            }
            getLength() {
                const t = this.getCurveLengths();
                return t[t.length - 1]
            }
            updateArcLengths() {
                this.needsUpdate = !0,
                this.cacheLengths = null,
                this.getCurveLengths()
            }
            getCurveLengths() {
                if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
                    return this.cacheLengths;
                const t = [];
                let e = 0;
                for (let i = 0, n = this.curves.length; i < n; i++)
                    e += this.curves[i].getLength(),
                    t.push(e);
                return this.cacheLengths = t,
                t
            }
            getSpacedPoints(t=40) {
                const e = [];
                for (let i = 0; i <= t; i++)
                    e.push(this.getPoint(i / t));
                return this.autoClose && e.push(e[0]),
                e
            }
            getPoints(t=12) {
                const e = [];
                let n;
                for (let i = 0, r = this.curves; i < r.length; i++) {
                    const o = r[i]
                      , l = o && o.isEllipseCurve ? 2 * t : o && (o.isLineCurve || o.isLineCurve3) ? 1 : o && o.isSplineCurve ? t * o.points.length : t
                      , c = o.getPoints(l);
                    for (let t = 0; t < c.length; t++) {
                        const r = c[t];
                        n && n.equals(r) || (e.push(r),
                        n = r)
                    }
                }
                return this.autoClose && e.length > 1 && !e[e.length - 1].equals(e[0]) && e.push(e[0]),
                e
            }
            copy(source) {
                super.copy(source),
                this.curves = [];
                for (let i = 0, t = source.curves.length; i < t; i++) {
                    const t = source.curves[i];
                    this.curves.push(t.clone())
                }
                return this.autoClose = source.autoClose,
                this
            }
            toJSON() {
                const data = super.toJSON();
                data.autoClose = this.autoClose,
                data.curves = [];
                for (let i = 0, t = this.curves.length; i < t; i++) {
                    const t = this.curves[i];
                    data.curves.push(t.toJSON())
                }
                return data
            }
            fromJSON(t) {
                super.fromJSON(t),
                this.autoClose = t.autoClose,
                this.curves = [];
                for (let i = 0, e = t.curves.length; i < e; i++) {
                    const e = t.curves[i];
                    this.curves.push((new ho[e.type]).fromJSON(e))
                }
                return this
            }
        }
        class po extends uo {
            constructor(t) {
                super(),
                this.type = "Path",
                this.currentPoint = new vt,
                t && this.setFromPoints(t)
            }
            setFromPoints(t) {
                this.moveTo(t[0].x, t[0].y);
                for (let i = 1, e = t.length; i < e; i++)
                    this.lineTo(t[i].x, t[i].y);
                return this
            }
            moveTo(t, e) {
                return this.currentPoint.set(t, e),
                this
            }
            lineTo(t, e) {
                const n = new so(this.currentPoint.clone(),new vt(t,e));
                return this.curves.push(n),
                this.currentPoint.set(t, e),
                this
            }
            quadraticCurveTo(t, e, n, r) {
                const o = new oo(this.currentPoint.clone(),new vt(t,e),new vt(n,r));
                return this.curves.push(o),
                this.currentPoint.set(n, r),
                this
            }
            bezierCurveTo(t, e, n, r, o, l) {
                const c = new ro(this.currentPoint.clone(),new vt(t,e),new vt(n,r),new vt(o,l));
                return this.curves.push(c),
                this.currentPoint.set(o, l),
                this
            }
            splineThru(t) {
                const e = [this.currentPoint.clone()].concat(t)
                  , n = new co(e);
                return this.curves.push(n),
                this.currentPoint.copy(t[t.length - 1]),
                this
            }
            arc(t, e, n, r, o, l) {
                const c = this.currentPoint.x
                  , h = this.currentPoint.y;
                return this.absarc(t + c, e + h, n, r, o, l),
                this
            }
            absarc(t, e, n, r, o, l) {
                return this.absellipse(t, e, n, n, r, o, l),
                this
            }
            ellipse(t, e, n, r, o, l, c, h) {
                const d = this.currentPoint.x
                  , f = this.currentPoint.y;
                return this.absellipse(t + d, e + f, n, r, o, l, c, h),
                this
            }
            absellipse(t, e, n, r, o, l, c, h) {
                const d = new qs(t,e,n,r,o,l,c,h);
                if (this.curves.length > 0) {
                    const t = d.getPoint(0);
                    t.equals(this.currentPoint) || this.lineTo(t.x, t.y)
                }
                this.curves.push(d);
                const f = d.getPoint(1);
                return this.currentPoint.copy(f),
                this
            }
            copy(source) {
                return super.copy(source),
                this.currentPoint.copy(source.currentPoint),
                this
            }
            toJSON() {
                const data = super.toJSON();
                return data.currentPoint = this.currentPoint.toArray(),
                data
            }
            fromJSON(t) {
                return super.fromJSON(t),
                this.currentPoint.fromArray(t.currentPoint),
                this
            }
        }
        class fo extends po {
            constructor(t) {
                super(t),
                this.uuid = ht(),
                this.type = "Shape",
                this.holes = []
            }
            getPointsHoles(t) {
                const e = [];
                for (let i = 0, n = this.holes.length; i < n; i++)
                    e[i] = this.holes[i].getPoints(t);
                return e
            }
            extractPoints(t) {
                return {
                    shape: this.getPoints(t),
                    holes: this.getPointsHoles(t)
                }
            }
            copy(source) {
                super.copy(source),
                this.holes = [];
                for (let i = 0, t = source.holes.length; i < t; i++) {
                    const t = source.holes[i];
                    this.holes.push(t.clone())
                }
                return this
            }
            toJSON() {
                const data = super.toJSON();
                data.uuid = this.uuid,
                data.holes = [];
                for (let i = 0, t = this.holes.length; i < t; i++) {
                    const t = this.holes[i];
                    data.holes.push(t.toJSON())
                }
                return data
            }
            fromJSON(t) {
                super.fromJSON(t),
                this.uuid = t.uuid,
                this.holes = [];
                for (let i = 0, e = t.holes.length; i < e; i++) {
                    const e = t.holes[i];
                    this.holes.push((new po).fromJSON(e))
                }
                return this
            }
        }
        const mo = function(data, t, e=2) {
            const n = t && t.length
              , r = n ? t[0] * e : data.length;
            let o = go(data, 0, r, e, !0);
            const l = [];
            if (!o || o.next === o.prev)
                return l;
            let c, h, d, f, m, v, _;
            if (n && (o = function(data, t, e, n) {
                const r = [];
                let i, o, l, c, h;
                for (i = 0,
                o = t.length; i < o; i++)
                    l = t[i] * n,
                    c = i < o - 1 ? t[i + 1] * n : data.length,
                    h = go(data, l, c, n, !1),
                    h === h.next && (h.steiner = !0),
                    r.push(Ao(h));
                for (r.sort(wo),
                i = 0; i < r.length; i++)
                    So(r[i], e),
                    e = vo(e, e.next);
                return e
            }(data, t, o, e)),
            data.length > 80 * e) {
                c = d = data[0],
                h = f = data[1];
                for (let i = e; i < r; i += e)
                    m = data[i],
                    v = data[i + 1],
                    m < c && (c = m),
                    v < h && (h = v),
                    m > d && (d = m),
                    v > f && (f = v);
                _ = Math.max(d - c, f - h),
                _ = 0 !== _ ? 1 / _ : 0
            }
            return _o(o, l, e, c, h, _),
            l
        };
        function go(data, t, e, n, r) {
            let i, o;
            if (r === function(data, t, e, n) {
                let r = 0;
                for (let i = t, o = e - n; i < e; i += n)
                    r += (data[o] - data[i]) * (data[i + 1] + data[o + 1]),
                    o = i;
                return r
            }(data, t, e, n) > 0)
                for (i = t; i < e; i += n)
                    o = Uo(i, data[i], data[i + 1], o);
            else
                for (i = e - n; i >= t; i -= n)
                    o = Uo(i, data[i], data[i + 1], o);
            return o && Po(o, o.next) && (zo(o),
            o = o.next),
            o
        }
        function vo(t, e) {
            if (!t)
                return t;
            e || (e = t);
            let n, p = t;
            do {
                if (n = !1,
                p.steiner || !Po(p, p.next) && 0 !== Co(p.prev, p, p.next))
                    p = p.next;
                else {
                    if (zo(p),
                    p = e = p.prev,
                    p === p.next)
                        break;
                    n = !0
                }
            } while (n || p !== e);
            return e
        }
        function _o(t, e, n, r, o, l, c) {
            if (!t)
                return;
            !c && l && function(t, e, n, r) {
                let p = t;
                do {
                    null === p.z && (p.z = Eo(p.x, p.y, e, n, r)),
                    p.prevZ = p.prev,
                    p.nextZ = p.next,
                    p = p.next
                } while (p !== t);
                p.prevZ.nextZ = null,
                p.prevZ = null,
                function(t) {
                    let i, p, q, e, n, r, o, l, c = 1;
                    do {
                        for (p = t,
                        t = null,
                        n = null,
                        r = 0; p; ) {
                            for (r++,
                            q = p,
                            o = 0,
                            i = 0; i < c && (o++,
                            q = q.nextZ,
                            q); i++)
                                ;
                            for (l = c; o > 0 || l > 0 && q; )
                                0 !== o && (0 === l || !q || p.z <= q.z) ? (e = p,
                                p = p.nextZ,
                                o--) : (e = q,
                                q = q.nextZ,
                                l--),
                                n ? n.nextZ = e : t = e,
                                e.prevZ = n,
                                n = e;
                            p = q
                        }
                        n.nextZ = null,
                        c *= 2
                    } while (r > 1)
                }(p)
            }(t, r, o, l);
            let h, d, f = t;
            for (; t.prev !== t.next; )
                if (h = t.prev,
                d = t.next,
                l ? yo(t, r, o, l) : xo(t))
                    e.push(h.i / n),
                    e.push(t.i / n),
                    e.push(d.i / n),
                    zo(t),
                    t = d.next,
                    f = d.next;
                else if ((t = d) === f) {
                    c ? 1 === c ? _o(t = Mo(vo(t), e, n), e, n, r, o, l, 2) : 2 === c && bo(t, e, n, r, o, l) : _o(vo(t), e, n, r, o, l, 1);
                    break
                }
        }
        function xo(t) {
            const a = t.prev
              , b = t
              , e = t.next;
            if (Co(a, b, e) >= 0)
                return !1;
            let p = t.next.next;
            for (; p !== t.prev; ) {
                if (Lo(a.x, a.y, b.x, b.y, e.x, e.y, p.x, p.y) && Co(p.prev, p, p.next) >= 0)
                    return !1;
                p = p.next
            }
            return !0
        }
        function yo(t, e, n, r) {
            const a = t.prev
              , b = t
              , o = t.next;
            if (Co(a, b, o) >= 0)
                return !1;
            const l = a.x < b.x ? a.x < o.x ? a.x : o.x : b.x < o.x ? b.x : o.x
              , c = a.y < b.y ? a.y < o.y ? a.y : o.y : b.y < o.y ? b.y : o.y
              , h = a.x > b.x ? a.x > o.x ? a.x : o.x : b.x > o.x ? b.x : o.x
              , d = a.y > b.y ? a.y > o.y ? a.y : o.y : b.y > o.y ? b.y : o.y
              , f = Eo(l, c, e, n, r)
              , m = Eo(h, d, e, n, r);
            let p = t.prevZ
              , v = t.nextZ;
            for (; p && p.z >= f && v && v.z <= m; ) {
                if (p !== t.prev && p !== t.next && Lo(a.x, a.y, b.x, b.y, o.x, o.y, p.x, p.y) && Co(p.prev, p, p.next) >= 0)
                    return !1;
                if (p = p.prevZ,
                v !== t.prev && v !== t.next && Lo(a.x, a.y, b.x, b.y, o.x, o.y, v.x, v.y) && Co(v.prev, v, v.next) >= 0)
                    return !1;
                v = v.nextZ
            }
            for (; p && p.z >= f; ) {
                if (p !== t.prev && p !== t.next && Lo(a.x, a.y, b.x, b.y, o.x, o.y, p.x, p.y) && Co(p.prev, p, p.next) >= 0)
                    return !1;
                p = p.prevZ
            }
            for (; v && v.z <= m; ) {
                if (v !== t.prev && v !== t.next && Lo(a.x, a.y, b.x, b.y, o.x, o.y, v.x, v.y) && Co(v.prev, v, v.next) >= 0)
                    return !1;
                v = v.nextZ
            }
            return !0
        }
        function Mo(t, e, n) {
            let p = t;
            do {
                const a = p.prev
                  , b = p.next.next;
                !Po(a, b) && Do(a, p, p.next, b) && Oo(a, b) && Oo(b, a) && (e.push(a.i / n),
                e.push(p.i / n),
                e.push(b.i / n),
                zo(p),
                zo(p.next),
                p = t = b),
                p = p.next
            } while (p !== t);
            return vo(p)
        }
        function bo(t, e, n, r, o, l) {
            let a = t;
            do {
                let b = a.next.next;
                for (; b !== a.prev; ) {
                    if (a.i !== b.i && Ro(a, b)) {
                        let t = Fo(a, b);
                        return a = vo(a, a.next),
                        t = vo(t, t.next),
                        _o(a, e, n, r, o, l),
                        void _o(t, e, n, r, o, l)
                    }
                    b = b.next
                }
                a = a.next
            } while (a !== t)
        }
        function wo(a, b) {
            return a.x - b.x
        }
        function So(t, e) {
            if (e = function(t, e) {
                let p = e;
                const n = t.x
                  , r = t.y;
                let o, l = -1 / 0;
                do {
                    if (r <= p.y && r >= p.next.y && p.next.y !== p.y) {
                        const t = p.x + (r - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
                        if (t <= n && t > l) {
                            if (l = t,
                            t === n) {
                                if (r === p.y)
                                    return p;
                                if (r === p.next.y)
                                    return p.next
                            }
                            o = p.x < p.next.x ? p : p.next
                        }
                    }
                    p = p.next
                } while (p !== e);
                if (!o)
                    return null;
                if (n === l)
                    return o;
                const c = o
                  , h = o.x
                  , d = o.y;
                let f, m = 1 / 0;
                p = o;
                do {
                    n >= p.x && p.x >= h && n !== p.x && Lo(r < d ? n : l, r, h, d, r < d ? l : n, r, p.x, p.y) && (f = Math.abs(r - p.y) / (n - p.x),
                    Oo(p, t) && (f < m || f === m && (p.x > o.x || p.x === o.x && To(o, p))) && (o = p,
                    m = f)),
                    p = p.next
                } while (p !== c);
                return o
            }(t, e),
            e) {
                const b = Fo(e, t);
                vo(e, e.next),
                vo(b, b.next)
            }
        }
        function To(t, p) {
            return Co(t.prev, t, p.prev) < 0 && Co(p.next, t, t.next) < 0
        }
        function Eo(t, e, n, r, o) {
            return (t = 1431655765 & ((t = 858993459 & ((t = 252645135 & ((t = 16711935 & ((t = 32767 * (t - n) * o) | t << 8)) | t << 4)) | t << 2)) | t << 1)) | (e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e = 32767 * (e - r) * o) | e << 8)) | e << 4)) | e << 2)) | e << 1)) << 1
        }
        function Ao(t) {
            let p = t
              , e = t;
            do {
                (p.x < e.x || p.x === e.x && p.y < e.y) && (e = p),
                p = p.next
            } while (p !== t);
            return e
        }
        function Lo(t, e, n, r, o, l, c, h) {
            return (o - c) * (e - h) - (t - c) * (l - h) >= 0 && (t - c) * (r - h) - (n - c) * (e - h) >= 0 && (n - c) * (l - h) - (o - c) * (r - h) >= 0
        }
        function Ro(a, b) {
            return a.next.i !== b.i && a.prev.i !== b.i && !function(a, b) {
                let p = a;
                do {
                    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && Do(p, p.next, a, b))
                        return !0;
                    p = p.next
                } while (p !== a);
                return !1
            }(a, b) && (Oo(a, b) && Oo(b, a) && function(a, b) {
                let p = a
                  , t = !1;
                const e = (a.x + b.x) / 2
                  , n = (a.y + b.y) / 2;
                do {
                    p.y > n != p.next.y > n && p.next.y !== p.y && e < (p.next.x - p.x) * (n - p.y) / (p.next.y - p.y) + p.x && (t = !t),
                    p = p.next
                } while (p !== a);
                return t
            }(a, b) && (Co(a.prev, a, b.prev) || Co(a, b.prev, b)) || Po(a, b) && Co(a.prev, a, a.next) > 0 && Co(b.prev, b, b.next) > 0)
        }
        function Co(p, q, t) {
            return (q.y - p.y) * (t.x - q.x) - (q.x - p.x) * (t.y - q.y)
        }
        function Po(t, e) {
            return t.x === e.x && t.y === e.y
        }
        function Do(t, e, n, r) {
            const o = Io(Co(t, e, n))
              , l = Io(Co(t, e, r))
              , c = Io(Co(n, r, t))
              , h = Io(Co(n, r, e));
            return o !== l && c !== h || (!(0 !== o || !No(t, n, e)) || (!(0 !== l || !No(t, r, e)) || (!(0 !== c || !No(n, t, r)) || !(0 !== h || !No(n, e, r)))))
        }
        function No(p, q, t) {
            return q.x <= Math.max(p.x, t.x) && q.x >= Math.min(p.x, t.x) && q.y <= Math.max(p.y, t.y) && q.y >= Math.min(p.y, t.y)
        }
        function Io(t) {
            return t > 0 ? 1 : t < 0 ? -1 : 0
        }
        function Oo(a, b) {
            return Co(a.prev, a, a.next) < 0 ? Co(a, b, a.next) >= 0 && Co(a, a.prev, b) >= 0 : Co(a, b, a.prev) < 0 || Co(a, a.next, b) < 0
        }
        function Fo(a, b) {
            const t = new Bo(a.i,a.x,a.y)
              , e = new Bo(b.i,b.x,b.y)
              , n = a.next
              , r = b.prev;
            return a.next = b,
            b.prev = a,
            t.next = n,
            n.prev = t,
            e.next = t,
            t.prev = e,
            r.next = e,
            e.prev = r,
            e
        }
        function Uo(i, t, e, n) {
            const p = new Bo(i,t,e);
            return n ? (p.next = n.next,
            p.prev = n,
            n.next.prev = p,
            n.next = p) : (p.prev = p,
            p.next = p),
            p
        }
        function zo(p) {
            p.next.prev = p.prev,
            p.prev.next = p.next,
            p.prevZ && (p.prevZ.nextZ = p.nextZ),
            p.nextZ && (p.nextZ.prevZ = p.prevZ)
        }
        function Bo(i, t, e) {
            this.i = i,
            this.x = t,
            this.y = e,
            this.prev = null,
            this.next = null,
            this.z = null,
            this.prevZ = null,
            this.nextZ = null,
            this.steiner = !1
        }
        class Go {
            static area(t) {
                const e = t.length;
                let a = 0;
                for (let p = e - 1, q = 0; q < e; p = q++)
                    a += t[p].x * t[q].y - t[q].x * t[p].y;
                return .5 * a
            }
            static isClockWise(t) {
                return Go.area(t) < 0
            }
            static triangulateShape(t, e) {
                const n = []
                  , r = []
                  , o = [];
                Ho(t),
                ko(n, t);
                let l = t.length;
                e.forEach(Ho);
                for (let i = 0; i < e.length; i++)
                    r.push(l),
                    l += e[i].length,
                    ko(n, e[i]);
                const c = mo(n, r);
                for (let i = 0; i < c.length; i += 3)
                    o.push(c.slice(i, i + 3));
                return o
            }
        }
        function Ho(t) {
            const e = t.length;
            e > 2 && t[e - 1].equals(t[0]) && t.pop()
        }
        function ko(t, e) {
            for (let i = 0; i < e.length; i++)
                t.push(e[i].x),
                t.push(e[i].y)
        }
        class Vo extends mn {
            constructor(t=new fo([new vt(.5,.5), new vt(-.5,.5), new vt(-.5,-.5), new vt(.5,-.5)]), e={}) {
                super(),
                this.type = "ExtrudeGeometry",
                this.parameters = {
                    shapes: t,
                    options: e
                },
                t = Array.isArray(t) ? t : [t];
                const n = this
                  , r = []
                  , o = [];
                for (let i = 0, e = t.length; i < e; i++) {
                    l(t[i])
                }
                function l(t) {
                    const l = []
                      , c = void 0 !== e.curveSegments ? e.curveSegments : 12
                      , h = void 0 !== e.steps ? e.steps : 1;
                    let d = void 0 !== e.depth ? e.depth : 1
                      , f = void 0 === e.bevelEnabled || e.bevelEnabled
                      , m = void 0 !== e.bevelThickness ? e.bevelThickness : .2
                      , v = void 0 !== e.bevelSize ? e.bevelSize : m - .1
                      , _ = void 0 !== e.bevelOffset ? e.bevelOffset : 0
                      , x = void 0 !== e.bevelSegments ? e.bevelSegments : 3;
                    const y = e.extrudePath
                      , M = void 0 !== e.UVGenerator ? e.UVGenerator : Wo;
                    void 0 !== e.amount && (console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),
                    d = e.amount);
                    let w, S, T, E, A, L = !1;
                    y && (w = y.getSpacedPoints(h),
                    L = !0,
                    f = !1,
                    S = y.computeFrenetFrames(h, !1),
                    T = new Pt,
                    E = new Pt,
                    A = new Pt),
                    f || (x = 0,
                    m = 0,
                    v = 0,
                    _ = 0);
                    const R = t.extractPoints(c);
                    let C = R.shape;
                    const P = R.holes;
                    if (!Go.isClockWise(C)) {
                        C = C.reverse();
                        for (let t = 0, e = P.length; t < e; t++) {
                            const e = P[t];
                            Go.isClockWise(e) && (P[t] = e.reverse())
                        }
                    }
                    const D = Go.triangulateShape(C, P)
                      , N = C;
                    for (let t = 0, e = P.length; t < e; t++) {
                        const e = P[t];
                        C = C.concat(e)
                    }
                    function I(t, e, n) {
                        return e || console.error("THREE.ExtrudeGeometry: vec does not exist"),
                        e.clone().multiplyScalar(n).add(t)
                    }
                    const O = C.length
                      , F = D.length;
                    function U(t, e, n) {
                        let r, o, l;
                        const c = t.x - e.x
                          , h = t.y - e.y
                          , d = n.x - t.x
                          , f = n.y - t.y
                          , m = c * c + h * h
                          , v = c * f - h * d;
                        if (Math.abs(v) > Number.EPSILON) {
                            const v = Math.sqrt(m)
                              , _ = Math.sqrt(d * d + f * f)
                              , x = e.x - h / v
                              , y = e.y + c / v
                              , M = ((n.x - f / _ - x) * f - (n.y + d / _ - y) * d) / (c * f - h * d);
                            r = x + c * M - t.x,
                            o = y + h * M - t.y;
                            const w = r * r + o * o;
                            if (w <= 2)
                                return new vt(r,o);
                            l = Math.sqrt(w / 2)
                        } else {
                            let t = !1;
                            c > Number.EPSILON ? d > Number.EPSILON && (t = !0) : c < -Number.EPSILON ? d < -Number.EPSILON && (t = !0) : Math.sign(h) === Math.sign(f) && (t = !0),
                            t ? (r = -h,
                            o = c,
                            l = Math.sqrt(m)) : (r = c,
                            o = h,
                            l = Math.sqrt(m / 2))
                        }
                        return new vt(r / l,o / l)
                    }
                    const z = [];
                    for (let i = 0, t = N.length, e = t - 1, n = i + 1; i < t; i++,
                    e++,
                    n++)
                        e === t && (e = 0),
                        n === t && (n = 0),
                        z[i] = U(N[i], N[e], N[n]);
                    const B = [];
                    let G, H = z.concat();
                    for (let t = 0, e = P.length; t < e; t++) {
                        const e = P[t];
                        G = [];
                        for (let i = 0, t = e.length, n = t - 1, r = i + 1; i < t; i++,
                        n++,
                        r++)
                            n === t && (n = 0),
                            r === t && (r = 0),
                            G[i] = U(e[i], e[n], e[r]);
                        B.push(G),
                        H = H.concat(G)
                    }
                    for (let b = 0; b < x; b++) {
                        const t = b / x
                          , e = m * Math.cos(t * Math.PI / 2)
                          , n = v * Math.sin(t * Math.PI / 2) + _;
                        for (let i = 0, t = N.length; i < t; i++) {
                            const t = I(N[i], z[i], n);
                            W(t.x, t.y, -e)
                        }
                        for (let t = 0, r = P.length; t < r; t++) {
                            const r = P[t];
                            G = B[t];
                            for (let i = 0, t = r.length; i < t; i++) {
                                const t = I(r[i], G[i], n);
                                W(t.x, t.y, -e)
                            }
                        }
                    }
                    const k = v + _;
                    for (let i = 0; i < O; i++) {
                        const t = f ? I(C[i], H[i], k) : C[i];
                        L ? (E.copy(S.normals[0]).multiplyScalar(t.x),
                        T.copy(S.binormals[0]).multiplyScalar(t.y),
                        A.copy(w[0]).add(E).add(T),
                        W(A.x, A.y, A.z)) : W(t.x, t.y, 0)
                    }
                    for (let s = 1; s <= h; s++)
                        for (let i = 0; i < O; i++) {
                            const t = f ? I(C[i], H[i], k) : C[i];
                            L ? (E.copy(S.normals[s]).multiplyScalar(t.x),
                            T.copy(S.binormals[s]).multiplyScalar(t.y),
                            A.copy(w[s]).add(E).add(T),
                            W(A.x, A.y, A.z)) : W(t.x, t.y, d / h * s)
                        }
                    for (let b = x - 1; b >= 0; b--) {
                        const t = b / x
                          , e = m * Math.cos(t * Math.PI / 2)
                          , n = v * Math.sin(t * Math.PI / 2) + _;
                        for (let i = 0, t = N.length; i < t; i++) {
                            const t = I(N[i], z[i], n);
                            W(t.x, t.y, d + e)
                        }
                        for (let t = 0, r = P.length; t < r; t++) {
                            const r = P[t];
                            G = B[t];
                            for (let i = 0, t = r.length; i < t; i++) {
                                const t = I(r[i], G[i], n);
                                L ? W(t.x, t.y + w[h - 1].y, w[h - 1].x + e) : W(t.x, t.y, d + e)
                            }
                        }
                    }
                    function V(t, e) {
                        let i = t.length;
                        for (; --i >= 0; ) {
                            const n = i;
                            let r = i - 1;
                            r < 0 && (r = t.length - 1);
                            for (let s = 0, t = h + 2 * x; s < t; s++) {
                                const t = O * s
                                  , o = O * (s + 1);
                                X(e + n + t, e + r + t, e + r + o, e + n + o)
                            }
                        }
                    }
                    function W(t, e, n) {
                        l.push(t),
                        l.push(e),
                        l.push(n)
                    }
                    function j(a, b, t) {
                        Y(a),
                        Y(b),
                        Y(t);
                        const e = r.length / 3
                          , o = M.generateTopUV(n, r, e - 3, e - 2, e - 1);
                        Z(o[0]),
                        Z(o[1]),
                        Z(o[2])
                    }
                    function X(a, b, t, e) {
                        Y(a),
                        Y(b),
                        Y(e),
                        Y(b),
                        Y(t),
                        Y(e);
                        const o = r.length / 3
                          , l = M.generateSideWallUV(n, r, o - 6, o - 3, o - 2, o - 1);
                        Z(l[0]),
                        Z(l[1]),
                        Z(l[3]),
                        Z(l[1]),
                        Z(l[2]),
                        Z(l[3])
                    }
                    function Y(t) {
                        r.push(l[3 * t + 0]),
                        r.push(l[3 * t + 1]),
                        r.push(l[3 * t + 2])
                    }
                    function Z(t) {
                        o.push(t.x),
                        o.push(t.y)
                    }
                    !function() {
                        const t = r.length / 3;
                        if (f) {
                            let t = 0
                              , e = O * t;
                            for (let i = 0; i < F; i++) {
                                const t = D[i];
                                j(t[2] + e, t[1] + e, t[0] + e)
                            }
                            t = h + 2 * x,
                            e = O * t;
                            for (let i = 0; i < F; i++) {
                                const t = D[i];
                                j(t[0] + e, t[1] + e, t[2] + e)
                            }
                        } else {
                            for (let i = 0; i < F; i++) {
                                const t = D[i];
                                j(t[2], t[1], t[0])
                            }
                            for (let i = 0; i < F; i++) {
                                const t = D[i];
                                j(t[0] + O * h, t[1] + O * h, t[2] + O * h)
                            }
                        }
                        n.addGroup(t, r.length / 3 - t, 0)
                    }(),
                    function() {
                        const t = r.length / 3;
                        let e = 0;
                        V(N, e),
                        e += N.length;
                        for (let t = 0, n = P.length; t < n; t++) {
                            const n = P[t];
                            V(n, e),
                            e += n.length
                        }
                        n.addGroup(t, r.length / 3 - t, 1)
                    }()
                }
                this.setAttribute("position", new on(r,3)),
                this.setAttribute("uv", new on(o,2)),
                this.computeVertexNormals()
            }
            toJSON() {
                const data = super.toJSON();
                return function(t, e, data) {
                    if (data.shapes = [],
                    Array.isArray(t))
                        for (let i = 0, e = t.length; i < e; i++) {
                            const e = t[i];
                            data.shapes.push(e.uuid)
                        }
                    else
                        data.shapes.push(t.uuid);
                    void 0 !== e.extrudePath && (data.options.extrudePath = e.extrudePath.toJSON());
                    return data
                }(this.parameters.shapes, this.parameters.options, data)
            }
            static fromJSON(data, t) {
                const e = [];
                for (let n = 0, r = data.shapes.length; n < r; n++) {
                    const r = t[data.shapes[n]];
                    e.push(r)
                }
                const n = data.options.extrudePath;
                return void 0 !== n && (data.options.extrudePath = (new ho[n.type]).fromJSON(n)),
                new Vo(e,data.options)
            }
        }
        const Wo = {
            generateTopUV: function(t, e, n, r, o) {
                const l = e[3 * n]
                  , c = e[3 * n + 1]
                  , h = e[3 * r]
                  , d = e[3 * r + 1]
                  , f = e[3 * o]
                  , m = e[3 * o + 1];
                return [new vt(l,c), new vt(h,d), new vt(f,m)]
            },
            generateSideWallUV: function(t, e, n, r, o, l) {
                const c = e[3 * n]
                  , h = e[3 * n + 1]
                  , d = e[3 * n + 2]
                  , f = e[3 * r]
                  , m = e[3 * r + 1]
                  , v = e[3 * r + 2]
                  , _ = e[3 * o]
                  , x = e[3 * o + 1]
                  , y = e[3 * o + 2]
                  , M = e[3 * l]
                  , w = e[3 * l + 1]
                  , S = e[3 * l + 2];
                return Math.abs(h - m) < Math.abs(c - f) ? [new vt(c,1 - d), new vt(f,1 - v), new vt(_,1 - y), new vt(M,1 - S)] : [new vt(h,1 - d), new vt(m,1 - v), new vt(x,1 - y), new vt(w,1 - S)]
            }
        };
        class jo extends mn {
            constructor(t=new fo([new vt(0,.5), new vt(-.5,-.5), new vt(.5,-.5)]), e=12) {
                super(),
                this.type = "ShapeGeometry",
                this.parameters = {
                    shapes: t,
                    curveSegments: e
                };
                const n = []
                  , r = []
                  , o = []
                  , l = [];
                let c = 0
                  , h = 0;
                if (!1 === Array.isArray(t))
                    d(t);
                else
                    for (let i = 0; i < t.length; i++)
                        d(t[i]),
                        this.addGroup(c, h, i),
                        c += h,
                        h = 0;
                function d(t) {
                    const c = r.length / 3
                      , d = t.extractPoints(e);
                    let f = d.shape;
                    const m = d.holes;
                    !1 === Go.isClockWise(f) && (f = f.reverse());
                    for (let i = 0, t = m.length; i < t; i++) {
                        const t = m[i];
                        !0 === Go.isClockWise(t) && (m[i] = t.reverse())
                    }
                    const v = Go.triangulateShape(f, m);
                    for (let i = 0, t = m.length; i < t; i++) {
                        const t = m[i];
                        f = f.concat(t)
                    }
                    for (let i = 0, t = f.length; i < t; i++) {
                        const t = f[i];
                        r.push(t.x, t.y, 0),
                        o.push(0, 0, 1),
                        l.push(t.x, t.y)
                    }
                    for (let i = 0, t = v.length; i < t; i++) {
                        const t = v[i]
                          , a = t[0] + c
                          , b = t[1] + c
                          , e = t[2] + c;
                        n.push(a, b, e),
                        h += 3
                    }
                }
                this.setIndex(n),
                this.setAttribute("position", new on(r,3)),
                this.setAttribute("normal", new on(o,3)),
                this.setAttribute("uv", new on(l,2))
            }
            toJSON() {
                const data = super.toJSON();
                return function(t, data) {
                    if (data.shapes = [],
                    Array.isArray(t))
                        for (let i = 0, e = t.length; i < e; i++) {
                            const e = t[i];
                            data.shapes.push(e.uuid)
                        }
                    else
                        data.shapes.push(t.uuid);
                    return data
                }(this.parameters.shapes, data)
            }
            static fromJSON(data, t) {
                const e = [];
                for (let n = 0, r = data.shapes.length; n < r; n++) {
                    const r = t[data.shapes[n]];
                    e.push(r)
                }
                return new jo(e,data.curveSegments)
            }
        }
        class Xo extends Xe {
            constructor(t) {
                super(),
                this.type = "ShadowMaterial",
                this.color = new $e(0),
                this.transparent = !0,
                this.setValues(t)
            }
            copy(source) {
                return super.copy(source),
                this.color.copy(source.color),
                this
            }
        }
        Xo.prototype.isShadowMaterial = !0;
        class qo extends Xe {
            constructor(t) {
                super(),
                this.defines = {
                    STANDARD: ""
                },
                this.type = "MeshStandardMaterial",
                this.color = new $e(16777215),
                this.roughness = 1,
                this.metalness = 0,
                this.map = null,
                this.lightMap = null,
                this.lightMapIntensity = 1,
                this.aoMap = null,
                this.aoMapIntensity = 1,
                this.emissive = new $e(0),
                this.emissiveIntensity = 1,
                this.emissiveMap = null,
                this.bumpMap = null,
                this.bumpScale = 1,
                this.normalMap = null,
                this.normalMapType = 0,
                this.normalScale = new vt(1,1),
                this.displacementMap = null,
                this.displacementScale = 1,
                this.displacementBias = 0,
                this.roughnessMap = null,
                this.metalnessMap = null,
                this.alphaMap = null,
                this.envMap = null,
                this.envMapIntensity = 1,
                this.refractionRatio = .98,
                this.wireframe = !1,
                this.wireframeLinewidth = 1,
                this.wireframeLinecap = "round",
                this.wireframeLinejoin = "round",
                this.flatShading = !1,
                this.setValues(t)
            }
            copy(source) {
                return super.copy(source),
                this.defines = {
                    STANDARD: ""
                },
                this.color.copy(source.color),
                this.roughness = source.roughness,
                this.metalness = source.metalness,
                this.map = source.map,
                this.lightMap = source.lightMap,
                this.lightMapIntensity = source.lightMapIntensity,
                this.aoMap = source.aoMap,
                this.aoMapIntensity = source.aoMapIntensity,
                this.emissive.copy(source.emissive),
                this.emissiveMap = source.emissiveMap,
                this.emissiveIntensity = source.emissiveIntensity,
                this.bumpMap = source.bumpMap,
                this.bumpScale = source.bumpScale,
                this.normalMap = source.normalMap,
                this.normalMapType = source.normalMapType,
                this.normalScale.copy(source.normalScale),
                this.displacementMap = source.displacementMap,
                this.displacementScale = source.displacementScale,
                this.displacementBias = source.displacementBias,
                this.roughnessMap = source.roughnessMap,
                this.metalnessMap = source.metalnessMap,
                this.alphaMap = source.alphaMap,
                this.envMap = source.envMap,
                this.envMapIntensity = source.envMapIntensity,
                this.refractionRatio = source.refractionRatio,
                this.wireframe = source.wireframe,
                this.wireframeLinewidth = source.wireframeLinewidth,
                this.wireframeLinecap = source.wireframeLinecap,
                this.wireframeLinejoin = source.wireframeLinejoin,
                this.flatShading = source.flatShading,
                this
            }
        }
        qo.prototype.isMeshStandardMaterial = !0;
        class Yo extends qo {
            constructor(t) {
                super(),
                this.defines = {
                    STANDARD: "",
                    PHYSICAL: ""
                },
                this.type = "MeshPhysicalMaterial",
                this.clearcoatMap = null,
                this.clearcoatRoughness = 0,
                this.clearcoatRoughnessMap = null,
                this.clearcoatNormalScale = new vt(1,1),
                this.clearcoatNormalMap = null,
                this.ior = 1.5,
                Object.defineProperty(this, "reflectivity", {
                    get: function() {
                        return ut(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1)
                    },
                    set: function(t) {
                        this.ior = (1 + .4 * t) / (1 - .4 * t)
                    }
                }),
                this.sheenColor = new $e(0),
                this.sheenColorMap = null,
                this.sheenRoughness = 1,
                this.sheenRoughnessMap = null,
                this.transmissionMap = null,
                this.thickness = .01,
                this.thicknessMap = null,
                this.attenuationDistance = 0,
                this.attenuationColor = new $e(1,1,1),
                this.specularIntensity = 1,
                this.specularIntensityMap = null,
                this.specularColor = new $e(1,1,1),
                this.specularColorMap = null,
                this._sheen = 0,
                this._clearcoat = 0,
                this._transmission = 0,
                this.setValues(t)
            }
            get sheen() {
                return this._sheen
            }
            set sheen(t) {
                this._sheen > 0 != t > 0 && this.version++,
                this._sheen = t
            }
            get clearcoat() {
                return this._clearcoat
            }
            set clearcoat(t) {
                this._clearcoat > 0 != t > 0 && this.version++,
                this._clearcoat = t
            }
            get transmission() {
                return this._transmission
            }
            set transmission(t) {
                this._transmission > 0 != t > 0 && this.version++,
                this._transmission = t
            }
            copy(source) {
                return super.copy(source),
                this.defines = {
                    STANDARD: "",
                    PHYSICAL: ""
                },
                this.clearcoat = source.clearcoat,
                this.clearcoatMap = source.clearcoatMap,
                this.clearcoatRoughness = source.clearcoatRoughness,
                this.clearcoatRoughnessMap = source.clearcoatRoughnessMap,
                this.clearcoatNormalMap = source.clearcoatNormalMap,
                this.clearcoatNormalScale.copy(source.clearcoatNormalScale),
                this.ior = source.ior,
                this.sheen = source.sheen,
                this.sheenColor.copy(source.sheenColor),
                this.sheenColorMap = source.sheenColorMap,
                this.sheenRoughness = source.sheenRoughness,
                this.sheenRoughnessMap = source.sheenRoughnessMap,
                this.transmission = source.transmission,
                this.transmissionMap = source.transmissionMap,
                this.thickness = source.thickness,
                this.thicknessMap = source.thicknessMap,
                this.attenuationDistance = source.attenuationDistance,
                this.attenuationColor.copy(source.attenuationColor),
                this.specularIntensity = source.specularIntensity,
                this.specularIntensityMap = source.specularIntensityMap,
                this.specularColor.copy(source.specularColor),
                this.specularColorMap = source.specularColorMap,
                this
            }
        }
        Yo.prototype.isMeshPhysicalMaterial = !0;
        class Zo extends Xe {
            constructor(t) {
                super(),
                this.type = "MeshPhongMaterial",
                this.color = new $e(16777215),
                this.specular = new $e(1118481),
                this.shininess = 30,
                this.map = null,
                this.lightMap = null,
                this.lightMapIntensity = 1,
                this.aoMap = null,
                this.aoMapIntensity = 1,
                this.emissive = new $e(0),
                this.emissiveIntensity = 1,
                this.emissiveMap = null,
                this.bumpMap = null,
                this.bumpScale = 1,
                this.normalMap = null,
                this.normalMapType = 0,
                this.normalScale = new vt(1,1),
                this.displacementMap = null,
                this.displacementScale = 1,
                this.displacementBias = 0,
                this.specularMap = null,
                this.alphaMap = null,
                this.envMap = null,
                this.combine = 0,
                this.reflectivity = 1,
                this.refractionRatio = .98,
                this.wireframe = !1,
                this.wireframeLinewidth = 1,
                this.wireframeLinecap = "round",
                this.wireframeLinejoin = "round",
                this.flatShading = !1,
                this.setValues(t)
            }
            copy(source) {
                return super.copy(source),
                this.color.copy(source.color),
                this.specular.copy(source.specular),
                this.shininess = source.shininess,
                this.map = source.map,
                this.lightMap = source.lightMap,
                this.lightMapIntensity = source.lightMapIntensity,
                this.aoMap = source.aoMap,
                this.aoMapIntensity = source.aoMapIntensity,
                this.emissive.copy(source.emissive),
                this.emissiveMap = source.emissiveMap,
                this.emissiveIntensity = source.emissiveIntensity,
                this.bumpMap = source.bumpMap,
                this.bumpScale = source.bumpScale,
                this.normalMap = source.normalMap,
                this.normalMapType = source.normalMapType,
                this.normalScale.copy(source.normalScale),
                this.displacementMap = source.displacementMap,
                this.displacementScale = source.displacementScale,
                this.displacementBias = source.displacementBias,
                this.specularMap = source.specularMap,
                this.alphaMap = source.alphaMap,
                this.envMap = source.envMap,
                this.combine = source.combine,
                this.reflectivity = source.reflectivity,
                this.refractionRatio = source.refractionRatio,
                this.wireframe = source.wireframe,
                this.wireframeLinewidth = source.wireframeLinewidth,
                this.wireframeLinecap = source.wireframeLinecap,
                this.wireframeLinejoin = source.wireframeLinejoin,
                this.flatShading = source.flatShading,
                this
            }
        }
        Zo.prototype.isMeshPhongMaterial = !0;
        class Jo extends Xe {
            constructor(t) {
                super(),
                this.defines = {
                    TOON: ""
                },
                this.type = "MeshToonMaterial",
                this.color = new $e(16777215),
                this.map = null,
                this.gradientMap = null,
                this.lightMap = null,
                this.lightMapIntensity = 1,
                this.aoMap = null,
                this.aoMapIntensity = 1,
                this.emissive = new $e(0),
                this.emissiveIntensity = 1,
                this.emissiveMap = null,
                this.bumpMap = null,
                this.bumpScale = 1,
                this.normalMap = null,
                this.normalMapType = 0,
                this.normalScale = new vt(1,1),
                this.displacementMap = null,
                this.displacementScale = 1,
                this.displacementBias = 0,
                this.alphaMap = null,
                this.wireframe = !1,
                this.wireframeLinewidth = 1,
                this.wireframeLinecap = "round",
                this.wireframeLinejoin = "round",
                this.setValues(t)
            }
            copy(source) {
                return super.copy(source),
                this.color.copy(source.color),
                this.map = source.map,
                this.gradientMap = source.gradientMap,
                this.lightMap = source.lightMap,
                this.lightMapIntensity = source.lightMapIntensity,
                this.aoMap = source.aoMap,
                this.aoMapIntensity = source.aoMapIntensity,
                this.emissive.copy(source.emissive),
                this.emissiveMap = source.emissiveMap,
                this.emissiveIntensity = source.emissiveIntensity,
                this.bumpMap = source.bumpMap,
                this.bumpScale = source.bumpScale,
                this.normalMap = source.normalMap,
                this.normalMapType = source.normalMapType,
                this.normalScale.copy(source.normalScale),
                this.displacementMap = source.displacementMap,
                this.displacementScale = source.displacementScale,
                this.displacementBias = source.displacementBias,
                this.alphaMap = source.alphaMap,
                this.wireframe = source.wireframe,
                this.wireframeLinewidth = source.wireframeLinewidth,
                this.wireframeLinecap = source.wireframeLinecap,
                this.wireframeLinejoin = source.wireframeLinejoin,
                this
            }
        }
        Jo.prototype.isMeshToonMaterial = !0;
        class Ko extends Xe {
            constructor(t) {
                super(),
                this.type = "MeshNormalMaterial",
                this.bumpMap = null,
                this.bumpScale = 1,
                this.normalMap = null,
                this.normalMapType = 0,
                this.normalScale = new vt(1,1),
                this.displacementMap = null,
                this.displacementScale = 1,
                this.displacementBias = 0,
                this.wireframe = !1,
                this.wireframeLinewidth = 1,
                this.fog = !1,
                this.flatShading = !1,
                this.setValues(t)
            }
            copy(source) {
                return super.copy(source),
                this.bumpMap = source.bumpMap,
                this.bumpScale = source.bumpScale,
                this.normalMap = source.normalMap,
                this.normalMapType = source.normalMapType,
                this.normalScale.copy(source.normalScale),
                this.displacementMap = source.displacementMap,
                this.displacementScale = source.displacementScale,
                this.displacementBias = source.displacementBias,
                this.wireframe = source.wireframe,
                this.wireframeLinewidth = source.wireframeLinewidth,
                this.flatShading = source.flatShading,
                this
            }
        }
        Ko.prototype.isMeshNormalMaterial = !0;
        class Qo extends Xe {
            constructor(t) {
                super(),
                this.type = "MeshLambertMaterial",
                this.color = new $e(16777215),
                this.map = null,
                this.lightMap = null,
                this.lightMapIntensity = 1,
                this.aoMap = null,
                this.aoMapIntensity = 1,
                this.emissive = new $e(0),
                this.emissiveIntensity = 1,
                this.emissiveMap = null,
                this.specularMap = null,
                this.alphaMap = null,
                this.envMap = null,
                this.combine = 0,
                this.reflectivity = 1,
                this.refractionRatio = .98,
                this.wireframe = !1,
                this.wireframeLinewidth = 1,
                this.wireframeLinecap = "round",
                this.wireframeLinejoin = "round",
                this.setValues(t)
            }
            copy(source) {
                return super.copy(source),
                this.color.copy(source.color),
                this.map = source.map,
                this.lightMap = source.lightMap,
                this.lightMapIntensity = source.lightMapIntensity,
                this.aoMap = source.aoMap,
                this.aoMapIntensity = source.aoMapIntensity,
                this.emissive.copy(source.emissive),
                this.emissiveMap = source.emissiveMap,
                this.emissiveIntensity = source.emissiveIntensity,
                this.specularMap = source.specularMap,
                this.alphaMap = source.alphaMap,
                this.envMap = source.envMap,
                this.combine = source.combine,
                this.reflectivity = source.reflectivity,
                this.refractionRatio = source.refractionRatio,
                this.wireframe = source.wireframe,
                this.wireframeLinewidth = source.wireframeLinewidth,
                this.wireframeLinecap = source.wireframeLinecap,
                this.wireframeLinejoin = source.wireframeLinejoin,
                this
            }
        }
        Qo.prototype.isMeshLambertMaterial = !0;
        class $o extends Xe {
            constructor(t) {
                super(),
                this.defines = {
                    MATCAP: ""
                },
                this.type = "MeshMatcapMaterial",
                this.color = new $e(16777215),
                this.matcap = null,
                this.map = null,
                this.bumpMap = null,
                this.bumpScale = 1,
                this.normalMap = null,
                this.normalMapType = 0,
                this.normalScale = new vt(1,1),
                this.displacementMap = null,
                this.displacementScale = 1,
                this.displacementBias = 0,
                this.alphaMap = null,
                this.flatShading = !1,
                this.setValues(t)
            }
            copy(source) {
                return super.copy(source),
                this.defines = {
                    MATCAP: ""
                },
                this.color.copy(source.color),
                this.matcap = source.matcap,
                this.map = source.map,
                this.bumpMap = source.bumpMap,
                this.bumpScale = source.bumpScale,
                this.normalMap = source.normalMap,
                this.normalMapType = source.normalMapType,
                this.normalScale.copy(source.normalScale),
                this.displacementMap = source.displacementMap,
                this.displacementScale = source.displacementScale,
                this.displacementBias = source.displacementBias,
                this.alphaMap = source.alphaMap,
                this.flatShading = source.flatShading,
                this
            }
        }
        $o.prototype.isMeshMatcapMaterial = !0;
        class tl extends As {
            constructor(t) {
                super(),
                this.type = "LineDashedMaterial",
                this.scale = 1,
                this.dashSize = 3,
                this.gapSize = 1,
                this.setValues(t)
            }
            copy(source) {
                return super.copy(source),
                this.scale = source.scale,
                this.dashSize = source.dashSize,
                this.gapSize = source.gapSize,
                this
            }
        }
        tl.prototype.isLineDashedMaterial = !0;
        const el = {
            arraySlice: function(t, e, n) {
                return el.isTypedArray(t) ? new t.constructor(t.subarray(e, void 0 !== n ? n : t.length)) : t.slice(e, n)
            },
            convertArray: function(t, e, n) {
                return !t || !n && t.constructor === e ? t : "number" == typeof e.BYTES_PER_ELEMENT ? new e(t) : Array.prototype.slice.call(t)
            },
            isTypedArray: function(object) {
                return ArrayBuffer.isView(object) && !(object instanceof DataView)
            },
            getKeyframeOrder: function(t) {
                const e = t.length
                  , n = new Array(e);
                for (let i = 0; i !== e; ++i)
                    n[i] = i;
                return n.sort((function(i, e) {
                    return t[i] - t[e]
                }
                )),
                n
            },
            sortedArray: function(t, e, n) {
                const r = t.length
                  , o = new t.constructor(r);
                for (let i = 0, l = 0; l !== r; ++i) {
                    const r = n[i] * e;
                    for (let n = 0; n !== e; ++n)
                        o[l++] = t[r + n]
                }
                return o
            },
            flattenJSON: function(t, e, n, r) {
                let i = 1
                  , o = t[0];
                for (; void 0 !== o && void 0 === o[r]; )
                    o = t[i++];
                if (void 0 === o)
                    return;
                let l = o[r];
                if (void 0 !== l)
                    if (Array.isArray(l))
                        do {
                            l = o[r],
                            void 0 !== l && (e.push(o.time),
                            n.push.apply(n, l)),
                            o = t[i++]
                        } while (void 0 !== o);
                    else if (void 0 !== l.toArray)
                        do {
                            l = o[r],
                            void 0 !== l && (e.push(o.time),
                            l.toArray(n, n.length)),
                            o = t[i++]
                        } while (void 0 !== o);
                    else
                        do {
                            l = o[r],
                            void 0 !== l && (e.push(o.time),
                            n.push(l)),
                            o = t[i++]
                        } while (void 0 !== o)
            },
            subclip: function(t, e, n, r, o=30) {
                const l = t.clone();
                l.name = e;
                const c = [];
                for (let i = 0; i < l.tracks.length; ++i) {
                    const track = l.tracks[i]
                      , t = track.getValueSize()
                      , e = []
                      , h = [];
                    for (let l = 0; l < track.times.length; ++l) {
                        const c = track.times[l] * o;
                        if (!(c < n || c >= r)) {
                            e.push(track.times[l]);
                            for (let e = 0; e < t; ++e)
                                h.push(track.values[l * t + e])
                        }
                    }
                    0 !== e.length && (track.times = el.convertArray(e, track.times.constructor),
                    track.values = el.convertArray(h, track.values.constructor),
                    c.push(track))
                }
                l.tracks = c;
                let h = 1 / 0;
                for (let i = 0; i < l.tracks.length; ++i)
                    h > l.tracks[i].times[0] && (h = l.tracks[i].times[0]);
                for (let i = 0; i < l.tracks.length; ++i)
                    l.tracks[i].shift(-1 * h);
                return l.resetDuration(),
                l
            },
            makeClipAdditive: function(t, e=0, n=t, r=30) {
                r <= 0 && (r = 30);
                const o = n.tracks.length
                  , l = e / r;
                for (let i = 0; i < o; ++i) {
                    const e = n.tracks[i]
                      , r = e.ValueTypeName;
                    if ("bool" === r || "string" === r)
                        continue;
                    const o = t.tracks.find((function(track) {
                        return track.name === e.name && track.ValueTypeName === r
                    }
                    ));
                    if (void 0 === o)
                        continue;
                    let c = 0;
                    const h = e.getValueSize();
                    e.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (c = h / 3);
                    let d = 0;
                    const f = o.getValueSize();
                    o.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (d = f / 3);
                    const m = e.times.length - 1;
                    let v;
                    if (l <= e.times[0]) {
                        const t = c
                          , n = h - c;
                        v = el.arraySlice(e.values, t, n)
                    } else if (l >= e.times[m]) {
                        const t = m * h + c
                          , n = t + h - c;
                        v = el.arraySlice(e.values, t, n)
                    } else {
                        const t = e.createInterpolant()
                          , n = c
                          , r = h - c;
                        t.evaluate(l),
                        v = el.arraySlice(t.resultBuffer, n, r)
                    }
                    if ("quaternion" === r) {
                        (new Ct).fromArray(v).normalize().conjugate().toArray(v)
                    }
                    const _ = o.times.length;
                    for (let t = 0; t < _; ++t) {
                        const e = t * f + d;
                        if ("quaternion" === r)
                            Ct.multiplyQuaternionsFlat(o.values, e, v, 0, o.values, e);
                        else {
                            const t = f - 2 * d;
                            for (let n = 0; n < t; ++n)
                                o.values[e + n] -= v[n]
                        }
                    }
                }
                return t.blendMode = 2501,
                t
            }
        };
        class nl {
            constructor(t, e, n, r) {
                this.parameterPositions = t,
                this._cachedIndex = 0,
                this.resultBuffer = void 0 !== r ? r : new e.constructor(n),
                this.sampleValues = e,
                this.valueSize = n,
                this.settings = null,
                this.DefaultSettings_ = {}
            }
            evaluate(t) {
                const e = this.parameterPositions;
                let n = this._cachedIndex
                  , r = e[n]
                  , o = e[n - 1];
                t: {
                    e: {
                        let l;
                        n: {
                            i: if (!(t < r)) {
                                for (let l = n + 2; ; ) {
                                    if (void 0 === r) {
                                        if (t < o)
                                            break i;
                                        return n = e.length,
                                        this._cachedIndex = n,
                                        this.afterEnd_(n - 1, t, o)
                                    }
                                    if (n === l)
                                        break;
                                    if (o = r,
                                    r = e[++n],
                                    t < r)
                                        break e
                                }
                                l = e.length;
                                break n
                            }
                            if (t >= o)
                                break t;
                            {
                                const c = e[1];
                                t < c && (n = 2,
                                o = c);
                                for (let l = n - 2; ; ) {
                                    if (void 0 === o)
                                        return this._cachedIndex = 0,
                                        this.beforeStart_(0, t, r);
                                    if (n === l)
                                        break;
                                    if (r = o,
                                    o = e[--n - 1],
                                    t >= o)
                                        break e
                                }
                                l = n,
                                n = 0
                            }
                        }
                        for (; n < l; ) {
                            const r = n + l >>> 1;
                            t < e[r] ? l = r : n = r + 1
                        }
                        if (r = e[n],
                        o = e[n - 1],
                        void 0 === o)
                            return this._cachedIndex = 0,
                            this.beforeStart_(0, t, r);
                        if (void 0 === r)
                            return n = e.length,
                            this._cachedIndex = n,
                            this.afterEnd_(n - 1, o, t)
                    }
                    this._cachedIndex = n,
                    this.intervalChanged_(n, o, r)
                }
                return this.interpolate_(n, o, t, r)
            }
            getSettings_() {
                return this.settings || this.DefaultSettings_
            }
            copySampleValue_(t) {
                const e = this.resultBuffer
                  , n = this.sampleValues
                  , r = this.valueSize
                  , o = t * r;
                for (let i = 0; i !== r; ++i)
                    e[i] = n[o + i];
                return e
            }
            interpolate_() {
                throw new Error("call to abstract method")
            }
            intervalChanged_() {}
        }
        nl.prototype.beforeStart_ = nl.prototype.copySampleValue_,
        nl.prototype.afterEnd_ = nl.prototype.copySampleValue_;
        class il extends nl {
            constructor(t, e, n, r) {
                super(t, e, n, r),
                this._weightPrev = -0,
                this._offsetPrev = -0,
                this._weightNext = -0,
                this._offsetNext = -0,
                this.DefaultSettings_ = {
                    endingStart: j,
                    endingEnd: j
                }
            }
            intervalChanged_(t, e, n) {
                const r = this.parameterPositions;
                let o = t - 2
                  , l = t + 1
                  , c = r[o]
                  , h = r[l];
                if (void 0 === c)
                    switch (this.getSettings_().endingStart) {
                    case X:
                        o = t,
                        c = 2 * e - n;
                        break;
                    case Y:
                        o = r.length - 2,
                        c = e + r[o] - r[o + 1];
                        break;
                    default:
                        o = t,
                        c = n
                    }
                if (void 0 === h)
                    switch (this.getSettings_().endingEnd) {
                    case X:
                        l = t,
                        h = 2 * n - e;
                        break;
                    case Y:
                        l = 1,
                        h = n + r[1] - r[0];
                        break;
                    default:
                        l = t - 1,
                        h = e
                    }
                const d = .5 * (n - e)
                  , f = this.valueSize;
                this._weightPrev = d / (e - c),
                this._weightNext = d / (h - n),
                this._offsetPrev = o * f,
                this._offsetNext = l * f
            }
            interpolate_(t, e, n, r) {
                const o = this.resultBuffer
                  , l = this.sampleValues
                  , c = this.valueSize
                  , h = t * c
                  , d = h - c
                  , f = this._offsetPrev
                  , m = this._offsetNext
                  , v = this._weightPrev
                  , _ = this._weightNext
                  , p = (n - e) / (r - e)
                  , x = p * p
                  , y = x * p
                  , M = -v * y + 2 * v * x - v * p
                  , w = (1 + v) * y + (-1.5 - 2 * v) * x + (-.5 + v) * p + 1
                  , S = (-1 - _) * y + (1.5 + _) * x + .5 * p
                  , T = _ * y - _ * x;
                for (let i = 0; i !== c; ++i)
                    o[i] = M * l[f + i] + w * l[d + i] + S * l[h + i] + T * l[m + i];
                return o
            }
        }
        class rl extends nl {
            constructor(t, e, n, r) {
                super(t, e, n, r)
            }
            interpolate_(t, e, n, r) {
                const o = this.resultBuffer
                  , l = this.sampleValues
                  , c = this.valueSize
                  , h = t * c
                  , d = h - c
                  , f = (n - e) / (r - e)
                  , m = 1 - f;
                for (let i = 0; i !== c; ++i)
                    o[i] = l[d + i] * m + l[h + i] * f;
                return o
            }
        }
        class al extends nl {
            constructor(t, e, n, r) {
                super(t, e, n, r)
            }
            interpolate_(t) {
                return this.copySampleValue_(t - 1)
            }
        }
        class sl {
            constructor(t, e, n, r) {
                if (void 0 === t)
                    throw new Error("THREE.KeyframeTrack: track name is undefined");
                if (void 0 === e || 0 === e.length)
                    throw new Error("THREE.KeyframeTrack: no keyframes in track named " + t);
                this.name = t,
                this.times = el.convertArray(e, this.TimeBufferType),
                this.values = el.convertArray(n, this.ValueBufferType),
                this.setInterpolation(r || this.DefaultInterpolation)
            }
            static toJSON(track) {
                const t = track.constructor;
                let e;
                if (t.toJSON !== this.toJSON)
                    e = t.toJSON(track);
                else {
                    e = {
                        name: track.name,
                        times: el.convertArray(track.times, Array),
                        values: el.convertArray(track.values, Array)
                    };
                    const t = track.getInterpolation();
                    t !== track.DefaultInterpolation && (e.interpolation = t)
                }
                return e.type = track.ValueTypeName,
                e
            }
            InterpolantFactoryMethodDiscrete(t) {
                return new al(this.times,this.values,this.getValueSize(),t)
            }
            InterpolantFactoryMethodLinear(t) {
                return new rl(this.times,this.values,this.getValueSize(),t)
            }
            InterpolantFactoryMethodSmooth(t) {
                return new il(this.times,this.values,this.getValueSize(),t)
            }
            setInterpolation(t) {
                let e;
                switch (t) {
                case k:
                    e = this.InterpolantFactoryMethodDiscrete;
                    break;
                case V:
                    e = this.InterpolantFactoryMethodLinear;
                    break;
                case W:
                    e = this.InterpolantFactoryMethodSmooth
                }
                if (void 0 === e) {
                    const e = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
                    if (void 0 === this.createInterpolant) {
                        if (t === this.DefaultInterpolation)
                            throw new Error(e);
                        this.setInterpolation(this.DefaultInterpolation)
                    }
                    return console.warn("THREE.KeyframeTrack:", e),
                    this
                }
                return this.createInterpolant = e,
                this
            }
            getInterpolation() {
                switch (this.createInterpolant) {
                case this.InterpolantFactoryMethodDiscrete:
                    return k;
                case this.InterpolantFactoryMethodLinear:
                    return V;
                case this.InterpolantFactoryMethodSmooth:
                    return W
                }
            }
            getValueSize() {
                return this.values.length / this.times.length
            }
            shift(t) {
                if (0 !== t) {
                    const e = this.times;
                    for (let i = 0, n = e.length; i !== n; ++i)
                        e[i] += t
                }
                return this
            }
            scale(t) {
                if (1 !== t) {
                    const e = this.times;
                    for (let i = 0, n = e.length; i !== n; ++i)
                        e[i] *= t
                }
                return this
            }
            trim(t, e) {
                const n = this.times
                  , r = n.length;
                let o = 0
                  , l = r - 1;
                for (; o !== r && n[o] < t; )
                    ++o;
                for (; -1 !== l && n[l] > e; )
                    --l;
                if (++l,
                0 !== o || l !== r) {
                    o >= l && (l = Math.max(l, 1),
                    o = l - 1);
                    const t = this.getValueSize();
                    this.times = el.arraySlice(n, o, l),
                    this.values = el.arraySlice(this.values, o * t, l * t)
                }
                return this
            }
            validate() {
                let t = !0;
                const e = this.getValueSize();
                e - Math.floor(e) != 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this),
                t = !1);
                const n = this.times
                  , r = this.values
                  , o = n.length;
                0 === o && (console.error("THREE.KeyframeTrack: Track is empty.", this),
                t = !1);
                let l = null;
                for (let i = 0; i !== o; i++) {
                    const e = n[i];
                    if ("number" == typeof e && isNaN(e)) {
                        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i, e),
                        t = !1;
                        break
                    }
                    if (null !== l && l > e) {
                        console.error("THREE.KeyframeTrack: Out of order keys.", this, i, e, l),
                        t = !1;
                        break
                    }
                    l = e
                }
                if (void 0 !== r && el.isTypedArray(r))
                    for (let i = 0, e = r.length; i !== e; ++i) {
                        const e = r[i];
                        if (isNaN(e)) {
                            console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i, e),
                            t = !1;
                            break
                        }
                    }
                return t
            }
            optimize() {
                const t = el.arraySlice(this.times)
                  , e = el.arraySlice(this.values)
                  , n = this.getValueSize()
                  , r = this.getInterpolation() === W
                  , o = t.length - 1;
                let l = 1;
                for (let i = 1; i < o; ++i) {
                    let o = !1;
                    const time = t[i];
                    if (time !== t[i + 1] && (1 !== i || time !== t[0]))
                        if (r)
                            o = !0;
                        else {
                            const t = i * n
                              , r = t - n
                              , l = t + n;
                            for (let c = 0; c !== n; ++c) {
                                const n = e[t + c];
                                if (n !== e[r + c] || n !== e[l + c]) {
                                    o = !0;
                                    break
                                }
                            }
                        }
                    if (o) {
                        if (i !== l) {
                            t[l] = t[i];
                            const r = i * n
                              , o = l * n;
                            for (let t = 0; t !== n; ++t)
                                e[o + t] = e[r + t]
                        }
                        ++l
                    }
                }
                if (o > 0) {
                    t[l] = t[o];
                    for (let t = o * n, r = l * n, c = 0; c !== n; ++c)
                        e[r + c] = e[t + c];
                    ++l
                }
                return l !== t.length ? (this.times = el.arraySlice(t, 0, l),
                this.values = el.arraySlice(e, 0, l * n)) : (this.times = t,
                this.values = e),
                this
            }
            clone() {
                const t = el.arraySlice(this.times, 0)
                  , e = el.arraySlice(this.values, 0)
                  , track = new (0,
                this.constructor)(this.name,t,e);
                return track.createInterpolant = this.createInterpolant,
                track
            }
        }
        sl.prototype.TimeBufferType = Float32Array,
        sl.prototype.ValueBufferType = Float32Array,
        sl.prototype.DefaultInterpolation = V;
        class ll extends sl {
        }
        ll.prototype.ValueTypeName = "bool",
        ll.prototype.ValueBufferType = Array,
        ll.prototype.DefaultInterpolation = k,
        ll.prototype.InterpolantFactoryMethodLinear = void 0,
        ll.prototype.InterpolantFactoryMethodSmooth = void 0;
        class cl extends sl {
        }
        cl.prototype.ValueTypeName = "color";
        class hl extends sl {
        }
        hl.prototype.ValueTypeName = "number";
        class pl extends nl {
            constructor(t, e, n, r) {
                super(t, e, n, r)
            }
            interpolate_(t, e, n, r) {
                const o = this.resultBuffer
                  , l = this.sampleValues
                  , c = this.valueSize
                  , h = (n - e) / (r - e);
                let d = t * c;
                for (let t = d + c; d !== t; d += 4)
                    Ct.slerpFlat(o, 0, l, d - c, l, d, h);
                return o
            }
        }
        class fl extends sl {
            InterpolantFactoryMethodLinear(t) {
                return new pl(this.times,this.values,this.getValueSize(),t)
            }
        }
        fl.prototype.ValueTypeName = "quaternion",
        fl.prototype.DefaultInterpolation = V,
        fl.prototype.InterpolantFactoryMethodSmooth = void 0;
        class ml extends sl {
        }
        ml.prototype.ValueTypeName = "string",
        ml.prototype.ValueBufferType = Array,
        ml.prototype.DefaultInterpolation = k,
        ml.prototype.InterpolantFactoryMethodLinear = void 0,
        ml.prototype.InterpolantFactoryMethodSmooth = void 0;
        class gl extends sl {
        }
        gl.prototype.ValueTypeName = "vector";
        class vl {
            constructor(t, e=-1, n, r=2500) {
                this.name = t,
                this.tracks = n,
                this.duration = e,
                this.blendMode = r,
                this.uuid = ht(),
                this.duration < 0 && this.resetDuration()
            }
            static parse(t) {
                const e = []
                  , n = t.tracks
                  , r = 1 / (t.fps || 1);
                for (let i = 0, t = n.length; i !== t; ++i)
                    e.push(_l(n[i]).scale(r));
                const o = new this(t.name,t.duration,e,t.blendMode);
                return o.uuid = t.uuid,
                o
            }
            static toJSON(t) {
                const e = []
                  , n = t.tracks
                  , r = {
                    name: t.name,
                    duration: t.duration,
                    tracks: e,
                    uuid: t.uuid,
                    blendMode: t.blendMode
                };
                for (let i = 0, t = n.length; i !== t; ++i)
                    e.push(sl.toJSON(n[i]));
                return r
            }
            static CreateFromMorphTargetSequence(t, e, n, r) {
                const o = e.length
                  , l = [];
                for (let i = 0; i < o; i++) {
                    let t = []
                      , c = [];
                    t.push((i + o - 1) % o, i, (i + 1) % o),
                    c.push(0, 1, 0);
                    const h = el.getKeyframeOrder(t);
                    t = el.sortedArray(t, 1, h),
                    c = el.sortedArray(c, 1, h),
                    r || 0 !== t[0] || (t.push(o),
                    c.push(c[0])),
                    l.push(new hl(".morphTargetInfluences[" + e[i].name + "]",t,c).scale(1 / n))
                }
                return new this(t,-1,l)
            }
            static findByName(t, e) {
                let n = t;
                if (!Array.isArray(t)) {
                    const e = t;
                    n = e.geometry && e.geometry.animations || e.animations
                }
                for (let i = 0; i < n.length; i++)
                    if (n[i].name === e)
                        return n[i];
                return null
            }
            static CreateClipsFromMorphTargetSequences(t, e, n) {
                const r = {}
                  , pattern = /^([\w-]*?)([\d]+)$/;
                for (let i = 0, e = t.length; i < e; i++) {
                    const e = t[i]
                      , n = e.name.match(pattern);
                    if (n && n.length > 1) {
                        const t = n[1];
                        let o = r[t];
                        o || (r[t] = o = []),
                        o.push(e)
                    }
                }
                const o = [];
                for (const t in r)
                    o.push(this.CreateFromMorphTargetSequence(t, r[t], e, n));
                return o
            }
            static parseAnimation(t, e) {
                if (!t)
                    return console.error("THREE.AnimationClip: No animation in JSONLoader data."),
                    null;
                const n = function(t, e, n, r, o) {
                    if (0 !== n.length) {
                        const l = []
                          , c = [];
                        el.flattenJSON(n, l, c, r),
                        0 !== l.length && o.push(new t(e,l,c))
                    }
                }
                  , r = []
                  , o = t.name || "default"
                  , l = t.fps || 30
                  , c = t.blendMode;
                let h = t.length || -1;
                const d = t.hierarchy || [];
                for (let t = 0; t < d.length; t++) {
                    const o = d[t].keys;
                    if (o && 0 !== o.length)
                        if (o[0].morphTargets) {
                            const t = {};
                            let e;
                            for (e = 0; e < o.length; e++)
                                if (o[e].morphTargets)
                                    for (let n = 0; n < o[e].morphTargets.length; n++)
                                        t[o[e].morphTargets[n]] = -1;
                            for (const n in t) {
                                const t = []
                                  , l = [];
                                for (let r = 0; r !== o[e].morphTargets.length; ++r) {
                                    const r = o[e];
                                    t.push(r.time),
                                    l.push(r.morphTarget === n ? 1 : 0)
                                }
                                r.push(new hl(".morphTargetInfluence[" + n + "]",t,l))
                            }
                            h = t.length * (l || 1)
                        } else {
                            const l = ".bones[" + e[t].name + "]";
                            n(gl, l + ".position", o, "pos", r),
                            n(fl, l + ".quaternion", o, "rot", r),
                            n(gl, l + ".scale", o, "scl", r)
                        }
                }
                if (0 === r.length)
                    return null;
                return new this(o,h,r,c)
            }
            resetDuration() {
                let t = 0;
                for (let i = 0, e = this.tracks.length; i !== e; ++i) {
                    const track = this.tracks[i];
                    t = Math.max(t, track.times[track.times.length - 1])
                }
                return this.duration = t,
                this
            }
            trim() {
                for (let i = 0; i < this.tracks.length; i++)
                    this.tracks[i].trim(0, this.duration);
                return this
            }
            validate() {
                let t = !0;
                for (let i = 0; i < this.tracks.length; i++)
                    t = t && this.tracks[i].validate();
                return t
            }
            optimize() {
                for (let i = 0; i < this.tracks.length; i++)
                    this.tracks[i].optimize();
                return this
            }
            clone() {
                const t = [];
                for (let i = 0; i < this.tracks.length; i++)
                    t.push(this.tracks[i].clone());
                return new this.constructor(this.name,this.duration,t,this.blendMode)
            }
            toJSON() {
                return this.constructor.toJSON(this)
            }
        }
        function _l(t) {
            if (void 0 === t.type)
                throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
            const e = function(t) {
                switch (t.toLowerCase()) {
                case "scalar":
                case "double":
                case "float":
                case "number":
                case "integer":
                    return hl;
                case "vector":
                case "vector2":
                case "vector3":
                case "vector4":
                    return gl;
                case "color":
                    return cl;
                case "quaternion":
                    return fl;
                case "bool":
                case "boolean":
                    return ll;
                case "string":
                    return ml
                }
                throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + t)
            }(t.type);
            if (void 0 === t.times) {
                const e = []
                  , n = [];
                el.flattenJSON(t.keys, e, n, "value"),
                t.times = e,
                t.values = n
            }
            return void 0 !== e.parse ? e.parse(t) : new e(t.name,t.times,t.values,t.interpolation)
        }
        const xl = {
            enabled: !1,
            files: {},
            add: function(t, e) {
                !1 !== this.enabled && (this.files[t] = e)
            },
            get: function(t) {
                if (!1 !== this.enabled)
                    return this.files[t]
            },
            remove: function(t) {
                delete this.files[t]
            },
            clear: function() {
                this.files = {}
            }
        };
        class yl {
            constructor(t, e, n) {
                const r = this;
                let o, l = !1, c = 0, h = 0;
                const d = [];
                this.onStart = void 0,
                this.onLoad = t,
                this.onProgress = e,
                this.onError = n,
                this.itemStart = function(t) {
                    h++,
                    !1 === l && void 0 !== r.onStart && r.onStart(t, c, h),
                    l = !0
                }
                ,
                this.itemEnd = function(t) {
                    c++,
                    void 0 !== r.onProgress && r.onProgress(t, c, h),
                    c === h && (l = !1,
                    void 0 !== r.onLoad && r.onLoad())
                }
                ,
                this.itemError = function(t) {
                    void 0 !== r.onError && r.onError(t)
                }
                ,
                this.resolveURL = function(t) {
                    return o ? o(t) : t
                }
                ,
                this.setURLModifier = function(t) {
                    return o = t,
                    this
                }
                ,
                this.addHandler = function(t, e) {
                    return d.push(t, e),
                    this
                }
                ,
                this.removeHandler = function(t) {
                    const e = d.indexOf(t);
                    return -1 !== e && d.splice(e, 2),
                    this
                }
                ,
                this.getHandler = function(t) {
                    for (let i = 0, e = d.length; i < e; i += 2) {
                        const e = d[i]
                          , n = d[i + 1];
                        if (e.global && (e.lastIndex = 0),
                        e.test(t))
                            return n
                    }
                    return null
                }
            }
        }
        const Ml = new yl;
        class bl {
            constructor(t) {
                this.manager = void 0 !== t ? t : Ml,
                this.crossOrigin = "anonymous",
                this.withCredentials = !1,
                this.path = "",
                this.resourcePath = "",
                this.requestHeader = {}
            }
            load() {}
            loadAsync(t, e) {
                const n = this;
                return new Promise((function(r, o) {
                    n.load(t, r, e, o)
                }
                ))
            }
            parse() {}
            setCrossOrigin(t) {
                return this.crossOrigin = t,
                this
            }
            setWithCredentials(t) {
                return this.withCredentials = t,
                this
            }
            setPath(path) {
                return this.path = path,
                this
            }
            setResourcePath(t) {
                return this.resourcePath = t,
                this
            }
            setRequestHeader(t) {
                return this.requestHeader = t,
                this
            }
        }
        const wl = {};
        class Sl extends bl {
            constructor(t) {
                super(t)
            }
            load(t, e, n, r) {
                void 0 === t && (t = ""),
                void 0 !== this.path && (t = this.path + t),
                t = this.manager.resolveURL(t);
                const o = xl.get(t);
                if (void 0 !== o)
                    return this.manager.itemStart(t),
                    setTimeout(( () => {
                        e && e(o),
                        this.manager.itemEnd(t)
                    }
                    ), 0),
                    o;
                if (void 0 !== wl[t])
                    return void wl[t].push({
                        onLoad: e,
                        onProgress: n,
                        onError: r
                    });
                wl[t] = [],
                wl[t].push({
                    onLoad: e,
                    onProgress: n,
                    onError: r
                });
                const l = new Request(t,{
                    headers: new Headers(this.requestHeader),
                    credentials: this.withCredentials ? "include" : "same-origin"
                });
                fetch(l).then((e => {
                    if (200 === e.status || 0 === e.status) {
                        0 === e.status && console.warn("THREE.FileLoader: HTTP Status 0 received.");
                        const n = wl[t]
                          , r = e.body.getReader()
                          , o = e.headers.get("Content-Length")
                          , l = o ? parseInt(o) : 0
                          , c = 0 !== l;
                        let h = 0;
                        return new ReadableStream({
                            start(t) {
                                !function e() {
                                    r.read().then(( ({done: r, value: o}) => {
                                        if (r)
                                            t.close();
                                        else {
                                            h += o.byteLength;
                                            const r = new ProgressEvent("progress",{
                                                lengthComputable: c,
                                                loaded: h,
                                                total: l
                                            });
                                            for (let i = 0, t = n.length; i < t; i++) {
                                                const t = n[i];
                                                t.onProgress && t.onProgress(r)
                                            }
                                            t.enqueue(o),
                                            e()
                                        }
                                    }
                                    ))
                                }()
                            }
                        })
                    }
                    throw Error(`fetch for "${e.url}" responded with ${e.status}: ${e.statusText}`)
                }
                )).then((t => {
                    const e = new Response(t);
                    switch (this.responseType) {
                    case "arraybuffer":
                        return e.arrayBuffer();
                    case "blob":
                        return e.blob();
                    case "document":
                        return e.text().then((text => (new DOMParser).parseFromString(text, this.mimeType)));
                    case "json":
                        return e.json();
                    default:
                        return e.text()
                    }
                }
                )).then((data => {
                    xl.add(t, data);
                    const e = wl[t];
                    delete wl[t];
                    for (let i = 0, t = e.length; i < t; i++) {
                        const t = e[i];
                        t.onLoad && t.onLoad(data)
                    }
                    this.manager.itemEnd(t)
                }
                )).catch((e => {
                    const n = wl[t];
                    delete wl[t];
                    for (let i = 0, t = n.length; i < t; i++) {
                        const t = n[i];
                        t.onError && t.onError(e)
                    }
                    this.manager.itemError(t),
                    this.manager.itemEnd(t)
                }
                )),
                this.manager.itemStart(t)
            }
            setResponseType(t) {
                return this.responseType = t,
                this
            }
            setMimeType(t) {
                return this.mimeType = t,
                this
            }
        }
        class Tl extends bl {
            constructor(t) {
                super(t)
            }
            load(t, e, n, r) {
                void 0 !== this.path && (t = this.path + t),
                t = this.manager.resolveURL(t);
                const o = this
                  , l = xl.get(t);
                if (void 0 !== l)
                    return o.manager.itemStart(t),
                    setTimeout((function() {
                        e && e(l),
                        o.manager.itemEnd(t)
                    }
                    ), 0),
                    l;
                const image = yt("img");
                function c() {
                    d(),
                    xl.add(t, this),
                    e && e(this),
                    o.manager.itemEnd(t)
                }
                function h(e) {
                    d(),
                    r && r(e),
                    o.manager.itemError(t),
                    o.manager.itemEnd(t)
                }
                function d() {
                    image.removeEventListener("load", c, !1),
                    image.removeEventListener("error", h, !1)
                }
                return image.addEventListener("load", c, !1),
                image.addEventListener("error", h, !1),
                "data:" !== t.substr(0, 5) && void 0 !== this.crossOrigin && (image.crossOrigin = this.crossOrigin),
                o.manager.itemStart(t),
                image.src = t,
                image
            }
        }
        class El extends bl {
            constructor(t) {
                super(t)
            }
            load(t, e, n, r) {
                const o = new Wn
                  , l = new Tl(this.manager);
                l.setCrossOrigin(this.crossOrigin),
                l.setPath(this.path);
                let c = 0;
                function h(i) {
                    l.load(t[i], (function(image) {
                        o.images[i] = image,
                        c++,
                        6 === c && (o.needsUpdate = !0,
                        e && e(o))
                    }
                    ), void 0, r)
                }
                for (let i = 0; i < t.length; ++i)
                    h(i);
                return o
            }
        }
        class Al extends bl {
            constructor(t) {
                super(t)
            }
            load(t, e, n, r) {
                const o = new Tt
                  , l = new Tl(this.manager);
                return l.setCrossOrigin(this.crossOrigin),
                l.setPath(this.path),
                l.load(t, (function(image) {
                    o.image = image,
                    o.needsUpdate = !0,
                    void 0 !== e && e(o)
                }
                ), n, r),
                o
            }
        }
        class Ll extends Ne {
            constructor(t, e=1) {
                super(),
                this.type = "Light",
                this.color = new $e(t),
                this.intensity = e
            }
            dispose() {}
            copy(source) {
                return super.copy(source),
                this.color.copy(source.color),
                this.intensity = source.intensity,
                this
            }
            toJSON(meta) {
                const data = super.toJSON(meta);
                return data.object.color = this.color.getHex(),
                data.object.intensity = this.intensity,
                void 0 !== this.groundColor && (data.object.groundColor = this.groundColor.getHex()),
                void 0 !== this.distance && (data.object.distance = this.distance),
                void 0 !== this.angle && (data.object.angle = this.angle),
                void 0 !== this.decay && (data.object.decay = this.decay),
                void 0 !== this.penumbra && (data.object.penumbra = this.penumbra),
                void 0 !== this.shadow && (data.object.shadow = this.shadow.toJSON()),
                data
            }
        }
        Ll.prototype.isLight = !0;
        class Rl extends Ll {
            constructor(t, e, n) {
                super(t, n),
                this.type = "HemisphereLight",
                this.position.copy(Ne.DefaultUp),
                this.updateMatrix(),
                this.groundColor = new $e(e)
            }
            copy(source) {
                return Ll.prototype.copy.call(this, source),
                this.groundColor.copy(source.groundColor),
                this
            }
        }
        Rl.prototype.isHemisphereLight = !0;
        const Cl = new le
          , Pl = new Pt
          , Dl = new Pt;
        class Nl {
            constructor(t) {
                this.camera = t,
                this.bias = 0,
                this.normalBias = 0,
                this.radius = 1,
                this.blurSamples = 8,
                this.mapSize = new vt(512,512),
                this.map = null,
                this.mapPass = null,
                this.matrix = new le,
                this.autoUpdate = !0,
                this.needsUpdate = !1,
                this._frustum = new Qn,
                this._frameExtents = new vt(1,1),
                this._viewportCount = 1,
                this._viewports = [new At(0,0,1,1)]
            }
            getViewportCount() {
                return this._viewportCount
            }
            getFrustum() {
                return this._frustum
            }
            updateMatrices(t) {
                const e = this.camera
                  , n = this.matrix;
                Pl.setFromMatrixPosition(t.matrixWorld),
                e.position.copy(Pl),
                Dl.setFromMatrixPosition(t.target.matrixWorld),
                e.lookAt(Dl),
                e.updateMatrixWorld(),
                Cl.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse),
                this._frustum.setFromProjectionMatrix(Cl),
                n.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1),
                n.multiply(e.projectionMatrix),
                n.multiply(e.matrixWorldInverse)
            }
            getViewport(t) {
                return this._viewports[t]
            }
            getFrameExtents() {
                return this._frameExtents
            }
            dispose() {
                this.map && this.map.dispose(),
                this.mapPass && this.mapPass.dispose()
            }
            copy(source) {
                return this.camera = source.camera.clone(),
                this.bias = source.bias,
                this.radius = source.radius,
                this.mapSize.copy(source.mapSize),
                this
            }
            clone() {
                return (new this.constructor).copy(this)
            }
            toJSON() {
                const object = {};
                return 0 !== this.bias && (object.bias = this.bias),
                0 !== this.normalBias && (object.normalBias = this.normalBias),
                1 !== this.radius && (object.radius = this.radius),
                512 === this.mapSize.x && 512 === this.mapSize.y || (object.mapSize = this.mapSize.toArray()),
                object.camera = this.camera.toJSON(!1).object,
                delete object.camera.matrix,
                object
            }
        }
        class Il extends Nl {
            constructor() {
                super(new Hn(50,1,.5,500)),
                this.focus = 1
            }
            updateMatrices(t) {
                const e = this.camera
                  , n = 2 * ot * t.angle * this.focus
                  , r = this.mapSize.width / this.mapSize.height
                  , o = t.distance || e.far;
                n === e.fov && r === e.aspect && o === e.far || (e.fov = n,
                e.aspect = r,
                e.far = o,
                e.updateProjectionMatrix()),
                super.updateMatrices(t)
            }
            copy(source) {
                return super.copy(source),
                this.focus = source.focus,
                this
            }
        }
        Il.prototype.isSpotLightShadow = !0;
        class Ol extends Ll {
            constructor(t, e, n=0, r=Math.PI / 3, o=0, l=1) {
                super(t, e),
                this.type = "SpotLight",
                this.position.copy(Ne.DefaultUp),
                this.updateMatrix(),
                this.target = new Ne,
                this.distance = n,
                this.angle = r,
                this.penumbra = o,
                this.decay = l,
                this.shadow = new Il
            }
            get power() {
                return this.intensity * Math.PI
            }
            set power(t) {
                this.intensity = t / Math.PI
            }
            dispose() {
                this.shadow.dispose()
            }
            copy(source) {
                return super.copy(source),
                this.distance = source.distance,
                this.angle = source.angle,
                this.penumbra = source.penumbra,
                this.decay = source.decay,
                this.target = source.target.clone(),
                this.shadow = source.shadow.clone(),
                this
            }
        }
        Ol.prototype.isSpotLight = !0;
        const Fl = new le
          , Ul = new Pt
          , zl = new Pt;
        class Bl extends Nl {
            constructor() {
                super(new Hn(90,1,.5,500)),
                this._frameExtents = new vt(4,2),
                this._viewportCount = 6,
                this._viewports = [new At(2,1,1,1), new At(0,1,1,1), new At(3,1,1,1), new At(1,1,1,1), new At(3,0,1,1), new At(1,0,1,1)],
                this._cubeDirections = [new Pt(1,0,0), new Pt(-1,0,0), new Pt(0,0,1), new Pt(0,0,-1), new Pt(0,1,0), new Pt(0,-1,0)],
                this._cubeUps = [new Pt(0,1,0), new Pt(0,1,0), new Pt(0,1,0), new Pt(0,1,0), new Pt(0,0,1), new Pt(0,0,-1)]
            }
            updateMatrices(t, e=0) {
                const n = this.camera
                  , r = this.matrix
                  , o = t.distance || n.far;
                o !== n.far && (n.far = o,
                n.updateProjectionMatrix()),
                Ul.setFromMatrixPosition(t.matrixWorld),
                n.position.copy(Ul),
                zl.copy(n.position),
                zl.add(this._cubeDirections[e]),
                n.up.copy(this._cubeUps[e]),
                n.lookAt(zl),
                n.updateMatrixWorld(),
                r.makeTranslation(-Ul.x, -Ul.y, -Ul.z),
                Fl.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse),
                this._frustum.setFromProjectionMatrix(Fl)
            }
        }
        Bl.prototype.isPointLightShadow = !0;
        class Gl extends Ll {
            constructor(t, e, n=0, r=1) {
                super(t, e),
                this.type = "PointLight",
                this.distance = n,
                this.decay = r,
                this.shadow = new Bl
            }
            get power() {
                return 4 * this.intensity * Math.PI
            }
            set power(t) {
                this.intensity = t / (4 * Math.PI)
            }
            dispose() {
                this.shadow.dispose()
            }
            copy(source) {
                return super.copy(source),
                this.distance = source.distance,
                this.decay = source.decay,
                this.shadow = source.shadow.clone(),
                this
            }
        }
        Gl.prototype.isPointLight = !0;
        class Hl extends Nl {
            constructor() {
                super(new di(-5,5,5,-5,.5,500))
            }
        }
        Hl.prototype.isDirectionalLightShadow = !0;
        class kl extends Ll {
            constructor(t, e) {
                super(t, e),
                this.type = "DirectionalLight",
                this.position.copy(Ne.DefaultUp),
                this.updateMatrix(),
                this.target = new Ne,
                this.shadow = new Hl
            }
            dispose() {
                this.shadow.dispose()
            }
            copy(source) {
                return super.copy(source),
                this.target = source.target.clone(),
                this.shadow = source.shadow.clone(),
                this
            }
        }
        kl.prototype.isDirectionalLight = !0;
        class Vl extends Ll {
            constructor(t, e) {
                super(t, e),
                this.type = "AmbientLight"
            }
        }
        Vl.prototype.isAmbientLight = !0;
        class Wl extends Ll {
            constructor(t, e, n=10, r=10) {
                super(t, e),
                this.type = "RectAreaLight",
                this.width = n,
                this.height = r
            }
            get power() {
                return this.intensity * this.width * this.height * Math.PI
            }
            set power(t) {
                this.intensity = t / (this.width * this.height * Math.PI)
            }
            copy(source) {
                return super.copy(source),
                this.width = source.width,
                this.height = source.height,
                this
            }
            toJSON(meta) {
                const data = super.toJSON(meta);
                return data.object.width = this.width,
                data.object.height = this.height,
                data
            }
        }
        Wl.prototype.isRectAreaLight = !0;
        class jl {
            constructor() {
                this.coefficients = [];
                for (let i = 0; i < 9; i++)
                    this.coefficients.push(new Pt)
            }
            set(t) {
                for (let i = 0; i < 9; i++)
                    this.coefficients[i].copy(t[i]);
                return this
            }
            zero() {
                for (let i = 0; i < 9; i++)
                    this.coefficients[i].set(0, 0, 0);
                return this
            }
            getAt(t, e) {
                const n = t.x
                  , r = t.y
                  , o = t.z
                  , l = this.coefficients;
                return e.copy(l[0]).multiplyScalar(.282095),
                e.addScaledVector(l[1], .488603 * r),
                e.addScaledVector(l[2], .488603 * o),
                e.addScaledVector(l[3], .488603 * n),
                e.addScaledVector(l[4], n * r * 1.092548),
                e.addScaledVector(l[5], r * o * 1.092548),
                e.addScaledVector(l[6], .315392 * (3 * o * o - 1)),
                e.addScaledVector(l[7], n * o * 1.092548),
                e.addScaledVector(l[8], .546274 * (n * n - r * r)),
                e
            }
            getIrradianceAt(t, e) {
                const n = t.x
                  , r = t.y
                  , o = t.z
                  , l = this.coefficients;
                return e.copy(l[0]).multiplyScalar(.886227),
                e.addScaledVector(l[1], 1.023328 * r),
                e.addScaledVector(l[2], 1.023328 * o),
                e.addScaledVector(l[3], 1.023328 * n),
                e.addScaledVector(l[4], .858086 * n * r),
                e.addScaledVector(l[5], .858086 * r * o),
                e.addScaledVector(l[6], .743125 * o * o - .247708),
                e.addScaledVector(l[7], .858086 * n * o),
                e.addScaledVector(l[8], .429043 * (n * n - r * r)),
                e
            }
            add(t) {
                for (let i = 0; i < 9; i++)
                    this.coefficients[i].add(t.coefficients[i]);
                return this
            }
            addScaledSH(t, s) {
                for (let i = 0; i < 9; i++)
                    this.coefficients[i].addScaledVector(t.coefficients[i], s);
                return this
            }
            scale(s) {
                for (let i = 0; i < 9; i++)
                    this.coefficients[i].multiplyScalar(s);
                return this
            }
            lerp(t, e) {
                for (let i = 0; i < 9; i++)
                    this.coefficients[i].lerp(t.coefficients[i], e);
                return this
            }
            equals(t) {
                for (let i = 0; i < 9; i++)
                    if (!this.coefficients[i].equals(t.coefficients[i]))
                        return !1;
                return !0
            }
            copy(t) {
                return this.set(t.coefficients)
            }
            clone() {
                return (new this.constructor).copy(this)
            }
            fromArray(t, e=0) {
                const n = this.coefficients;
                for (let i = 0; i < 9; i++)
                    n[i].fromArray(t, e + 3 * i);
                return this
            }
            toArray(t=[], e=0) {
                const n = this.coefficients;
                for (let i = 0; i < 9; i++)
                    n[i].toArray(t, e + 3 * i);
                return t
            }
            static getBasisAt(t, e) {
                const n = t.x
                  , r = t.y
                  , o = t.z;
                e[0] = .282095,
                e[1] = .488603 * r,
                e[2] = .488603 * o,
                e[3] = .488603 * n,
                e[4] = 1.092548 * n * r,
                e[5] = 1.092548 * r * o,
                e[6] = .315392 * (3 * o * o - 1),
                e[7] = 1.092548 * n * o,
                e[8] = .546274 * (n * n - r * r)
            }
        }
        jl.prototype.isSphericalHarmonics3 = !0;
        class Xl extends Ll {
            constructor(t=new jl, e=1) {
                super(void 0, e),
                this.sh = t
            }
            copy(source) {
                return super.copy(source),
                this.sh.copy(source.sh),
                this
            }
            fromJSON(t) {
                return this.intensity = t.intensity,
                this.sh.fromArray(t.sh),
                this
            }
            toJSON(meta) {
                const data = super.toJSON(meta);
                return data.object.sh = this.sh.toArray(),
                data
            }
        }
        Xl.prototype.isLightProbe = !0;
        class ql {
            static decodeText(t) {
                if ("undefined" != typeof TextDecoder)
                    return (new TextDecoder).decode(t);
                let s = "";
                for (let i = 0, e = t.length; i < e; i++)
                    s += String.fromCharCode(t[i]);
                try {
                    return decodeURIComponent(escape(s))
                } catch (t) {
                    return s
                }
            }
            static extractUrlBase(t) {
                const e = t.lastIndexOf("/");
                return -1 === e ? "./" : t.substr(0, e + 1)
            }
            static resolveURL(t, path) {
                return "string" != typeof t || "" === t ? "" : (/^https?:\/\//i.test(path) && /^\//.test(t) && (path = path.replace(/(^https?:\/\/[^\/]+).*/i, "$1")),
                /^(https?:)?\/\//i.test(t) || /^data:.*,.*$/i.test(t) || /^blob:.*$/i.test(t) ? t : path + t)
            }
        }
        class Yl extends mn {
            constructor() {
                super(),
                this.type = "InstancedBufferGeometry",
                this.instanceCount = 1 / 0
            }
            copy(source) {
                return super.copy(source),
                this.instanceCount = source.instanceCount,
                this
            }
            clone() {
                return (new this.constructor).copy(this)
            }
            toJSON() {
                const data = super.toJSON(this);
                return data.instanceCount = this.instanceCount,
                data.isInstancedBufferGeometry = !0,
                data
            }
        }
        Yl.prototype.isInstancedBufferGeometry = !0;
        let Zl;
        (class extends bl {
            constructor(t) {
                super(t),
                "undefined" == typeof createImageBitmap && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),
                "undefined" == typeof fetch && console.warn("THREE.ImageBitmapLoader: fetch() not supported."),
                this.options = {
                    premultiplyAlpha: "none"
                }
            }
            setOptions(t) {
                return this.options = t,
                this
            }
            load(t, e, n, r) {
                void 0 === t && (t = ""),
                void 0 !== this.path && (t = this.path + t),
                t = this.manager.resolveURL(t);
                const o = this
                  , l = xl.get(t);
                if (void 0 !== l)
                    return o.manager.itemStart(t),
                    setTimeout((function() {
                        e && e(l),
                        o.manager.itemEnd(t)
                    }
                    ), 0),
                    l;
                const c = {};
                c.credentials = "anonymous" === this.crossOrigin ? "same-origin" : "include",
                c.headers = this.requestHeader,
                fetch(t, c).then((function(t) {
                    return t.blob()
                }
                )).then((function(t) {
                    return createImageBitmap(t, Object.assign(o.options, {
                        colorSpaceConversion: "none"
                    }))
                }
                )).then((function(n) {
                    xl.add(t, n),
                    e && e(n),
                    o.manager.itemEnd(t)
                }
                )).catch((function(e) {
                    r && r(e),
                    o.manager.itemError(t),
                    o.manager.itemEnd(t)
                }
                )),
                o.manager.itemStart(t)
            }
        }
        ).prototype.isImageBitmapLoader = !0;
        const Jl = function() {
            return void 0 === Zl && (Zl = new (window.AudioContext || window.webkitAudioContext)),
            Zl
        };
        class Kl extends bl {
            constructor(t) {
                super(t)
            }
            load(t, e, n, r) {
                const o = this
                  , l = new Sl(this.manager);
                l.setResponseType("arraybuffer"),
                l.setPath(this.path),
                l.setRequestHeader(this.requestHeader),
                l.setWithCredentials(this.withCredentials),
                l.load(t, (function(n) {
                    try {
                        const t = n.slice(0);
                        Jl().decodeAudioData(t, (function(t) {
                            e(t)
                        }
                        ))
                    } catch (e) {
                        r ? r(e) : console.error(e),
                        o.manager.itemError(t)
                    }
                }
                ), n, r)
            }
        }
        (class extends Xl {
            constructor(t, e, n=1) {
                super(void 0, n);
                const r = (new $e).set(t)
                  , o = (new $e).set(e)
                  , l = new Pt(r.r,r.g,r.b)
                  , c = new Pt(o.r,o.g,o.b)
                  , h = Math.sqrt(Math.PI)
                  , d = h * Math.sqrt(.75);
                this.sh.coefficients[0].copy(l).add(c).multiplyScalar(h),
                this.sh.coefficients[1].copy(l).sub(c).multiplyScalar(d)
            }
        }
        ).prototype.isHemisphereLightProbe = !0;
        (class extends Xl {
            constructor(t, e=1) {
                super(void 0, e);
                const n = (new $e).set(t);
                this.sh.coefficients[0].set(n.r, n.g, n.b).multiplyScalar(2 * Math.sqrt(Math.PI))
            }
        }
        ).prototype.isAmbientLightProbe = !0;
        class Ql extends Ne {
            constructor(t) {
                super(),
                this.type = "Audio",
                this.listener = t,
                this.context = t.context,
                this.gain = this.context.createGain(),
                this.gain.connect(t.getInput()),
                this.autoplay = !1,
                this.buffer = null,
                this.detune = 0,
                this.loop = !1,
                this.loopStart = 0,
                this.loopEnd = 0,
                this.offset = 0,
                this.duration = void 0,
                this.playbackRate = 1,
                this.isPlaying = !1,
                this.hasPlaybackControl = !0,
                this.source = null,
                this.sourceType = "empty",
                this._startedAt = 0,
                this._progress = 0,
                this._connected = !1,
                this.filters = []
            }
            getOutput() {
                return this.gain
            }
            setNodeSource(t) {
                return this.hasPlaybackControl = !1,
                this.sourceType = "audioNode",
                this.source = t,
                this.connect(),
                this
            }
            setMediaElementSource(t) {
                return this.hasPlaybackControl = !1,
                this.sourceType = "mediaNode",
                this.source = this.context.createMediaElementSource(t),
                this.connect(),
                this
            }
            setMediaStreamSource(t) {
                return this.hasPlaybackControl = !1,
                this.sourceType = "mediaStreamNode",
                this.source = this.context.createMediaStreamSource(t),
                this.connect(),
                this
            }
            setBuffer(t) {
                return this.buffer = t,
                this.sourceType = "buffer",
                this.autoplay && this.play(),
                this
            }
            play(t=0) {
                if (!0 === this.isPlaying)
                    return void console.warn("THREE.Audio: Audio is already playing.");
                if (!1 === this.hasPlaybackControl)
                    return void console.warn("THREE.Audio: this Audio has no playback control.");
                this._startedAt = this.context.currentTime + t;
                const source = this.context.createBufferSource();
                return source.buffer = this.buffer,
                source.loop = this.loop,
                source.loopStart = this.loopStart,
                source.loopEnd = this.loopEnd,
                source.onended = this.onEnded.bind(this),
                source.start(this._startedAt, this._progress + this.offset, this.duration),
                this.isPlaying = !0,
                this.source = source,
                this.setDetune(this.detune),
                this.setPlaybackRate(this.playbackRate),
                this.connect()
            }
            pause() {
                if (!1 !== this.hasPlaybackControl)
                    return !0 === this.isPlaying && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate,
                    !0 === this.loop && (this._progress = this._progress % (this.duration || this.buffer.duration)),
                    this.source.stop(),
                    this.source.onended = null,
                    this.isPlaying = !1),
                    this;
                console.warn("THREE.Audio: this Audio has no playback control.")
            }
            stop() {
                if (!1 !== this.hasPlaybackControl)
                    return this._progress = 0,
                    this.source.stop(),
                    this.source.onended = null,
                    this.isPlaying = !1,
                    this;
                console.warn("THREE.Audio: this Audio has no playback control.")
            }
            connect() {
                if (this.filters.length > 0) {
                    this.source.connect(this.filters[0]);
                    for (let i = 1, t = this.filters.length; i < t; i++)
                        this.filters[i - 1].connect(this.filters[i]);
                    this.filters[this.filters.length - 1].connect(this.getOutput())
                } else
                    this.source.connect(this.getOutput());
                return this._connected = !0,
                this
            }
            disconnect() {
                if (this.filters.length > 0) {
                    this.source.disconnect(this.filters[0]);
                    for (let i = 1, t = this.filters.length; i < t; i++)
                        this.filters[i - 1].disconnect(this.filters[i]);
                    this.filters[this.filters.length - 1].disconnect(this.getOutput())
                } else
                    this.source.disconnect(this.getOutput());
                return this._connected = !1,
                this
            }
            getFilters() {
                return this.filters
            }
            setFilters(t) {
                return t || (t = []),
                !0 === this._connected ? (this.disconnect(),
                this.filters = t.slice(),
                this.connect()) : this.filters = t.slice(),
                this
            }
            setDetune(t) {
                if (this.detune = t,
                void 0 !== this.source.detune)
                    return !0 === this.isPlaying && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, .01),
                    this
            }
            getDetune() {
                return this.detune
            }
            getFilter() {
                return this.getFilters()[0]
            }
            setFilter(filter) {
                return this.setFilters(filter ? [filter] : [])
            }
            setPlaybackRate(t) {
                if (!1 !== this.hasPlaybackControl)
                    return this.playbackRate = t,
                    !0 === this.isPlaying && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, .01),
                    this;
                console.warn("THREE.Audio: this Audio has no playback control.")
            }
            getPlaybackRate() {
                return this.playbackRate
            }
            onEnded() {
                this.isPlaying = !1
            }
            getLoop() {
                return !1 === this.hasPlaybackControl ? (console.warn("THREE.Audio: this Audio has no playback control."),
                !1) : this.loop
            }
            setLoop(t) {
                if (!1 !== this.hasPlaybackControl)
                    return this.loop = t,
                    !0 === this.isPlaying && (this.source.loop = this.loop),
                    this;
                console.warn("THREE.Audio: this Audio has no playback control.")
            }
            setLoopStart(t) {
                return this.loopStart = t,
                this
            }
            setLoopEnd(t) {
                return this.loopEnd = t,
                this
            }
            getVolume() {
                return this.gain.gain.value
            }
            setVolume(t) {
                return this.gain.gain.setTargetAtTime(t, this.context.currentTime, .01),
                this
            }
        }
        class $l {
            constructor(t, e, n) {
                let r, o, l;
                switch (this.binding = t,
                this.valueSize = n,
                e) {
                case "quaternion":
                    r = this._slerp,
                    o = this._slerpAdditive,
                    l = this._setAdditiveIdentityQuaternion,
                    this.buffer = new Float64Array(6 * n),
                    this._workIndex = 5;
                    break;
                case "string":
                case "bool":
                    r = this._select,
                    o = this._select,
                    l = this._setAdditiveIdentityOther,
                    this.buffer = new Array(5 * n);
                    break;
                default:
                    r = this._lerp,
                    o = this._lerpAdditive,
                    l = this._setAdditiveIdentityNumeric,
                    this.buffer = new Float64Array(5 * n)
                }
                this._mixBufferRegion = r,
                this._mixBufferRegionAdditive = o,
                this._setIdentity = l,
                this._origIndex = 3,
                this._addIndex = 4,
                this.cumulativeWeight = 0,
                this.cumulativeWeightAdditive = 0,
                this.useCount = 0,
                this.referenceCount = 0
            }
            accumulate(t, e) {
                const n = this.buffer
                  , r = this.valueSize
                  , o = t * r + r;
                let l = this.cumulativeWeight;
                if (0 === l) {
                    for (let i = 0; i !== r; ++i)
                        n[o + i] = n[i];
                    l = e
                } else {
                    l += e;
                    const t = e / l;
                    this._mixBufferRegion(n, o, 0, t, r)
                }
                this.cumulativeWeight = l
            }
            accumulateAdditive(t) {
                const e = this.buffer
                  , n = this.valueSize
                  , r = n * this._addIndex;
                0 === this.cumulativeWeightAdditive && this._setIdentity(),
                this._mixBufferRegionAdditive(e, r, 0, t, n),
                this.cumulativeWeightAdditive += t
            }
            apply(t) {
                const e = this.valueSize
                  , n = this.buffer
                  , r = t * e + e
                  , o = this.cumulativeWeight
                  , l = this.cumulativeWeightAdditive
                  , c = this.binding;
                if (this.cumulativeWeight = 0,
                this.cumulativeWeightAdditive = 0,
                o < 1) {
                    const t = e * this._origIndex;
                    this._mixBufferRegion(n, r, t, 1 - o, e)
                }
                l > 0 && this._mixBufferRegionAdditive(n, r, this._addIndex * e, 1, e);
                for (let i = e, t = e + e; i !== t; ++i)
                    if (n[i] !== n[i + e]) {
                        c.setValue(n, r);
                        break
                    }
            }
            saveOriginalState() {
                const t = this.binding
                  , e = this.buffer
                  , n = this.valueSize
                  , r = n * this._origIndex;
                t.getValue(e, r);
                for (let i = n, t = r; i !== t; ++i)
                    e[i] = e[r + i % n];
                this._setIdentity(),
                this.cumulativeWeight = 0,
                this.cumulativeWeightAdditive = 0
            }
            restoreOriginalState() {
                const t = 3 * this.valueSize;
                this.binding.setValue(this.buffer, t)
            }
            _setAdditiveIdentityNumeric() {
                const t = this._addIndex * this.valueSize
                  , e = t + this.valueSize;
                for (let i = t; i < e; i++)
                    this.buffer[i] = 0
            }
            _setAdditiveIdentityQuaternion() {
                this._setAdditiveIdentityNumeric(),
                this.buffer[this._addIndex * this.valueSize + 3] = 1
            }
            _setAdditiveIdentityOther() {
                const t = this._origIndex * this.valueSize
                  , e = this._addIndex * this.valueSize;
                for (let i = 0; i < this.valueSize; i++)
                    this.buffer[e + i] = this.buffer[t + i]
            }
            _select(t, e, n, r, o) {
                if (r >= .5)
                    for (let i = 0; i !== o; ++i)
                        t[e + i] = t[n + i]
            }
            _slerp(t, e, n, r) {
                Ct.slerpFlat(t, e, t, e, t, n, r)
            }
            _slerpAdditive(t, e, n, r, o) {
                const l = this._workIndex * o;
                Ct.multiplyQuaternionsFlat(t, l, t, e, t, n),
                Ct.slerpFlat(t, e, t, e, t, l, r)
            }
            _lerp(t, e, n, r, o) {
                const s = 1 - r;
                for (let i = 0; i !== o; ++i) {
                    const o = e + i;
                    t[o] = t[o] * s + t[n + i] * r
                }
            }
            _lerpAdditive(t, e, n, r, o) {
                for (let i = 0; i !== o; ++i) {
                    const o = e + i;
                    t[o] = t[o] + t[n + i] * r
                }
            }
        }
        const tc = "\\[\\]\\.:\\/"
          , ec = new RegExp("[\\[\\]\\.:\\/]","g")
          , nc = "[^\\[\\]\\.:\\/]"
          , ic = "[^" + tc.replace("\\.", "") + "]"
          , rc = /((?:WC+[\/:])*)/.source.replace("WC", nc)
          , ac = /(WCOD+)?/.source.replace("WCOD", ic)
          , sc = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", nc)
          , oc = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", nc)
          , lc = new RegExp("^" + rc + ac + sc + oc + "$")
          , cc = ["material", "materials", "bones"];
        class hc {
            constructor(t, path, e) {
                this.path = path,
                this.parsedPath = e || hc.parseTrackName(path),
                this.node = hc.findNode(t, this.parsedPath.nodeName) || t,
                this.rootNode = t,
                this.getValue = this._getValue_unbound,
                this.setValue = this._setValue_unbound
            }
            static create(t, path, e) {
                return t && t.isAnimationObjectGroup ? new hc.Composite(t,path,e) : new hc(t,path,e)
            }
            static sanitizeNodeName(t) {
                return t.replace(/\s/g, "_").replace(ec, "")
            }
            static parseTrackName(t) {
                const e = lc.exec(t);
                if (!e)
                    throw new Error("PropertyBinding: Cannot parse trackName: " + t);
                const n = {
                    nodeName: e[2],
                    objectName: e[3],
                    objectIndex: e[4],
                    propertyName: e[5],
                    propertyIndex: e[6]
                }
                  , r = n.nodeName && n.nodeName.lastIndexOf(".");
                if (void 0 !== r && -1 !== r) {
                    const t = n.nodeName.substring(r + 1);
                    -1 !== cc.indexOf(t) && (n.nodeName = n.nodeName.substring(0, r),
                    n.objectName = t)
                }
                if (null === n.propertyName || 0 === n.propertyName.length)
                    throw new Error("PropertyBinding: can not parse propertyName from trackName: " + t);
                return n
            }
            static findNode(t, e) {
                if (!e || "" === e || "." === e || -1 === e || e === t.name || e === t.uuid)
                    return t;
                if (t.skeleton) {
                    const n = t.skeleton.getBoneByName(e);
                    if (void 0 !== n)
                        return n
                }
                if (t.children) {
                    const n = function(t) {
                        for (let i = 0; i < t.length; i++) {
                            const r = t[i];
                            if (r.name === e || r.uuid === e)
                                return r;
                            const o = n(r.children);
                            if (o)
                                return o
                        }
                        return null
                    }
                      , r = n(t.children);
                    if (r)
                        return r
                }
                return null
            }
            _getValue_unavailable() {}
            _setValue_unavailable() {}
            _getValue_direct(t, e) {
                t[e] = this.targetObject[this.propertyName]
            }
            _getValue_array(t, e) {
                const source = this.resolvedProperty;
                for (let i = 0, n = source.length; i !== n; ++i)
                    t[e++] = source[i]
            }
            _getValue_arrayElement(t, e) {
                t[e] = this.resolvedProperty[this.propertyIndex]
            }
            _getValue_toArray(t, e) {
                this.resolvedProperty.toArray(t, e)
            }
            _setValue_direct(t, e) {
                this.targetObject[this.propertyName] = t[e]
            }
            _setValue_direct_setNeedsUpdate(t, e) {
                this.targetObject[this.propertyName] = t[e],
                this.targetObject.needsUpdate = !0
            }
            _setValue_direct_setMatrixWorldNeedsUpdate(t, e) {
                this.targetObject[this.propertyName] = t[e],
                this.targetObject.matrixWorldNeedsUpdate = !0
            }
            _setValue_array(t, e) {
                const n = this.resolvedProperty;
                for (let i = 0, r = n.length; i !== r; ++i)
                    n[i] = t[e++]
            }
            _setValue_array_setNeedsUpdate(t, e) {
                const n = this.resolvedProperty;
                for (let i = 0, r = n.length; i !== r; ++i)
                    n[i] = t[e++];
                this.targetObject.needsUpdate = !0
            }
            _setValue_array_setMatrixWorldNeedsUpdate(t, e) {
                const n = this.resolvedProperty;
                for (let i = 0, r = n.length; i !== r; ++i)
                    n[i] = t[e++];
                this.targetObject.matrixWorldNeedsUpdate = !0
            }
            _setValue_arrayElement(t, e) {
                this.resolvedProperty[this.propertyIndex] = t[e]
            }
            _setValue_arrayElement_setNeedsUpdate(t, e) {
                this.resolvedProperty[this.propertyIndex] = t[e],
                this.targetObject.needsUpdate = !0
            }
            _setValue_arrayElement_setMatrixWorldNeedsUpdate(t, e) {
                this.resolvedProperty[this.propertyIndex] = t[e],
                this.targetObject.matrixWorldNeedsUpdate = !0
            }
            _setValue_fromArray(t, e) {
                this.resolvedProperty.fromArray(t, e)
            }
            _setValue_fromArray_setNeedsUpdate(t, e) {
                this.resolvedProperty.fromArray(t, e),
                this.targetObject.needsUpdate = !0
            }
            _setValue_fromArray_setMatrixWorldNeedsUpdate(t, e) {
                this.resolvedProperty.fromArray(t, e),
                this.targetObject.matrixWorldNeedsUpdate = !0
            }
            _getValue_unbound(t, e) {
                this.bind(),
                this.getValue(t, e)
            }
            _setValue_unbound(t, e) {
                this.bind(),
                this.setValue(t, e)
            }
            bind() {
                let t = this.node;
                const e = this.parsedPath
                  , n = e.objectName
                  , r = e.propertyName;
                let o = e.propertyIndex;
                if (t || (t = hc.findNode(this.rootNode, e.nodeName) || this.rootNode,
                this.node = t),
                this.getValue = this._getValue_unavailable,
                this.setValue = this._setValue_unavailable,
                !t)
                    return void console.error("THREE.PropertyBinding: Trying to update node for track: " + this.path + " but it wasn't found.");
                if (n) {
                    let r = e.objectIndex;
                    switch (n) {
                    case "materials":
                        if (!t.material)
                            return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
                        if (!t.material.materials)
                            return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
                        t = t.material.materials;
                        break;
                    case "bones":
                        if (!t.skeleton)
                            return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
                        t = t.skeleton.bones;
                        for (let i = 0; i < t.length; i++)
                            if (t[i].name === r) {
                                r = i;
                                break
                            }
                        break;
                    default:
                        if (void 0 === t[n])
                            return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
                        t = t[n]
                    }
                    if (void 0 !== r) {
                        if (void 0 === t[r])
                            return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, t);
                        t = t[r]
                    }
                }
                const l = t[r];
                if (void 0 === l) {
                    const n = e.nodeName;
                    return void console.error("THREE.PropertyBinding: Trying to update property for track: " + n + "." + r + " but it wasn't found.", t)
                }
                let c = this.Versioning.None;
                this.targetObject = t,
                void 0 !== t.needsUpdate ? c = this.Versioning.NeedsUpdate : void 0 !== t.matrixWorldNeedsUpdate && (c = this.Versioning.MatrixWorldNeedsUpdate);
                let h = this.BindingType.Direct;
                if (void 0 !== o) {
                    if ("morphTargetInfluences" === r) {
                        if (!t.geometry)
                            return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
                        if (!t.geometry.isBufferGeometry)
                            return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.", this);
                        if (!t.geometry.morphAttributes)
                            return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
                        void 0 !== t.morphTargetDictionary[o] && (o = t.morphTargetDictionary[o])
                    }
                    h = this.BindingType.ArrayElement,
                    this.resolvedProperty = l,
                    this.propertyIndex = o
                } else
                    void 0 !== l.fromArray && void 0 !== l.toArray ? (h = this.BindingType.HasFromToArray,
                    this.resolvedProperty = l) : Array.isArray(l) ? (h = this.BindingType.EntireArray,
                    this.resolvedProperty = l) : this.propertyName = r;
                this.getValue = this.GetterByBindingType[h],
                this.setValue = this.SetterByBindingTypeAndVersioning[h][c]
            }
            unbind() {
                this.node = null,
                this.getValue = this._getValue_unbound,
                this.setValue = this._setValue_unbound
            }
        }
        hc.Composite = class {
            constructor(t, path, e) {
                const n = e || hc.parseTrackName(path);
                this._targetGroup = t,
                this._bindings = t.subscribe_(path, n)
            }
            getValue(t, e) {
                this.bind();
                const n = this._targetGroup.nCachedObjects_
                  , r = this._bindings[n];
                void 0 !== r && r.getValue(t, e)
            }
            setValue(t, e) {
                const n = this._bindings;
                for (let i = this._targetGroup.nCachedObjects_, r = n.length; i !== r; ++i)
                    n[i].setValue(t, e)
            }
            bind() {
                const t = this._bindings;
                for (let i = this._targetGroup.nCachedObjects_, e = t.length; i !== e; ++i)
                    t[i].bind()
            }
            unbind() {
                const t = this._bindings;
                for (let i = this._targetGroup.nCachedObjects_, e = t.length; i !== e; ++i)
                    t[i].unbind()
            }
        }
        ,
        hc.prototype.BindingType = {
            Direct: 0,
            EntireArray: 1,
            ArrayElement: 2,
            HasFromToArray: 3
        },
        hc.prototype.Versioning = {
            None: 0,
            NeedsUpdate: 1,
            MatrixWorldNeedsUpdate: 2
        },
        hc.prototype.GetterByBindingType = [hc.prototype._getValue_direct, hc.prototype._getValue_array, hc.prototype._getValue_arrayElement, hc.prototype._getValue_toArray],
        hc.prototype.SetterByBindingTypeAndVersioning = [[hc.prototype._setValue_direct, hc.prototype._setValue_direct_setNeedsUpdate, hc.prototype._setValue_direct_setMatrixWorldNeedsUpdate], [hc.prototype._setValue_array, hc.prototype._setValue_array_setNeedsUpdate, hc.prototype._setValue_array_setMatrixWorldNeedsUpdate], [hc.prototype._setValue_arrayElement, hc.prototype._setValue_arrayElement_setNeedsUpdate, hc.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate], [hc.prototype._setValue_fromArray, hc.prototype._setValue_fromArray_setNeedsUpdate, hc.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];
        class uc {
            constructor(t, e, n=null, r=e.blendMode) {
                this._mixer = t,
                this._clip = e,
                this._localRoot = n,
                this.blendMode = r;
                const o = e.tracks
                  , l = o.length
                  , c = new Array(l)
                  , h = {
                    endingStart: j,
                    endingEnd: j
                };
                for (let i = 0; i !== l; ++i) {
                    const t = o[i].createInterpolant(null);
                    c[i] = t,
                    t.settings = h
                }
                this._interpolantSettings = h,
                this._interpolants = c,
                this._propertyBindings = new Array(l),
                this._cacheIndex = null,
                this._byClipCacheIndex = null,
                this._timeScaleInterpolant = null,
                this._weightInterpolant = null,
                this.loop = 2201,
                this._loopCount = -1,
                this._startTime = null,
                this.time = 0,
                this.timeScale = 1,
                this._effectiveTimeScale = 1,
                this.weight = 1,
                this._effectiveWeight = 1,
                this.repetitions = 1 / 0,
                this.paused = !1,
                this.enabled = !0,
                this.clampWhenFinished = !1,
                this.zeroSlopeAtStart = !0,
                this.zeroSlopeAtEnd = !0
            }
            play() {
                return this._mixer._activateAction(this),
                this
            }
            stop() {
                return this._mixer._deactivateAction(this),
                this.reset()
            }
            reset() {
                return this.paused = !1,
                this.enabled = !0,
                this.time = 0,
                this._loopCount = -1,
                this._startTime = null,
                this.stopFading().stopWarping()
            }
            isRunning() {
                return this.enabled && !this.paused && 0 !== this.timeScale && null === this._startTime && this._mixer._isActiveAction(this)
            }
            isScheduled() {
                return this._mixer._isActiveAction(this)
            }
            startAt(time) {
                return this._startTime = time,
                this
            }
            setLoop(t, e) {
                return this.loop = t,
                this.repetitions = e,
                this
            }
            setEffectiveWeight(t) {
                return this.weight = t,
                this._effectiveWeight = this.enabled ? t : 0,
                this.stopFading()
            }
            getEffectiveWeight() {
                return this._effectiveWeight
            }
            fadeIn(t) {
                return this._scheduleFading(t, 0, 1)
            }
            fadeOut(t) {
                return this._scheduleFading(t, 1, 0)
            }
            crossFadeFrom(t, e, n) {
                if (t.fadeOut(e),
                this.fadeIn(e),
                n) {
                    const n = this._clip.duration
                      , r = t._clip.duration
                      , o = r / n
                      , l = n / r;
                    t.warp(1, o, e),
                    this.warp(l, 1, e)
                }
                return this
            }
            crossFadeTo(t, e, n) {
                return t.crossFadeFrom(this, e, n)
            }
            stopFading() {
                const t = this._weightInterpolant;
                return null !== t && (this._weightInterpolant = null,
                this._mixer._takeBackControlInterpolant(t)),
                this
            }
            setEffectiveTimeScale(t) {
                return this.timeScale = t,
                this._effectiveTimeScale = this.paused ? 0 : t,
                this.stopWarping()
            }
            getEffectiveTimeScale() {
                return this._effectiveTimeScale
            }
            setDuration(t) {
                return this.timeScale = this._clip.duration / t,
                this.stopWarping()
            }
            syncWith(t) {
                return this.time = t.time,
                this.timeScale = t.timeScale,
                this.stopWarping()
            }
            halt(t) {
                return this.warp(this._effectiveTimeScale, 0, t)
            }
            warp(t, e, n) {
                const r = this._mixer
                  , o = r.time
                  , l = this.timeScale;
                let c = this._timeScaleInterpolant;
                null === c && (c = r._lendControlInterpolant(),
                this._timeScaleInterpolant = c);
                const h = c.parameterPositions
                  , d = c.sampleValues;
                return h[0] = o,
                h[1] = o + n,
                d[0] = t / l,
                d[1] = e / l,
                this
            }
            stopWarping() {
                const t = this._timeScaleInterpolant;
                return null !== t && (this._timeScaleInterpolant = null,
                this._mixer._takeBackControlInterpolant(t)),
                this
            }
            getMixer() {
                return this._mixer
            }
            getClip() {
                return this._clip
            }
            getRoot() {
                return this._localRoot || this._mixer._root
            }
            _update(time, t, e, n) {
                if (!this.enabled)
                    return void this._updateWeight(time);
                const r = this._startTime;
                if (null !== r) {
                    const n = (time - r) * e;
                    if (n < 0 || 0 === e)
                        return;
                    this._startTime = null,
                    t = e * n
                }
                t *= this._updateTimeScale(time);
                const o = this._updateTime(t)
                  , l = this._updateWeight(time);
                if (l > 0) {
                    const t = this._interpolants
                      , e = this._propertyBindings;
                    if (2501 === this.blendMode)
                        for (let n = 0, r = t.length; n !== r; ++n)
                            t[n].evaluate(o),
                            e[n].accumulateAdditive(l);
                    else
                        for (let r = 0, c = t.length; r !== c; ++r)
                            t[r].evaluate(o),
                            e[r].accumulate(n, l)
                }
            }
            _updateWeight(time) {
                let t = 0;
                if (this.enabled) {
                    t = this.weight;
                    const e = this._weightInterpolant;
                    if (null !== e) {
                        const n = e.evaluate(time)[0];
                        t *= n,
                        time > e.parameterPositions[1] && (this.stopFading(),
                        0 === n && (this.enabled = !1))
                    }
                }
                return this._effectiveWeight = t,
                t
            }
            _updateTimeScale(time) {
                let t = 0;
                if (!this.paused) {
                    t = this.timeScale;
                    const e = this._timeScaleInterpolant;
                    if (null !== e) {
                        t *= e.evaluate(time)[0],
                        time > e.parameterPositions[1] && (this.stopWarping(),
                        0 === t ? this.paused = !0 : this.timeScale = t)
                    }
                }
                return this._effectiveTimeScale = t,
                t
            }
            _updateTime(t) {
                const e = this._clip.duration
                  , n = this.loop;
                let time = this.time + t
                  , r = this._loopCount;
                const o = 2202 === n;
                if (0 === t)
                    return -1 === r ? time : o && 1 == (1 & r) ? e - time : time;
                if (2200 === n) {
                    -1 === r && (this._loopCount = 0,
                    this._setEndings(!0, !0, !1));
                    t: {
                        if (time >= e)
                            time = e;
                        else {
                            if (!(time < 0)) {
                                this.time = time;
                                break t
                            }
                            time = 0
                        }
                        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1,
                        this.time = time,
                        this._mixer.dispatchEvent({
                            type: "finished",
                            action: this,
                            direction: t < 0 ? -1 : 1
                        })
                    }
                } else {
                    if (-1 === r && (t >= 0 ? (r = 0,
                    this._setEndings(!0, 0 === this.repetitions, o)) : this._setEndings(0 === this.repetitions, !0, o)),
                    time >= e || time < 0) {
                        const n = Math.floor(time / e);
                        time -= e * n,
                        r += Math.abs(n);
                        const l = this.repetitions - r;
                        if (l <= 0)
                            this.clampWhenFinished ? this.paused = !0 : this.enabled = !1,
                            time = t > 0 ? e : 0,
                            this.time = time,
                            this._mixer.dispatchEvent({
                                type: "finished",
                                action: this,
                                direction: t > 0 ? 1 : -1
                            });
                        else {
                            if (1 === l) {
                                const e = t < 0;
                                this._setEndings(e, !e, o)
                            } else
                                this._setEndings(!1, !1, o);
                            this._loopCount = r,
                            this.time = time,
                            this._mixer.dispatchEvent({
                                type: "loop",
                                action: this,
                                loopDelta: n
                            })
                        }
                    } else
                        this.time = time;
                    if (o && 1 == (1 & r))
                        return e - time
                }
                return time
            }
            _setEndings(t, e, n) {
                const r = this._interpolantSettings;
                n ? (r.endingStart = X,
                r.endingEnd = X) : (r.endingStart = t ? this.zeroSlopeAtStart ? X : j : Y,
                r.endingEnd = e ? this.zeroSlopeAtEnd ? X : j : Y)
            }
            _scheduleFading(t, e, n) {
                const r = this._mixer
                  , o = r.time;
                let l = this._weightInterpolant;
                null === l && (l = r._lendControlInterpolant(),
                this._weightInterpolant = l);
                const c = l.parameterPositions
                  , h = l.sampleValues;
                return c[0] = o,
                h[0] = e,
                c[1] = o + t,
                h[1] = n,
                this
            }
        }
        (class extends at {
            constructor(t) {
                super(),
                this._root = t,
                this._initMemoryManager(),
                this._accuIndex = 0,
                this.time = 0,
                this.timeScale = 1
            }
            _bindAction(t, e) {
                const n = t._localRoot || this._root
                  , r = t._clip.tracks
                  , o = r.length
                  , l = t._propertyBindings
                  , c = t._interpolants
                  , h = n.uuid
                  , d = this._bindingsByRootAndName;
                let f = d[h];
                void 0 === f && (f = {},
                d[h] = f);
                for (let i = 0; i !== o; ++i) {
                    const track = r[i]
                      , t = track.name;
                    let o = f[t];
                    if (void 0 !== o)
                        l[i] = o;
                    else {
                        if (o = l[i],
                        void 0 !== o) {
                            null === o._cacheIndex && (++o.referenceCount,
                            this._addInactiveBinding(o, h, t));
                            continue
                        }
                        const path = e && e._propertyBindings[i].binding.parsedPath;
                        o = new $l(hc.create(n, t, path),track.ValueTypeName,track.getValueSize()),
                        ++o.referenceCount,
                        this._addInactiveBinding(o, h, t),
                        l[i] = o
                    }
                    c[i].resultBuffer = o.buffer
                }
            }
            _activateAction(t) {
                if (!this._isActiveAction(t)) {
                    if (null === t._cacheIndex) {
                        const e = (t._localRoot || this._root).uuid
                          , n = t._clip.uuid
                          , r = this._actionsByClip[n];
                        this._bindAction(t, r && r.knownActions[0]),
                        this._addInactiveAction(t, n, e)
                    }
                    const e = t._propertyBindings;
                    for (let i = 0, t = e.length; i !== t; ++i) {
                        const t = e[i];
                        0 == t.useCount++ && (this._lendBinding(t),
                        t.saveOriginalState())
                    }
                    this._lendAction(t)
                }
            }
            _deactivateAction(t) {
                if (this._isActiveAction(t)) {
                    const e = t._propertyBindings;
                    for (let i = 0, t = e.length; i !== t; ++i) {
                        const t = e[i];
                        0 == --t.useCount && (t.restoreOriginalState(),
                        this._takeBackBinding(t))
                    }
                    this._takeBackAction(t)
                }
            }
            _initMemoryManager() {
                this._actions = [],
                this._nActiveActions = 0,
                this._actionsByClip = {},
                this._bindings = [],
                this._nActiveBindings = 0,
                this._bindingsByRootAndName = {},
                this._controlInterpolants = [],
                this._nActiveControlInterpolants = 0;
                const t = this;
                this.stats = {
                    actions: {
                        get total() {
                            return t._actions.length
                        },
                        get inUse() {
                            return t._nActiveActions
                        }
                    },
                    bindings: {
                        get total() {
                            return t._bindings.length
                        },
                        get inUse() {
                            return t._nActiveBindings
                        }
                    },
                    controlInterpolants: {
                        get total() {
                            return t._controlInterpolants.length
                        },
                        get inUse() {
                            return t._nActiveControlInterpolants
                        }
                    }
                }
            }
            _isActiveAction(t) {
                const e = t._cacheIndex;
                return null !== e && e < this._nActiveActions
            }
            _addInactiveAction(t, e, n) {
                const r = this._actions
                  , o = this._actionsByClip;
                let l = o[e];
                if (void 0 === l)
                    l = {
                        knownActions: [t],
                        actionByRoot: {}
                    },
                    t._byClipCacheIndex = 0,
                    o[e] = l;
                else {
                    const e = l.knownActions;
                    t._byClipCacheIndex = e.length,
                    e.push(t)
                }
                t._cacheIndex = r.length,
                r.push(t),
                l.actionByRoot[n] = t
            }
            _removeInactiveAction(t) {
                const e = this._actions
                  , n = e[e.length - 1]
                  , r = t._cacheIndex;
                n._cacheIndex = r,
                e[r] = n,
                e.pop(),
                t._cacheIndex = null;
                const o = t._clip.uuid
                  , l = this._actionsByClip
                  , c = l[o]
                  , h = c.knownActions
                  , d = h[h.length - 1]
                  , f = t._byClipCacheIndex;
                d._byClipCacheIndex = f,
                h[f] = d,
                h.pop(),
                t._byClipCacheIndex = null;
                delete c.actionByRoot[(t._localRoot || this._root).uuid],
                0 === h.length && delete l[o],
                this._removeInactiveBindingsForAction(t)
            }
            _removeInactiveBindingsForAction(t) {
                const e = t._propertyBindings;
                for (let i = 0, t = e.length; i !== t; ++i) {
                    const t = e[i];
                    0 == --t.referenceCount && this._removeInactiveBinding(t)
                }
            }
            _lendAction(t) {
                const e = this._actions
                  , n = t._cacheIndex
                  , r = this._nActiveActions++
                  , o = e[r];
                t._cacheIndex = r,
                e[r] = t,
                o._cacheIndex = n,
                e[n] = o
            }
            _takeBackAction(t) {
                const e = this._actions
                  , n = t._cacheIndex
                  , r = --this._nActiveActions
                  , o = e[r];
                t._cacheIndex = r,
                e[r] = t,
                o._cacheIndex = n,
                e[n] = o
            }
            _addInactiveBinding(t, e, n) {
                const r = this._bindingsByRootAndName
                  , o = this._bindings;
                let l = r[e];
                void 0 === l && (l = {},
                r[e] = l),
                l[n] = t,
                t._cacheIndex = o.length,
                o.push(t)
            }
            _removeInactiveBinding(t) {
                const e = this._bindings
                  , n = t.binding
                  , r = n.rootNode.uuid
                  , o = n.path
                  , l = this._bindingsByRootAndName
                  , c = l[r]
                  , h = e[e.length - 1]
                  , d = t._cacheIndex;
                h._cacheIndex = d,
                e[d] = h,
                e.pop(),
                delete c[o],
                0 === Object.keys(c).length && delete l[r]
            }
            _lendBinding(t) {
                const e = this._bindings
                  , n = t._cacheIndex
                  , r = this._nActiveBindings++
                  , o = e[r];
                t._cacheIndex = r,
                e[r] = t,
                o._cacheIndex = n,
                e[n] = o
            }
            _takeBackBinding(t) {
                const e = this._bindings
                  , n = t._cacheIndex
                  , r = --this._nActiveBindings
                  , o = e[r];
                t._cacheIndex = r,
                e[r] = t,
                o._cacheIndex = n,
                e[n] = o
            }
            _lendControlInterpolant() {
                const t = this._controlInterpolants
                  , e = this._nActiveControlInterpolants++;
                let n = t[e];
                return void 0 === n && (n = new rl(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),
                n.__cacheIndex = e,
                t[e] = n),
                n
            }
            _takeBackControlInterpolant(t) {
                const e = this._controlInterpolants
                  , n = t.__cacheIndex
                  , r = --this._nActiveControlInterpolants
                  , o = e[r];
                t.__cacheIndex = r,
                e[r] = t,
                o.__cacheIndex = n,
                e[n] = o
            }
            clipAction(t, e, n) {
                const r = e || this._root
                  , o = r.uuid;
                let l = "string" == typeof t ? vl.findByName(r, t) : t;
                const c = null !== l ? l.uuid : t
                  , h = this._actionsByClip[c];
                let d = null;
                if (void 0 === n && (n = null !== l ? l.blendMode : Z),
                void 0 !== h) {
                    const t = h.actionByRoot[o];
                    if (void 0 !== t && t.blendMode === n)
                        return t;
                    d = h.knownActions[0],
                    null === l && (l = d._clip)
                }
                if (null === l)
                    return null;
                const f = new uc(this,l,e,n);
                return this._bindAction(f, d),
                this._addInactiveAction(f, c, o),
                f
            }
            existingAction(t, e) {
                const n = e || this._root
                  , r = n.uuid
                  , o = "string" == typeof t ? vl.findByName(n, t) : t
                  , l = o ? o.uuid : t
                  , c = this._actionsByClip[l];
                return void 0 !== c && c.actionByRoot[r] || null
            }
            stopAllAction() {
                const t = this._actions;
                for (let i = this._nActiveActions - 1; i >= 0; --i)
                    t[i].stop();
                return this
            }
            update(t) {
                t *= this.timeScale;
                const e = this._actions
                  , n = this._nActiveActions
                  , time = this.time += t
                  , r = Math.sign(t)
                  , o = this._accuIndex ^= 1;
                for (let i = 0; i !== n; ++i) {
                    e[i]._update(time, t, r, o)
                }
                const l = this._bindings
                  , c = this._nActiveBindings;
                for (let i = 0; i !== c; ++i)
                    l[i].apply(o);
                return this
            }
            setTime(t) {
                this.time = 0;
                for (let i = 0; i < this._actions.length; i++)
                    this._actions[i].time = 0;
                return this.update(t)
            }
            getRoot() {
                return this._root
            }
            uncacheClip(t) {
                const e = this._actions
                  , n = t.uuid
                  , r = this._actionsByClip
                  , o = r[n];
                if (void 0 !== o) {
                    const t = o.knownActions;
                    for (let i = 0, n = t.length; i !== n; ++i) {
                        const n = t[i];
                        this._deactivateAction(n);
                        const r = n._cacheIndex
                          , o = e[e.length - 1];
                        n._cacheIndex = null,
                        n._byClipCacheIndex = null,
                        o._cacheIndex = r,
                        e[r] = o,
                        e.pop(),
                        this._removeInactiveBindingsForAction(n)
                    }
                    delete r[n]
                }
            }
            uncacheRoot(t) {
                const e = t.uuid
                  , n = this._actionsByClip;
                for (const t in n) {
                    const r = n[t].actionByRoot[e];
                    void 0 !== r && (this._deactivateAction(r),
                    this._removeInactiveAction(r))
                }
                const r = this._bindingsByRootAndName[e];
                if (void 0 !== r)
                    for (const t in r) {
                        const e = r[t];
                        e.restoreOriginalState(),
                        this._removeInactiveBinding(e)
                    }
            }
            uncacheAction(t, e) {
                const n = this.existingAction(t, e);
                null !== n && (this._deactivateAction(n),
                this._removeInactiveAction(n))
            }
        }
        ).prototype._controlInterpolantsResultBuffer = new Float32Array(1);
        class dc {
            constructor(t) {
                "string" == typeof t && (console.warn("THREE.Uniform: Type parameter is no longer needed."),
                t = arguments[1]),
                this.value = t
            }
            clone() {
                return new dc(void 0 === this.value.clone ? this.value : this.value.clone())
            }
        }
        (class extends Ya {
            constructor(t, e, n=1) {
                super(t, e),
                this.meshPerAttribute = n
            }
            copy(source) {
                return super.copy(source),
                this.meshPerAttribute = source.meshPerAttribute,
                this
            }
            clone(data) {
                const t = super.clone(data);
                return t.meshPerAttribute = this.meshPerAttribute,
                t
            }
            toJSON(data) {
                const t = super.toJSON(data);
                return t.isInstancedInterleavedBuffer = !0,
                t.meshPerAttribute = this.meshPerAttribute,
                t
            }
        }
        ).prototype.isInstancedInterleavedBuffer = !0;
        class pc {
            constructor(t=1, e=0, n=0) {
                return this.radius = t,
                this.phi = e,
                this.theta = n,
                this
            }
            set(t, e, n) {
                return this.radius = t,
                this.phi = e,
                this.theta = n,
                this
            }
            copy(t) {
                return this.radius = t.radius,
                this.phi = t.phi,
                this.theta = t.theta,
                this
            }
            makeSafe() {
                const t = 1e-6;
                return this.phi = Math.max(t, Math.min(Math.PI - t, this.phi)),
                this
            }
            setFromVector3(t) {
                return this.setFromCartesianCoords(t.x, t.y, t.z)
            }
            setFromCartesianCoords(t, e, n) {
                return this.radius = Math.sqrt(t * t + e * e + n * n),
                0 === this.radius ? (this.theta = 0,
                this.phi = 0) : (this.theta = Math.atan2(t, n),
                this.phi = Math.acos(ut(e / this.radius, -1, 1))),
                this
            }
            clone() {
                return (new this.constructor).copy(this)
            }
        }
        const fc = new vt;
        class mc {
            constructor(t=new vt(1 / 0,1 / 0), e=new vt(-1 / 0,-1 / 0)) {
                this.min = t,
                this.max = e
            }
            set(t, e) {
                return this.min.copy(t),
                this.max.copy(e),
                this
            }
            setFromPoints(t) {
                this.makeEmpty();
                for (let i = 0, e = t.length; i < e; i++)
                    this.expandByPoint(t[i]);
                return this
            }
            setFromCenterAndSize(t, e) {
                const n = fc.copy(e).multiplyScalar(.5);
                return this.min.copy(t).sub(n),
                this.max.copy(t).add(n),
                this
            }
            clone() {
                return (new this.constructor).copy(this)
            }
            copy(t) {
                return this.min.copy(t.min),
                this.max.copy(t.max),
                this
            }
            makeEmpty() {
                return this.min.x = this.min.y = 1 / 0,
                this.max.x = this.max.y = -1 / 0,
                this
            }
            isEmpty() {
                return this.max.x < this.min.x || this.max.y < this.min.y
            }
            getCenter(t) {
                return this.isEmpty() ? t.set(0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5)
            }
            getSize(t) {
                return this.isEmpty() ? t.set(0, 0) : t.subVectors(this.max, this.min)
            }
            expandByPoint(t) {
                return this.min.min(t),
                this.max.max(t),
                this
            }
            expandByVector(t) {
                return this.min.sub(t),
                this.max.add(t),
                this
            }
            expandByScalar(t) {
                return this.min.addScalar(-t),
                this.max.addScalar(t),
                this
            }
            containsPoint(t) {
                return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y)
            }
            containsBox(t) {
                return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y
            }
            getParameter(t, e) {
                return e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y))
            }
            intersectsBox(t) {
                return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y)
            }
            clampPoint(t, e) {
                return e.copy(t).clamp(this.min, this.max)
            }
            distanceToPoint(t) {
                return fc.copy(t).clamp(this.min, this.max).sub(t).length()
            }
            intersect(t) {
                return this.min.max(t.min),
                this.max.min(t.max),
                this
            }
            union(t) {
                return this.min.min(t.min),
                this.max.max(t.max),
                this
            }
            translate(t) {
                return this.min.add(t),
                this.max.add(t),
                this
            }
            equals(t) {
                return t.min.equals(this.min) && t.max.equals(this.max)
            }
        }
        mc.prototype.isBox2 = !0;
        const gc = new Pt
          , vc = new le
          , _c = new le;
        function xc(object) {
            const t = [];
            object && object.isBone && t.push(object);
            for (let i = 0; i < object.children.length; i++)
                t.push.apply(t, xc(object.children[i]));
            return t
        }
        const yc = new Float32Array(1);
        new Int32Array(yc.buffer);
        Xs.create = function(t, e) {
            return console.log("THREE.Curve.create() has been deprecated"),
            t.prototype = Object.create(Xs.prototype),
            t.prototype.constructor = t,
            t.prototype.getPoint = e,
            t
        }
        ,
        po.prototype.fromPoints = function(t) {
            return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),
            this.setFromPoints(t)
        }
        ,
        class extends Fs {
            constructor(t=10, e=10, n=4473924, r=8947848) {
                n = new $e(n),
                r = new $e(r);
                const o = e / 2
                  , l = t / e
                  , c = t / 2
                  , h = []
                  , d = [];
                for (let i = 0, t = 0, f = -c; i <= e; i++,
                f += l) {
                    h.push(-c, 0, f, c, 0, f),
                    h.push(f, 0, -c, f, 0, c);
                    const e = i === o ? n : r;
                    e.toArray(d, t),
                    t += 3,
                    e.toArray(d, t),
                    t += 3,
                    e.toArray(d, t),
                    t += 3,
                    e.toArray(d, t),
                    t += 3
                }
                const f = new mn;
                f.setAttribute("position", new on(h,3)),
                f.setAttribute("color", new on(d,3));
                super(f, new As({
                    vertexColors: !0,
                    toneMapped: !1
                })),
                this.type = "GridHelper"
            }
        }
        .prototype.setColors = function() {
            console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")
        }
        ,
        class extends Fs {
            constructor(object) {
                const t = xc(object)
                  , e = new mn
                  , n = []
                  , r = []
                  , o = new $e(0,0,1)
                  , l = new $e(0,1,0);
                for (let i = 0; i < t.length; i++) {
                    const e = t[i];
                    e.parent && e.parent.isBone && (n.push(0, 0, 0),
                    n.push(0, 0, 0),
                    r.push(o.r, o.g, o.b),
                    r.push(l.r, l.g, l.b))
                }
                e.setAttribute("position", new on(n,3)),
                e.setAttribute("color", new on(r,3));
                super(e, new As({
                    vertexColors: !0,
                    depthTest: !1,
                    depthWrite: !1,
                    toneMapped: !1,
                    transparent: !0
                })),
                this.type = "SkeletonHelper",
                this.isSkeletonHelper = !0,
                this.root = object,
                this.bones = t,
                this.matrix = object.matrixWorld,
                this.matrixAutoUpdate = !1
            }
            updateMatrixWorld(t) {
                const e = this.bones
                  , n = this.geometry
                  , r = n.getAttribute("position");
                _c.copy(this.root.matrixWorld).invert();
                for (let i = 0, t = 0; i < e.length; i++) {
                    const n = e[i];
                    n.parent && n.parent.isBone && (vc.multiplyMatrices(_c, n.matrixWorld),
                    gc.setFromMatrixPosition(vc),
                    r.setXYZ(t, gc.x, gc.y, gc.z),
                    vc.multiplyMatrices(_c, n.parent.matrixWorld),
                    gc.setFromMatrixPosition(vc),
                    r.setXYZ(t + 1, gc.x, gc.y, gc.z),
                    t += 2)
                }
                n.getAttribute("position").needsUpdate = !0,
                super.updateMatrixWorld(t)
            }
        }
        .prototype.update = function() {
            console.error("THREE.SkeletonHelper: update() no longer needs to be called.")
        }
        ,
        bl.prototype.extractUrlBase = function(t) {
            return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),
            ql.extractUrlBase(t)
        }
        ,
        bl.Handlers = {
            add: function() {
                console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")
            },
            get: function() {
                console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")
            }
        },
        mc.prototype.center = function(t) {
            return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),
            this.getCenter(t)
        }
        ,
        mc.prototype.empty = function() {
            return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),
            this.isEmpty()
        }
        ,
        mc.prototype.isIntersectionBox = function(t) {
            return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),
            this.intersectsBox(t)
        }
        ,
        mc.prototype.size = function(t) {
            return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),
            this.getSize(t)
        }
        ,
        It.prototype.center = function(t) {
            return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),
            this.getCenter(t)
        }
        ,
        It.prototype.empty = function() {
            return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),
            this.isEmpty()
        }
        ,
        It.prototype.isIntersectionBox = function(t) {
            return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),
            this.intersectsBox(t)
        }
        ,
        It.prototype.isIntersectionSphere = function(t) {
            return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),
            this.intersectsSphere(t)
        }
        ,
        It.prototype.size = function(t) {
            return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),
            this.getSize(t)
        }
        ,
        $t.prototype.empty = function() {
            return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),
            this.isEmpty()
        }
        ,
        Qn.prototype.setFromMatrix = function(t) {
            return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),
            this.setFromProjectionMatrix(t)
        }
        ,
        _t.prototype.flattenToArrayOffset = function(t, e) {
            return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),
            this.toArray(t, e)
        }
        ,
        _t.prototype.multiplyVector3 = function(t) {
            return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),
            t.applyMatrix3(this)
        }
        ,
        _t.prototype.multiplyVector3Array = function() {
            console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")
        }
        ,
        _t.prototype.applyToBufferAttribute = function(t) {
            return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),
            t.applyMatrix3(this)
        }
        ,
        _t.prototype.applyToVector3Array = function() {
            console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")
        }
        ,
        _t.prototype.getInverse = function(t) {
            return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),
            this.copy(t).invert()
        }
        ,
        le.prototype.extractPosition = function(t) {
            return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),
            this.copyPosition(t)
        }
        ,
        le.prototype.flattenToArrayOffset = function(t, e) {
            return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),
            this.toArray(t, e)
        }
        ,
        le.prototype.getPosition = function() {
            return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),
            (new Pt).setFromMatrixColumn(this, 3)
        }
        ,
        le.prototype.setRotationFromQuaternion = function(q) {
            return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),
            this.makeRotationFromQuaternion(q)
        }
        ,
        le.prototype.multiplyToArray = function() {
            console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")
        }
        ,
        le.prototype.multiplyVector3 = function(t) {
            return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),
            t.applyMatrix4(this)
        }
        ,
        le.prototype.multiplyVector4 = function(t) {
            return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),
            t.applyMatrix4(this)
        }
        ,
        le.prototype.multiplyVector3Array = function() {
            console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")
        }
        ,
        le.prototype.rotateAxis = function(t) {
            console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),
            t.transformDirection(this)
        }
        ,
        le.prototype.crossVector = function(t) {
            return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),
            t.applyMatrix4(this)
        }
        ,
        le.prototype.translate = function() {
            console.error("THREE.Matrix4: .translate() has been removed.")
        }
        ,
        le.prototype.rotateX = function() {
            console.error("THREE.Matrix4: .rotateX() has been removed.")
        }
        ,
        le.prototype.rotateY = function() {
            console.error("THREE.Matrix4: .rotateY() has been removed.")
        }
        ,
        le.prototype.rotateZ = function() {
            console.error("THREE.Matrix4: .rotateZ() has been removed.")
        }
        ,
        le.prototype.rotateByAxis = function() {
            console.error("THREE.Matrix4: .rotateByAxis() has been removed.")
        }
        ,
        le.prototype.applyToBufferAttribute = function(t) {
            return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),
            t.applyMatrix4(this)
        }
        ,
        le.prototype.applyToVector3Array = function() {
            console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")
        }
        ,
        le.prototype.makeFrustum = function(t, e, n, r, o, l) {
            return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),
            this.makePerspective(t, e, r, n, o, l)
        }
        ,
        le.prototype.getInverse = function(t) {
            return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),
            this.copy(t).invert()
        }
        ,
        Zn.prototype.isIntersectionLine = function(line) {
            return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),
            this.intersectsLine(line)
        }
        ,
        Ct.prototype.multiplyVector3 = function(t) {
            return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),
            t.applyQuaternion(this)
        }
        ,
        Ct.prototype.inverse = function() {
            return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),
            this.invert()
        }
        ,
        oe.prototype.isIntersectionBox = function(t) {
            return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),
            this.intersectsBox(t)
        }
        ,
        oe.prototype.isIntersectionPlane = function(t) {
            return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),
            this.intersectsPlane(t)
        }
        ,
        oe.prototype.isIntersectionSphere = function(t) {
            return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),
            this.intersectsSphere(t)
        }
        ,
        We.prototype.area = function() {
            return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),
            this.getArea()
        }
        ,
        We.prototype.barycoordFromPoint = function(t, e) {
            return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),
            this.getBarycoord(t, e)
        }
        ,
        We.prototype.midpoint = function(t) {
            return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),
            this.getMidpoint(t)
        }
        ,
        We.prototypenormal = function(t) {
            return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),
            this.getNormal(t)
        }
        ,
        We.prototype.plane = function(t) {
            return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),
            this.getPlane(t)
        }
        ,
        We.barycoordFromPoint = function(t, a, b, e, n) {
            return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),
            We.getBarycoord(t, a, b, e, n)
        }
        ,
        We.normal = function(a, b, t, e) {
            return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),
            We.getNormal(a, b, t, e)
        }
        ,
        fo.prototype.extractAllPoints = function(t) {
            return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),
            this.extractPoints(t)
        }
        ,
        fo.prototype.extrude = function(t) {
            return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),
            new Vo(this,t)
        }
        ,
        fo.prototype.makeGeometry = function(t) {
            return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),
            new jo(this,t)
        }
        ,
        vt.prototype.fromAttribute = function(t, e, n) {
            return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),
            this.fromBufferAttribute(t, e, n)
        }
        ,
        vt.prototype.distanceToManhattan = function(t) {
            return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),
            this.manhattanDistanceTo(t)
        }
        ,
        vt.prototype.lengthManhattan = function() {
            return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),
            this.manhattanLength()
        }
        ,
        Pt.prototype.setEulerFromRotationMatrix = function() {
            console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")
        }
        ,
        Pt.prototype.setEulerFromQuaternion = function() {
            console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")
        }
        ,
        Pt.prototype.getPositionFromMatrix = function(t) {
            return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),
            this.setFromMatrixPosition(t)
        }
        ,
        Pt.prototype.getScaleFromMatrix = function(t) {
            return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),
            this.setFromMatrixScale(t)
        }
        ,
        Pt.prototype.getColumnFromMatrix = function(t, e) {
            return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),
            this.setFromMatrixColumn(e, t)
        }
        ,
        Pt.prototype.applyProjection = function(t) {
            return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),
            this.applyMatrix4(t)
        }
        ,
        Pt.prototype.fromAttribute = function(t, e, n) {
            return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),
            this.fromBufferAttribute(t, e, n)
        }
        ,
        Pt.prototype.distanceToManhattan = function(t) {
            return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),
            this.manhattanDistanceTo(t)
        }
        ,
        Pt.prototype.lengthManhattan = function() {
            return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),
            this.manhattanLength()
        }
        ,
        At.prototype.fromAttribute = function(t, e, n) {
            return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),
            this.fromBufferAttribute(t, e, n)
        }
        ,
        At.prototype.lengthManhattan = function() {
            return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),
            this.manhattanLength()
        }
        ,
        Ne.prototype.getChildByName = function(t) {
            return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),
            this.getObjectByName(t)
        }
        ,
        Ne.prototype.renderDepth = function() {
            console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")
        }
        ,
        Ne.prototype.translate = function(t, e) {
            return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),
            this.translateOnAxis(e, t)
        }
        ,
        Ne.prototype.getWorldRotation = function() {
            console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")
        }
        ,
        Ne.prototype.applyMatrix = function(t) {
            return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),
            this.applyMatrix4(t)
        }
        ,
        Object.defineProperties(Ne.prototype, {
            eulerOrder: {
                get: function() {
                    return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),
                    this.rotation.order
                },
                set: function(t) {
                    console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),
                    this.rotation.order = t
                }
            },
            useQuaternion: {
                get: function() {
                    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")
                },
                set: function() {
                    console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")
                }
            }
        }),
        Nn.prototype.setDrawMode = function() {
            console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")
        }
        ,
        Object.defineProperties(Nn.prototype, {
            drawMode: {
                get: function() {
                    return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),
                    0
                },
                set: function() {
                    console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")
                }
            }
        }),
        _s.prototype.initBones = function() {
            console.error("THREE.SkinnedMesh: initBones() has been removed.")
        }
        ,
        Hn.prototype.setLens = function(t, e) {
            console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),
            void 0 !== e && (this.filmGauge = e),
            this.setFocalLength(t)
        }
        ,
        Object.defineProperties(Ll.prototype, {
            onlyShadow: {
                set: function() {
                    console.warn("THREE.Light: .onlyShadow has been removed.")
                }
            },
            shadowCameraFov: {
                set: function(t) {
                    console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),
                    this.shadow.camera.fov = t
                }
            },
            shadowCameraLeft: {
                set: function(t) {
                    console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),
                    this.shadow.camera.left = t
                }
            },
            shadowCameraRight: {
                set: function(t) {
                    console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),
                    this.shadow.camera.right = t
                }
            },
            shadowCameraTop: {
                set: function(t) {
                    console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),
                    this.shadow.camera.top = t
                }
            },
            shadowCameraBottom: {
                set: function(t) {
                    console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),
                    this.shadow.camera.bottom = t
                }
            },
            shadowCameraNear: {
                set: function(t) {
                    console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),
                    this.shadow.camera.near = t
                }
            },
            shadowCameraFar: {
                set: function(t) {
                    console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),
                    this.shadow.camera.far = t
                }
            },
            shadowCameraVisible: {
                set: function() {
                    console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")
                }
            },
            shadowBias: {
                set: function(t) {
                    console.warn("THREE.Light: .shadowBias is now .shadow.bias."),
                    this.shadow.bias = t
                }
            },
            shadowDarkness: {
                set: function() {
                    console.warn("THREE.Light: .shadowDarkness has been removed.")
                }
            },
            shadowMapWidth: {
                set: function(t) {
                    console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),
                    this.shadow.mapSize.width = t
                }
            },
            shadowMapHeight: {
                set: function(t) {
                    console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),
                    this.shadow.mapSize.height = t
                }
            }
        }),
        Object.defineProperties(rn.prototype, {
            length: {
                get: function() {
                    return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),
                    this.array.length
                }
            },
            dynamic: {
                get: function() {
                    return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),
                    this.usage === nt
                },
                set: function() {
                    console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),
                    this.setUsage(nt)
                }
            }
        }),
        rn.prototype.setDynamic = function(t) {
            return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),
            this.setUsage(!0 === t ? nt : et),
            this
        }
        ,
        rn.prototype.copyIndicesArray = function() {
            console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")
        }
        ,
        rn.prototype.setArray = function() {
            console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")
        }
        ,
        mn.prototype.addIndex = function(t) {
            console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),
            this.setIndex(t)
        }
        ,
        mn.prototype.addAttribute = function(t, e) {
            return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),
            e && e.isBufferAttribute || e && e.isInterleavedBufferAttribute ? "index" === t ? (console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),
            this.setIndex(e),
            this) : this.setAttribute(t, e) : (console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),
            this.setAttribute(t, new rn(arguments[1],arguments[2])))
        }
        ,
        mn.prototype.addDrawCall = function(t, e, n) {
            void 0 !== n && console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),
            console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),
            this.addGroup(t, e)
        }
        ,
        mn.prototype.clearDrawCalls = function() {
            console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),
            this.clearGroups()
        }
        ,
        mn.prototype.computeOffsets = function() {
            console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")
        }
        ,
        mn.prototype.removeAttribute = function(t) {
            return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),
            this.deleteAttribute(t)
        }
        ,
        mn.prototype.applyMatrix = function(t) {
            return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),
            this.applyMatrix4(t)
        }
        ,
        Object.defineProperties(mn.prototype, {
            drawcalls: {
                get: function() {
                    return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),
                    this.groups
                }
            },
            offsets: {
                get: function() {
                    return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),
                    this.groups
                }
            }
        }),
        Ya.prototype.setDynamic = function(t) {
            return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),
            this.setUsage(!0 === t ? nt : et),
            this
        }
        ,
        Ya.prototype.setArray = function() {
            console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")
        }
        ,
        Vo.prototype.getArrays = function() {
            console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")
        }
        ,
        Vo.prototype.addShapeList = function() {
            console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")
        }
        ,
        Vo.prototype.addShape = function() {
            console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")
        }
        ,
        qa.prototype.dispose = function() {
            console.error("THREE.Scene: .dispose() has been removed.")
        }
        ,
        dc.prototype.onUpdate = function() {
            return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),
            this
        }
        ,
        Object.defineProperties(Xe.prototype, {
            wrapAround: {
                get: function() {
                    console.warn("THREE.Material: .wrapAround has been removed.")
                },
                set: function() {
                    console.warn("THREE.Material: .wrapAround has been removed.")
                }
            },
            overdraw: {
                get: function() {
                    console.warn("THREE.Material: .overdraw has been removed.")
                },
                set: function() {
                    console.warn("THREE.Material: .overdraw has been removed.")
                }
            },
            wrapRGB: {
                get: function() {
                    return console.warn("THREE.Material: .wrapRGB has been removed."),
                    new $e
                }
            },
            shading: {
                get: function() {
                    console.error("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead.")
                },
                set: function(t) {
                    console.warn("THREE." + this.type + ": .shading has been removed. Use the boolean .flatShading instead."),
                    this.flatShading = 1 === t
                }
            },
            stencilMask: {
                get: function() {
                    return console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead."),
                    this.stencilFuncMask
                },
                set: function(t) {
                    console.warn("THREE." + this.type + ": .stencilMask has been removed. Use .stencilFuncMask instead."),
                    this.stencilFuncMask = t
                }
            },
            vertexTangents: {
                get: function() {
                    console.warn("THREE." + this.type + ": .vertexTangents has been removed.")
                },
                set: function() {
                    console.warn("THREE." + this.type + ": .vertexTangents has been removed.")
                }
            }
        }),
        Object.defineProperties(Bn.prototype, {
            derivatives: {
                get: function() {
                    return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),
                    this.extensions.derivatives
                },
                set: function(t) {
                    console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),
                    this.extensions.derivatives = t
                }
            }
        }),
        Wa.prototype.clearTarget = function(t, e, n, r) {
            console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),
            this.setRenderTarget(t),
            this.clear(e, n, r)
        }
        ,
        Wa.prototype.animate = function(t) {
            console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),
            this.setAnimationLoop(t)
        }
        ,
        Wa.prototype.getCurrentRenderTarget = function() {
            return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),
            this.getRenderTarget()
        }
        ,
        Wa.prototype.getMaxAnisotropy = function() {
            return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),
            this.capabilities.getMaxAnisotropy()
        }
        ,
        Wa.prototype.getPrecision = function() {
            return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),
            this.capabilities.precision
        }
        ,
        Wa.prototype.resetGLState = function() {
            return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),
            this.state.reset()
        }
        ,
        Wa.prototype.supportsFloatTextures = function() {
            return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),
            this.extensions.get("OES_texture_float")
        }
        ,
        Wa.prototype.supportsHalfFloatTextures = function() {
            return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),
            this.extensions.get("OES_texture_half_float")
        }
        ,
        Wa.prototype.supportsStandardDerivatives = function() {
            return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),
            this.extensions.get("OES_standard_derivatives")
        }
        ,
        Wa.prototype.supportsCompressedTextureS3TC = function() {
            return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),
            this.extensions.get("WEBGL_compressed_texture_s3tc")
        }
        ,
        Wa.prototype.supportsCompressedTexturePVRTC = function() {
            return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),
            this.extensions.get("WEBGL_compressed_texture_pvrtc")
        }
        ,
        Wa.prototype.supportsBlendMinMax = function() {
            return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),
            this.extensions.get("EXT_blend_minmax")
        }
        ,
        Wa.prototype.supportsVertexTextures = function() {
            return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),
            this.capabilities.vertexTextures
        }
        ,
        Wa.prototype.supportsInstancedArrays = function() {
            return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),
            this.extensions.get("ANGLE_instanced_arrays")
        }
        ,
        Wa.prototype.enableScissorTest = function(t) {
            console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),
            this.setScissorTest(t)
        }
        ,
        Wa.prototype.initMaterial = function() {
            console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")
        }
        ,
        Wa.prototype.addPrePlugin = function() {
            console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")
        }
        ,
        Wa.prototype.addPostPlugin = function() {
            console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")
        }
        ,
        Wa.prototype.updateShadowMap = function() {
            console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")
        }
        ,
        Wa.prototype.setFaceCulling = function() {
            console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")
        }
        ,
        Wa.prototype.allocTextureUnit = function() {
            console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")
        }
        ,
        Wa.prototype.setTexture = function() {
            console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")
        }
        ,
        Wa.prototype.setTexture2D = function() {
            console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")
        }
        ,
        Wa.prototype.setTextureCube = function() {
            console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")
        }
        ,
        Wa.prototype.getActiveMipMapLevel = function() {
            return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),
            this.getActiveMipmapLevel()
        }
        ,
        Object.defineProperties(Wa.prototype, {
            shadowMapEnabled: {
                get: function() {
                    return this.shadowMap.enabled
                },
                set: function(t) {
                    console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),
                    this.shadowMap.enabled = t
                }
            },
            shadowMapType: {
                get: function() {
                    return this.shadowMap.type
                },
                set: function(t) {
                    console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),
                    this.shadowMap.type = t
                }
            },
            shadowMapCullFace: {
                get: function() {
                    console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")
                },
                set: function() {
                    console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")
                }
            },
            context: {
                get: function() {
                    return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),
                    this.getContext()
                }
            },
            vr: {
                get: function() {
                    return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),
                    this.xr
                }
            },
            gammaInput: {
                get: function() {
                    return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),
                    !1
                },
                set: function() {
                    console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")
                }
            },
            gammaOutput: {
                get: function() {
                    return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),
                    !1
                },
                set: function(t) {
                    console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),
                    this.outputEncoding = !0 === t ? K : J
                }
            },
            toneMappingWhitePoint: {
                get: function() {
                    return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),
                    1
                },
                set: function() {
                    console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")
                }
            }
        }),
        Object.defineProperties(Ia.prototype, {
            cullFace: {
                get: function() {
                    console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")
                },
                set: function() {
                    console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")
                }
            },
            renderReverseSided: {
                get: function() {
                    console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")
                },
                set: function() {
                    console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")
                }
            },
            renderSingleSided: {
                get: function() {
                    console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")
                },
                set: function() {
                    console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")
                }
            }
        }),
        Object.defineProperties(Lt.prototype, {
            wrapS: {
                get: function() {
                    return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),
                    this.texture.wrapS
                },
                set: function(t) {
                    console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),
                    this.texture.wrapS = t
                }
            },
            wrapT: {
                get: function() {
                    return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),
                    this.texture.wrapT
                },
                set: function(t) {
                    console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),
                    this.texture.wrapT = t
                }
            },
            magFilter: {
                get: function() {
                    return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),
                    this.texture.magFilter
                },
                set: function(t) {
                    console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),
                    this.texture.magFilter = t
                }
            },
            minFilter: {
                get: function() {
                    return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),
                    this.texture.minFilter
                },
                set: function(t) {
                    console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),
                    this.texture.minFilter = t
                }
            },
            anisotropy: {
                get: function() {
                    return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),
                    this.texture.anisotropy
                },
                set: function(t) {
                    console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),
                    this.texture.anisotropy = t
                }
            },
            offset: {
                get: function() {
                    return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),
                    this.texture.offset
                },
                set: function(t) {
                    console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),
                    this.texture.offset = t
                }
            },
            repeat: {
                get: function() {
                    return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),
                    this.texture.repeat
                },
                set: function(t) {
                    console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),
                    this.texture.repeat = t
                }
            },
            format: {
                get: function() {
                    return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),
                    this.texture.format
                },
                set: function(t) {
                    console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),
                    this.texture.format = t
                }
            },
            type: {
                get: function() {
                    return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),
                    this.texture.type
                },
                set: function(t) {
                    console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),
                    this.texture.type = t
                }
            },
            generateMipmaps: {
                get: function() {
                    return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),
                    this.texture.generateMipmaps
                },
                set: function(t) {
                    console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),
                    this.texture.generateMipmaps = t
                }
            }
        }),
        Ql.prototype.load = function(t) {
            console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");
            const e = this;
            return (new Kl).load(t, (function(t) {
                e.setBuffer(t)
            }
            )),
            this
        }
        ,
        Vn.prototype.updateCubeMap = function(t, e) {
            return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),
            this.update(t, e)
        }
        ,
        Vn.prototype.clear = function(t, e, n, r) {
            return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),
            this.renderTarget.clear(t, e, n, r)
        }
        ,
        wt.crossOrigin = void 0,
        wt.loadTexture = function(t, e, n, r) {
            console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");
            const o = new Al;
            o.setCrossOrigin(this.crossOrigin);
            const l = o.load(t, n, void 0, r);
            return e && (l.mapping = e),
            l
        }
        ,
        wt.loadTextureCube = function(t, e, n, r) {
            console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");
            const o = new El;
            o.setCrossOrigin(this.crossOrigin);
            const l = o.load(t, n, void 0, r);
            return e && (l.mapping = e),
            l
        }
        ,
        wt.loadCompressedTexture = function() {
            console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")
        }
        ,
        wt.loadCompressedTextureCube = function() {
            console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")
        }
        ;
        "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{
            detail: {
                revision: "134"
            }
        })),
        "undefined" != typeof window && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = "134");
        const Mc = {
            type: "change"
        }
          , bc = {
            type: "start"
        }
          , wc = {
            type: "end"
        };
        class Sc extends at {
            constructor(object, t) {
                super(),
                void 0 === t && console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.'),
                t === document && console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'),
                this.object = object,
                this.domElement = t,
                this.domElement.style.touchAction = "none",
                this.enabled = !0,
                this.target = new Pt,
                this.minDistance = 0,
                this.maxDistance = 1 / 0,
                this.minZoom = 0,
                this.maxZoom = 1 / 0,
                this.minPolarAngle = 0,
                this.maxPolarAngle = Math.PI,
                this.minAzimuthAngle = -1 / 0,
                this.maxAzimuthAngle = 1 / 0,
                this.enableDamping = !1,
                this.dampingFactor = .05,
                this.enableZoom = !0,
                this.zoomSpeed = 1,
                this.enableRotate = !0,
                this.rotateSpeed = 1,
                this.enablePan = !0,
                this.panSpeed = 1,
                this.screenSpacePanning = !0,
                this.keyPanSpeed = 7,
                this.autoRotate = !1,
                this.autoRotateSpeed = 2,
                this.keys = {
                    LEFT: "ArrowLeft",
                    UP: "ArrowUp",
                    RIGHT: "ArrowRight",
                    BOTTOM: "ArrowDown"
                },
                this.mouseButtons = {
                    LEFT: r,
                    MIDDLE: o,
                    RIGHT: l
                },
                this.touches = {
                    ONE: c,
                    TWO: d
                },
                this.target0 = this.target.clone(),
                this.position0 = this.object.position.clone(),
                this.zoom0 = this.object.zoom,
                this._domElementKeyEvents = null,
                this.getPolarAngle = function() {
                    return _.phi
                }
                ,
                this.getAzimuthalAngle = function() {
                    return _.theta
                }
                ,
                this.getDistance = function() {
                    return this.object.position.distanceTo(this.target)
                }
                ,
                this.listenToKeyEvents = function(t) {
                    t.addEventListener("keydown", it),
                    this._domElementKeyEvents = t
                }
                ,
                this.saveState = function() {
                    e.target0.copy(e.target),
                    e.position0.copy(e.object.position),
                    e.zoom0 = e.object.zoom
                }
                ,
                this.reset = function() {
                    e.target.copy(e.target0),
                    e.object.position.copy(e.position0),
                    e.object.zoom = e.zoom0,
                    e.object.updateProjectionMatrix(),
                    e.dispatchEvent(Mc),
                    e.update(),
                    m = n.NONE
                }
                ,
                this.update = function() {
                    const t = new Pt
                      , r = (new Ct).setFromUnitVectors(object.up, new Pt(0,1,0))
                      , o = r.clone().invert()
                      , l = new Pt
                      , c = new Ct
                      , h = 2 * Math.PI;
                    return function() {
                        const d = e.object.position;
                        t.copy(d).sub(e.target),
                        t.applyQuaternion(r),
                        _.setFromVector3(t),
                        e.autoRotate && m === n.NONE && F(2 * Math.PI / 60 / 60 * e.autoRotateSpeed),
                        e.enableDamping ? (_.theta += x.theta * e.dampingFactor,
                        _.phi += x.phi * e.dampingFactor) : (_.theta += x.theta,
                        _.phi += x.phi);
                        let f = e.minAzimuthAngle
                          , S = e.maxAzimuthAngle;
                        return isFinite(f) && isFinite(S) && (f < -Math.PI ? f += h : f > Math.PI && (f -= h),
                        S < -Math.PI ? S += h : S > Math.PI && (S -= h),
                        _.theta = f <= S ? Math.max(f, Math.min(S, _.theta)) : _.theta > (f + S) / 2 ? Math.max(f, _.theta) : Math.min(S, _.theta)),
                        _.phi = Math.max(e.minPolarAngle, Math.min(e.maxPolarAngle, _.phi)),
                        _.makeSafe(),
                        _.radius *= y,
                        _.radius = Math.max(e.minDistance, Math.min(e.maxDistance, _.radius)),
                        !0 === e.enableDamping ? e.target.addScaledVector(M, e.dampingFactor) : e.target.add(M),
                        t.setFromSpherical(_),
                        t.applyQuaternion(o),
                        d.copy(e.target).add(t),
                        e.object.lookAt(e.target),
                        !0 === e.enableDamping ? (x.theta *= 1 - e.dampingFactor,
                        x.phi *= 1 - e.dampingFactor,
                        M.multiplyScalar(1 - e.dampingFactor)) : (x.set(0, 0, 0),
                        M.set(0, 0, 0)),
                        y = 1,
                        !!(w || l.distanceToSquared(e.object.position) > v || 8 * (1 - c.dot(e.object.quaternion)) > v) && (e.dispatchEvent(Mc),
                        l.copy(e.object.position),
                        c.copy(e.object.quaternion),
                        w = !1,
                        !0)
                    }
                }(),
                this.dispose = function() {
                    e.domElement.removeEventListener("contextmenu", at),
                    e.domElement.removeEventListener("pointerdown", Q),
                    e.domElement.removeEventListener("pointercancel", et),
                    e.domElement.removeEventListener("wheel", nt),
                    e.domElement.removeEventListener("pointermove", $),
                    e.domElement.removeEventListener("pointerup", tt),
                    null !== e._domElementKeyEvents && e._domElementKeyEvents.removeEventListener("keydown", it)
                }
                ;
                const e = this
                  , n = {
                    NONE: -1,
                    ROTATE: 0,
                    DOLLY: 1,
                    PAN: 2,
                    TOUCH_ROTATE: 3,
                    TOUCH_PAN: 4,
                    TOUCH_DOLLY_PAN: 5,
                    TOUCH_DOLLY_ROTATE: 6
                };
                let m = n.NONE;
                const v = 1e-6
                  , _ = new pc
                  , x = new pc;
                let y = 1;
                const M = new Pt;
                let w = !1;
                const S = new vt
                  , T = new vt
                  , E = new vt
                  , A = new vt
                  , L = new vt
                  , R = new vt
                  , C = new vt
                  , P = new vt
                  , D = new vt
                  , N = []
                  , I = {};
                function O() {
                    return Math.pow(.95, e.zoomSpeed)
                }
                function F(t) {
                    x.theta -= t
                }
                function U(t) {
                    x.phi -= t
                }
                const z = function() {
                    const t = new Pt;
                    return function(e, n) {
                        t.setFromMatrixColumn(n, 0),
                        t.multiplyScalar(-e),
                        M.add(t)
                    }
                }()
                  , B = function() {
                    const t = new Pt;
                    return function(n, r) {
                        !0 === e.screenSpacePanning ? t.setFromMatrixColumn(r, 1) : (t.setFromMatrixColumn(r, 0),
                        t.crossVectors(e.object.up, t)),
                        t.multiplyScalar(n),
                        M.add(t)
                    }
                }()
                  , G = function() {
                    const t = new Pt;
                    return function(n, r) {
                        const element = e.domElement;
                        if (e.object.isPerspectiveCamera) {
                            const o = e.object.position;
                            t.copy(o).sub(e.target);
                            let l = t.length();
                            l *= Math.tan(e.object.fov / 2 * Math.PI / 180),
                            z(2 * n * l / element.clientHeight, e.object.matrix),
                            B(2 * r * l / element.clientHeight, e.object.matrix)
                        } else
                            e.object.isOrthographicCamera ? (z(n * (e.object.right - e.object.left) / e.object.zoom / element.clientWidth, e.object.matrix),
                            B(r * (e.object.top - e.object.bottom) / e.object.zoom / element.clientHeight, e.object.matrix)) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),
                            e.enablePan = !1)
                    }
                }();
                function H(t) {
                    e.object.isPerspectiveCamera ? y /= t : e.object.isOrthographicCamera ? (e.object.zoom = Math.max(e.minZoom, Math.min(e.maxZoom, e.object.zoom * t)),
                    e.object.updateProjectionMatrix(),
                    w = !0) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),
                    e.enableZoom = !1)
                }
                function k(t) {
                    e.object.isPerspectiveCamera ? y *= t : e.object.isOrthographicCamera ? (e.object.zoom = Math.max(e.minZoom, Math.min(e.maxZoom, e.object.zoom / t)),
                    e.object.updateProjectionMatrix(),
                    w = !0) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),
                    e.enableZoom = !1)
                }
                function V(t) {
                    S.set(t.clientX, t.clientY)
                }
                function W(t) {
                    A.set(t.clientX, t.clientY)
                }
                function j() {
                    if (1 === N.length)
                        S.set(N[0].pageX, N[0].pageY);
                    else {
                        const t = .5 * (N[0].pageX + N[1].pageX)
                          , e = .5 * (N[0].pageY + N[1].pageY);
                        S.set(t, e)
                    }
                }
                function X() {
                    if (1 === N.length)
                        A.set(N[0].pageX, N[0].pageY);
                    else {
                        const t = .5 * (N[0].pageX + N[1].pageX)
                          , e = .5 * (N[0].pageY + N[1].pageY);
                        A.set(t, e)
                    }
                }
                function Y() {
                    const t = N[0].pageX - N[1].pageX
                      , e = N[0].pageY - N[1].pageY
                      , n = Math.sqrt(t * t + e * e);
                    C.set(0, n)
                }
                function Z(t) {
                    if (1 == N.length)
                        T.set(t.pageX, t.pageY);
                    else {
                        const e = lt(t)
                          , n = .5 * (t.pageX + e.x)
                          , r = .5 * (t.pageY + e.y);
                        T.set(n, r)
                    }
                    E.subVectors(T, S).multiplyScalar(e.rotateSpeed);
                    const element = e.domElement;
                    F(2 * Math.PI * E.x / element.clientHeight),
                    U(2 * Math.PI * E.y / element.clientHeight),
                    S.copy(T)
                }
                function J(t) {
                    if (1 === N.length)
                        L.set(t.pageX, t.pageY);
                    else {
                        const e = lt(t)
                          , n = .5 * (t.pageX + e.x)
                          , r = .5 * (t.pageY + e.y);
                        L.set(n, r)
                    }
                    R.subVectors(L, A).multiplyScalar(e.panSpeed),
                    G(R.x, R.y),
                    A.copy(L)
                }
                function K(t) {
                    const n = lt(t)
                      , r = t.pageX - n.x
                      , o = t.pageY - n.y
                      , l = Math.sqrt(r * r + o * o);
                    P.set(0, l),
                    D.set(0, Math.pow(P.y / C.y, e.zoomSpeed)),
                    H(D.y),
                    C.copy(P)
                }
                function Q(t) {
                    !1 !== e.enabled && (0 === N.length && (e.domElement.setPointerCapture(t.pointerId),
                    e.domElement.addEventListener("pointermove", $),
                    e.domElement.addEventListener("pointerup", tt)),
                    function(t) {
                        N.push(t)
                    }(t),
                    "touch" === t.pointerType ? function(t) {
                        switch (ot(t),
                        N.length) {
                        case 1:
                            switch (e.touches.ONE) {
                            case c:
                                if (!1 === e.enableRotate)
                                    return;
                                j(),
                                m = n.TOUCH_ROTATE;
                                break;
                            case h:
                                if (!1 === e.enablePan)
                                    return;
                                X(),
                                m = n.TOUCH_PAN;
                                break;
                            default:
                                m = n.NONE
                            }
                            break;
                        case 2:
                            switch (e.touches.TWO) {
                            case d:
                                if (!1 === e.enableZoom && !1 === e.enablePan)
                                    return;
                                e.enableZoom && Y(),
                                e.enablePan && X(),
                                m = n.TOUCH_DOLLY_PAN;
                                break;
                            case f:
                                if (!1 === e.enableZoom && !1 === e.enableRotate)
                                    return;
                                e.enableZoom && Y(),
                                e.enableRotate && j(),
                                m = n.TOUCH_DOLLY_ROTATE;
                                break;
                            default:
                                m = n.NONE
                            }
                            break;
                        default:
                            m = n.NONE
                        }
                        m !== n.NONE && e.dispatchEvent(bc)
                    }(t) : function(t) {
                        let c;
                        switch (t.button) {
                        case 0:
                            c = e.mouseButtons.LEFT;
                            break;
                        case 1:
                            c = e.mouseButtons.MIDDLE;
                            break;
                        case 2:
                            c = e.mouseButtons.RIGHT;
                            break;
                        default:
                            c = -1
                        }
                        switch (c) {
                        case o:
                            if (!1 === e.enableZoom)
                                return;
                            !function(t) {
                                C.set(t.clientX, t.clientY)
                            }(t),
                            m = n.DOLLY;
                            break;
                        case r:
                            if (t.ctrlKey || t.metaKey || t.shiftKey) {
                                if (!1 === e.enablePan)
                                    return;
                                W(t),
                                m = n.PAN
                            } else {
                                if (!1 === e.enableRotate)
                                    return;
                                V(t),
                                m = n.ROTATE
                            }
                            break;
                        case l:
                            if (t.ctrlKey || t.metaKey || t.shiftKey) {
                                if (!1 === e.enableRotate)
                                    return;
                                V(t),
                                m = n.ROTATE
                            } else {
                                if (!1 === e.enablePan)
                                    return;
                                W(t),
                                m = n.PAN
                            }
                            break;
                        default:
                            m = n.NONE
                        }
                        m !== n.NONE && e.dispatchEvent(bc)
                    }(t))
                }
                function $(t) {
                    !1 !== e.enabled && ("touch" === t.pointerType ? function(t) {
                        switch (ot(t),
                        m) {
                        case n.TOUCH_ROTATE:
                            if (!1 === e.enableRotate)
                                return;
                            Z(t),
                            e.update();
                            break;
                        case n.TOUCH_PAN:
                            if (!1 === e.enablePan)
                                return;
                            J(t),
                            e.update();
                            break;
                        case n.TOUCH_DOLLY_PAN:
                            if (!1 === e.enableZoom && !1 === e.enablePan)
                                return;
                            !function(t) {
                                e.enableZoom && K(t),
                                e.enablePan && J(t)
                            }(t),
                            e.update();
                            break;
                        case n.TOUCH_DOLLY_ROTATE:
                            if (!1 === e.enableZoom && !1 === e.enableRotate)
                                return;
                            !function(t) {
                                e.enableZoom && K(t),
                                e.enableRotate && Z(t)
                            }(t),
                            e.update();
                            break;
                        default:
                            m = n.NONE
                        }
                    }(t) : function(t) {
                        if (!1 === e.enabled)
                            return;
                        switch (m) {
                        case n.ROTATE:
                            if (!1 === e.enableRotate)
                                return;
                            !function(t) {
                                T.set(t.clientX, t.clientY),
                                E.subVectors(T, S).multiplyScalar(e.rotateSpeed);
                                const element = e.domElement;
                                F(2 * Math.PI * E.x / element.clientHeight),
                                U(2 * Math.PI * E.y / element.clientHeight),
                                S.copy(T),
                                e.update()
                            }(t);
                            break;
                        case n.DOLLY:
                            if (!1 === e.enableZoom)
                                return;
                            !function(t) {
                                P.set(t.clientX, t.clientY),
                                D.subVectors(P, C),
                                D.y > 0 ? H(O()) : D.y < 0 && k(O()),
                                C.copy(P),
                                e.update()
                            }(t);
                            break;
                        case n.PAN:
                            if (!1 === e.enablePan)
                                return;
                            !function(t) {
                                L.set(t.clientX, t.clientY),
                                R.subVectors(L, A).multiplyScalar(e.panSpeed),
                                G(R.x, R.y),
                                A.copy(L),
                                e.update()
                            }(t)
                        }
                    }(t))
                }
                function tt(t) {
                    !1 !== e.enabled && (t.pointerType,
                    e.dispatchEvent(wc),
                    m = n.NONE,
                    st(t),
                    0 === N.length && (e.domElement.releasePointerCapture(t.pointerId),
                    e.domElement.removeEventListener("pointermove", $),
                    e.domElement.removeEventListener("pointerup", tt)))
                }
                function et(t) {
                    st(t)
                }
                function nt(t) {
                    !1 !== e.enabled && !1 !== e.enableZoom && m === n.NONE && (t.preventDefault(),
                    e.dispatchEvent(bc),
                    function(t) {
                        t.deltaY < 0 ? k(O()) : t.deltaY > 0 && H(O()),
                        e.update()
                    }(t),
                    e.dispatchEvent(wc))
                }
                function it(t) {
                    !1 !== e.enabled && !1 !== e.enablePan && function(t) {
                        let n = !1;
                        switch (t.code) {
                        case e.keys.UP:
                            G(0, e.keyPanSpeed),
                            n = !0;
                            break;
                        case e.keys.BOTTOM:
                            G(0, -e.keyPanSpeed),
                            n = !0;
                            break;
                        case e.keys.LEFT:
                            G(e.keyPanSpeed, 0),
                            n = !0;
                            break;
                        case e.keys.RIGHT:
                            G(-e.keyPanSpeed, 0),
                            n = !0
                        }
                        n && (t.preventDefault(),
                        e.update())
                    }(t)
                }
                function at(t) {
                    !1 !== e.enabled && t.preventDefault()
                }
                function st(t) {
                    delete I[t.pointerId];
                    for (let i = 0; i < N.length; i++)
                        if (N[i].pointerId == t.pointerId)
                            return void N.splice(i, 1)
                }
                function ot(t) {
                    let e = I[t.pointerId];
                    void 0 === e && (e = new vt,
                    I[t.pointerId] = e),
                    e.set(t.pageX, t.pageY)
                }
                function lt(t) {
                    const e = t.pointerId === N[0].pointerId ? N[1] : N[0];
                    return I[e.pointerId]
                }
                e.domElement.addEventListener("contextmenu", at),
                e.domElement.addEventListener("pointerdown", Q),
                e.domElement.addEventListener("pointercancel", et),
                e.domElement.addEventListener("wheel", nt, {
                    passive: !1
                }),
                this.update()
            }
        }
    },
    379: function(t, e, n) {
        "use strict";
        n.d(e, "a", (function() {
            return Rt
        }
        ));
        var r, o, l, c, h, d, f, m = n(242), v = {}, _ = 180 / Math.PI, x = Math.PI / 180, y = Math.atan2, M = /([A-Z])/g, w = /(?:left|right|width|margin|padding|x)/i, S = /[\s,\(]\S/, T = {
            autoAlpha: "opacity,visibility",
            scale: "scaleX,scaleY",
            alpha: "opacity"
        }, E = function(t, data) {
            return data.set(data.t, data.p, Math.round(1e4 * (data.s + data.c * t)) / 1e4 + data.u, data)
        }, A = function(t, data) {
            return data.set(data.t, data.p, 1 === t ? data.e : Math.round(1e4 * (data.s + data.c * t)) / 1e4 + data.u, data)
        }, L = function(t, data) {
            return data.set(data.t, data.p, t ? Math.round(1e4 * (data.s + data.c * t)) / 1e4 + data.u : data.b, data)
        }, R = function(t, data) {
            var e = data.s + data.c * t;
            data.set(data.t, data.p, ~~(e + (e < 0 ? -.5 : .5)) + data.u, data)
        }, C = function(t, data) {
            return data.set(data.t, data.p, t ? data.e : data.b, data)
        }, P = function(t, data) {
            return data.set(data.t, data.p, 1 !== t ? data.b : data.e, data)
        }, D = function(t, e, n) {
            return t.style[e] = n
        }, N = function(t, e, n) {
            return t.style.setProperty(e, n)
        }, I = function(t, e, n) {
            return t._gsap[e] = n
        }, O = function(t, e, n) {
            return t._gsap.scaleX = t._gsap.scaleY = n
        }, F = function(t, e, n, data, r) {
            var o = t._gsap;
            o.scaleX = o.scaleY = n,
            o.renderTransform(r, o)
        }, U = function(t, e, n, data, r) {
            var o = t._gsap;
            o[e] = n,
            o.renderTransform(r, o)
        }, z = "transform", B = z + "Origin", G = function(t, e) {
            var n = o.createElementNS ? o.createElementNS((e || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), t) : o.createElement(t);
            return n.style ? n : o.createElement(t)
        }, H = function t(e, n, r) {
            var o = getComputedStyle(e);
            return o[n] || o.getPropertyValue(n.replace(M, "-$1").toLowerCase()) || o.getPropertyValue(n) || !r && t(e, V(n) || n, 1) || ""
        }, k = "O,Moz,ms,Ms,Webkit".split(","), V = function(t, element, e) {
            var s = (element || h).style
              , i = 5;
            if (t in s && !e)
                return t;
            for (t = t.charAt(0).toUpperCase() + t.substr(1); i-- && !(k[i] + t in s); )
                ;
            return i < 0 ? null : (3 === i ? "ms" : i >= 0 ? k[i] : "") + t
        }, W = function() {
            "undefined" != typeof window && window.document && (r = window,
            o = r.document,
            l = o.documentElement,
            h = G("div") || {
                style: {}
            },
            G("div"),
            z = V(z),
            B = z + "Origin",
            h.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0",
            f = !!V("perspective"),
            c = 1)
        }, j = function t(e) {
            var n, svg = G("svg", this.ownerSVGElement && this.ownerSVGElement.getAttribute("xmlns") || "http://www.w3.org/2000/svg"), r = this.parentNode, o = this.nextSibling, c = this.style.cssText;
            if (l.appendChild(svg),
            svg.appendChild(this),
            this.style.display = "block",
            e)
                try {
                    n = this.getBBox(),
                    this._gsapBBox = this.getBBox,
                    this.getBBox = t
                } catch (t) {}
            else
                this._gsapBBox && (n = this._gsapBBox());
            return r && (o ? r.insertBefore(this, o) : r.appendChild(this)),
            l.removeChild(svg),
            this.style.cssText = c,
            n
        }, X = function(t, e) {
            for (var i = e.length; i--; )
                if (t.hasAttribute(e[i]))
                    return t.getAttribute(e[i])
        }, Y = function(t) {
            var e;
            try {
                e = t.getBBox()
            } catch (n) {
                e = j.call(t, !0)
            }
            return e && (e.width || e.height) || t.getBBox === j || (e = j.call(t, !0)),
            !e || e.width || e.x || e.y ? e : {
                x: +X(t, ["x", "cx", "x1"]) || 0,
                y: +X(t, ["y", "cy", "y1"]) || 0,
                width: 0,
                height: 0
            }
        }, Z = function(t) {
            return !(!t.getCTM || t.parentNode && !t.ownerSVGElement || !Y(t))
        }, J = function(t, e) {
            if (e) {
                var style = t.style;
                e in v && e !== B && (e = z),
                style.removeProperty ? ("ms" !== e.substr(0, 2) && "webkit" !== e.substr(0, 6) || (e = "-" + e),
                style.removeProperty(e.replace(M, "-$1").toLowerCase())) : style.removeAttribute(e)
            }
        }, K = function(t, e, n, r, o, l) {
            var c = new m.b(t._pt,e,n,0,1,l ? P : C);
            return t._pt = c,
            c.b = r,
            c.e = o,
            t._props.push(n),
            c
        }, Q = {
            deg: 1,
            rad: 1,
            turn: 1
        }, $ = function t(e, n, r, l) {
            var c, d, f, _, x = parseFloat(r) || 0, y = (r + "").trim().substr((x + "").length) || "px", style = h.style, M = w.test(n), S = "svg" === e.tagName.toLowerCase(), T = (S ? "client" : "offset") + (M ? "Width" : "Height"), E = 100, A = "px" === l, L = "%" === l;
            return l === y || !x || Q[l] || Q[y] ? x : ("px" !== y && !A && (x = t(e, n, r, "px")),
            _ = e.getCTM && Z(e),
            !L && "%" !== y || !v[n] && !~n.indexOf("adius") ? (style[M ? "width" : "height"] = E + (A ? y : l),
            d = ~n.indexOf("adius") || "em" === l && e.appendChild && !S ? e : e.parentNode,
            _ && (d = (e.ownerSVGElement || {}).parentNode),
            d && d !== o && d.appendChild || (d = o.body),
            (f = d._gsap) && L && f.width && M && f.time === m.w.time ? Object(m.u)(x / f.width * E) : ((L || "%" === y) && (style.position = H(e, "position")),
            d === e && (style.position = "static"),
            d.appendChild(h),
            c = h[T],
            d.removeChild(h),
            style.position = "absolute",
            M && L && ((f = Object(m.i)(d)).time = m.w.time,
            f.width = d[T]),
            Object(m.u)(A ? c * x / E : c && x ? E / c * x : 0))) : (c = _ ? e.getBBox()[M ? "width" : "height"] : e[T],
            Object(m.u)(L ? x / c * E : x / 100 * c)))
        }, tt = function(t, e, n, r) {
            var o;
            return c || W(),
            e in T && "transform" !== e && ~(e = T[e]).indexOf(",") && (e = e.split(",")[0]),
            v[e] && "transform" !== e ? (o = pt(t, r),
            o = "transformOrigin" !== e ? o[e] : o.svg ? o.origin : ft(H(t, B)) + " " + o.zOrigin + "px") : (!(o = t.style[e]) || "auto" === o || r || ~(o + "").indexOf("calc(")) && (o = at[e] && at[e](t, e, n) || H(t, e) || Object(m.j)(t, e) || ("opacity" === e ? 1 : 0)),
            n && !~(o + "").trim().indexOf(" ") ? $(t, e, o, n) + n : o
        }, et = function(t, e, n, r) {
            if (!n || "none" === n) {
                var p = V(e, t, 1)
                  , s = p && H(t, p, 1);
                s && s !== n ? (e = p,
                n = s) : "borderColor" === e && (n = H(t, "borderTopColor"))
            }
            var a, o, l, c, h, d, f, v, _, x, y, M, w = new m.b(this._pt,t.style,e,0,1,m.s), S = 0, T = 0;
            if (w.b = n,
            w.e = r,
            n += "",
            "auto" === (r += "") && (t.style[e] = r,
            r = H(t, e) || r,
            t.style[e] = n),
            a = [n, r],
            Object(m.f)(a),
            r = a[1],
            l = (n = a[0]).match(m.p) || [],
            (r.match(m.p) || []).length) {
                for (; o = m.p.exec(r); )
                    f = o[0],
                    _ = r.substring(S, o.index),
                    h ? h = (h + 1) % 5 : "rgba(" !== _.substr(-5) && "hsla(" !== _.substr(-5) || (h = 1),
                    f !== (d = l[T++] || "") && (c = parseFloat(d) || 0,
                    y = d.substr((c + "").length),
                    (M = "=" === f.charAt(1) ? +(f.charAt(0) + "1") : 0) && (f = f.substr(2)),
                    v = parseFloat(f),
                    x = f.substr((v + "").length),
                    S = m.p.lastIndex - x.length,
                    x || (x = x || m.g.units[e] || y,
                    S === r.length && (r += x,
                    w.e += x)),
                    y !== x && (c = $(t, e, d, x) || 0),
                    w._pt = {
                        _next: w._pt,
                        p: _ || 1 === T ? _ : ",",
                        s: c,
                        c: M ? M * v : v - c,
                        m: h && h < 4 || "zIndex" === e ? Math.round : 0
                    });
                w.c = S < r.length ? r.substring(S, r.length) : ""
            } else
                w.r = "display" === e && "none" === r ? P : C;
            return m.r.test(r) && (w.e = 0),
            this._pt = w,
            w
        }, nt = {
            top: "0%",
            bottom: "100%",
            left: "0%",
            right: "100%",
            center: "50%"
        }, it = function(t, data) {
            if (data.tween && data.tween._time === data.tween._dur) {
                var e, n, i, r = data.t, style = r.style, o = data.u, l = r._gsap;
                if ("all" === o || !0 === o)
                    style.cssText = "",
                    n = 1;
                else
                    for (i = (o = o.split(",")).length; --i > -1; )
                        e = o[i],
                        v[e] && (n = 1,
                        e = "transformOrigin" === e ? B : z),
                        J(r, e);
                n && (J(r, z),
                l && (l.svg && r.removeAttribute("transform"),
                pt(r, 1),
                l.uncache = 1))
            }
        }, at = {
            clearProps: function(t, e, n, r, o) {
                if ("isFromStart" !== o.data) {
                    var l = t._pt = new m.b(t._pt,e,n,0,0,it);
                    return l.u = r,
                    l.pr = -10,
                    l.tween = o,
                    t._props.push(n),
                    1
                }
            }
        }, st = [1, 0, 0, 1, 0, 0], ot = {}, lt = function(t) {
            return "matrix(1, 0, 0, 1, 0, 0)" === t || "none" === t || !t
        }, ct = function(t) {
            var e = H(t, z);
            return lt(e) ? st : e.substr(7).match(m.o).map(m.u)
        }, ht = function(t, e) {
            var n, r, o, c, h = t._gsap || Object(m.i)(t), style = t.style, d = ct(t);
            return h.svg && t.getAttribute("transform") ? "1,0,0,1,0,0" === (d = [(o = t.transform.baseVal.consolidate().matrix).a, o.b, o.c, o.d, o.e, o.f]).join(",") ? st : d : (d !== st || t.offsetParent || t === l || h.svg || (o = style.display,
            style.display = "block",
            (n = t.parentNode) && t.offsetParent || (c = 1,
            r = t.nextSibling,
            l.appendChild(t)),
            d = ct(t),
            o ? style.display = o : J(t, "display"),
            c && (r ? n.insertBefore(t, r) : n ? n.appendChild(t) : l.removeChild(t))),
            e && d.length > 6 ? [d[0], d[1], d[4], d[5], d[12], d[13]] : d)
        }, ut = function(t, e, n, r, o, l) {
            var c, h, d, f = t._gsap, m = o || ht(t, !0), v = f.xOrigin || 0, _ = f.yOrigin || 0, x = f.xOffset || 0, y = f.yOffset || 0, a = m[0], b = m[1], M = m[2], w = m[3], S = m[4], T = m[5], E = e.split(" "), A = parseFloat(E[0]) || 0, L = parseFloat(E[1]) || 0;
            n ? m !== st && (h = a * w - b * M) && (d = A * (-b / h) + L * (a / h) - (a * T - b * S) / h,
            A = A * (w / h) + L * (-M / h) + (M * T - w * S) / h,
            L = d) : (A = (c = Y(t)).x + (~E[0].indexOf("%") ? A / 100 * c.width : A),
            L = c.y + (~(E[1] || E[0]).indexOf("%") ? L / 100 * c.height : L)),
            r || !1 !== r && f.smooth ? (S = A - v,
            T = L - _,
            f.xOffset = x + (S * a + T * M) - S,
            f.yOffset = y + (S * b + T * w) - T) : f.xOffset = f.yOffset = 0,
            f.xOrigin = A,
            f.yOrigin = L,
            f.smooth = !!r,
            f.origin = e,
            f.originIsAbsolute = !!n,
            t.style[B] = "0px 0px",
            l && (K(l, f, "xOrigin", v, A),
            K(l, f, "yOrigin", _, L),
            K(l, f, "xOffset", x, f.xOffset),
            K(l, f, "yOffset", y, f.yOffset)),
            t.setAttribute("data-svg-origin", A + " " + L)
        }, pt = function(t, e) {
            var n = t._gsap || new m.a(t);
            if ("x"in n && !e && !n.uncache)
                return n;
            var r, o, l, c, h, d, v, M, w, S, T, E, A, L, R, C, P, a, b, D, N, I, O, F, U, G, k, V, W, j, X, Y, style = t.style, J = n.scaleX < 0, K = "px", Q = "deg", $ = H(t, B) || "0";
            return r = o = l = d = v = M = w = S = T = 0,
            c = h = 1,
            n.svg = !(!t.getCTM || !Z(t)),
            L = ht(t, n.svg),
            n.svg && (F = (!n.uncache || "0px 0px" === $) && !e && t.getAttribute("data-svg-origin"),
            ut(t, F || $, !!F || n.originIsAbsolute, !1 !== n.smooth, L)),
            E = n.xOrigin || 0,
            A = n.yOrigin || 0,
            L !== st && (a = L[0],
            b = L[1],
            D = L[2],
            N = L[3],
            r = I = L[4],
            o = O = L[5],
            6 === L.length ? (c = Math.sqrt(a * a + b * b),
            h = Math.sqrt(N * N + D * D),
            d = a || b ? y(b, a) * _ : 0,
            (w = D || N ? y(D, N) * _ + d : 0) && (h *= Math.abs(Math.cos(w * x))),
            n.svg && (r -= E - (E * a + A * D),
            o -= A - (E * b + A * N))) : (Y = L[6],
            j = L[7],
            k = L[8],
            V = L[9],
            W = L[10],
            X = L[11],
            r = L[12],
            o = L[13],
            l = L[14],
            v = (R = y(Y, W)) * _,
            R && (F = I * (C = Math.cos(-R)) + k * (P = Math.sin(-R)),
            U = O * C + V * P,
            G = Y * C + W * P,
            k = I * -P + k * C,
            V = O * -P + V * C,
            W = Y * -P + W * C,
            X = j * -P + X * C,
            I = F,
            O = U,
            Y = G),
            M = (R = y(-D, W)) * _,
            R && (C = Math.cos(-R),
            X = N * (P = Math.sin(-R)) + X * C,
            a = F = a * C - k * P,
            b = U = b * C - V * P,
            D = G = D * C - W * P),
            d = (R = y(b, a)) * _,
            R && (F = a * (C = Math.cos(R)) + b * (P = Math.sin(R)),
            U = I * C + O * P,
            b = b * C - a * P,
            O = O * C - I * P,
            a = F,
            I = U),
            v && Math.abs(v) + Math.abs(d) > 359.9 && (v = d = 0,
            M = 180 - M),
            c = Object(m.u)(Math.sqrt(a * a + b * b + D * D)),
            h = Object(m.u)(Math.sqrt(O * O + Y * Y)),
            R = y(I, O),
            w = Math.abs(R) > 2e-4 ? R * _ : 0,
            T = X ? 1 / (X < 0 ? -X : X) : 0),
            n.svg && (F = t.getAttribute("transform"),
            n.forceCSS = t.setAttribute("transform", "") || !lt(H(t, z)),
            F && t.setAttribute("transform", F))),
            Math.abs(w) > 90 && Math.abs(w) < 270 && (J ? (c *= -1,
            w += d <= 0 ? 180 : -180,
            d += d <= 0 ? 180 : -180) : (h *= -1,
            w += w <= 0 ? 180 : -180)),
            n.x = r - ((n.xPercent = r && (n.xPercent || (Math.round(t.offsetWidth / 2) === Math.round(-r) ? -50 : 0))) ? t.offsetWidth * n.xPercent / 100 : 0) + K,
            n.y = o - ((n.yPercent = o && (n.yPercent || (Math.round(t.offsetHeight / 2) === Math.round(-o) ? -50 : 0))) ? t.offsetHeight * n.yPercent / 100 : 0) + K,
            n.z = l + K,
            n.scaleX = Object(m.u)(c),
            n.scaleY = Object(m.u)(h),
            n.rotation = Object(m.u)(d) + Q,
            n.rotationX = Object(m.u)(v) + Q,
            n.rotationY = Object(m.u)(M) + Q,
            n.skewX = w + Q,
            n.skewY = S + Q,
            n.transformPerspective = T + K,
            (n.zOrigin = parseFloat($.split(" ")[2]) || 0) && (style[B] = ft($)),
            n.xOffset = n.yOffset = 0,
            n.force3D = m.g.force3D,
            n.renderTransform = n.svg ? Mt : f ? yt : gt,
            n.uncache = 0,
            n
        }, ft = function(t) {
            return (t = t.split(" "))[0] + " " + t[1]
        }, mt = function(t, e, n) {
            var r = Object(m.x)(e);
            return Object(m.u)(parseFloat(e) + parseFloat($(t, "x", n + "px", r))) + r
        }, gt = function(t, e) {
            e.z = "0px",
            e.rotationY = e.rotationX = "0deg",
            e.force3D = 0,
            yt(t, e)
        }, vt = "0deg", _t = "0px", xt = ") ", yt = function(t, e) {
            var n = e || this
              , r = n.xPercent
              , o = n.yPercent
              , l = n.x
              , c = n.y
              , h = n.z
              , d = n.rotation
              , f = n.rotationY
              , m = n.rotationX
              , v = n.skewX
              , _ = n.skewY
              , y = n.scaleX
              , M = n.scaleY
              , w = n.transformPerspective
              , S = n.force3D
              , T = n.target
              , E = n.zOrigin
              , A = ""
              , L = "auto" === S && t && 1 !== t || !0 === S;
            if (E && (m !== vt || f !== vt)) {
                var R, C = parseFloat(f) * x, P = Math.sin(C), D = Math.cos(C);
                C = parseFloat(m) * x,
                R = Math.cos(C),
                l = mt(T, l, P * R * -E),
                c = mt(T, c, -Math.sin(C) * -E),
                h = mt(T, h, D * R * -E + E)
            }
            w !== _t && (A += "perspective(" + w + xt),
            (r || o) && (A += "translate(" + r + "%, " + o + "%) "),
            (L || l !== _t || c !== _t || h !== _t) && (A += h !== _t || L ? "translate3d(" + l + ", " + c + ", " + h + ") " : "translate(" + l + ", " + c + xt),
            d !== vt && (A += "rotate(" + d + xt),
            f !== vt && (A += "rotateY(" + f + xt),
            m !== vt && (A += "rotateX(" + m + xt),
            v === vt && _ === vt || (A += "skew(" + v + ", " + _ + xt),
            1 === y && 1 === M || (A += "scale(" + y + ", " + M + xt),
            T.style[z] = A || "translate(0, 0)"
        }, Mt = function(t, e) {
            var n, r, o, l, c, h = e || this, d = h.xPercent, f = h.yPercent, v = h.x, _ = h.y, y = h.rotation, M = h.skewX, w = h.skewY, S = h.scaleX, T = h.scaleY, E = h.target, A = h.xOrigin, L = h.yOrigin, R = h.xOffset, C = h.yOffset, P = h.forceCSS, D = parseFloat(v), N = parseFloat(_);
            y = parseFloat(y),
            M = parseFloat(M),
            (w = parseFloat(w)) && (M += w = parseFloat(w),
            y += w),
            y || M ? (y *= x,
            M *= x,
            n = Math.cos(y) * S,
            r = Math.sin(y) * S,
            o = Math.sin(y - M) * -T,
            l = Math.cos(y - M) * T,
            M && (w *= x,
            c = Math.tan(M - w),
            o *= c = Math.sqrt(1 + c * c),
            l *= c,
            w && (c = Math.tan(w),
            n *= c = Math.sqrt(1 + c * c),
            r *= c)),
            n = Object(m.u)(n),
            r = Object(m.u)(r),
            o = Object(m.u)(o),
            l = Object(m.u)(l)) : (n = S,
            l = T,
            r = o = 0),
            (D && !~(v + "").indexOf("px") || N && !~(_ + "").indexOf("px")) && (D = $(E, "x", v, "px"),
            N = $(E, "y", _, "px")),
            (A || L || R || C) && (D = Object(m.u)(D + A - (A * n + L * o) + R),
            N = Object(m.u)(N + L - (A * r + L * l) + C)),
            (d || f) && (c = E.getBBox(),
            D = Object(m.u)(D + d / 100 * c.width),
            N = Object(m.u)(N + f / 100 * c.height)),
            c = "matrix(" + n + "," + r + "," + o + "," + l + "," + D + "," + N + ")",
            E.setAttribute("transform", c),
            P && (E.style[z] = c)
        }, bt = function(t, e, n, r, o, l) {
            var c, h, d = 360, f = Object(m.l)(o), v = parseFloat(o) * (f && ~o.indexOf("rad") ? _ : 1), x = l ? v * l : v - r, y = r + x + "deg";
            return f && ("short" === (c = o.split("_")[1]) && (x %= d) !== x % 180 && (x += x < 0 ? d : -360),
            "cw" === c && x < 0 ? x = (x + 36e9) % d - ~~(x / d) * d : "ccw" === c && x > 0 && (x = (x - 36e9) % d - ~~(x / d) * d)),
            t._pt = h = new m.b(t._pt,e,n,r,x,A),
            h.e = y,
            h.u = "deg",
            t._props.push(n),
            h
        }, wt = function(t, source) {
            for (var p in source)
                t[p] = source[p];
            return t
        }, St = function(t, e, n) {
            var r, p, o, l, c, h, d, f = wt({}, n._gsap), style = n.style;
            for (p in f.svg ? (o = n.getAttribute("transform"),
            n.setAttribute("transform", ""),
            style[z] = e,
            r = pt(n, 1),
            J(n, z),
            n.setAttribute("transform", o)) : (o = getComputedStyle(n)[z],
            style[z] = e,
            r = pt(n, 1),
            style[z] = o),
            v)
                (o = f[p]) !== (l = r[p]) && "perspective,force3D,transformOrigin,svgOrigin".indexOf(p) < 0 && (c = Object(m.x)(o) !== (d = Object(m.x)(l)) ? $(n, p, o, d) : parseFloat(o),
                h = parseFloat(l),
                t._pt = new m.b(t._pt,r,p,c,h - c,E),
                t._pt.u = d || 0,
                t._props.push(p));
            wt(r, f)
        };
        Object(m.h)("padding,margin,Width,Radius", (function(t, e) {
            var n = "Top"
              , r = "Right"
              , b = "Bottom"
              , o = "Left"
              , l = (e < 3 ? [n, r, b, o] : [n + o, n + r, b + r, b + o]).map((function(n) {
                return e < 2 ? t + n : "border" + n + t
            }
            ));
            at[e > 1 ? "border" + t : t] = function(t, e, n, r, o) {
                var a, c;
                if (arguments.length < 4)
                    return a = l.map((function(e) {
                        return tt(t, e, n)
                    }
                    )),
                    5 === (c = a.join(" ")).split(a[0]).length ? a[0] : c;
                a = (r + "").split(" "),
                c = {},
                l.forEach((function(t, i) {
                    return c[t] = a[i] = a[i] || a[(i - 1) / 2 | 0]
                }
                )),
                t.init(e, c, o)
            }
        }
        ));
        var Tt, Et, At, Lt = {
            name: "css",
            register: W,
            targetTest: function(t) {
                return t.style && t.nodeType
            },
            init: function(t, e, n, r, o) {
                var l, h, d, f, _, x, p, y, M, w, A, C, P, D, N, I, O, F, U, B = this._props, style = t.style, G = n.vars.startAt;
                for (p in c || W(),
                e)
                    if ("autoRound" !== p && (h = e[p],
                    !m.q[p] || !Object(m.d)(p, e, n, r, t, o)))
                        if (_ = typeof h,
                        x = at[p],
                        "function" === _ && (_ = typeof (h = h.call(n, r, t, o))),
                        "string" === _ && ~h.indexOf("random(") && (h = Object(m.t)(h)),
                        x)
                            x(this, t, p, h, n) && (N = 1);
                        else if ("--" === p.substr(0, 2))
                            l = (getComputedStyle(t).getPropertyValue(p) + "").trim(),
                            h += "",
                            m.e.lastIndex = 0,
                            m.e.test(l) || (y = Object(m.x)(l),
                            M = Object(m.x)(h)),
                            M ? y !== M && (l = $(t, p, l, M) + M) : y && (h += y),
                            this.add(style, "setProperty", l, h, r, o, 0, 0, p),
                            B.push(p);
                        else if ("undefined" !== _) {
                            if (G && p in G ? (l = "function" == typeof G[p] ? G[p].call(n, r, t, o) : G[p],
                            p in m.g.units && !Object(m.x)(l) && (l += m.g.units[p]),
                            Object(m.l)(l) && ~l.indexOf("random(") && (l = Object(m.t)(l)),
                            "=" === (l + "").charAt(1) && (l = tt(t, p))) : l = tt(t, p),
                            f = parseFloat(l),
                            (w = "string" === _ && "=" === h.charAt(1) ? +(h.charAt(0) + "1") : 0) && (h = h.substr(2)),
                            d = parseFloat(h),
                            p in T && ("autoAlpha" === p && (1 === f && "hidden" === tt(t, "visibility") && d && (f = 0),
                            K(this, style, "visibility", f ? "inherit" : "hidden", d ? "inherit" : "hidden", !d)),
                            "scale" !== p && "transform" !== p && ~(p = T[p]).indexOf(",") && (p = p.split(",")[0])),
                            A = p in v)
                                if (C || ((P = t._gsap).renderTransform && !e.parseTransform || pt(t, e.parseTransform),
                                D = !1 !== e.smoothOrigin && P.smooth,
                                (C = this._pt = new m.b(this._pt,style,z,0,1,P.renderTransform,P,0,-1)).dep = 1),
                                "scale" === p)
                                    this._pt = new m.b(this._pt,P,"scaleY",P.scaleY,(w ? w * d : d - P.scaleY) || 0),
                                    B.push("scaleY", p),
                                    p += "X";
                                else {
                                    if ("transformOrigin" === p) {
                                        O = void 0,
                                        F = void 0,
                                        U = void 0,
                                        O = (I = h).split(" "),
                                        F = O[0],
                                        U = O[1] || "50%",
                                        "top" !== F && "bottom" !== F && "left" !== U && "right" !== U || (I = F,
                                        F = U,
                                        U = I),
                                        O[0] = nt[F] || F,
                                        O[1] = nt[U] || U,
                                        h = O.join(" "),
                                        P.svg ? ut(t, h, 0, D, 0, this) : ((M = parseFloat(h.split(" ")[2]) || 0) !== P.zOrigin && K(this, P, "zOrigin", P.zOrigin, M),
                                        K(this, style, p, ft(l), ft(h)));
                                        continue
                                    }
                                    if ("svgOrigin" === p) {
                                        ut(t, h, 1, D, 0, this);
                                        continue
                                    }
                                    if (p in ot) {
                                        bt(this, P, p, f, h, w);
                                        continue
                                    }
                                    if ("smoothOrigin" === p) {
                                        K(this, P, "smooth", P.smooth, h);
                                        continue
                                    }
                                    if ("force3D" === p) {
                                        P[p] = h;
                                        continue
                                    }
                                    if ("transform" === p) {
                                        St(this, h, t);
                                        continue
                                    }
                                }
                            else
                                p in style || (p = V(p) || p);
                            if (A || (d || 0 === d) && (f || 0 === f) && !S.test(h) && p in style)
                                d || (d = 0),
                                (y = (l + "").substr((f + "").length)) !== (M = Object(m.x)(h) || (p in m.g.units ? m.g.units[p] : y)) && (f = $(t, p, l, M)),
                                this._pt = new m.b(this._pt,A ? P : style,p,f,w ? w * d : d - f,A || "px" !== M && "zIndex" !== p || !1 === e.autoRound ? E : R),
                                this._pt.u = M || 0,
                                y !== M && "%" !== M && (this._pt.b = l,
                                this._pt.r = L);
                            else if (p in style)
                                et.call(this, t, p, l, h);
                            else {
                                if (!(p in t)) {
                                    Object(m.n)(p, h);
                                    continue
                                }
                                this.add(t, p, l || t[p], h, r, o)
                            }
                            B.push(p)
                        }
                N && Object(m.v)(this)
            },
            get: tt,
            aliases: T,
            getSetter: function(t, e, n) {
                var p = T[e];
                return p && p.indexOf(",") < 0 && (e = p),
                e in v && e !== B && (t._gsap.x || tt(t, "x")) ? n && d === n ? "scale" === e ? O : I : (d = n || {}) && ("scale" === e ? F : U) : t.style && !Object(m.m)(t.style[e]) ? D : ~e.indexOf("-") ? N : Object(m.k)(t, e)
            },
            core: {
                _removeProperty: J,
                _getMatrix: ht
            }
        };
        m.y.utils.checkPrefix = V,
        Tt = "x,y,z,scale,scaleX,scaleY,xPercent,yPercent",
        Et = "rotation,rotationX,rotationY,skewX,skewY",
        At = Object(m.h)(Tt + "," + Et + ",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", (function(t) {
            v[t] = 1
        }
        )),
        Object(m.h)(Et, (function(t) {
            m.g.units[t] = "deg",
            ot[t] = 1
        }
        )),
        T[At[13]] = Tt + "," + Et,
        Object(m.h)("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY", (function(t) {
            var e = t.split(":");
            T[e[1]] = At[e[0]]
        }
        )),
        Object(m.h)("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", (function(t) {
            m.g.units[t] = "px"
        }
        )),
        m.y.registerPlugin(Lt);
        var Rt = m.y.registerPlugin(Lt) || m.y;
        Rt.core.Tween
    }
}]);
